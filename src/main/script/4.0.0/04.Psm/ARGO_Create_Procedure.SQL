create or replace PROCEDURE SP_BATCH_GET_TASK(
  O_CUR_LIST        OUT SYS_REFCURSOR
)
AS
/******************************************************************************
   NAME:       SP_BATCH_GET_TASK
   PURPOSE:    배치프로그램_TASK 대상 조회

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017-06-26  YAKIM            CREATE  
******************************************************************************/
BEGIN

-- ********************************************************************************
-- 1. 배치프로그램 실행 이력 생성   
-- ******************************************************************************** 
OPEN O_CUR_LIST FOR
SELECT A.TENANT_ID ,
       A.SCHE_ID,
       A.SCHE_NM,
       A.WORK_ID,
       A.TASK_ID,
       TO_CHAR(SYSDATE, 'YYYYMMDD') AS TASK_DT ,
       MOD(A.DIFF_MINUTE, A.REP_CYCLE) AS AA
  FROM (SELECT A.TENANT_ID,
               A.SCHE_ID,
               A.SCHE_NM,
               A.WORK_ID,
               A.STR_DT,
               A.STR_TM,
               A.REP_CYCLE ,
               ROUND(((SYSDATE-TO_DATE(A.STR_DT||A.STR_TM, 'YYYYMMDDHH24MI'))*24*60), 0) AS DIFF_MINUTE ,
               A.SCHE_ID||'_'||TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS TASK_ID
          FROM TB_CM_BATCH_WORK_SCHE A
         WHERE TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN A.STR_DT AND A.END_DT
           AND TO_CHAR(SYSDATE, 'HH24MI') <= A.END_TM
           AND NVL(A.HIDE_YN, 0) = 0 ) A
 WHERE 1=1
   AND MOD(A.DIFF_MINUTE, A.REP_CYCLE) = 0
   AND NOT EXISTS (SELECT 1
          FROM TB_CM_BATCH_WORK_TASK S
         WHERE A.TENANT_ID = S.TENANT_ID
           AND A.SCHE_ID =S.SCHE_ID
           AND A.TASK_ID = S.TASK_ID) ;
 EXCEPTION 
       WHEN OTHERS THEN ROLLBACK;
 DBMS_OUTPUT.PUT_LINE('ERROR ->'|| SQLERRM );

END;
/

;

create or replace PROCEDURE SP_BATCH_SET_LOG(
  I_TENANT_ID      IN VARCHAR2,
  I_SCH_ID         IN VARCHAR2,
  I_TASK_ID        IN VARCHAR2,
  I_WORK_DATE      IN DATE,
  I_WORK_DATE_STR  IN TIMESTAMP,
  I_WORK_DATE_END  IN TIMESTAMP,
  I_WORK_ID        IN VARCHAR2,
  I_WORK_RESULT    IN VARCHAR2,
  I_WORK_COUNT     IN NUMBER,
  I_BIGO           IN VARCHAR2  
)
AS
/******************************************************************************
   NAME:       SP_LOG_BATCH_I_01
   PURPOSE:    배치 프로그램용 로그

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017-06-02  YAKIM            CREATE  
******************************************************************************/
BEGIN
MERGE
  INTO TB_CM_BATCH_WORK_LOG IL USING (SELECT I_WORK_DATE as WORK_DATE,
               I_WORK_DATE_STR as WORK_DATE_STR,
               I_WORK_DATE_END as WORK_DATE_END,
               I_WORK_ID as WORK_ID,
               I_WORK_RESULT as WORK_RESULT,
               I_WORK_COUNT as WORK_COUNT,
               I_BIGO as BIGO,
               I_SCH_ID AS SCH_ID,
               I_TASK_ID AS TASK_ID,
               I_TENANT_ID AS TENANT_ID
          from dual) T ON (IL.WORK_DATE = T.WORK_DATE
           AND IL.WORK_ID = T.WORK_ID
           AND IL.work_date_Str = T.WORK_DATE_STR)
       WHEN MATCHED THEN
UPDATE
   SET WORK_DATE_END = T.WORK_DATE_END ,
       WORK_RESULT = T.WORK_RESULT ,
       WORK_COUNT = T.WORK_COUNT ,
       BIGO = T.BIGO ,
       SCH_ID = T.SCH_ID ,
       TASK_ID = T.TASK_ID ,
       TENANT_ID = T.TENANT_ID
       WHEN NOT MATCHED THEN
INSERT( WORK_DATE,
               WORK_DATE_STR,
               WORK_DATE_END,
               WORK_ID,
               WORK_RESULT,
               WORK_COUNT,
               BIGO,
               SCH_ID,
               TASK_ID,
               TENANT_ID )
VALUES ( T.WORK_DATE,
               T.WORK_DATE_STR,
               T.WORK_DATE_END,
               T.WORK_ID,
               T.WORK_RESULT,
               T.WORK_COUNT,
               T.BIGO,
               T.SCH_ID,
               T.TASK_ID,
               T.TENANT_ID ) ;
 COMMIT;
 

EXCEPTION
	WHEN OTHERS THEN
	  ROLLBACK;
	  DBMS_OUTPUT.PUT_LINE('ERROR ->'|| SQLERRM );

END;
/

;

create or replace PROCEDURE SP_BATCH_SET_TASK(
  I_TENANT_ID      IN VARCHAR2,
  I_SCHE_ID        IN VARCHAR2,
  I_TASK_ID        IN VARCHAR2,
  I_TASK_STATUS    IN VARCHAR2
)
AS
/******************************************************************************
   NAME:       SP_BATCH_SET_TASK
   PURPOSE:    배치프로그램_TASK 생성

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017-06-26  YAKIM            CREATE  
******************************************************************************/
BEGIN

-- ********************************************************************************
-- 1. 배치프로그램 실행 이력 생성   
-- ******************************************************************************** 
MERGE
  INTO TB_CM_BATCH_WORK_TASK T USING (SELECT I_TENANT_ID AS TENANT_ID ,
               I_SCHE_ID AS SCHE_ID ,
               I_TASK_ID AS TASK_ID ,
               I_TASK_STATUS AS TASK_STATUS ,
               TO_CHAR(SYSDATE, 'YYYYMMDD') AS TASK_STR_DT ,
               TO_CHAR(SYSDATE, 'HH24MI') AS TASK_STR_TM
          FROM DUAL ) S ON (T.TENANT_ID = S.TENANT_ID
           AND T.SCHE_ID = S.SCHE_ID
           AND T.TASK_ID = S.TASK_ID )
       WHEN NOT MATCHED THEN
INSERT (TENANT_ID ,
               SCHE_ID ,
               TASK_ID ,
               TASK_STATUS_CD ,
               TASK_STR_DT ,
               TASK_STR_TM ,
               TASK_END_DT ,
               TASK_END_TM ,
               CREATE_AGENT_ID ,
               CREATE_DT ,
               MODIFY_AGENT_ID ,
               MODIFY_DT )
VALUES ( S.TENANT_ID ,
               S.SCHE_ID ,
               S.TASK_ID ,
               S.TASK_STATUS ,
               S.TASK_STR_DT ,
               S.TASK_STR_TM ,
               NULL ,
               NULL ,
               'SYSTEM' ,
               SYSDATE ,
               'SYSTEM' ,
               SYSDATE )
       WHEN MATCHED THEN
UPDATE
   SET TASK_END_DT = S.TASK_STR_DT ,
       TASK_END_TM = S.TASK_STR_TM ,
       TASK_STATUS_CD = S.TASK_STATUS ,
       MODIFY_AGENT_ID = 'SYSTEM' ,
       MODIFY_DT = SYSDATE ;
 COMMIT;
 
 

   
EXCEPTION
	WHEN OTHERS THEN
	  ROLLBACK;
	  DBMS_OUTPUT.PUT_LINE('ERROR ->'|| SQLERRM );

END;
/

;

create or replace PROCEDURE SP_LOG_DB_I_01(
  I_WORK_DATE      IN DATE,
  I_WORK_DATE_STR  IN TIMESTAMP,
  I_WORK_DATE_END  IN TIMESTAMP,
  I_WORK_ID        IN VARCHAR2,
  I_WORK_RESULT    IN VARCHAR2,
  I_WORK_COUNT     IN NUMBER,
  I_BIGO           IN VARCHAR2  
)
AS
/******************************************************************************
   NAME:       SP_LOG_DB_I_01
   PURPOSE:    OB OBJECT PROGRAM LOG INSERT/UPDATE

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017-07-13  YAKIM            CREATE  
******************************************************************************/
BEGIN

    MERGE INTO TB_LOG_DB IL
    USING (SELECT I_WORK_DATE as I_WORK_DATE, I_WORK_DATE_STR as I_WORK_DATE_STR, I_WORK_DATE_END as I_WORK_DATE_END, 
        I_WORK_ID as I_WORK_ID, I_WORK_RESULT as I_WORK_RESULT, I_WORK_COUNT as I_WORK_COUNT, I_BIGO as I_BIGO from dual) T
    ON (IL.WORK_DATE = T.I_WORK_DATE
          AND IL.WORK_ID = T.I_WORK_ID
          AND IL.work_date_Str = T.I_WORK_DATE_STR)
    WHEN MATCHED THEN
      UPDATE SET WORK_DATE_END = T.I_WORK_DATE_END,
        WORK_RESULT = T.I_WORK_RESULT,
        WORK_COUNT = T.I_WORK_COUNT,
        BIGO = T.I_BIGO
    WHEN NOT MATCHED THEN
      INSERT(
        WORK_DATE, WORK_DATE_STR, WORK_DATE_END, WORK_ID,
        WORK_RESULT, WORK_COUNT, BIGO
      ) VALUES (
        T.I_WORK_DATE, T.I_WORK_DATE_STR, T.I_WORK_DATE_END, T.I_WORK_ID,
        T.I_WORK_RESULT, T.I_WORK_COUNT, T.I_BIGO
      )  ;
      
    COMMIT; 

EXCEPTION
	WHEN OTHERS THEN
	  ROLLBACK;
	  DBMS_OUTPUT.PUT_LINE('ERROR ->'|| SQLERRM );

END;
/

;

CREATE OR REPLACE PROCEDURE SP_TEST (
O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 

   v_sql  VARCHAR2(1024);
   v_temp VARCHAR2(50);
   
   CURSOR cur IS
   SELECT TABLE_NAME
     FROM USER_TABLES
    WHERE table_name = 'TMP_NOTICE';
BEGIN
  
  OPEN cur;
  FETCH cur INTO v_temp;
  
  -- 임시 테이블이 존재시 테이블 삭제 
  IF cur%FOUND THEN     
      v_sql := 'DROP TABLE TMP_NOTICE';
      EXECUTE IMMEDIATE v_sql;
  END IF;    
  
  --  임시테이블 생성
  v_sql := 'CREATE GLOBAL TEMPORARY TABLE TMP_NOTICE'
        || '(                                            '
        || '    NOTICE_FLAG      NUMBER(2)       NOT NULL'
        || '  , NOTICE_DATE      DATE     NOT NULL'
        || '  , NOTICE_CONTENTS  VARCHAR2(1024)  NULL    '
        || ')                                            '
        || ' ON COMMIT  PRESERVE ROWS ';
  
  EXECUTE IMMEDIATE v_sql;
  
   -- 링크테이블에서 필요한 자료를 임시테이블로 INSERT
  v_sql := 'INSERT INTO TMP_NOTICE              ' 
        || 'SELECT 1                            '
        || '     , SYSDATE AS    NOTICE_DATE    '
        || '     , NULL AS    NOTICE_CONTENTS   '
        || '  FROM DUAL         ' ;
 
  
  
  EXECUTE IMMEDIATE v_sql;
 
     
  CLOSE cur;
  
  COMMIT;
  
       OPEN O_CUR_LIST FOR ' select * from TMP_NOTICE ';
   
END ;
/

;

create or replace PROCEDURE SP_UC_GET_SERVICEABLE_YN(
 O_CUR_LIST       OUT    SYS_REFCURSOR
)
AS
/******************************************************************************
   NAME:       SP_UC_GET_SERVICEABLE_YN
   PURPOSE:    SERVICEABLE 체크

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017-07-18  JIN            CREATE  
******************************************************************************/

BEGIN

	OPEN O_CUR_LIST FOR
	SELECT SERVICEABLE_YN
	FROM TB_CM_LICENSE
	WHERE ROWNUM = 1;

    
EXCEPTION
	WHEN OTHERS THEN
	  ROLLBACK;
	  DBMS_OUTPUT.PUT_LINE('ERROR ->'|| SQLERRM );

END;
/

;

create or replace function FN_CM_GET_AGENT_WORKTYPE_INFO
( I_TENANT_ID IN VARCHAR2
 ,I_AGENT_ID  IN VARCHAR2
 ,I_STD_MONTH IN VARCHAR2 /* YYYYMM */
)
RETURN VARCHAR2 IS
/******************************************************************************
   NAME:       FN_CM_GET_AGENT_WORKTYPE_INFO
   PURPOSE:    상담사의 근무유형에 따른 근무정보 리턴  ( 주말1조 09:00~18:00 (8H)
   
               e.g)
				SELECT FN_CM_GET_AGENT_WORKTYPE_INFO('BT','yakim', '201704') AS AA FROM DUAL
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/26  YAKIM
******************************************************************************/
	V_RETURN VARCHAR2(100) := '' ;
	
	V_WORK_ID VARCHAR2(20) :='' ;
	
BEGIN
     
-- ********************************************************************************
-- 1. 상담사의 근무유형 조회  - 해당 근무유형이 없으면 기본근무유형으로 
-- ******************************************************************************** 	       
	   BEGIN
		   WITH TEMP_WORK AS (
				SELECT 1 AS RN
				      ,A.WORK_ID
				  FROM TB_HR_AGENT_WORK A 
				 WHERE A.STD_MONTH = I_STD_MONTH
				   AND A.TENANT_ID = I_TENANT_ID
				   AND A.AGENT_ID  = I_AGENT_ID
				UNION ALL
				 SELECT 2 AS RN
				  	   ,A.WORK_ID
				   FROM TB_HR_WORK_TYPE A
				  WHERE A.TENANT_ID  = I_TENANT_ID    
				    AND A.DEFAULT_YN = 0 
				    AND A.HIDE_YN = 0
				    AND ROWNUM = 1
			 ) SELECT A.WORK_ID INTO V_WORK_ID
			     FROM TEMP_WORK A
			    WHERE ROWNUM = 1   ; 
       EXCEPTION 
  			WHEN NO_DATA_FOUND THEN
  		 		V_WORK_ID   := NULL ;	     
	   END;

-- ********************************************************************************
-- 1. 해당 근무유형의 근무시간 계산 
-- ******************************************************************************** 	   
   
	   IF V_WORK_ID IS NULL THEN 
	      	V_RETURN := '근무유형 없음';      
	   ELSE	   
			SELECT 
			 A.WORK_NM|| ' '
			      ||FN_CM_STRING_FORMAT(A.WORK_FRM_TM, '@@:@@')
			      ||'~'||FN_CM_STRING_FORMAT(A.WORK_END_TM, '@@:@@')
			      ||' ('||TO_CHAR(ROUND((FN_CM_GET_TIME_DIFF_TO_SECOND(TO_CHAR(SYSDATE,'YYYYMMDD')||A.WORK_FRM_TM||'00'
							,(CASE WHEN A.NEXT_DAY_YN = 0 THEN TO_CHAR(SYSDATE+1,'YYYYMMDD') ELSE TO_CHAR(SYSDATE,'YYYYMMDD') END)
							 ||A.WORK_END_TM||'00' ))/(60*60),1))
			      ||'H)' INTO V_RETURN			 
			FROM TB_HR_WORK_TYPE A  
		   WHERE A.TENANT_ID = I_TENANT_ID
		     AND A.WORK_ID   = V_WORK_ID ;
		     
	   END IF;
	      
   
  RETURN V_RETURN;
  
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN
	     RETURN V_RETURN;
  WHEN OTHERS THEN 
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    RETURN V_RETURN;
END;
/

;

create or replace FUNCTION FN_CM_GET_DEPT_INFO
(
   I_TENANT_ID  IN VARCHAR2
 , I_DEPT_CD    IN VARCHAR2
)
RETURN VARCHAR2
IS
/******************************************************************************
   NAME:       FN_CM_GET_DEPT_INFO
   PURPOSE:    파트/팀 형태로 리턴  ==>고객사 표기 형식에 따라 수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/20  YAKIM
******************************************************************************/
  V_RLT VARCHAR2(120):='' ;

BEGIN
 
 SELECT  FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.DEPT_CD)
        ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD) 
        ||'/'|| FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
   INTO V_RLT
   FROM TB_CM_DEPT_CD A
  WHERE A.TENANT_ID = I_TENANT_ID
    AND A.DEPT_CD   = I_DEPT_CD
 ;
  RETURN V_RLT;
  
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN
    V_RLT := null;
    RETURN V_RLT;
  WHEN OTHERS THEN 
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    --dbms_output.put_line(dbms_utility.format_error_backtrace);    
END;
/

;

create or replace function FN_CM_GET_TB_DEPT_CLASS
( I_TENANT_ID IN VARCHAR2
 ,I_DEPT_CD   IN VARCHAR2
)
RETURN PK_DEPT.NT_DEPT PIPELINED AS V_RETURN    PK_DEPT.OB_DEPT;


	CURSOR TMP_LIST IS
		SELECT 
			TENANT_ID,
			DEPT_CD ,
			DEPT_NM ,
			DEPT_DEPTH ,
			PARENT_DEPT_CD ,
			CENTER_KIND,
			COM_KIND,
			INOUT_KIND,
			SORT_NO ,
			HIDE_YN ,
			CREATE_AGENT_ID ,
			CREATE_DT ,
			MODIFY_AGENT_ID ,
			MODIFY_DT 
		FROM TB_CM_DEPT_CD
		WHERE TENANT_ID = I_TENANT_ID
		  AND NVL(HIDE_YN,0) = 0
		START WITH DEPT_CD = I_DEPT_CD
		CONNECT BY PRIOR DEPT_CD = PARENT_DEPT_CD
		;

   BEGIN  
   FOR CUR IN TMP_LIST LOOP
	        V_RETURN.TENANT_ID 		:= CUR.TENANT_ID; 
	        V_RETURN.DEPT_CD 		:= CUR.DEPT_CD; 
	        V_RETURN.DEPT_NM 		:= CUR.DEPT_NM; 
	        V_RETURN.DEPT_DEPTH     := CUR.DEPT_DEPTH; 
	        V_RETURN.PARENT_DEPT_CD := CUR.PARENT_DEPT_CD; 
	        V_RETURN.CENTER_KIND    := CUR.CENTER_KIND; 
	        V_RETURN.COM_KIND       := CUR.COM_KIND; 
	        V_RETURN.IN_OUT_KIND    := CUR.INOUT_KIND; 
	        V_RETURN.SORT    		:= CUR.SORT_NO; 
	        V_RETURN.HIDE_YN 		:= CUR.HIDE_YN; 
	        V_RETURN.CREATE_AGENT_ID:= CUR.CREATE_AGENT_ID; 
	        V_RETURN.CREATE_DT 		:= CUR.CREATE_DT; 
	        V_RETURN.MODIFY_AGENT_ID:= CUR.MODIFY_AGENT_ID; 
	        V_RETURN.MODIFY_DT 		:= CUR.MODIFY_DT; 
	
	        PIPE ROW(V_RETURN);                   

    END LOOP;
  
  exception when others then
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    --dbms_output.put_line(dbms_utility.format_error_backtrace);
    
end;
/

;

CREATE OR REPLACE FUNCTION FN_CM_GET_TB_SPLIT(
  ps_text in varchar2,
  ps_delimeter in varchar2 default ','

)

RETURN PK_SPLIT.NT_SPLIT PIPELINED AS V_RETURN    PK_SPLIT.OB_SPLIT;
    
	vs_delimeter varchar2(10) := '[^' || ps_delimeter || ']+';
	--vnt_return PK_SPLIT.nt_split := PK_SPLIT.nt_split();    

    CURSOR TMP_LIST IS
              SELECT rownum as rn, regexp_substr(A.TXT, vs_delimeter, 1, LEVEL) as txt
              FROM (SELECT ps_text TXT FROM dual) A
              CONNECT BY LEVEL <= length(regexp_replace(A.TXT, vs_delimeter, ''))+1 
     ;

BEGIN

    FOR CUR IN TMP_LIST LOOP

        V_RETURN.IDX := CUR.RN; 
        V_RETURN.SPLIT_VALUE := CUR.TXT;

        PIPE ROW(V_RETURN);                   

    END LOOP;

END;
/

;

create or replace function FN_CM_GET_WORKDAYS_TIME
( I_TENANT_ID IN VARCHAR2
 ,I_AGENT_ID  IN VARCHAR2
 ,I_TYPE      IN VARCHAR2 /* D(근무일) T(근무시간) 구분 */ 
 ,I_FROM_DT   IN VARCHAR2 /* YYYYMMDD OR YYYYMMDDHH24MISS */
 ,I_TO_DT    IN VARCHAR2 /* YYYYMMDD OR YYYYMMDDHH24MISS */
 ,I_STM_YMD   IN VARCHAR2 /* YYYYMM */
)
RETURN VARCHAR2 IS
/******************************************************************************
   NAME:       FN_CM_GET_WORKDAYS_DIFF
   PURPOSE:    두 일자 간 차이를 근무캘린더를 체크하여 근무일자 또는 근무시간을 계산 하여 리턴
               YYYYMMDD 타입일 경우 근무일자 차이 계산
               YYYYMMDDHH24MISS 타입일 경우 근무시간 차이 계산

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/23  
******************************************************************************/
	V_RETURN VARCHAR2(10) :='';
	V_FROM VARCHAR2(14) :=I_FROM_DT;
	V_TO   VARCHAR2(14) :=I_TO_DT;
	
	V_DAYS   NUMBER(3) := 0 ;
	V_HOUR   NUMBER(3) := 0 ;
	V_MIN    NUMBER(3) := 0 ;
	V_SECOND NUMBER(3) := 0 ;
	V_HOLI	 NUMBER(3) := 0 ;
	V_WORK_HOUR NUMBER(3) := 8 ;
	V_WORK_MIN  NUMBER(3) := 0 ;
	V_WORK_FRM_TM  varchar2(4) := '0900' ;
	V_WORK_END_TM  varchar2(4) := '1800';
	V_MEAL_FRM_TM  varchar2(4) := '1200';
	V_MEAL_END_TM  varchar2(4) := '1300';
	V_TEMP	VARCHAR2(20) := '';
	V_CNT NUMBER(3) := 0;
	
BEGIN

-- ********************************************************************************
-- 0. 길이체크 8자리이면 000000
-- ********************************************************************************   
  	
	SELECT COUNT(*)
	INTO V_CNT
	FROM TB_HR_AGENT_WORK A
    INNER JOIN TB_HR_WORK_TYPE B
    ON A.TENANT_ID = B.TENANT_ID
    AND A.WORK_ID = B.WORK_ID
    WHERE A.TENANT_ID = I_TENANT_ID
    AND A.STD_MONTH = I_STM_YMD
    AND A.AGENT_ID =I_AGENT_ID;	
    
    IF(V_CNT !=0) THEN

	SELECT SUBSTR(WORK_TM,0,2)
       	  ,SUBSTR(WORK_TM,3,2) 
       	  ,B.WORK_FRM_TM
     	  ,B.WORK_END_TM
     	  ,B.MEAL_FRM_TM
     	  ,B.MEAL_END_TM
	INTO V_WORK_HOUR, V_WORK_MIN, V_WORK_FRM_TM, V_WORK_END_TM, V_MEAL_FRM_TM, V_MEAL_END_TM
	FROM TB_HR_AGENT_WORK A
    INNER JOIN TB_HR_WORK_TYPE B
    ON A.TENANT_ID = B.TENANT_ID
    AND A.WORK_ID = B.WORK_ID
    WHERE A.TENANT_ID = I_TENANT_ID
    AND A.STD_MONTH = I_STM_YMD
    AND A.AGENT_ID =I_AGENT_ID;	

    END IF;
    
    IF(V_CNT = 0) THEN V_WORK_HOUR := '8'; V_WORK_MIN := '00'; END IF;
    
   IF(LENGTH(V_FROM)=8) THEN V_FROM := V_FROM||V_WORK_FRM_TM||'00' ; END IF;
   IF(LENGTH(V_TO)=8)   THEN V_TO   := V_TO||V_WORK_END_TM||'00'   ; END IF;
   IF(LENGTH(V_FROM)=12) THEN V_FROM := V_FROM||'00' ; END IF;
   IF(LENGTH(V_TO)=12)   THEN V_TO   := V_TO||'00'   ; END IF;
   

-- ********************************************************************************
-- 0. 길이체크 8자리이면 000000
-- ********************************************************************************    

   IF(TO_CHAR(TO_DATE(V_FROM, 'YYYYMMDDHH24MISS'),'YYYYMM')	!= I_STM_YMD) THEN V_FROM := I_STM_YMD||'01'||V_WORK_FRM_TM||'00' ; END IF;
   IF(TO_CHAR(TO_DATE(V_TO, 'YYYYMMDDHH24MISS'),'YYYYMM')	!= I_STM_YMD) THEN V_TO := to_char(last_day(to_date(I_STM_YMD, 'yyyymm')),'yyyymmdd')||V_WORK_END_TM||'00' ; END IF;
 
-- ********************************************************************************
-- 1. 두 시간간 차이 계산
-- ******************************************************************************** 
   IF(V_FROM IS NOT NULL AND V_TO IS NOT NULL) THEN

   SELECT  FLOOR(DIFF_SS/(60*60*24))  AS DAY 
          ,LPAD(FLOOR(DIFF_SS/(60*60)), 2, 0)  AS HOUR
	      ,LPAD(FLOOR (MOD( (DIFF_SS/60 ), 60) ), 2, 0)  AS MIN
	      ,LPAD(FLOOR (MOD(  DIFF_SS, 60) ), 2, 0)  AS SECOND
	       INTO V_DAYS, V_HOUR,  V_MIN,V_SECOND
	 FROM (
	      SELECT FN_CM_GET_TIME_DIFF_TO_SECOND(V_FROM,V_TO) AS DIFF_SS FROM DUAL
	   ) ; 

    
    SELECT COUNT(*) AS HOLIDAY 
    INTO V_HOLI
    FROM TB_CM_HOLIDAY WHERE HOLI_YN =1
	AND STD_YMD BETWEEN TO_CHAR(TO_DATE(V_FROM, 'YYYYMMDDHH24MISS'),'YYYYMMDD')
					AND TO_CHAR(TO_DATE(V_TO, 'YYYYMMDDHH24MISS'),'YYYYMMDD');
					
	
	IF(	V_WORK_HOUR IS NULL ) THEN V_WORK_HOUR := 08 ; V_WORK_MIN := 00; END IF;
	
	IF( I_TYPE = 'D') THEN /* 차이 일자를 계산  향후 AGENT_ID별 근무캘린더 가져와서 계산*/
		   V_RETURN :=   V_DAYS-V_HOLI+1; 
	 
	ELSIF( I_TYPE = 'T') THEN  	
			/* 근태 시간이 점심시간에 겹쳐있는 경우 */
			IF(SUBSTR(V_FROM,9,4) <= V_MEAL_FRM_TM AND V_MEAL_END_TM <=SUBSTR(V_TO,9,4)) THEN
      			V_RETURN :=   TO_CHAR(ROUND(
					(((V_HOUR-((V_DAYS-V_HOLI)*24)+(V_DAYS-V_HOLI)*V_WORK_HOUR)*60*60)  
					+ (V_MIN*60) + V_SECOND - ( (SUBSTR(V_MEAL_END_TM,0,2)- SUBSTR(V_MEAL_FRM_TM,0,2))*60*60 + SUBSTR(V_MEAL_END_TM,3,2)*60- SUBSTR(V_MEAL_FRM_TM,3,2) )) 
							/((V_WORK_HOUR*60*60)+(V_WORK_MIN*60)) ,1) ,'FM9990.9')  ; 

  			ELSE 
  				V_RETURN :=   TO_CHAR(ROUND((((V_HOUR-((V_DAYS-V_HOLI)*24)+(V_DAYS-V_HOLI)*V_WORK_HOUR)*60*60) + (V_MIN*60) + V_SECOND) /((V_WORK_HOUR*60*60)+(V_WORK_MIN*60)) ,1) ,'FM9990.9')  ; 
			END IF;

		ELSIF( I_TYPE = 'WT') THEN
			IF(SUBSTR(V_FROM,9,4) <= V_MEAL_FRM_TM AND V_MEAL_END_TM <=SUBSTR(V_TO,9,4)) THEN
      			V_TEMP :=  
					(((V_HOUR-((V_DAYS-V_HOLI)*24)+(V_DAYS-V_HOLI)*V_WORK_HOUR)*60*60)  
					+ (V_MIN*60) + V_SECOND - ( (SUBSTR(V_MEAL_END_TM,0,2)- SUBSTR(V_MEAL_FRM_TM,0,2))*60*60 + SUBSTR(V_MEAL_END_TM,3,2)*60- SUBSTR(V_MEAL_FRM_TM,3,2) )) ;

      			V_RETURN :=    (TRUNC(V_TEMP/(60*60)))         ||':'||
						       LPAD(TRUNC(MOD((V_TEMP/60),60)),2,0)||':'||
						       LPAD(TRUNC(MOD(V_TEMP,60)),2,0)   ;


  			ELSE 
	  			V_TEMP :=  (((V_HOUR-((V_DAYS-V_HOLI)*24)+(V_DAYS-V_HOLI)*V_WORK_HOUR)*60*60) + (V_MIN*60) + V_SECOND)  ; 
    
      			V_RETURN :=    (TRUNC(V_TEMP/(60*60)))         ||':'||
						       LPAD(TRUNC(MOD((V_TEMP/60),60)),2,0)||':'||
						       LPAD(TRUNC(MOD(V_TEMP,60)),2,0)    ;

			END IF;
		
       END IF;

         
   END IF;

  RETURN V_RETURN;
  
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN
	     RETURN V_RETURN;
  WHEN OTHERS THEN 
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    RETURN V_RETURN;
END;
/

;

create or replace function FN_CM_GET_WORKTYPE_SECONDS
( I_TENANT_ID IN VARCHAR2
 ,I_AGENT_ID  IN VARCHAR2
 ,I_STD_MONTH IN VARCHAR2 /* YYYYMM */
)
RETURN VARCHAR2 IS
/******************************************************************************
   NAME:       FN_CM_GET_WORKTYPE_SECONDS
   PURPOSE:    상담사의 근무유형에 따른 근무시간 계산하여 리턴
               e.g)
				SELECT FN_CM_GET_WORKTYPE_SECONDS('BT','yakim', '201704') AS AA FROM DUAL
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/14  YAKIM
******************************************************************************/
	V_RETURN NUMBER(10) := 0 ;
	
	V_WORK_ID VARCHAR2(20) :='' ;
	
BEGIN
     
-- ********************************************************************************
-- 1. 상담사의 근무유형 조회  - 해당 근무유형이 없으면 기본근무유형으로 
-- ******************************************************************************** 	       
	BEGIN
		WITH TEMP_WORK AS (
			SELECT 1 AS RN, A.WORK_ID
			FROM TB_HR_AGENT_WORK A
			WHERE A.STD_MONTH = I_STD_MONTH
			AND A.TENANT_ID = I_TENANT_ID
			AND A.AGENT_ID  = I_AGENT_ID
			
			UNION ALL
			
			SELECT 2 AS RN, A.WORK_ID
			FROM TB_HR_WORK_TYPE A
			WHERE A.TENANT_ID  = I_TENANT_ID
			AND A.DEFAULT_YN = 1
			AND A.HIDE_YN = 0
			AND ROWNUM = 1
		) 
		SELECT A.WORK_ID INTO V_WORK_ID
		FROM TEMP_WORK A
		WHERE ROWNUM = 1;

	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		V_WORK_ID   := NULL ;
	END;

-- ********************************************************************************
-- 1. 해당 근무유형의 근무시간 계산 
-- ******************************************************************************** 	   
   
	IF V_WORK_ID IS NULL THEN
		V_RETURN := 8* 60 * 60 ; -- 기본근무유형도 없을 경우 8시간으로
	ELSE
		SELECT 
			FN_CM_GET_TIME_DIFF_TO_SECOND(TO_CHAR(SYSDATE,'YYYYMMDD')||A.WORK_FRM_TM||'00'
			,(CASE WHEN A.NEXT_DAY_YN = 0 THEN TO_CHAR(SYSDATE+1,'YYYYMMDD') ELSE TO_CHAR(SYSDATE,'YYYYMMDD') END)
				||A.WORK_END_TM||'00' ) INTO V_RETURN
		FROM TB_HR_WORK_TYPE A
		WHERE A.TENANT_ID =  I_TENANT_ID
		AND A.WORK_ID   =  V_WORK_ID ;
	END IF;
	      
   
	RETURN V_RETURN;
  
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN
	     RETURN V_RETURN;
  WHEN OTHERS THEN 
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    RETURN V_RETURN;
END;
/

;

CREATE OR REPLACE PROCEDURE SP_BAT_KPIUSERMASTER
(
	I_TENANT_ID  IN  VARCHAR2,
	I_WORK_MEMB  IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_BAT_KPIUSERMASTER
   PURPOSE:    사용자, 소속정보 이력정보 관리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/03/08  JYMOON           
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_BAT_KPIUSERMASTER';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
	V_TODAY VARCHAR2(8) := TO_CHAR(SYSDATE, 'YYYYMMDD');
	V_MONTH VARCHAR2(6) := SUBSTR(V_TODAY, 0, 6);
    
BEGIN

-- ********************************************************************************
-- 소속정보 이력적재
-- MERGE INTO (UPSERT) 추가/수정 동시 처리
-- ********************************************************************************
	MERGE INTO TB_CM_DEPT_CD_HISTORY A
		USING (SELECT * FROM TB_CM_DEPT_CD WHERE TENANT_ID = I_TENANT_ID) B
			ON (A.TENANT_ID = B.TENANT_ID AND A.DEPT_CD = B.DEPT_CD)
		
		WHEN MATCHED THEN
			UPDATE SET 
				 A.DEPT_NM = b.DEPT_NM              
				,A.DEPT_DEPTH = b.DEPT_DEPTH        
				,A.PARENT_DEPT_CD = b.PARENT_DEPT_CD
				,A.CENTER_KIND = b.CENTER_KIND      
				,A.LOC_KIND = b.LOC_KIND            
				,A.COM_KIND = b.COM_KIND            
				,A.INOUT_KIND = b.INOUT_KIND        
				,A.HIDE_YN = b.HIDE_YN              
				,A.BIGO = b.BIGO                    
				,A.SORT_NO = b.SORT_NO              
				,A.MODIFY_AGENT_ID = I_WORK_MEMB    
				,A.MODIFY_DT = SYSDATE
		WHEN NOT MATCHED THEN
			INSERT 
			(
				STD_MONTH,        TENANT_ID,     DEPT_CD,       DEPT_NM,          DEPT_DEPTH,
				PARENT_DEPT_CD,   CENTER_KIND,   LOC_KIND,      COM_KIND,         MANAGER_ID,
				APPROVAL_ID1,     APPROVAL_ID2,  APPROVAL_ID3,  STAFF_YN,         INOUT_KIND,
				HIDE_YN,          BIGO,          SORT_NO,       CREATE_AGENT_ID,  CREATE_DT,
				MODIFY_AGENT_ID,  MODIFY_DT
			) VALUES (
				V_MONTH,            B.TENANT_ID,     B.DEPT_CD,       B.DEPT_NM,     B.DEPT_DEPTH,
				B.PARENT_DEPT_CD,   B.CENTER_KIND,   B.LOC_KIND,      B.COM_KIND,    B.MANAGER_ID,
				B.APPROVAL_ID1,     B.APPROVAL_ID2,  B.APPROVAL_ID3,  B.STAFF_YN,    B.INOUT_KIND,
				B.HIDE_YN,          B.BIGO,          B.SORT_NO,       I_WORK_MEMB,   SYSDATE,
				I_WORK_MEMB,        SYSDATE
			);
	COMMIT;
   
-- ********************************************************************************
-- 상담사정보 이력적재
-- 상담사정보의 경우 신규인원만 인서트 하고 부가정보에 대해서는 (별도 업데이트 처리-고객사 custom)한다.
-- ********************************************************************************  
	INSERT INTO TB_CM_USER_MASTER_HISTORY
	(
		STD_MONTH,          AGENT_ID,           TENANT_ID,        AGENT_NM,         AGENT_PW,
		SABUN,              DEPT_CD,            TM_KIND,          AGENT_JIKGUP,     AGENT_JIKCHK,
		JIKJONG_KIND,       DAYNIGHT_GUBUN,     JAEJIK_GUBUN,     GENDER_KIND,      BIRTH_YMD,
		ENTER_YMD,          RETIRE_YMD,         RETIRE_GUBUN,     RETIRE_RSN,       WORK_MONTH_PERIOD,
		HIDE_YN,            LOGIN_TRY_COUNT,    TEL_NO,           LOCK_YN,          CONTRACT_FRM,
		CONTRACT_END,       SCHE_TARGET_YN,     EDU_TARGET_YN,    QA_TARGET_YN,     KPI_TARGET_YN,
		IMG_REAL_FILENAME,  IMG_USER_FILENAME,  IMG_PATH,         GRANT_ID,         WARNING_INFO,
		USER_DATA1,         USER_DATA2,         USER_DATA3,       USER_DATA4,       USER_DATA5,
		USER_DATA6,         USER_DATA7,         USER_DATA8,       USER_DATA9,       USER_DATA10,
		CREATE_AGENT_ID,    CREATE_DT,          MODIFY_AGENT_ID,  MODIFY_DT
	)
	SELECT 
		V_MONTH,              A.AGENT_ID,           A.TENANT_ID,        A.AGENT_NM,         A.AGENT_PW,
		A.SABUN,              A.DEPT_CD,            A.TM_KIND,          A.AGENT_JIKGUP,     A.AGENT_JIKCHK,
		A.JIKJONG_KIND,       A.DAYNIGHT_GUBUN,     A.JAEJIK_GUBUN,     A.GENDER_KIND,      A.BIRTH_YMD,
		A.ENTER_YMD,          A.RETIRE_YMD,         A.RETIRE_GUBUN,     A.RETIRE_RSN,       A.WORK_MONTH_PERIOD,
		A.HIDE_YN,            A.LOGIN_TRY_COUNT,    A.TEL_NO,           A.LOCK_YN,          A.CONTRACT_FRM,
		A.CONTRACT_END,       A.SCHE_TARGET_YN,     A.EDU_TARGET_YN,    A.QA_TARGET_YN,     A.KPI_TARGET_YN,
		A.IMG_REAL_FILENAME,  A.IMG_USER_FILENAME,  A.IMG_PATH,         A.GRANT_ID,         A.WARNING_INFO,
		B.USER_DATA1,         B.USER_DATA2,         B.USER_DATA3,       B.USER_DATA4,       B.USER_DATA5,
		B.USER_DATA6,         B.USER_DATA7,         B.USER_DATA8,       B.USER_DATA9,       B.USER_DATA10,
		I_WORK_MEMB,          SYSDATE,              I_WORK_MEMB,        SYSDATE
	FROM TB_CM_USER_MASTER A
	LEFT OUTER JOIN TB_CM_USER_DETAIL B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.AGENT_ID NOT IN (
	  		SELECT AGENT_ID 
	  		FROM TB_CM_USER_MASTER_HISTORY 
	  		WHERE TENANT_ID = I_TENANT_ID 
	  		  AND STD_MONTH = V_MONTH
	  );
	
	
-- ********************************************************************************
-- 발령을 통해 관리되는 소속, 업무그룹, 직급, 직책 정보의 경우 운영자가 수동으로 관리하도록 한다.
-- (고객사 협의에 의해 변경될수 있음)
-- ********************************************************************************  
	UPDATE TB_CM_USER_MASTER_HISTORY X SET(
		AGENT_NM            --상담사명
		,AGENT_PW           --비밀번호
		,SABUN              --행번
		,JAEJIK_GUBUN       --재직구분
		,GENDER_KIND        --성별
		,BIRTH_YMD          --생년월일
		,ENTER_YMD          --입사일자
		,RETIRE_YMD         --퇴직일자
		,RETIRE_GUBUN       --퇴직구분
		,RETIRE_RSN         --퇴직사유
		,WORK_MONTH_PERIOD  --근속개월
		,HIDE_YN            --숨김여부
		,TEL_NO             --전화번호
		,CONTRACT_FRM       --계약일자(시작)
		,CONTRACT_END       --계약일자(종료)
		,SCHE_TARGET_YN     --스케줄관리대상여부
		,EDU_TARGET_YN      --교육관리대상여부
		,QA_TARGET_YN       --통화품질관리대상여부
		,KPI_TARGET_YN      --성과실적관리대상여부
		,USER_DATA1         --사용자정의1
		,USER_DATA2         --사용자정의2
		,USER_DATA3         --사용자정의3
		,USER_DATA4         --사용자정의4
		,USER_DATA5         --사용자정의5
		,USER_DATA6         --사용자정의6
		,USER_DATA7         --사용자정의7
		,USER_DATA8         --사용자정의8
		,USER_DATA9         --사용자정의9
		,USER_DATA10        --사용자정의10
	) = (
		SELECT
			A.AGENT_NM
			,A.AGENT_PW
			,A.SABUN
			,A.JAEJIK_GUBUN
			,A.GENDER_KIND
			,A.BIRTH_YMD
			,A.ENTER_YMD
			,A.RETIRE_YMD
			,A.RETIRE_GUBUN
			,A.RETIRE_RSN
			,A.WORK_MONTH_PERIOD
			,A.HIDE_YN
			,A.TEL_NO
			,A.CONTRACT_FRM
			,A.CONTRACT_END
			,A.SCHE_TARGET_YN
			,A.EDU_TARGET_YN
			,A.QA_TARGET_YN
			,A.KPI_TARGET_YN
			,B.USER_DATA1
			,B.USER_DATA2
			,B.USER_DATA3
			,B.USER_DATA4
			,B.USER_DATA5
			,B.USER_DATA6
			,B.USER_DATA7
			,B.USER_DATA8
			,B.USER_DATA9
			,B.USER_DATA10
		FROM TB_CM_USER_MASTER A
		LEFT OUTER JOIN TB_CM_USER_DETAIL B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
		WHERE A.TENANT_ID = I_TENANT_ID
		  AND X.TENANT_ID = A.TENANT_ID
		  AND X.AGENT_ID  = A.AGENT_ID
	)
	WHERE STD_MONTH = V_MONTH;
	
    COMMIT; 


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_CM1010M01_01
(
  I_TENANT_ID       IN VARCHAR2,
  I_FRM_YMD         IN VARCHAR2,
  I_END_YMD         IN VARCHAR2,
  I_AGENT_ID        IN VARCHAR2,
  O_CUR_LIST        OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM1010M01_01
   PURPOSE:    센터스케줄관리 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/12/27   
******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
BEGIN
 OPEN O_CUR_LIST FOR
 SELECT 'h'||rownum as id,
       HOLI_NM as title,
       '#ffffff' as color,
       '#DB0000' as text_color,
       to_char(to_date(STD_YMD, 'yyyymmdd'), 'yyyy-mm-dd')||'T'||to_char(to_date('000000', 'hh24miss'), 'hh24:mi:ss') as "start",
       to_char(to_date(STD_YMD, 'yyyymmdd'), 'yyyy-mm-dd')||'T'||to_char(to_date('235959', 'hh24miss'), 'hh24:mi:ss') as "end",
       1 as ex_yn,
       1 as repeat_yn
  FROM TB_CM_HOLIDAY
 WHERE 1=1
   AND HOLI_YN = '1'
   AND to_char(to_date(STD_YMD, 'yyyymmdd'), 'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS(to_date(I_END_YMD, 'yyyymm'), -1), 'YYYYMM') AND TO_CHAR(ADD_MONTHS(to_date(I_FRM_YMD, 'yyyymm'), +1), 'YYYYMM')
 UNION ALL
SELECT SNO as id,
       SCHE_NM as title,
       '' as color,
       '' as text_color,
       to_char(to_date(FRM_YMD, 'yyyymmdd'), 'yyyy-mm-dd')||'T'||to_char(to_date(FRM_TM, 'hh24miss'), 'hh24:mi:ss') as "start",
       to_char(to_date(END_YMD, 'yyyymmdd'), 'yyyy-mm-dd')||'T'||to_char(to_date(END_TM, 'hh24miss'), 'hh24:mi:ss') as "end",
       EXCEPT_YN as ex_yn,
       REPEAT_YN as repeaet_yn
  FROM TB_CM_SCHEDULE
 WHERE 1=1
   AND TENANT_ID = I_TENANT_ID
   AND to_char(to_date(FRM_YMD, 'yyyymmdd'), 'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS(to_date(I_END_YMD, 'yyyymm'), -1), 'YYYYMM') AND TO_CHAR(ADD_MONTHS(to_date(I_FRM_YMD, 'yyyymm'), +1), 'YYYYMM');
 EXCEPTION
    WHEN OTHERS THEN 
    BEGIN
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;

END;
/

;

create or replace PROCEDURE SP_CM1010M01_02
(
  I_TENANT_ID IN  VARCHAR2,
  I_GBN       IN  VARCHAR2,
  I_SNO       IN  VARCHAR2,
  I_CHE_NM    IN  VARCHAR2,
  I_FRM_YMD   IN  VARCHAR2,
  I_END_YMD   IN  VARCHAR2,
  I_FRM_TM    IN  VARCHAR2,
  I_END_TM    IN  VARCHAR2,
  I_EXCEPT_YN IN  VARCHAR2,
  I_FRM_Y     IN  VARCHAR2,
  I_END_Y     IN  VARCHAR2,
  I_FRM_MD    IN  VARCHAR2,
  I_END_MD    IN  VARCHAR2,
  I_REPEAT_YN IN  VARCHAR2,
  I_AGENT_ID  IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM1010M01_02
   PURPOSE:    센터스케줄관리 데이터 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/12/27   
******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

    I_N_SNO              VARCHAR2(12);
    I_MAX_YMD            VARCHAR2(4);

BEGIN

	SELECT MAX(SUBSTR(STD_YMD,1,4)) INTO I_MAX_YMD 
	  FROM TB_CM_HOLIDAY 
	 ORDER BY 1 DESC;

    -- 스케줄등록
    IF I_GBN = 'I' THEN
    
    	-- 매년 적용 O
	    IF I_REPEAT_YN = '1' THEN
	    
		    FOR INSERT_YEAR IN I_FRM_Y..I_MAX_YMD LOOP
		    
		        -- SNO 생성 yyyymmdd0000 기준으로 1씩증가 
			    SELECT 
			      CASE WHEN CHK.SNO is null THEN TO_CHAR(sysdate, 'YYYYMMDD')||'0001'
			      ELSE TO_CHAR(sysdate, 'YYYYMMDD')||SUBSTR(CHK.SNO,9,4)
			      END INTO I_N_SNO
			    FROM
			      (SELECT 
			        MAX(SNO+1) AS SNO
			      FROM TB_CM_SCHEDULE WHERE 1=1 
			      and TO_CHAR(CREATE_DT, 'YYYYMMDD') = TO_CHAR(sysdate, 'YYYYMMDD')) CHK ;
		
		    
			    INSERT INTO TB_CM_SCHEDULE ( TENANT_ID
				                           , SNO
										   , SCHE_NM
										   , FRM_YMD
										   , END_YMD
										   , FRM_TM
										   , END_TM
										   , EXCEPT_YN
										   , REPEAT_YN
										   , CREATE_AGENT_ID
										   , CREATE_DT
								  ) VALUES ( I_TENANT_ID
								           , I_N_SNO
										   , I_CHE_NM
										   , INSERT_YEAR || I_FRM_MD
										   , CASE WHEN I_FRM_Y != I_END_Y THEN INSERT_YEAR + 1 || I_END_MD
										          ELSE INSERT_YEAR || I_END_MD END
										   , I_FRM_TM
										   , I_END_TM
										   , I_EXCEPT_YN
										   , I_REPEAT_YN
										   , I_AGENT_ID
										   , SYSDATE );   
									   
			END LOOP;
			
		-- 매년적용 X
	    ELSIF I_REPEAT_YN = '0' THEN
	    
	    	-- SNO 생성 yyyymmdd0000 기준으로 1씩증가 
		    SELECT 
		      CASE WHEN CHK.SNO is null THEN TO_CHAR(sysdate, 'YYYYMMDD')||'0001'
		      ELSE TO_CHAR(sysdate, 'YYYYMMDD')||SUBSTR(CHK.SNO,9,4)
		      END INTO I_N_SNO
		    FROM
		      (SELECT 
		        MAX(SNO+1) AS SNO
		      FROM TB_CM_SCHEDULE WHERE 1=1 
		      and TO_CHAR(CREATE_DT, 'YYYYMMDD') = TO_CHAR(sysdate, 'YYYYMMDD')) CHK ;
	    
		    INSERT INTO TB_CM_SCHEDULE (TENANT_ID, SNO, SCHE_NM, FRM_YMD, END_YMD, FRM_TM, END_TM, EXCEPT_YN, REPEAT_YN, CREATE_AGENT_ID, CREATE_DT) 
		         VALUES
		    (I_TENANT_ID, I_N_SNO, I_CHE_NM, I_FRM_YMD, I_END_YMD, I_FRM_TM, I_END_TM, I_EXCEPT_YN, I_REPEAT_YN, I_AGENT_ID, SYSDATE);
	    END IF;
	    
    --스케줄 수정
    ELSIF I_GBN = 'U' THEN
      
      -- 매년 적용 O
	    IF I_REPEAT_YN = '1' THEN

	    	UPDATE TB_CM_SCHEDULE 
	    	   SET SCHE_NM = I_CHE_NM
  		         , FRM_YMD = I_FRM_YMD
		         , END_YMD = I_END_YMD
		         , FRM_TM = I_FRM_TM
		         , END_TM = I_END_TM
		         , EXCEPT_YN = I_EXCEPT_YN
		         , REPEAT_YN = I_REPEAT_YN
		         , MODIFY_AGENT_ID = I_AGENT_ID
		         , MODIFY_DT = SYSDATE
		     WHERE TENANT_ID = I_TENANT_ID 
		       AND SNO = I_SNO;
	    
		    FOR INSERT_YEAR IN I_FRM_Y + 1..I_MAX_YMD LOOP
		    
		        -- SNO 생성 yyyymmdd0000 기준으로 1씩증가 
			    SELECT 
			      CASE WHEN CHK.SNO is null THEN TO_CHAR(sysdate, 'YYYYMMDD')||'0001'
			      ELSE TO_CHAR(sysdate, 'YYYYMMDD')||SUBSTR(CHK.SNO,9,4)
			      END INTO I_N_SNO
			    FROM
			      (SELECT 
			        MAX(SNO+1) AS SNO
			      FROM TB_CM_SCHEDULE WHERE 1=1 
			      and TO_CHAR(CREATE_DT, 'YYYYMMDD') = TO_CHAR(sysdate, 'YYYYMMDD')) CHK ;
		
		    
			    INSERT INTO TB_CM_SCHEDULE ( TENANT_ID
				                           , SNO
										   , SCHE_NM
										   , FRM_YMD
										   , END_YMD
										   , FRM_TM
										   , END_TM
										   , EXCEPT_YN
										   , REPEAT_YN
										   , CREATE_AGENT_ID
										   , CREATE_DT
								  ) VALUES ( I_TENANT_ID
								           , I_N_SNO
										   , I_CHE_NM
										   , INSERT_YEAR || I_FRM_MD
										   , CASE WHEN I_FRM_Y != I_END_Y THEN INSERT_YEAR + 1 || I_END_MD
										          ELSE INSERT_YEAR || I_END_MD END
										   , I_FRM_TM
										   , I_END_TM
										   , I_EXCEPT_YN
										   , I_REPEAT_YN
										   , I_AGENT_ID
										   , SYSDATE );   
									   
			END LOOP;
			
		-- 매년적용 X
	    ELSIF I_REPEAT_YN = '0' THEN
	    
	    	UPDATE TB_CM_SCHEDULE 
	    	   SET SCHE_NM = I_CHE_NM
  		         , FRM_YMD = I_FRM_YMD
		         , END_YMD = I_END_YMD
		         , FRM_TM = I_FRM_TM
		         , END_TM = I_END_TM
		         , EXCEPT_YN = I_EXCEPT_YN
		         , MODIFY_AGENT_ID = I_AGENT_ID
		         , MODIFY_DT = SYSDATE
		     WHERE TENANT_ID = I_TENANT_ID 
		       AND SNO = I_SNO;
		       
	    END IF;
      
    --스케줄 삭제
    ELSIF I_GBN = 'D' THEN
      DELETE FROM TB_CM_SCHEDULE WHERE TENANT_ID = I_TENANT_ID AND SNO = I_SNO;
    
    --스케줄 전체 삭제
    ELSIF I_GBN = 'DA' THEN
      DELETE 
        FROM TB_CM_SCHEDULE 
       WHERE TENANT_ID = I_TENANT_ID 
         AND REPEAT_YN = I_REPEAT_YN
         AND EXCEPT_YN = I_EXCEPT_YN
         AND SCHE_NM   = I_CHE_NM
         AND SUBSTR(FRM_YMD, 5, 4) = I_FRM_MD
         AND SUBSTR(END_YMD, 5, 4) = I_END_MD
         AND FRM_TM = I_FRM_TM
         AND END_TM = I_END_TM;
    END IF;
    
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1020M01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1020M01_01
   PURPOSE:    소속조회 (TREE)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/17
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM1020M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
      SELECT 
        A.DEPT_CD
        ,A.DEPT_NM
        ,A.DEPT_DEPTH
        ,A.PARENT_DEPT_CD
        ,NVL(A.SORT_NO,0) AS SORT
        ,( SELECT COUNT(S.AGENT_ID) 
               FROM TB_CM_USER_MASTER S
            WHERE  1=1
            AND  NVL(S.RETIRE_GUBUN, '-') <> '99' 
            AND FN_CM_GET_DEPT_CD( I_TENANT_ID, (CASE A.DEPT_DEPTH WHEN 0 THEN 'center' WHEN 1 THEN 'part' WHEN 2 THEN 'team' WHEN 3 THEN 'jo' END),S.DEPT_CD ) = A.DEPT_CD
          ) AS AGENT_CNT
      FROM 
        TB_CM_DEPT_CD  A
      WHERE 1=1
      AND A.TENANT_ID = I_TENANT_ID
      ORDER BY A.PARENT_DEPT_CD, A.SORT_NO;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1020M01_02 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_DEPT_CD     IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1020M01_02
   PURPOSE:    소속상세내역조회 ()

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/17
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM1020M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
	SELECT 
		TENANT_ID,
		DEPT_CD,
		DEPT_NM,
		DEPT_DEPTH,
		PARENT_DEPT_CD,
		CENTER_KIND,
		LOC_KIND,
		COM_KIND,
		MANAGER_ID,
		FN_CM_GET_AGENT_NM(I_TENANT_ID, MANAGER_ID) AS MANAGER_NM,
		APPROVAL_ID1 AS APPROVAL1_ID,
		APPROVAL_ID2 AS APPROVAL2_ID,
		APPROVAL_ID3 AS APPROVAL3_ID,
		FN_CM_GET_AGENT_NM(I_TENANT_ID, APPROVAL_ID1) AS APPROVAL1_NM,
		FN_CM_GET_AGENT_NM(I_TENANT_ID, APPROVAL_ID2) AS APPROVAL2_NM,
		FN_CM_GET_AGENT_NM(I_TENANT_ID, APPROVAL_ID3) AS APPROVAL3_NM,
		STAFF_YN,
		INOUT_KIND,
		HIDE_YN,
		BIGO,
		SORT_NO
	FROM TB_CM_DEPT_CD 
	WHERE 1=1
	AND TENANT_ID = I_TENANT_ID
	AND DEPT_CD = I_DEPT_CD;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1020M01_03 
(
  I_TENANT_ID        IN  VARCHAR2,
  I_GBN              IN  VARCHAR2,
  I_DEPT_CD          IN  VARCHAR2,
  I_DEPT_NM          IN  VARCHAR2,
  I_DEPT_DEPTH       IN  VARCHAR2,
  I_PARENT_DEPT_CD   IN  VARCHAR2,
  I_CENTER_KIND      IN  VARCHAR2,
  I_LOC_KIND         IN  VARCHAR2,
  I_COM_KIND         IN  VARCHAR2,
  I_MANAGER_ID       IN  VARCHAR2,
  I_APPROVAL_ID1     IN  VARCHAR2,
  I_APPROVAL_ID2     IN  VARCHAR2,
  I_APPROVAL_ID3     IN  VARCHAR2,
  I_STAFF_YN         IN  VARCHAR2,
  I_INOUT_KIND       IN  VARCHAR2,
  I_HIDE_YN          IN  VARCHAR2,
  I_BIGO             IN  VARCHAR2,
  I_SORT_NO          IN  VARCHAR2,
  I_AGENT_ID         IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM1020M01_03
   PURPOSE:    소속관리 데이터 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/01/10
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1020M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
    
    N_DEPT_CD              VARCHAR2(20);
    N_SORT_NO              NUMBER;
    
BEGIN
    -- 수정 등록
    IF I_GBN = 'U' THEN
      --신규소속 DEPT_CD (TIBERO 함수확인필요)
      SELECT LPAD(MAX(DEPT_CD+1),4,'0') INTO N_DEPT_CD FROM TB_CM_DEPT_CD WHERE TENANT_ID = I_TENANT_ID;
      --신규소속 SORT값
      SELECT 
        CASE WHEN CHK.SORT_NO is null THEN 0
        ELSE CHK.SORT_NO
        END INTO N_SORT_NO
      FROM
        (SELECT 
          MAX(SORT_NO+1) AS SORT_NO
        FROM TB_CM_DEPT_CD 
        WHERE 1=1 
        AND TENANT_ID = I_TENANT_ID 
        AND PARENT_DEPT_CD = I_PARENT_DEPT_CD) CHK;
    
      MERGE INTO TB_CM_DEPT_CD T
      USING (SELECT   I_TENANT_ID AS TENANT_ID
                    , I_DEPT_CD AS DEPT_CD
               FROM DUAL ) S
      ON (T.TENANT_ID = S.TENANT_ID AND T.DEPT_CD = S.DEPT_CD)
      WHEN MATCHED THEN
        UPDATE SET  DEPT_NM = I_DEPT_NM
                    , DEPT_DEPTH = I_DEPT_DEPTH
                    , PARENT_DEPT_CD = I_PARENT_DEPT_CD
                    , CENTER_KIND = I_CENTER_KIND
                    , LOC_KIND = I_LOC_KIND
                    , COM_KIND = I_COM_KIND
                    , MANAGER_ID = I_MANAGER_ID
                    , APPROVAL_ID1 = I_APPROVAL_ID1
                    , APPROVAL_ID2 = I_APPROVAL_ID2
                    , APPROVAL_ID3 = I_APPROVAL_ID3
                    , STAFF_YN = I_STAFF_YN
                    , INOUT_KIND = I_INOUT_KIND
                    , HIDE_YN = I_HIDE_YN
                    , BIGO = I_BIGO
                    , MODIFY_AGENT_ID = I_AGENT_ID
                    , MODIFY_DT = sysdate
      WHEN NOT MATCHED THEN
        INSERT 
        (TENANT_ID, DEPT_CD, DEPT_NM, DEPT_DEPTH, PARENT_DEPT_CD, CENTER_KIND, LOC_KIND, COM_KIND, MANAGER_ID, APPROVAL_ID1, APPROVAL_ID2, APPROVAL_ID3, STAFF_YN, INOUT_KIND, HIDE_YN, BIGO, SORT_NO, CREATE_AGENT_ID, CREATE_DT) 
        VALUES
        (I_TENANT_ID, N_DEPT_CD, I_DEPT_NM, I_DEPT_DEPTH, I_PARENT_DEPT_CD, I_CENTER_KIND, I_LOC_KIND, I_COM_KIND, I_MANAGER_ID, I_APPROVAL_ID1, I_APPROVAL_ID2, I_APPROVAL_ID3, I_STAFF_YN, I_INOUT_KIND, I_HIDE_YN, I_BIGO
         , N_SORT_NO, I_AGENT_ID, sysdate);
         
    --소속 삭제
    ELSIF I_GBN = 'D' THEN
      DELETE FROM TB_CM_DEPT_CD
      WHERE TENANT_ID = I_TENANT_ID
      AND DEPT_CD = I_DEPT_CD;
    
    END IF;
    
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1020M01_04 
(
  I_TENANT_ID        IN  VARCHAR2,
  I_DEPT_CD          IN  VARCHAR2,
  I_PARENT_DEPT_CD   IN  VARCHAR2,
  I_SORT_NO          IN  VARCHAR2,
  I_P_SORT_NO        IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM1020M01_04
   PURPOSE:    소속관리 순서 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/01/10
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1020M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

    CURSOR LOOPX IS
      --변경된 그룹내의 순차값을 가져온다
      SELECT 
        DEPT_CD, SORT_NO 
      FROM TB_CM_DEPT_CD 
      WHERE TENANT_ID = I_TENANT_ID
      AND PARENT_DEPT_CD = I_PARENT_DEPT_CD
      AND DEPT_CD <> I_DEPT_CD;
      
    BEGIN
      FOR R_LIST IN  LOOPX   LOOP
      -- 변경순번이 기존순번보다 작을경우 ▲ 변경순번과 같거나 큰수들은 +1을 해준다
      IF I_SORT_NO < I_P_SORT_NO and R_LIST.SORT_NO >= I_SORT_NO and  R_LIST.SORT_NO <= I_P_SORT_NO THEN
        UPDATE TB_CM_DEPT_CD SET 
          SORT_NO = R_LIST.SORT_NO+1
        WHERE TENANT_ID = I_TENANT_ID
        AND PARENT_DEPT_CD = I_PARENT_DEPT_CD
        AND DEPT_CD = R_LIST.DEPT_CD;
      -- 변경순번이 기존순번보다 클경우 ▼ 변경순번과 같거나 작은수들은 -1을 해준다
      ELSIF I_SORT_NO > I_P_SORT_NO and R_LIST.SORT_NO <= I_SORT_NO and  R_LIST.SORT_NO >= I_P_SORT_NO and R_LIST.SORT_NO != 0 THEN
        UPDATE TB_CM_DEPT_CD SET 
          SORT_NO = R_LIST.SORT_NO-1
        WHERE TENANT_ID = I_TENANT_ID
        AND PARENT_DEPT_CD = I_PARENT_DEPT_CD
        AND DEPT_CD = R_LIST.DEPT_CD;
      
      END IF;
      END LOOP;
      --변경순차값 업데이트 
      UPDATE TB_CM_DEPT_CD SET 
            SORT_NO = I_SORT_NO
          WHERE TENANT_ID = I_TENANT_ID
          AND PARENT_DEPT_CD = I_PARENT_DEPT_CD
          AND DEPT_CD = I_DEPT_CD;
        
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

create or replace PROCEDURE SP_CM1030M01_03 (
      I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_NOTI_ID        IN VARCHAR2
    , I_FILE_ID        IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM1030M01_03
   PURPOSE:    공지사항관리-삭제 OR 파일삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/03  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1030M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN
 
-- ********************************************************************************
-- 0.삭제
-- ********************************************************************************    
    IF (I_FILE_ID IS NULL ) THEN /* 공지사항 전체 삭제*/
   
       DELETE FROM TB_CM_NOTICE_HEADER WHERE TENANT_ID = I_TENANT_ID AND NOTI_ID = I_NOTI_ID ;
       DELETE FROM TB_CM_NOTICE_ATTACH WHERE TENANT_ID = I_TENANT_ID AND NOTI_ID = I_NOTI_ID ;
       DELETE FROM TB_CM_NOTICE_TARGET WHERE TENANT_ID = I_TENANT_ID AND NOTI_ID = I_NOTI_ID ;
       COMMIT;
    ELSE        
       DELETE FROM TB_CM_NOTICE_ATTACH WHERE TENANT_ID = I_TENANT_ID AND NOTI_ID = I_NOTI_ID ;
       COMMIT;  
    END IF;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1030M01_04 (
      I_READ_HIST_YN   IN VARCHAR2  /* 조회이력 여부 */
    , I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_NOTI_ID        IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1030M01_04
   PURPOSE:    공지사항관리- 공지사항조회 / 조회이력 추가 / 수정을 위한 조회 일 경우 조회이력 처리 안함

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/09  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1030M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN

IF I_READ_HIST_YN = 'Y' THEN  /* 조회 인 경우만 조회이력 처리 */
-- ********************************************************************************
-- 0.공지사항 조회수 갱신
-- ********************************************************************************   
UPDATE TB_CM_NOTICE_HEADER SET READ_CNT = READ_CNT +1 WHERE TENANT_ID = I_TENANT_ID AND NOTI_ID = I_NOTI_ID ;

-- ********************************************************************************
-- 1.공지사항 조회여부 갱신
-- ********************************************************************************  
 MERGE INTO TB_CM_NOTICE_TARGET T
    USING (SELECT   I_NOTI_ID AS NOTI_ID
                  , I_TENANT_ID AS TENANT_ID
                  , I_LOGIN_ID AS TARGET_MEMB
             FROM DUAL ) S
    ON (  T.TENANT_ID = S.TENANT_ID 
      AND T.NOTI_ID   = S.NOTI_ID
      AND T.TARGET_MEMB = S.TARGET_MEMB)
    WHEN MATCHED THEN
      UPDATE SET    READ_YN = 1
                  , READ_DATE = SYSTIMESTAMP
      /* 타겟 대상만 쌓아야 할까??
    WHEN NOT MATCHED THEN
      INSERT(   TENANT_ID
              , NOTI_ID
              , TARGET_MEMB
              , READ_YN
              , READ_DATE

      ) VALUES ( S. TENANT_ID
               , S. NOTI_ID
                , S. TARGET_MEMB
                , 1
                , SYSTIMESTAMP
      )  
      */
      ;
    COMMIT; 
 END IF;
 
-- ********************************************************************************
-- 3.공지사항 조회
-- ********************************************************************************   
 OPEN O_CUR_LIST FOR 
 SELECT   A.NOTI_ID
            ,A.NOTI_NO
            ,A.NOTI_TITLE
            ,A.NOTI_GUBUN
            ,A.NOTI_GRADE
            ,DBMS_LOB.SUBSTR(A.NOTI_CONTENTS, DBMS_LOB.GETLENGTH(A.NOTI_CONTENTS),1) AS NOTI_CONTENTS
            ,A.NOTI_SCOPE
            ,FN_CM_GET_CODE_NM(I_TENANT_ID,'NOTI_GUBUN',A.NOTI_GUBUN) AS NOTI_GUBUN_NM
            ,FN_CM_GET_CODE_NM(I_TENANT_ID,'NOTI_GRADE',A.NOTI_GRADE) AS NOTI_GRADE_NM
            ,FN_CM_STRING_FORMAT(A.FRM_DATE, '@@@@-@@-@@') AS FRM_DATE
            ,FN_CM_STRING_FORMAT(A.END_DATE, '@@@@-@@-@@') AS END_DATE
           ,TO_CHAR ( A.READ_CNT , 'FM9,999,999' ) AS READ_CNT
          ,(CASE WHEN A.NOTI_SCOPE = '전체' THEN 0 ELSE 
              (SELECT COUNT(S.TARGET_MEMB)
                 FROM TB_CM_NOTICE_TARGET S WHERE S.TENANT_ID = I_TENANT_ID AND S.NOTI_ID = A.NOTI_ID ) END)
             AS TARGET_CNT
          ,(SELECT COUNT(S.FILE_ID)
             FROM TB_CM_NOTICE_ATTACH S WHERE S.TENANT_ID = I_TENANT_ID AND S.NOTI_ID = A.NOTI_ID ) AS ATTACH_FILE_CNT  
             ,A.CREATE_AGENT_ID
             ,FN_CM_GET_AGENT_NM(I_TENANT_ID,A.CREATE_AGENT_ID) AS CREATE_AGENT_NM
             ,A.MODIFY_AGENT_ID
             ,FN_CM_GET_AGENT_NM(I_TENANT_ID,A.MODIFY_AGENT_ID) AS MODIFY_AGENT_NM
             ,FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.CREATE_AGENT_ID) AS CREATE_AGENT_INFO
              ,TO_CHAR(A.CREATE_DT,'YYYY-MM-DD HH24:MI:SS') AS CREATE_DT
             ,TO_CHAR(A.MODIFY_DT,'YYYY-MM-DD HH24:MI:SS') AS MODIFY_DT
  FROM TB_CM_NOTICE_HEADER A 
  WHERE TENANT_ID = I_TENANT_ID AND NOTI_ID = I_NOTI_ID ; 


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1030M01_05 (
      I_TENANT_ID      IN  VARCHAR2     
    , I_LOGIN_ID       IN  VARCHAR2  /* 로그인사용자ID */
    , I_NOTI_ID        IN  VARCHAR2
    , O_CUR_LIST       OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1030M01_04
   PURPOSE:    공지사항관리- 공지사항 첨부파일 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/09  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1030M01_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN
 
-- ********************************************************************************
-- 0.공지사항 - 첨부파일 조회
-- ********************************************************************************   

 OPEN O_CUR_LIST FOR 
 SELECT   A.NOTI_ID
        ,A.TENANT_ID
        ,A.FILE_ID
        ,A.FILE_PATH
        ,A.REALFILE_NM
        ,A.USERFILE_NM
  FROM TB_CM_NOTICE_ATTACH A 
  WHERE TENANT_ID = I_TENANT_ID AND NOTI_ID = I_NOTI_ID ; 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1030M01_06 (
      I_TENANT_ID      IN   VARCHAR2     
    , I_LOGIN_ID       IN   VARCHAR2  /* 로그인사용자ID */
    , I_NOTI_ID        IN   VARCHAR2
    , O_CUR_LIST       OUT  SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1030M01_06
   PURPOSE:    공지사항관리- 공지사항 대상 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/09  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1030M01_06';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN
 
-- ********************************************************************************
-- 0.공지사항 -대상 조회
-- ********************************************************************************   

 OPEN O_CUR_LIST FOR 
 SELECT   A.NOTI_ID
        , A.TENANT_ID
        , A.TARGET_MEMB
        , B.AGENT_NM
        , B.SABUN
        , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'center', B.DEPT_CD) AS CENTER
        , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'part', B.DEPT_CD) AS PART
        , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'team', B.DEPT_CD) AS TEAM
        , FN_CM_GET_DEPT_NM( I_TENANT_ID,'jo', B.DEPT_CD) AS JO
        ,A.READ_YN
        ,TO_CHAR(A.READ_DATE,'YYYY-MM-DD HH24:MI:SS') AS READ_DATE
  FROM TB_CM_NOTICE_TARGET A 
 INNER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.TARGET_MEMB =  B.AGENT_ID )
  WHERE A.TENANT_ID = I_TENANT_ID AND A.NOTI_ID = I_NOTI_ID ; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1030M01_07 (
      I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_NOTI_ID        IN VARCHAR2
    , I_FILE_PATH      IN VARCHAR2
    , I_REALFILE_NM    IN VARCHAR2
    , I_USERFILE_NM    IN VARCHAR2   
) AS 
/******************************************************************************
   NAME:       SP_CM1030M01_07
   PURPOSE:    공지사항관리- 공지사항 첨부파일 등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/13  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1030M01_07';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
     V_FILE_ID NUMBER := 0;
BEGIN
 
-- ********************************************************************************
-- 0.공지사항 - 첨부파일 등록
-- ********************************************************************************   
   -- KEY 생성
     SELECT NVL(MAX(FILE_ID),0) + 1
        INTO V_FILE_ID
     FROM TB_CM_NOTICE_ATTACH WHERE  TENANT_ID = I_TENANT_ID AND NOTI_ID = I_NOTI_ID ;

    INSERT INTO TB_CM_NOTICE_ATTACH (TENANT_ID
                                  ,NOTI_ID
                                  ,FILE_ID
                                  ,FILE_PATH
                                  ,REALFILE_NM
                                  ,USERFILE_NM
    ) SELECT  I_TENANT_ID AS TENANT_ID 
             ,I_NOTI_ID AS NOTI_ID
             ,V_FILE_ID AS FILE_ID
             ,I_FILE_PATH AS FILE_PATH
             ,I_REALFILE_NM AS REALFILE_NM
             ,I_USERFILE_NM AS USERFILE_NM
  FROM DUAL ;
  COMMIT;
  
EXCEPTION
    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1030M01_08 (
   I_TENANT_ID  IN VARCHAR2
 , I_LOGIN_ID   IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM1030M01_01
   PURPOSE:    공지사항관리-조회  -  내가 봐야할 공지사항 조회 (dashboard에서 호출 시)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/19  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1030M01_08';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT   A.NOTI_ID
            ,A.NOTI_NO
            ,A.NOTI_TITLE
            ,A.NOTI_GUBUN
            ,A.NOTI_GRADE
            ,DBMS_LOB.SUBSTR(A.NOTI_CONTENTS, DBMS_LOB.GETLENGTH(A.NOTI_CONTENTS),1) AS NOTI_CONTENTS
            ,A.NOTI_SCOPE
            ,FN_CM_GET_CODE_NM(I_TENANT_ID,'NOTI_GUBUN',A.NOTI_GUBUN) AS NOTI_GUBUN_NM
            ,'● '|| FN_CM_GET_CODE_NM(I_TENANT_ID,'NOTI_GRADE',A.NOTI_GRADE) AS NOTI_GRADE_NM
           ,(CASE WHEN A.FRM_DATE IS NULL THEN '-' ELSE 
            FN_CM_STRING_FORMAT(A.FRM_DATE, '@@@@-@@-@@')||'~'||FN_CM_STRING_FORMAT(A.END_DATE, '@@@@-@@-@@') END ) AS NOTICE_PERIOD
	       ,(SELECT WM_CONCAT( S.FILE_PATH  ||'/'||S.REALFILE_NM) AS AA 
              FROM TB_CM_NOTICE_ATTACH S WHERE A.TENANT_ID = S.TENANT_ID AND S.NOTI_ID = A.NOTI_ID GROUP BY S.TENANT_ID,S.NOTI_ID ) AS ATTACH_FILE     
             ,(SELECT COUNT( S.FILE_ID) 
             FROM TB_CM_NOTICE_ATTACH S WHERE A.TENANT_ID = S.TENANT_ID AND S.NOTI_ID = A.NOTI_ID ) AS ATTACH_FILE_CNT               
             ,A.CREATE_AGENT_ID
            ,FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.CREATE_AGENT_ID) AS CREATE_AGENT_INFO
           ,TO_CHAR(A.MODIFY_DT,'YYYY-MM-DD') AS MODIFY_DT
           ,TO_CHAR ( A.READ_CNT , 'FM9,999,999' ) AS READ_CNT
     FROM TB_CM_NOTICE_HEADER A 
	     INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.CREATE_AGENT_ID = B.AGENT_ID
	    --JOIN TABLE(FN_CM_GET_TB_AGENT(:I_AGENT_ID)) B ON A.CREATE_AGENT_ID = B.AGENT_ID
	 WHERE 1=1 
     AND A.TENANT_ID = I_TENANT_ID
     AND  TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN NVL(A.FRM_DATE, TO_CHAR(SYSDATE,'YYYYMMDD')) AND NVL(A.END_DATE, TO_CHAR(SYSDATE,'YYYYMMDD'))     
     AND ((A.NOTI_SCOPE = '전체' AND 1=1 )
         OR (A.NOTI_SCOPE='개인' 
            AND EXISTS (SELECT S.TARGET_MEMB
		                  FROM TB_CM_NOTICE_TARGET S
		                 WHERE A.TENANT_ID   = S.TENANT_ID
		                   AND A.NOTI_ID     = S.NOTI_ID
		                   AND S.TARGET_MEMB = I_LOGIN_ID   )))
  ORDER BY A.NOTI_NO  DESC   
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1040M01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1040M01_01
   PURPOSE:    코드조회 (TREE)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/04 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM1040M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
    SELECT
      GR.SORT_CD AS DEPT_CD, 
      GR.SORT_NM AS DEPT_NM, 
      GR.SYSTEM_GUBUN AS PARENT_DEPT_CD
    FROM(
      SELECT
          CODE AS SORT_CD, 
          CODE_NM AS SORT_NM, 
          '#' AS SYSTEM_GUBUN
        FROM TB_CM_CODE WHERE 1=1
        AND TENANT_ID = I_TENANT_ID
        AND SORT_CD = 'SYSTEM_GUBUN'
      UNION ALL
      SELECT
        SORT_CD, 
        SORT_NM, 
        SYSTEM_GUBUN
      FROM TB_CM_CODE WHERE 1=1
      AND TENANT_ID = I_TENANT_ID
      GROUP BY SORT_CD, SORT_NM, SYSTEM_GUBUN) GR
    ORDER BY GR.SYSTEM_GUBUN, GR.SORT_CD;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1040M01_02 
(
    I_TENANT_ID      IN  VARCHAR2
  , I_SYSTEM_GUBUN   IN  VARCHAR2
  , I_SORT_CD        IN  VARCHAR2
  , O_CUR_LIST       OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1040M01_01
   PURPOSE:    코드조회 (GRID)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/04 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM1040M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  ########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
    SELECT
      CODE,
      CODE_NM,
      SYSTEM_GUBUN,
      CASE WHEN HIDE_YN = 0 THEN '사용'
           ELSE '미사용' END AS HIDE_YN,
      SORT,
      USER_DATA1,
      USER_DATA2,
      USER_DATA3,
      USER_DATA4,
      USER_DATA5,
      CODE AS O_CODE
    FROM TB_CM_CODE
    WHERE 1=1 
    AND TENANT_ID = I_TENANT_ID
    AND SYSTEM_GUBUN = I_SYSTEM_GUBUN
    AND SORT_CD = I_SORT_CD
    ORDER BY SORT;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1040M01_03 
(
  I_TENANT_ID       IN  VARCHAR2,
  I_GBN             IN  VARCHAR2,
  I_SYSTEM_GUBUN    IN  VARCHAR2,
  I_SORT_CD         IN  VARCHAR2,
  I_SORT_NM         IN  VARCHAR2,
  I_CODE            IN  VARCHAR2,
  I_CODE_NM         IN  VARCHAR2,
  I_HIDE_YN         IN  VARCHAR2,
  I_USER_DATA1      IN  VARCHAR2,
  I_USER_DATA2      IN  VARCHAR2,
  I_USER_DATA3      IN  VARCHAR2,
  I_USER_DATA4      IN  VARCHAR2,
  I_USER_DATA5      IN  VARCHAR2,
  I_SORT            IN  VARCHAR2,
  I_AGENT_ID        IN  VARCHAR2,
  I_N_SYSTEM_GUBUN  IN  VARCHAR2,
  I_N_SORT_CD       IN  VARCHAR2,
  I_N_CODE          IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM1040M01_03
   PURPOSE:    코드관리 데이터 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/01/10
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1040M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

BEGIN
    -- 신규코드등록
    IF I_GBN = 'SC' THEN
      INSERT INTO TB_CM_CODE 
        (TENANT_ID, SYSTEM_GUBUN, SORT_CD, SORT_NM, CODE, CODE_NM, HIDE_YN, USER_DATA1, USER_DATA2, USER_DATA3, USER_DATA4, USER_DATA5, CREATE_AGENT_ID, CREATE_DT, SORT) 
      VALUES
        (I_TENANT_ID, I_SYSTEM_GUBUN, I_SORT_CD, I_SORT_NM, I_CODE, I_CODE_NM, I_HIDE_YN, I_USER_DATA1, I_USER_DATA2, I_USER_DATA3, I_USER_DATA4, I_USER_DATA5, I_AGENT_ID, sysdate, I_SORT);
      
    -- 세스템구분, 분류코드, 분류명 변경
    ELSIF I_GBN = 'SU' THEN
      UPDATE TB_CM_CODE SET 
        SYSTEM_GUBUN = I_N_SYSTEM_GUBUN,
        SORT_CD = I_N_SORT_CD,
        SORT_NM = I_SORT_NM,
        MODIFY_AGENT_ID = I_AGENT_ID,
        MODIFY_DT = sysdate
      WHERE TENANT_ID = I_TENANT_ID
      AND SYSTEM_GUBUN = I_SYSTEM_GUBUN
      AND SORT_CD = I_SORT_CD;
      
    --분류코드, 세부코드 일괄삭제
    ELSIF I_GBN = 'SD' THEN
      DELETE FROM TB_CM_CODE 
        WHERE TENANT_ID = I_TENANT_ID
        AND SORT_CD = I_SORT_CD
        AND SYSTEM_GUBUN = I_SYSTEM_GUBUN;
    
    --세뷰코드내역변경
    ELSIF I_GBN = 'U' THEN
      UPDATE TB_CM_CODE SET 
        CODE = I_N_CODE,
        CODE_NM = I_CODE_NM, 
        HIDE_YN = I_HIDE_YN,
        SORT = I_SORT,
        USER_DATA1 = I_USER_DATA1, USER_DATA2 = I_USER_DATA2, USER_DATA3 = I_USER_DATA3, USER_DATA4 = I_USER_DATA4, USER_DATA5 = I_USER_DATA5,
        MODIFY_AGENT_ID = I_AGENT_ID,
        MODIFY_DT = sysdate
      WHERE TENANT_ID = I_TENANT_ID
      AND SYSTEM_GUBUN = I_SYSTEM_GUBUN
      AND SORT_CD = I_SORT_CD
      AND CODE = I_CODE;
    
    --세부코드삭제
    ELSIF I_GBN = 'D' THEN
      DELETE FROM TB_CM_CODE
      WHERE TENANT_ID = I_TENANT_ID
      AND SYSTEM_GUBUN = I_SYSTEM_GUBUN
      AND SORT_CD = I_SORT_CD
      AND CODE = I_CODE;    
    
      --세부코드 SORT 
    ELSIF I_GBN = 'S' THEN
      UPDATE TB_CM_CODE SET 
        SORT = I_SORT
      WHERE TENANT_ID = I_TENANT_ID
      AND SYSTEM_GUBUN = I_SYSTEM_GUBUN
      AND SORT_CD = I_SORT_CD
      AND CODE = I_CODE;
    END IF;
    
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1050M01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_SYSTEM_KIND IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1050M01_01
   PURPOSE:    메뉴조회 (TREE)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/14 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM1050M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 

      SELECT
            GR.SORT_CD AS DEPT_CD, 
            GR.SORT_NM AS DEPT_NM, 
            GR.SYSTEM_GUBUN AS PARENT_DEPT_CD,
            GR.SORT_SEQ,
            GR.SORT_SEQ1
          FROM(
            SELECT
                '#' AS SYSTEM_GUBUN,
                CODE AS SORT_CD, 
                CODE_NM AS SORT_NM,
                0 AS SORT_SEQ,
                SORT AS SORT_SEQ1
            FROM TB_CM_CODE WHERE 1=1
            AND TENANT_ID = I_TENANT_ID
            AND SORT_CD = 'SYSTEM_GUBUN'
            UNION ALL
            SELECT 
                SYSTEM_KIND AS SYSTEM_GUBUN
                ,SYSTEM_KIND||'^'||GROUP_NM AS SORT_CD
                ,GROUP_NM AS SORT_NM
                ,1 AS SORT_SEQ
                ,10 AS SORT_SEQ1
            FROM TB_CM_ARGOWFM_PGM
            WHERE 1=1
            AND TENANT_ID = I_TENANT_ID
            GROUP BY SYSTEM_KIND, GROUP_NM
            UNION ALL
            SELECT
                SYSTEM_KIND||'^'||GROUP_NM AS SYSTEM_GUBUN,
                PGM_ID AS SORT_CD, 
                PGM_NM AS SORT_NM,
                2 AS SORT_SEQ
                ,SORT_SEQ AS SORT_SEQ1
            FROM TB_CM_ARGOWFM_PGM
            WHERE 1=1
            AND TENANT_ID = I_TENANT_ID
          ) GR 
          WHERE 1=1
          AND (( I_SYSTEM_KIND IS NULL AND 1=1 ) OR (I_SYSTEM_KIND IS NOT NULL AND (INSTR(I_SYSTEM_KIND, GR.SORT_CD) > 0) OR INSTR(I_SYSTEM_KIND, GR.SYSTEM_GUBUN) > 0 OR INSTR(I_SYSTEM_KIND, SUBSTR(GR.SYSTEM_GUBUN, 1,INSTR(GR.SYSTEM_GUBUN,'^')-1))>0) ) 
          ORDER BY GR.SORT_SEQ, GR.SORT_SEQ1;
    
    
    /*
      SELECT
            GR.SORT_CD AS DEPT_CD, 
            GR.SORT_NM AS DEPT_NM, 
            GR.SYSTEM_GUBUN AS PARENT_DEPT_CD,
            GR.SORT_SEQ,
            GR.SORT_SEQ1
          FROM(
            SELECT
                '#' AS SYSTEM_GUBUN,
                CODE AS SORT_CD, 
                CODE_NM AS SORT_NM,
                SORT AS SORT_SEQ,
                SORT AS SORT_SEQ1
            FROM TB_CM_CODE WHERE 1=1
            AND TENANT_ID = I_TENANT_ID
            AND SORT_CD = 'SYSTEM_GUBUN'
            UNION ALL
            SELECT 
                SYSTEM_KIND AS SYSTEM_GUBUN
                ,SYSTEM_KIND||'^'||GROUP_NM AS SORT_CD
                ,GROUP_NM AS SORT_NM
                ,0 AS SORT_SEQ
                ,7 AS SORT_SEQ1
            FROM TB_CM_ARGOWFM_PGM
            WHERE 1=1
            AND TENANT_ID = I_TENANT_ID
            GROUP BY SYSTEM_KIND, GROUP_NM
            UNION ALL
            SELECT
                SYSTEM_KIND||'^'||GROUP_NM AS SYSTEM_GUBUN,
                PGM_ID AS SORT_CD, 
                PGM_NM AS SORT_NM,
                SORT_SEQ
                ,8 AS SORT_SEQ1
            FROM TB_CM_ARGOWFM_PGM
            WHERE 1=1
            AND TENANT_ID = I_TENANT_ID
            --ORDER BY SORT_SEQ
          ) GR 
          WHERE 1=1 
          ORDER BY GR.SORT_SEQ1, GR.SYSTEM_GUBUN, GR.SORT_CD, GR.SORT_SEQ;
       */

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1050M01_02 
(
    I_TENANT_ID   IN  VARCHAR2
    , I_PGM_ID    IN  VARCHAR2
    , O_CUR_LIST  OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1050M01_02
   PURPOSE:    메뉴조회 (상세내역)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/14 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM1050M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
      SELECT 
        SYSTEM_KIND,
        PGM_ID,
        PGM_PATH,
        GROUP_NM,
        PGM_NM,
        SORT_SEQ,
        HIDE_YN,
        BIGO
      FROM TB_CM_ARGOWFM_PGM 
      WHERE 1=1
      AND TENANT_ID = I_TENANT_ID
      AND PGM_ID = I_PGM_ID; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1050M01_03 
(
  I_TENANT_ID       IN  VARCHAR2,
  I_GBN             IN  VARCHAR2,
  I_PGM_ID          IN  VARCHAR2,
  I_SYSTEM_KIND     IN  VARCHAR2,
  I_PGM_PATH        IN  VARCHAR2,
  I_GROUP_NM        IN  VARCHAR2,
  I_PGM_NM          IN  VARCHAR2,
  I_SORT_SEQ        IN  VARCHAR2,
  I_HIDE_YN         IN  VARCHAR2,
  I_BIGO            IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM1050M01_03
   PURPOSE:    메뉴관리 데이터 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/01/10
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1050M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

BEGIN
    -- 메뉴 수정 등록
    IF I_GBN = 'U' THEN
      MERGE INTO TB_CM_ARGOWFM_PGM T
      USING (SELECT   I_TENANT_ID AS TENANT_ID
                    , I_PGM_ID AS PGM_ID
               FROM DUAL ) S
      ON (T.TENANT_ID = S.TENANT_ID AND T.PGM_ID = S.PGM_ID)
      WHEN MATCHED THEN
        UPDATE SET  SYSTEM_KIND = I_SYSTEM_KIND
                    , PGM_PATH = I_PGM_PATH
                    , GROUP_NM = I_GROUP_NM
                    , PGM_NM = I_PGM_NM
                    , HIDE_YN = I_HIDE_YN
                    , BIGO = I_BIGO
      WHEN NOT MATCHED THEN
        INSERT (TENANT_ID, PGM_ID, SYSTEM_KIND, PGM_PATH, GROUP_NM, PGM_NM, SORT_SEQ, HIDE_YN, BIGO) 
        VALUES
        (I_TENANT_ID, I_PGM_ID, I_SYSTEM_KIND, I_PGM_PATH, I_GROUP_NM, I_PGM_NM, (SELECT MAX(SORT_SEQ+10) FROM TB_CM_ARGOWFM_PGM WHERE 1=1 AND TENANT_ID =I_TENANT_ID), I_HIDE_YN, I_BIGO);
         
    --메뉴 삭제
    ELSIF I_GBN = 'D' THEN
      DELETE FROM TB_CM_ARGOWFM_PGM
      WHERE TENANT_ID = I_TENANT_ID
      AND PGM_ID = I_PGM_ID;
    
    --순서변경
    --ELSIF I_GBN = 'S' THEN
    --UPDATE TB_CM_ARGOWFM_PGM SET 
    --    SORT_SEQ = I_SORT_SEQ
    --  WHERE TENANT_ID = I_TENANT_ID
    --  AND (SYSTEM_KIND||'^'||GROUP_NM) = I_GROUP_NM
    --  AND PGM_ID = I_PGM_ID;      
      
    END IF;
    
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1050M01_04 
(
  I_TENANT_ID        IN  VARCHAR2,
  I_PGM_ID           IN  VARCHAR2,
  I_GROUP_CD         IN  VARCHAR2,
  I_SORT_SEQ         IN  VARCHAR2,
  I_P_SORT_SEQ       IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM1050M01_04
   PURPOSE:    메뉴관리 순서 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/01/10
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1050M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

    CURSOR LOOPX IS
      --변경된 그룹내의 순차값을 가져온다
      SELECT 
        PGM_ID, SORT_SEQ 
      FROM TB_CM_ARGOWFM_PGM 
      WHERE TENANT_ID = I_TENANT_ID
      AND SYSTEM_KIND||'^'||GROUP_NM = I_GROUP_CD
      AND PGM_ID <> I_PGM_ID;
      
    BEGIN
      FOR R_LIST IN  LOOPX   LOOP
      -- 변경순번이 기존순번보다 작을경우 ▲ 변경순번과 같거나 큰수들은 +1을 해준다
      IF I_SORT_SEQ < I_P_SORT_SEQ and R_LIST.SORT_SEQ >= I_SORT_SEQ and  R_LIST.SORT_SEQ <= I_P_SORT_SEQ THEN
        UPDATE TB_CM_ARGOWFM_PGM SET 
          SORT_SEQ = R_LIST.SORT_SEQ+1
        WHERE TENANT_ID = I_TENANT_ID
        AND SYSTEM_KIND||'^'||GROUP_NM = I_GROUP_CD
        AND PGM_ID = R_LIST.PGM_ID;
      -- 변경순번이 기존순번보다 클경우 ▼ 변경순번과 같거나 작은수들은 -1을 해준다
      ELSIF I_SORT_SEQ > I_P_SORT_SEQ and R_LIST.SORT_SEQ <= I_SORT_SEQ and  R_LIST.SORT_SEQ >= I_P_SORT_SEQ and R_LIST.SORT_SEQ != 0 THEN
        UPDATE TB_CM_ARGOWFM_PGM SET 
          SORT_SEQ = R_LIST.SORT_SEQ-1
        WHERE TENANT_ID = I_TENANT_ID
        AND SYSTEM_KIND||'^'||GROUP_NM = I_GROUP_CD
        AND PGM_ID = R_LIST.PGM_ID;
      
      END IF;
      END LOOP;
      --변경순차값 업데이트 
      UPDATE TB_CM_ARGOWFM_PGM SET 
            SORT_SEQ = I_SORT_SEQ
          WHERE TENANT_ID = I_TENANT_ID
          AND SYSTEM_KIND||'^'||GROUP_NM = I_GROUP_CD
          AND PGM_ID = I_PGM_ID;
        
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1060M01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM1060M01_01
   PURPOSE:    환경설정

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/14 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM1060M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
      SELECT SNO,
              PW_COMBI_YN,
              PW_REUSE_YN,
              PW_MAX_PERIOD,
              PW_FIRST_CHANGE_YN,
              PW_INIT,
              PW_INIT_TXT,
              PW_MEMORY,
              AC_FAIL_LOCK_YN,
              AC_NOTUSE_LOCK_YN,
              DI_DEPT_VISIBLE1,
              DI_DEPT_VISIBLE2,
              DI_DEPT_VISIBLE3,
              DI_DEPT_VISIBLE4,
              DI_DEPT_TXT1,
              DI_DEPT_TXT2,
              DI_DEPT_TXT3,
              DI_DEPT_TXT4,
              DI_AGT_VISIBLE1,
              DI_AGT_VISIBLE2,
              DI_AGT_VISIBLE3,
              DI_AGT_VISIBLE4,
              DI_AGT_TXT1,
              DI_AGT_TXT2,
              DI_AGT_TXT3,
              DI_AGT_TXT4,
              DI_TEL_TYPE,
              DI_RNO_TYPE,
              EN_PW_TYPE,
              EN_IN_TYPE,
              EN_IN_KEY,
              EX_USE_VER,
              FN_CM_GET_AGENT_INFO(I_TENANT_ID, CREATE_AGENT_ID) AS CREATE_AGENT_ID,
              TO_CHAR(CREATE_DT, 'YYYY-MM-DD HH24:mi:ss') AS CREATE_DT
            FROM TB_CM_ARGOWFM_CONFIG 
            WHERE 1=1
            AND TENANT_ID = I_TENANT_ID 
            AND SNO = (SELECT MAX(SNO) FROM TB_CM_ARGOWFM_CONFIG);

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1060M01_02 
(
     I_TENANT_ID          IN  VARCHAR2
    ,I_PW_COMBI_YN        IN  VARCHAR2
    ,I_PW_REUSE_YN        IN  VARCHAR2
    ,I_PW_MAX_PERIOD      IN  VARCHAR2
    ,I_PW_FIRST_CHANGE_YN IN  VARCHAR2
    ,I_PW_INIT            IN  VARCHAR2
    ,I_PW_INIT_TXT        IN  VARCHAR2
    ,I_PW_MEMORY          IN  VARCHAR2
    ,I_AC_FAIL_LOCK_YN    IN  VARCHAR2
    ,I_AC_NOTUSE_LOCK_YN  IN  VARCHAR2
    ,I_DI_DEPT_VISIBLE1   IN  VARCHAR2
    ,I_DI_DEPT_VISIBLE2   IN  VARCHAR2
    ,I_DI_DEPT_VISIBLE3   IN  VARCHAR2
    ,I_DI_DEPT_VISIBLE4   IN  VARCHAR2
    ,I_DI_DEPT_TXT1       IN  VARCHAR2
    ,I_DI_DEPT_TXT2       IN  VARCHAR2
    ,I_DI_DEPT_TXT3       IN  VARCHAR2
    ,I_DI_DEPT_TXT4       IN  VARCHAR2
    ,I_DI_AGT_VISIBLE1    IN  VARCHAR2
    ,I_DI_AGT_VISIBLE2    IN  VARCHAR2
    ,I_DI_AGT_VISIBLE3    IN  VARCHAR2
    ,I_DI_AGT_VISIBLE4    IN  VARCHAR2
    ,I_DI_AGT_TXT1        IN  VARCHAR2
    ,I_DI_AGT_TXT2        IN  VARCHAR2
    ,I_DI_AGT_TXT3        IN  VARCHAR2
    ,I_DI_AGT_TXT4        IN  VARCHAR2
    ,I_DI_TEL_TYPE        IN  VARCHAR2
    ,I_DI_RNO_TYPE        IN  VARCHAR2
    ,I_EN_PW_TYPE         IN  VARCHAR2
    ,I_EN_IN_TYPE         IN  VARCHAR2
    ,I_EN_IN_KEY          IN  VARCHAR2
    ,I_EX_USE_VER         IN  VARCHAR2
    ,I_CREATE_AGENT_ID    IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM1060M01_02
   PURPOSE:    환경설정 등록

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/14 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM1060M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
    I_N_SNO              VARCHAR2(10);
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
    -- SNO 생성 yyyymmdd0000 기준으로 1씩증가 
    SELECT 
      CASE WHEN CHK.SNO is null THEN TO_CHAR(sysdate, 'YYYYMMDD')||'01'
      ELSE TO_CHAR(sysdate, 'YYYYMMDD')||SUBSTR(CHK.SNO,9,4)
      END INTO I_N_SNO
    FROM
      (SELECT 
        MAX(SNO+1) AS SNO
      FROM TB_CM_ARGOWFM_CONFIG WHERE 1=1 AND TB_CM_ARGOWFM_CONFIG.TENANT_ID = I_TENANT_ID
      AND TO_CHAR(CREATE_DT, 'YYYYMMDD') = TO_CHAR(sysdate, 'YYYYMMDD')) CHK ;
    
    INSERT INTO TB_CM_ARGOWFM_CONFIG (TENANT_ID, 
                                      SNO, 
                                      PW_COMBI_YN,
                                      PW_REUSE_YN,
                                      PW_MAX_PERIOD,
                                      PW_FIRST_CHANGE_YN,
                                      PW_INIT,
                                      PW_INIT_TXT,
                                      PW_MEMORY,
                                      AC_FAIL_LOCK_YN,
                                      AC_NOTUSE_LOCK_YN,
                                      DI_DEPT_VISIBLE1,
                                      DI_DEPT_VISIBLE2,
                                      DI_DEPT_VISIBLE3,
                                      DI_DEPT_VISIBLE4,
                                      DI_DEPT_TXT1,
                                      DI_DEPT_TXT2,
                                      DI_DEPT_TXT3,
                                      DI_DEPT_TXT4,
                                      DI_AGT_VISIBLE1,
                                      DI_AGT_VISIBLE2,
                                      DI_AGT_VISIBLE3,
                                      DI_AGT_VISIBLE4,
                                      DI_AGT_TXT1,
                                      DI_AGT_TXT2,
                                      DI_AGT_TXT3,
                                      DI_AGT_TXT4,
                                      DI_TEL_TYPE,
                                      DI_RNO_TYPE,
                                      EN_PW_TYPE,
                                      EN_IN_TYPE,
                                      EN_IN_KEY,
                                      EX_USE_VER,
                                      CREATE_AGENT_ID, 
                                      CREATE_DT) 
                                    VALUES
                                     (I_TENANT_ID, 
                                      I_N_SNO, 
                                      I_PW_COMBI_YN,
                                      I_PW_REUSE_YN,
                                      I_PW_MAX_PERIOD,
                                      I_PW_FIRST_CHANGE_YN,
                                      I_PW_INIT,
                                      I_PW_INIT_TXT,
                                      I_PW_MEMORY,
                                      I_AC_FAIL_LOCK_YN,
                                      I_AC_NOTUSE_LOCK_YN,
                                      I_DI_DEPT_VISIBLE1,
                                      I_DI_DEPT_VISIBLE2,
                                      I_DI_DEPT_VISIBLE3,
                                      I_DI_DEPT_VISIBLE4,
                                      I_DI_DEPT_TXT1,
                                      I_DI_DEPT_TXT2,
                                      I_DI_DEPT_TXT3,
                                      I_DI_DEPT_TXT4,
                                      I_DI_AGT_VISIBLE1,
                                      I_DI_AGT_VISIBLE2,
                                      I_DI_AGT_VISIBLE3,
                                      I_DI_AGT_VISIBLE4,
                                      I_DI_AGT_TXT1,
                                      I_DI_AGT_TXT2,
                                      I_DI_AGT_TXT3,
                                      I_DI_AGT_TXT4,
                                      I_DI_TEL_TYPE,
                                      I_DI_RNO_TYPE,
                                      I_EN_PW_TYPE,
                                      I_EN_IN_TYPE,
                                      I_EN_IN_KEY,
                                      I_EX_USE_VER,
                                      I_CREATE_AGENT_ID, 
                                      sysdate);  
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_CM2010M01_01 (
   I_TENANT_ID    IN  VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM2010M01_01
   PURPOSE:    권한설정-권한조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/19  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
     SELECT  A.TENANT_ID
            ,A.GRANT_ID
            ,A.GRANT_NM
            ,NVL(A.HIDE_YN,0) AS HIDE_YN
        --    ,CASE WHEN NVL(A.HIDE_YN,0) = 0 THEN 1 ELSE 0 END AS HIDE_YN 
            ,(SELECT COUNT(S.AGENT_ID) FROM TB_CM_USER_MASTER S WHERE S.TENANT_ID = A.TENANT_ID AND S.GRANT_ID = A.GRANT_ID) AS AGENT_CNT
            ,A.JIKCHK_DEFAULT
            ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.JIKCHK_DEFAULT) AS JIKCHK_DEFAULT_NM
   FROM TB_CM_GRANT_HEADER A
   WHERE 1=1 -- NVL(A.HIDE_YN,0) = 0 
     AND A.TENANT_ID = I_TENANT_ID
     ; 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_CM2010M01_02 (
   I_TENANT_ID  IN VARCHAR2
 , I_GRANT_ID   IN VARCHAR2   
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM2010M01_02
   PURPOSE:    권한설정-권한메뉴 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/20  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT     A.SYSTEM_KIND
              ,FN_CM_GET_CODE_NM(I_TENANT_ID,'SYSTEM_GUBUN', A.SYSTEM_KIND) AS SYSTEM_KIND_NM
 /*             ,CASE A.SYSTEM_KIND WHEN 'HR' THEN '인사관리'
                                  WHEN 'QA' THEN '통화품질'
                                  WHEN 'EDU' THEN '교육관리'
                                  WHEN 'KPI' THEN '성과실적'
                                  WHEN 'CM' THEN '통합관리' END||'('|| A.SYSTEM_KIND||')'AS SYSTEM_KIND_NM   */
              ,A.GROUP_NM
              ,A.PGM_ID
              ,A.PGM_NM
              ,CASE WHEN B.EDIT_GRANT = 'A' THEN B.EDIT_GRANT ELSE '0' END AS GRANT_ADMIN
              ,CASE WHEN B.EDIT_GRANT = 'W' THEN B.EDIT_GRANT ELSE '0' END AS GRANT_WRITE
              ,CASE WHEN B.EDIT_GRANT = 'R' THEN B.EDIT_GRANT ELSE '0' END AS GRANT_READ
              ,CASE WHEN NVL(B.EDIT_GRANT,'N') = 'N' THEN 'N' ELSE '0' END AS GRANT_NO              
              ,NVL(B.EXCEL_YN,0)     AS EXCEL_YN
              ,NVL(B.SCOPE_KIND,' ') AS SCOPE_KIND
              ,NVL(B.EDIT_GRANT,'N') AS EDIT_GRANT
             ,ROW_NUMBER () OVER (PARTITION BY A.SYSTEM_KIND,A.GROUP_NM ORDER BY A.SORT_SEQ ASC) IDX
          FROM TB_CM_ARGOWFM_PGM A
          LEFT OUTER JOIN TB_CM_GRANT_MENU B ON (A.TENANT_ID = B.TENANT_ID AND A.PGM_ID = B.PGM_ID AND B.GRANT_ID = I_GRANT_ID)
          WHERE 1=1
             AND A.TENANT_ID = I_TENANT_ID
             AND A.HIDE_YN = 0
          ORDER BY A.SYSTEM_KIND, A.PGM_ID, SORT_SEQ   ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2010M01_04 (
      I_TENANT_ID      IN VARCHAR2
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_CUD_GUBUN      IN VARCHAR2  /* C/U/D  */    
    , I_GRANT_ID       IN VARCHAR2
    , I_GRANT_NM       IN VARCHAR2
    , I_HIDE_YN        IN NUMBER
    , I_JIKCHK_DEFAULT IN VARCHAR2
    , O_CUR_LIST       OUT SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_CM2010M01_04
   PURPOSE:    권한설정 - 권한 등록/수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/24  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2010M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

    V_GRANT_ID VARCHAR2(50) := I_GRANT_ID;
    
 	 V_RESULT_CD        VARCHAR2(40)  :='SUCCESS'; /* 중복일 경우 구분하기 위해 */
	 V_RESULT_MSG       VARCHAR2(200) :='';
	 V_DUP_CNT          NUMBER(3)     :=0 ;
   
 BEGIN
 
-- ********************************************************************************
-- 0.기본권한 중복 체크
-- ******************************************************************************** 
  IF I_JIKCHK_DEFAULT IS NOT NULL THEN
   SELECT COUNT(*) INTO V_DUP_CNT
     FROM TB_CM_GRANT_HEADER A
    WHERE A.TENANT_ID =  I_TENANT_ID
      AND (   (I_CUD_GUBUN = 'I' AND 1=1)
           OR (I_CUD_GUBUN = 'U' AND A.GRANT_ID != V_GRANT_ID)
          )
         AND A.JIKCHK_DEFAULT =  I_JIKCHK_DEFAULT
      AND NVL(A.HIDE_YN,0) = 0
      ;
   END IF;
 
   IF V_DUP_CNT > 0 THEN
    V_RESULT_CD := 'FAIL' ;
    V_RESULT_MSG:= '동일한 [기본권한]이 존재합니다.' ;
    
   ELSE /* 중복건이 없으면 처리 */	    
  
	-- ********************************************************************************
	-- 0.등록/수정/삭제
	-- ********************************************************************************    
	  IF (I_CUD_GUBUN ='I') THEN
	         SELECT LPAD(NVL(MAX(GRANT_ID),0)+1 ,11, '0') INTO V_GRANT_ID FROM TB_CM_GRANT_HEADER WHERE TENANT_ID = I_TENANT_ID ;
	  END IF;
	    
	    MERGE INTO TB_CM_GRANT_HEADER T
	    USING (SELECT   V_GRANT_ID  AS GRANT_ID
	                  , I_TENANT_ID AS TENANT_ID
	                  , I_GRANT_NM  AS GRANT_NM
	                  , NVL(I_HIDE_YN,1)   AS HIDE_YN /* 사용여부로 표기 되므로 */
	                  , I_JIKCHK_DEFAULT AS JIKCHK_DEFAULT
	             FROM DUAL ) S
	    ON ( T.TENANT_ID = S.TENANT_ID AND T.GRANT_ID = S.GRANT_ID )
	    WHEN MATCHED THEN
	      UPDATE SET    GRANT_NM        = S.GRANT_NM
	                  , HIDE_YN         = S.HIDE_YN
	                  , JIKCHK_DEFAULT  = S.JIKCHK_DEFAULT
	                  , MODIFY_AGENT_ID = I_LOGIN_ID
	                  , MODIFY_DT       = SYSTIMESTAMP
	    WHEN NOT MATCHED THEN
	      INSERT(     GRANT_ID
	                , TENANT_ID
	                , GRANT_NM
	                , HIDE_YN
	                , JIKCHK_DEFAULT
	                , CREATE_AGENT_ID
	                , CREATE_DT
	                , MODIFY_AGENT_ID
	                , MODIFY_DT
	      ) VALUES (
	                S. GRANT_ID
	              , S. TENANT_ID
	              , S. GRANT_NM
	              , S. HIDE_YN
	              , S. JIKCHK_DEFAULT
	              , I_LOGIN_ID
	              , SYSTIMESTAMP
	              , I_LOGIN_ID
	              , SYSTIMESTAMP
	      )  ;
	      
	    COMMIT; 
 END IF;
 
-- ********************************************************************************
-- 2.처리 결과 리턴
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
 SELECT V_GRANT_ID   AS KEY_ID
	   ,V_RESULT_CD   AS RESULT_CD
	   ,V_RESULT_MSG  AS RESULT_MSG 
  FROM DUAL ; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
         RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2010M01_05 (
      I_TENANT_ID      IN VARCHAR2
    , I_LOGIN_ID       IN VARCHAR2
    , I_GRANT_ID       IN VARCHAR2
    , I_PGM_ID         IN VARCHAR2
    , I_EDIT_GRANT     IN VARCHAR2
    , I_SCOPE_KIND     IN VARCHAR2
    , I_EXCEL_YN       IN NUMBER
) AS 
/******************************************************************************
   NAME:       SP_CM2010M01_05
   PURPOSE:    권한설정 - 권한메뉴 등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/24  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2010M01_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 BEGIN
 
-- ********************************************************************************
-- 0.등록 / 선 삭제 후 처리 이므로 무조건 INSERT 
-- ********************************************************************************    
    INSERT INTO TB_CM_GRANT_MENU 
          ( GRANT_ID
          , TENANT_ID
          , PGM_ID
          , EDIT_GRANT
          , SCOPE_KIND
          , EXCEL_YN
          , CREATE_AGENT_ID
          , CREATE_DT
          , MODIFY_AGENT_ID
          , MODIFY_DT )
    SELECT  I_GRANT_ID  AS GRANT_ID
          , I_TENANT_ID  AS TENANT_ID
          , I_PGM_ID     AS PGM_ID
          , I_EDIT_GRANT AS EDIT_GRANT
          , I_SCOPE_KIND AS SCOPE_KIND
          , I_EXCEL_YN   AS EXCEL_YN
          , I_LOGIN_ID   AS CREATE_AGENT_ID
          , SYSTIMESTAMP AS CREATE_DT
          , I_LOGIN_ID   AS MODIFY_AGENT_ID
          , SYSTIMESTAMP AS MODIFY_DT
      FROM DUAL ;    
     
    COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
         RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2010M01_06 (
      I_TENANT_ID      IN VARCHAR2
    , I_LOGIN_ID       IN VARCHAR2
    , I_GRANT_ID       IN VARCHAR2
    , I_DEPT_CD        IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM2010M01_06
   PURPOSE:    권한설정 - 권한조직 등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/24  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2010M01_06';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 BEGIN
 
-- ********************************************************************************
-- 0.등록 / 선 삭제 후 처리 이므로 무조건 INSERT 
-- ********************************************************************************    
    INSERT INTO TB_CM_GRANT_SCOPE 
          ( GRANT_ID
          , TENANT_ID
          , DEPT_CD
          , CREATE_AGENT_ID
          , CREATE_DT
          , MODIFY_AGENT_ID
          , MODIFY_DT )
    SELECT  I_GRANT_ID   AS GRANT_ID
          , I_TENANT_ID  AS TENANT_ID
          , I_DEPT_CD    AS DEPT_CD
          , I_LOGIN_ID   AS CREATE_AGENT_ID
          , SYSTIMESTAMP AS CREATE_DT
          , I_LOGIN_ID   AS MODIFY_AGENT_ID
          , SYSTIMESTAMP AS MODIFY_DT
      FROM DUAL ;    
     
    COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
         RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2010M01_07 (
      I_TENANT_ID      IN VARCHAR2
    , I_LOGIN_ID       IN VARCHAR2
    , I_GRANT_ID       IN VARCHAR2
    , I_DEL_SCOPE      IN VARCHAR2 /* ALL / DETAIL */
) AS 
/******************************************************************************
   NAME:       SP_CM2010M01_07
   PURPOSE:    권한설정 - 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/24  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2010M01_07';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 BEGIN
 
-- ********************************************************************************
-- 0.삭제
-- ********************************************************************************    
   IF I_DEL_SCOPE = 'ALL' THEN
      DELETE FROM TB_CM_GRANT_HEADER WHERE TENANT_ID = I_TENANT_ID AND GRANT_ID = I_GRANT_ID ;
      COMMIT;
   END IF;

    DELETE FROM TB_CM_GRANT_MENU   WHERE TENANT_ID = I_TENANT_ID AND GRANT_ID = I_GRANT_ID ;
    DELETE FROM TB_CM_GRANT_SCOPE  WHERE TENANT_ID = I_TENANT_ID AND GRANT_ID = I_GRANT_ID ;
    COMMIT;  
 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
         RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2020S01_02 (
   I_TENANT_ID    IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2  
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM2020S01_02
   PURPOSE:    권한부여/조회 > 권한변경이력 팝업 - 권한변경이력조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/20  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2020S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
   OPEN O_CUR_LIST FOR 
   SELECT TO_CHAR(A.MODIFY_DT, 'YYYY-MM-DD') AS MODIFY_DT
         ,FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.MODIFY_AGENT_ID) AS MODIFY_AGENT_INFO
         ,A.ASIS_GRANT_NM AS BEFORE_NM
         ,A.TOBE_GRANT_NM AS AFTER_NM
   FROM TB_CM_GRANT_HISTORY A
    WHERE 1=1
     AND A.TENANT_ID = I_TENANT_ID
     AND A.AGENT_ID  = I_AGENT_ID
     ORDER BY A.MODIFY_DT DESC
     ; 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2020S01_03 (
   I_TENANT_ID    IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2  
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM2020S01_03
   PURPOSE:    권한부여/조회 > 권한변경이력 팝업 - 발령변경이력조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/20  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2020S01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************   
/* 발령구분 신규/전체/퇴직 인 경우는 대표적으로 업무그룹을 표기 */
   OPEN O_CUR_LIST FOR 
   SELECT TO_CHAR(A.WORK_YMD, 'YYYY-MM-DD') AS WORK_DT
         ,FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.WORK_MEMB) AS WORK_AGENT_INFO
         ,FN_CM_GET_CODE_NM(I_TENANT_ID,'APPOINT_KIND', A.APPOINT_KIND) AS APPOINT_KIND_NM  
         ,CASE WHEN A.APPOINT_KIND IN ('00','10','30' ,'99' ) THEN  A.BF_TMKIND_NM 
               WHEN A.APPOINT_KIND = '20' THEN A.BF_DEPT_NM
               WHEN A.APPOINT_KIND = '40' THEN A.BF_JIKGUP_NM
               WHEN A.APPOINT_KIND = '50' THEN A.BF_JIKCHK_NM 
               ELSE '' END AS BEFORE_NM
          ,CASE WHEN A.APPOINT_KIND IN ('00','10','30' ,'99' ) THEN  A.AF_TMKIND_NM
               WHEN A.APPOINT_KIND = '20' THEN A.AF_DEPT_NM
               WHEN A.APPOINT_KIND = '40' THEN A.AF_JIKGUP_NM
               WHEN A.APPOINT_KIND = '50' THEN A.AF_JIKCHK_NM 
               ELSE '' END AS AFTER_NM
   FROM TB_HR_OFFICIAL_ORDER A
    WHERE 1=1
     AND A.TENANT_ID = I_TENANT_ID
     AND A.AGENT_ID  = I_AGENT_ID
     ORDER BY A.WORK_YMD DESC
     ; 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM_BOOKMARK_01
(
    I_TENANT_ID IN VARCHAR2  
  , I_AGENT_ID  IN VARCHAR2
  , O_CUR_LIST   OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM_BOOKMARK_01
   PURPOSE:    메뉴 북마크 목록 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/24
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE           := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM_BOOKMARK_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

-- ********************************************************************************
-- 1. 북마크 목록 조회
-- ********************************************************************************
  
	OPEN O_CUR_LIST FOR

	SELECT A.TENANT_ID   AS TENANT_ID
	     , A.AGENT_ID    AS AGENT_ID
	     , A.PGM_ID      AS PGM_ID
	     , B.SYSTEM_KIND AS SYSTEM_KIND
	     , B.PGM_PATH    AS PGM_PATH
	     , B.PGM_NM      AS PGM_NM
	     , B.SYSTEM_KIND AS SYSTEM_KIND
 	     , ( SELECT T1.EDIT_GRANT 
	           FROM TB_CM_GRANT_MENU T1 
	          WHERE T1.TENANT_ID = I_TENANT_ID
	            AND T1.PGM_ID    = A.PGM_ID
	            AND T1.GRANT_ID  = ( SELECT T2.GRANT_ID 
							           FROM TB_CM_USER_MASTER T2 
							          WHERE T2.TENANT_ID = I_TENANT_ID
							            AND T2.AGENT_ID  = A.AGENT_ID)) AS EDIT_GRANT	  
	  FROM TB_CM_MENU_BOOKMARK A
	 INNER JOIN TB_CM_ARGOWFM_PGM B
	    ON A.TENANT_ID = B.TENANT_ID
	   AND A.PGM_ID    = B.PGM_ID
	 WHERE A.TENANT_ID = I_TENANT_ID
 	   AND A.AGENT_ID  = I_AGENT_ID
	   AND B.HIDE_YN   = 0 ;
	
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM_BOOKMARK_02
(
    I_TENANT_ID IN VARCHAR2  
  , I_AGENT_ID  IN VARCHAR2
  , I_PGM_ID    IN VARCHAR2
  , I_GBN       IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM_BOOKMARK_02
   PURPOSE:    메뉴 북마크 등록, 삭제

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/24
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE           := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM_BOOKMARK_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################

	BEGIN	
	
	IF I_GBN = 'D' THEN 
	
	    DELETE FROM TB_CM_MENU_BOOKMARK
	          WHERE TENANT_ID = I_TENANT_ID
	            AND AGENT_ID  = I_AGENT_ID
	            AND PGM_ID    = I_PGM_ID ;
	
	ELSIF I_GBN = 'I' THEN
		
		INSERT INTO TB_CM_MENU_BOOKMARK ( TENANT_ID
										, AGENT_ID
										, PGM_ID
										, CREATE_AGENT_ID
										, CREATE_DT
										)
										VALUES
										( I_TENANT_ID
										, I_AGENT_ID
										, I_PGM_ID
										, I_AGENT_ID
										, SYSDATE
										) ;
		
	END IF;

	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM_CHK_USER_CNT (
  I_TENANT_ID      IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_CM_CHK_USER_CNT
   PURPOSE:    로그인 사용자에게 허용된 메뉴목록 조회 ==> EXCEL IMPORT SAMPLE을 위한 쿼리임

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/07/19 JIN 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM_CHK_USER_CNT';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  OPEN O_CUR_LIST FOR 
 WITH TEMP_LIST AS (
	SELECT COUNT(A.AGENT_ID) AS CNT FROM TB_CM_USER_MASTER A
	WHERE A.TENANT_ID = I_TENANT_ID
	AND JAEJIK_GUBUN = 10
	),
	TEMP_LIST2 AS (
	 SELECT A.USER_CNT,
  		A.USER_CNT_ENC
	FROM TB_CM_TENANT_INFO A
	WHERE A.TENANT_ID = I_TENANT_ID
	)
	SELECT CASE WHEN A.CNT < B.USER_CNT THEN 'Y' ELSE 'N' END AS FLAG
			,B.USER_CNT
			,B.USER_CNT_ENC
	FROM TEMP_LIST A 
	INNER JOIN TEMP_LIST2 B
	ON 1=1
         ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_CM_DATA_DELETE" AS
/******************************************************************************
   NAME:       SP_CM_DATA_DELETE
   PURPOSE:    보관주기에 따른 데이터 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/14
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_CM_DATA_DELETE';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
BEGIN
	
	FOR DEL_LIST IN ( SELECT EXE_QUERY FROM TB_CM_DATA_STORAGE_PERIOD ) LOOP

		EXECUTE IMMEDIATE DEL_LIST.EXE_QUERY;
		
	END LOOP	;

	COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM_USEREDIT_01
(
    I_TENANT_ID IN VARCHAR2  
  , I_AGENT_ID  IN VARCHAR2
  , O_CUR_LIST   OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_CM_USEREDIT_01
   PURPOSE:    상담사 기본정보 조회 (팝업)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/24
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE           := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM_USEREDIT_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN
  
	OPEN O_CUR_LIST FOR

	SELECT A.TENANT_ID      AS TENANT_ID
	     , A.AGENT_ID       AS AGENT_ID
	     , A.SABUN          AS SABUN
	     , A.AGENT_NM       AS AGENT_NM
	     , A.GENDER_KIND    AS GENDER_KIND
	     , A.TEL_NO         AS TEL_NO
	     , A.HIDE_YN        AS HIDE_YN	     
   	     , SCHE_TARGET_YN	AS SCHE_TARGET_YN
	     , EDU_TARGET_YN	AS EDU_TARGET_YN
	     , QA_TARGET_YN		AS QA_TARGET_YN
	     , KPI_TARGET_YN	AS KPI_TARGET_YN
		 , IMG_REAL_FILENAME
         , IMG_USER_FILENAME
         , IMG_PATH
   	     , ( SELECT GRANT_NM 
   	           FROM TB_CM_GRANT_HEADER 
   	          WHERE GRANT_ID = A.GRANT_ID ) AS GRANT_ID
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'center',A.DEPT_CD)  AS CENTER_NM
	  	 , FN_CM_GET_DEPT_NM(I_TENANT_ID,'part',A.DEPT_CD)    AS PART_NM
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'team',A.DEPT_CD)    AS TEAM_NM	     
	     , FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND	     	     
	     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
   		 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
		 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'DAYNIGHT_GUBUN', A.DAYNIGHT_GUBUN)  AS DAYNIGHT_GUBUN
	     , FN_CM_GET_CODE_NM(I_TENANT_ID, 'JAEJIK_GUBUN', A.JAEJIK_GUBUN)      AS JAEJIK_GUBUN
	     , FN_CM_GET_CODE_NM(I_TENANT_ID, 'JIKJONG_KIND', A.JIKJONG_KIND)      AS JIKJONG_KIND	     
   	     , TO_CHAR(TO_DATE(A.BIRTH_YMD, 'YYYY-MM-DD'), 'YYYY-MM-DD')    AS BIRTH_YMD
	     , TO_CHAR(TO_DATE(A.ENTER_YMD, 'YYYY-MM-DD'), 'YYYY-MM-DD')    AS ENTER_YMD
   	     , TO_CHAR(TO_DATE(A.CONTRACT_FRM, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS CONTRACT_FRM
	     , TO_CHAR(TO_DATE(A.CONTRACT_END, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS CONTRACT_END
	  FROM TB_CM_USER_MASTER A
	 WHERE A.TENANT_ID = I_TENANT_ID
	   AND A.AGENT_ID  = I_AGENT_ID ;
	
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM_USEREDIT_03
(
    I_TENANT_ID   IN VARCHAR2  
  , I_AGENT_ID    IN VARCHAR2
  , I_AGENT_NM    IN VARCHAR2
  , I_AGENT_PW    IN VARCHAR2  
  , I_BIRTH_YMD   IN VARCHAR2
  , I_GENDER_KIND IN VARCHAR2
  , I_TEL_NO      IN VARCHAR2
  , I_PW_EDIT_YN  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM_USEREDIT_03
   PURPOSE:    상담사 기본정보 수정 (팝업)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/26
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE           := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM_USEREDIT_03';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

	-- 비밀번호 수정 O
	IF I_PW_EDIT_YN = 'Y' THEN
  
	UPDATE TB_CM_USER_MASTER
	   SET AGENT_NM    = I_AGENT_NM
	     , AGENT_PW    = I_AGENT_PW
	     , BIRTH_YMD   = I_BIRTH_YMD
	     , GENDER_KIND = I_GENDER_KIND
	     , TEL_NO      = I_TEL_NO
	     , MODIFY_AGENT_ID = I_AGENT_ID
	     , MODIFY_DT       = SYSDATE
	 WHERE TENANT_ID = I_TENANT_ID
	   AND AGENT_ID  = I_AGENT_ID ;


	--비밀번호 수정 X
	ELSIF I_PW_EDIT_YN = 'N' THEN 
	
	UPDATE TB_CM_USER_MASTER
	   SET AGENT_NM    = I_AGENT_NM
	     , BIRTH_YMD   = I_BIRTH_YMD
	     , GENDER_KIND = I_GENDER_KIND
	     , TEL_NO      = I_TEL_NO
	     , MODIFY_AGENT_ID = I_AGENT_ID
	     , MODIFY_DT       = SYSDATE
	 WHERE TENANT_ID = I_TENANT_ID
	   AND AGENT_ID  = I_AGENT_ID ;	
	
	END IF;	   
	
	COMMIT;
	
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   

        ROLLBACK;
        
    END;
    
END;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD01_01 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD01_01
   PURPOSE:    dashboard 관리자용 - 결재함조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/18 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD01_01';
    v_work_result   VARCHAR2(1)  := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.결재 조회 >> 향후  업무일지/시간외 근무 추가???
-- ********************************************************************************    
   OPEN O_CUR_LIST FOR 
      SELECT '근태신청' AS APPROVAL
        ,(SELECT COUNT(A.CONSULT_ID) AS TOTAL_CNT1
			FROM TB_HR_CONDUCT A
			INNER JOIN TB_CM_APPROVAL_HEADER D ON (A.TENANT_ID =  D.TENANT_ID AND A.APPROVAL_ID = D.APPROVAL_ID )
			WHERE A.TENANT_ID  = I_TENANT_ID
			  AND D.APPROVAL_STATUS IN ('10','20')
			  AND FN_CM_GET_APPROVAL_AGENT_ID(D.TENANT_ID, D.APPROVAL_ID,'AGENT_ID') = I_AGENT_ID 
         ) AS TOTAL_CNT
      FROM DUAL      
      /*
      UNION ALL
      SELECT '업무일지' AS   APPROVAL
           , 12 AS  TOTAL_CNT
      FROM DUAL  
      UNION ALL
      SELECT '시간외근무' AS   APPROVAL
           , 3 AS  TOTAL_CNT
      FROM DUAL       
      */
        ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD01_02 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD01_02
   PURPOSE:    dashboard 관리자용 - 공지사항 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/18 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.공지사항 조회
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
 WITH TEMP_LIST AS (SELECT A.NOTI_ID ,
               A.NOTI_NO ,
               SUBSTRB(A.NOTI_TITLE, 1, 60) AS NOTI_TITLE ,
               A.NOTI_GUBUN ,
               A.NOTI_GRADE,
               A.NOTI_SCOPE ,
               B.AGENT_NM AS AGENT_INFO,
               TO_CHAR(A.MODIFY_DT, 'YYYY.MM.DD') AS MODIFY_DT ,
               ROW_NUMBER() OVER(ORDER BY A.MODIFY_DT )AS RN /* 등록일 순 5개까지만 조회 하기 위해 */
          FROM TB_CM_NOTICE_HEADER A INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID
           AND A.CREATE_AGENT_ID = B.AGENT_ID
         WHERE 1=1
           AND A.TENANT_ID = I_TENANT_ID
           AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN NVL(A.FRM_DATE, TO_CHAR(SYSDATE, 'YYYYMMDD')) AND NVL(A.END_DATE, TO_CHAR(SYSDATE, 'YYYYMMDD'))
           AND ((A.NOTI_SCOPE = '전체'
                           AND 1=1 )
                    OR (A.NOTI_SCOPE='개인'
                           AND EXISTS (SELECT S.TARGET_MEMB
                                  FROM TB_CM_NOTICE_TARGET S
                                 WHERE A.TENANT_ID = S.TENANT_ID
                                   AND A.NOTI_ID = S.NOTI_ID
                                   AND S.TARGET_MEMB = I_AGENT_ID ))) )
SELECT A.*
  FROM TEMP_LIST A
 WHERE RN<6
 ORDER BY RN DESC;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD01_03 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD01_03
   PURPOSE:    dashboard 관리자용 - 인원현황 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/18 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
		WITH TEMP_LIST AS (  
		----------------------------------------------------------------------------
		-- 인원현황
		----------------------------------------------------------------------------
		SELECT COUNT(A.AGENT_ID) AS TOTAL_CNT
		      ,SUM(CASE WHEN A.AGENT_JIKCHK	='80' THEN 1 ELSE 0 END ) AS AGENT_CNT
		      ,SUM(CASE WHEN A.AGENT_JIKCHK	!='80' THEN 1 ELSE 0 END ) AS ADMIN_CNT				 
			  ,SUM(NVL2(B.AGENT_ID, (CASE WHEN A.AGENT_JIKCHK	='80' THEN 1 ELSE 0 END ), 0)) AS AGENT_LOGIN_CNT
			  ,SUM(NVL2(B.AGENT_ID, (CASE WHEN A.AGENT_JIKCHK  !='80' THEN 1 ELSE 0 END ), 0)) AS ADMIN_LOGIN_CNT	    
		 FROM TB_CM_USER_MASTER A
		 LEFT OUTER JOIN TB_HR_AGENT_ABSENCE B ON (A.TENANT_ID = B.TENANT_ID 
		            AND A.AGENT_ID = B.AGENT_ID 
		            AND TO_CHAR(SYSDATE,'YYYYMMDD') = B.WORK_YMD)
		WHERE A.TENANT_ID  = I_TENANT_ID
		  AND A.JAEJIK_GUBUN	!='99' 
		  AND NVL(A.HIDE_YN	,0) = 0  
		)
		
		SELECT 
		    A.TOTAL_CNT AS TOTAL_CNT1 /* 재직 총원 */
		  , TO_CHAR(ADMIN_LOGIN_CNT, 'FM999,999,990')||' / '||TO_CHAR(ADMIN_CNT, 'FM999,999,990') AS TOTAL_CNT2 /* 로그인수 -관리자*/
		  , TO_CHAR(AGENT_LOGIN_CNT, 'FM999,999,990')||' / '||TO_CHAR(AGENT_CNT, 'FM999,999,990') AS TOTAL_CNT3 /* 로그인수 -상담사*/  
		  ,(SELECT COUNT(A.CONSULT_ID) AS TOTAL_CNT5
				FROM TB_HR_CONDUCT A
				INNER JOIN TB_CM_APPROVAL_HEADER D ON (A.TENANT_ID =  D.TENANT_ID AND A.APPROVAL_ID = D.APPROVAL_ID )
				WHERE A.TENANT_ID  = I_TENANT_ID
				  AND D.APPROVAL_STATUS IN ('40','50')
				  AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN A.FRM_YMD AND A.END_YMD
		  ) AS TOTAL_CNT4 /* 휴가근태건수*/  
		  FROM TEMP_LIST A ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD01_04 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD01_04
   PURPOSE:    dashboard 관리자용 - 업무별 인입현황

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
		WITH TEMP_LIST AS (   
				SELECT MAX(A.GROUP_CD) OVER(PARTITION BY A.GROUP_CD) AS GROUP_CD
				      ,SUM(NVL(B.REAL_IB_CNT,0)) OVER() AS TOTAL_CNT1
				      ,SUM(NVL(B.ANSWER_CNT,0))  OVER() AS TOTAL_CNT2
				      ,SUM(NVL(B.REAL_IB_CNT,0)) OVER(PARTITION BY A.GROUP_CD)  AS GROUP_TOTAL    /* 실인입 콜수 */		      
				  FROM  TB_CM_QUEUE_GROUP A    
				 LEFT OUTER JOIN  TB_KPI_QUEUE_STATICS_HH B ON (A.TENANT_ID = B.TENANT_ID 
				                           AND A.CENTER_KIND = B.CENTER_KIND
				                           AND A.QUEUE_ID    = B.QUEUE_ID  
				                          AND TO_CHAR(SYSDATE,'YYYYMMDD') = B.CALL_DATE)
				  WHERE A.TENANT_ID = I_TENANT_ID                        
		) 
		SELECT FN_CM_GET_CODE_NM(I_TENANT_ID,'QUEUE_GROUP_CD', A.GROUP_CD) AS TITLE    
		     ,TO_CHAR(ROUND( (MAX(TOTAL_CNT2)/(CASE WHEN  MAX(TOTAL_CNT1)= 0 THEN 1 ELSE MAX(TOTAL_CNT1) END))*100,1),'FM990.0') AS TOTAL1 /* 전체 응답율 = 응대/인입*/
		     ,MAX(GROUP_TOTAL) AS VALUE
		 FROM TEMP_LIST A
		 GROUP BY GROUP_CD
		 ORDER BY GROUP_CD
      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD01_05 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD01_05
   PURPOSE:    dashboard 관리자용 - 업무별 인입상세

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD01_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
		 WITH TEMP_STD AS (
		SELECT  I_TENANT_ID AS TENANT_ID
		       ,A.STD_YMD		       
		  FROM TB_CM_HOLIDAY A
		 WHERE A.STD_YMD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'01' AND TO_CHAR(SYSDATE,'YYYYMMDD')
		   AND A.HOLI_YN = 0 /* 영업일만 */
		)
         -------------------------------------------------------------
         -- 전 영업일자 조회
         -------------------------------------------------------------
		,TEMP_STD2 AS (
		SELECT MAX(A.STD_YMD) AS STD_BEF_YMD
		  FROM TEMP_STD A
		 WHERE A.STD_YMD < TO_CHAR(SYSDATE,'YYYYMMDD')    
		 )
		,TEMP_DATA AS (
		SELECT C.GROUP_CD
	 		 ,MAX(CASE WHEN A.STD_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') THEN NVL(B.HOUR_TIME,'0000') ELSE '0000' END) AS TODAY_TIME/* 당일 최종시간 */
		      ,SUM(CASE WHEN A.STD_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') THEN NVL(B.REAL_IB_CNT,0) ELSE 0 END) AS TODAY_IN_CNT /* 당일인입 */
		      ,SUM(CASE WHEN A.STD_YMD = D.STD_BEF_YMD THEN NVL(B.REAL_IB_CNT,0) ELSE 0 END) AS BEF_IN_CNT /* 전일 입입 */
		      ,SUM(CASE WHEN A.STD_YMD BETWEEN TO_CHAR(SYSDATE,'YYYYMM')||'01' AND TO_CHAR(SYSDATE,'YYYYMMDD') THEN NVL(B.REAL_IB_CNT,0) ELSE 0 END) AS CUR_MONTH_IN_CNT /* 당일인입 */
		      ,SUM(CASE WHEN A.STD_YMD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'01' AND TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'31' THEN NVL(B.REAL_IB_CNT,0) ELSE 0 END) AS BEF_MONTH_IN_CNT /* 당일인입 */

		      ,SUM(CASE WHEN A.STD_YMD = TO_CHAR(SYSDATE,'YYYYMMDD') THEN NVL(B.ANSWER_CNT,0) ELSE 0 END) AS TODAY_AN_CNT /* 당일응대 */
		      ,SUM(CASE WHEN A.STD_YMD = D.STD_BEF_YMD THEN NVL(B.ANSWER_CNT,0) ELSE 0 END) AS BEF_AN_CNT /* 전일 응대 */
		  FROM TEMP_STD A
		 INNER JOIN TB_KPI_QUEUE_STATICS_HH B ON (A.TENANT_ID = B.TENANT_ID AND A.STD_YMD = B.CALL_DATE)
		 INNER JOIN TB_CM_QUEUE_GROUP C ON (B.TENANT_ID = C.TENANT_ID 
		                          AND B.CENTER_KIND = C.CENTER_KIND 
		                          AND B.QUEUE_ID    = C.QUEUE_ID )
		 LEFT OUTER JOIN TEMP_STD2 D ON ( A.STD_YMD = D.STD_BEF_YMD)
		 GROUP BY C.GROUP_CD
		)
		SELECT FN_CM_GET_CODE_NM(I_TENANT_ID,'QUEUE_GROUP_CD', A.GROUP_CD) AS TITLE  
		      ,TO_CHAR(SYSDATE,'MM/DD')||' '||FN_CM_STRING_FORMAT(TODAY_TIME,'@@:@@') AS LAST_TIME
		      ,TO_CHAR(A.TODAY_IN_CNT,'FM999,999,999') AS TOTAL1
		      ,TO_CHAR(A.TODAY_AN_CNT,'FM999,999,999') AS TOTAL2	
		      ,TO_CHAR(ROUND( (A.TODAY_AN_CNT/(CASE WHEN A.TODAY_IN_CNT = 0 THEN 1 ELSE A.TODAY_IN_CNT END))*100,1), 'FM990.00') AS TOTAL3 /* 응답율 = 응대/인입*/
		      ,TO_CHAR(A.BEF_IN_CNT,'FM999,999,999') AS TOTAL4
		      ,TO_CHAR(ROUND( (A.BEF_AN_CNT/(CASE WHEN A.BEF_IN_CNT = 0 THEN 1 ELSE A.BEF_IN_CNT END))*100,1), 'FM990.00') AS TOTAL5
		      ,TO_CHAR(A.CUR_MONTH_IN_CNT,'FM999,999,999') AS TOTAL6
		      ,TO_CHAR(A.BEF_MONTH_IN_CNT,'FM999,999,999') AS TOTAL7
		  FROM TEMP_DATA A  
		ORDER BY A.GROUP_CD
      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD01_06 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD01_06
   PURPOSE:    dashboard 관리자용 - 콜인입현황

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/17 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD01_06';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
         -------------------------------------------------------------
         -- 이전 한달 까지 영업일자 조회
         -------------------------------------------------------------
		 WITH TEMP_STD AS (
		SELECT  I_TENANT_ID AS TENANT_ID
		       ,A.STD_YMD
		  FROM TB_CM_HOLIDAY A
		 WHERE A.STD_YMD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMMDD') AND TO_CHAR(SYSDATE,'YYYYMMDD')
		   AND A.HOLI_YN = 0 /* 영업일만 */
		)   
		,TEMP_DATA AS (
		SELECT A.STD_YMD
		      ,NVL((SELECT SUM(S.REAL_IB_CNT) 
		        FROM TB_KPI_QUEUE_STATICS_HH S 
		      WHERE A.TENANT_ID = S.TENANT_ID AND A.STD_YMD = S.CALL_DATE),0) AS IN_CNT     /* 실인입 콜수 */
		      ,NVL((SELECT SUM(S.IB_ANSWER_CNT) 
		        FROM TB_KPI_COSTVALUE_HH S 
		      WHERE A.TENANT_ID = S.TENANT_ID AND A.STD_YMD = S.CALL_DATE),0) AS ANSWER_CNT /* 응답 콜수   */
		  FROM TEMP_STD A
		)
		SELECT TO_CHAR(TO_DATE(A.STD_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS TITLE
		      , ROUND(( A.ANSWER_CNT/(CASE WHEN A.IN_CNT = 0 THEN 1 ELSE A.IN_CNT END))*100,1) AS VALUE1 /* 응답율 = 응대/인입*/
		      , A.IN_CNT AS VALUE2
		      , A.ANSWER_CNT AS VALUE3
		  FROM TEMP_DATA A     
		  ORDER BY 1
      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD02_01 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD02_01
   PURPOSE:    dashboard 상담사용 - 콜인입현황

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/24 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
    V_DEPT_CD          VARCHAR2(50)  :='';
    V_TM_KIND          VARCHAR2(50)  :='';
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     SELECT  A.DEPT_CD
            ,A.TM_KIND
       INTO  V_DEPT_CD
            ,V_TM_KIND
       FROM TB_CM_USER_MASTER A
      WHERE A.TENANT_ID = I_TENANT_ID
        AND A.AGENT_ID = I_AGENT_ID 
        AND ROWNUM = 1  
      ;

-- ********************************************************************************
-- 1. AGENT_ID / AGENT소속 DEPT/TMKIND 의 콜처리현황 
-- ********************************************************************************   
     OPEN O_CUR_LIST FOR 
         -------------------------------------------------------------
         -- 이전 한달 까지 영업일자 조회
         -------------------------------------------------------------
		 WITH TEMP_STD AS (
		SELECT  I_TENANT_ID AS TENANT_ID
		       ,A.STD_YMD
		  FROM TB_CM_HOLIDAY A
		 WHERE A.STD_YMD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMMDD') AND TO_CHAR(SYSDATE,'YYYYMMDD')
		   AND A.HOLI_YN = 0 /* 영업일만 */
		)   
		,TEMP_DATA AS (
	 SELECT A.STD_YMD
	      , B.AGENT_ID
	      , C.DEPT_CD
	      , C.TM_KIND
	      , B.IB_ANSWER_CNT AS TOTAL_CNT
		  FROM TEMP_STD A
		  INNER JOIN TB_KPI_COSTVALUE_HH B ON (A.TENANT_ID = B.TENANT_ID AND A.STD_YMD = B.CALL_DATE)
		  INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
      )
		SELECT TO_CHAR(TO_DATE(A.STD_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS TITLE
		      ,NVL((SELECT SUM(S.TOTAL_CNT) 
		        FROM TEMP_DATA S 
		      WHERE A.STD_YMD = S.STD_YMD
		        AND S.AGENT_ID = I_AGENT_ID),0) AS VALUE1 
		      ,NVL(ROUND((SELECT AVG(S.TOTAL_CNT) 
		        FROM TEMP_DATA S 
		      WHERE A.STD_YMD = S.STD_YMD
		        AND S.DEPT_CD = V_DEPT_CD),1),0) AS VALUE2		
		      ,NVL(ROUND((SELECT AVG(S.TOTAL_CNT) 
		        FROM TEMP_DATA S 
		      WHERE A.STD_YMD = S.STD_YMD
		        AND S.TM_KIND = V_TM_KIND),1),0) AS VALUE3		                
		  FROM TEMP_STD A
		  ORDER BY 1 
      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD02_03 (
  I_TENANT_ID      IN VARCHAR2
 ,I_AGENT_ID       IN VARCHAR2
 ,I_STD_DATE       IN VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD02_03
   PURPOSE:    dashboard 상담사용 - 개인스케쥴

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/25 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD02_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 1. AGENT_ID 의 스케쥴 조회
-- ********************************************************************************   
     OPEN O_CUR_LIST FOR 
			WITH TEMP_DATE AS (
			----------------------------------------------------
			-- 기준일자가 속한 주의 첫날(일요일) 을 0 으로 7일을 조회
			----------------------------------------------------  			
				SELECT TO_CHAR(FIRST_DATE+ B.IDX, 'YYYYMMDD' ) AS STD_DATE
					 , B.IDX 
					 , I_TENANT_ID AS TENANT_ID
					 , I_AGENT_ID  AS AGENT_ID 
				FROM (SELECT TRUNC(TO_DATE(I_STD_DATE,'YYYYMMDD'),'D')  AS FIRST_DATE
					    FROM DUAL)  A 
				,(SELECT LEVEL-1 AS IDX FROM DUAL CONNECT BY LEVEL <= 7 ) B
			) 
			----------------------------------------------------
			-- 출근 / 퇴근
			----------------------------------------------------   
			  SELECT A.IDX
					,A.STD_DATE
					,'출근' AS CODE
					,TO_CHAR(B.LOGIN_DT, 'HH24:MI' ) AS CODE_NM
			    FROM TEMP_DATE A	
			    INNER JOIN TB_HR_AGENT_ABSENCE B ON ( A.TENANT_ID = B.TENANT_ID AND A.STD_DATE = B.WORK_YMD AND A.AGENT_ID = B.AGENT_ID)
			 UNION ALL
			  SELECT A.IDX
					,A.STD_DATE
					,'퇴근' AS CODE
					,TO_CHAR(B.LOGOUT_DT, 'HH24:MI' ) AS CODE_NM
			    FROM TEMP_DATE A	
			    INNER JOIN TB_HR_AGENT_ABSENCE B ON ( A.TENANT_ID = B.TENANT_ID AND A.STD_DATE = B.WORK_YMD AND  A.AGENT_ID= B.AGENT_ID)   
			 ----------------------------------------------------
			-- 근태
			---------------------------------------------------- 
			 UNION ALL
			 SELECT A.IDX
					,A.STD_DATE
					,'근태' AS CODE
					,FN_CM_GET_CODE_NM(B.TENANT_ID,'CONDUCT_CODE', B.CONDUCT_CODE) AS CODE_NM    
			   FROM TEMP_DATE A
			   INNER JOIN TB_HR_CONDUCT B ON (A.TENANT_ID = B.TENANT_ID AND A.STD_DATE BETWEEN B.FRM_YMD AND B.END_YMD AND A.AGENT_ID = B.AGENT_ID )
				INNER JOIN TB_CM_APPROVAL_HEADER D ON (B.TENANT_ID =  D.TENANT_ID AND B.APPROVAL_ID = D.APPROVAL_ID )
				WHERE D.APPROVAL_STATUS IN ('40','50') 
			UNION ALL
			----------------------------------------------------
			-- 기타 : 센터스케쥴
			----------------------------------------------------
			SELECT A.IDX
					,A.STD_DATE
					,'기타' AS CODE
					,SUBSTRB(B.SCHE_NM,1,15) AS CODE_NM    
			   FROM TEMP_DATE A
			   INNER JOIN TB_CM_SCHEDULE B ON (A.TENANT_ID = B.TENANT_ID AND A.STD_DATE BETWEEN B.FRM_YMD AND B.END_YMD  )
			UNION ALL
			----------------------------------------------------
			-- 기타 : 업무평가
			----------------------------------------------------
			SELECT A.IDX
					,A.STD_DATE
					,'기타' AS CODE
					,'업무평가('|| FN_CM_STRING_FORMAT(B.STR_TM,'@@:@@')||')' AS CODE_NM    
			   FROM TEMP_DATE A
			   INNER JOIN TB_EDU_EXAM_SCHE B ON (A.TENANT_ID = B.TENANT_ID AND A.STD_DATE = B.EVAL_YMD AND B.SCHE_STATUS IN ('20' ,'30','40') )
			 INNER JOIN TB_EDU_EXAM_TARGET C ON ( B.TENANT_ID = C.TENANT_ID AND B.SCHE_ID = C.SCHE_ID  AND A.AGENT_ID = C.AGENT_ID )   
			 ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD02_05 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD02_05
   PURPOSE:    dashboard 상담사용 - 콜인입현황

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/24 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD02_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
    V_DEPT_CD          VARCHAR2(50)  :='';
    V_TM_KIND          VARCHAR2(50)  :='';
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     SELECT  A.DEPT_CD
            ,A.TM_KIND
       INTO  V_DEPT_CD
            ,V_TM_KIND
       FROM TB_CM_USER_MASTER A
      WHERE A.TENANT_ID = I_TENANT_ID
        AND A.AGENT_ID = I_AGENT_ID 
        AND ROWNUM = 1  
      ;

-- ********************************************************************************
-- 1. AGENT_ID / AGENT소속 DEPT/TMKIND 의 콜처리현황 
-- ********************************************************************************   
     OPEN O_CUR_LIST FOR 
         -------------------------------------------------------------
         -- 이전 한달 까지 영업일자 조회
         -------------------------------------------------------------
		 WITH TEMP_STD AS (
		SELECT  I_TENANT_ID AS TENANT_ID
		       ,A.STD_YMD
		  FROM TB_CM_HOLIDAY A
		 WHERE A.STD_YMD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMMDD') AND TO_CHAR(SYSDATE,'YYYYMMDD')
		   AND A.HOLI_YN = 0 /* 영업일만 */
		)   
		,TEMP_DATA AS (
	 SELECT A.STD_YMD
	      , B.AGENT_ID
	      , C.DEPT_CD
	      , C.TM_KIND
	      , B.IB_ANSWER_CNT AS TOTAL_CNT
		  FROM TEMP_STD A
		  INNER JOIN TB_KPI_COSTVALUE_HH B ON (A.TENANT_ID = B.TENANT_ID AND A.STD_YMD = B.CALL_DATE)
		  INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
      )
		SELECT TO_CHAR(TO_DATE(A.STD_YMD,'YYYYMMDD'),'YYYY-MM-DD') AS TITLE
		      ,NVL((SELECT SUM(S.TOTAL_CNT) 
		        FROM TEMP_DATA S 
		      WHERE A.STD_YMD = S.STD_YMD
		        AND S.AGENT_ID = I_AGENT_ID),0) AS VALUE1 
		      ,NVL(ROUND((SELECT AVG(S.TOTAL_CNT) 
		        FROM TEMP_DATA S 
		      WHERE A.STD_YMD = S.STD_YMD
		        AND S.DEPT_CD = V_DEPT_CD),1),0) AS VALUE2		
		      ,NVL(ROUND((SELECT AVG(S.TOTAL_CNT) 
		        FROM TEMP_DATA S 
		      WHERE A.STD_YMD = S.STD_YMD
		        AND S.TM_KIND = V_TM_KIND),1),0) AS VALUE3		                
		  FROM TEMP_STD A
		  ORDER BY 1 
      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD_01 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD_01
   PURPOSE:    

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
     SELECT   '금융' AS TITLE , '520' AS VALUE FROM DUAL
     UNION ALL
     SELECT   '일반' AS TITLE , '460' AS VALUE FROM DUAL
     UNION ALL
     SELECT   '야간' AS TITLE , '320' AS VALUE FROM DUAL        
     UNION ALL
     SELECT   '발표' AS TITLE , '260' AS VALUE FROM DUAL ;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD_02 (
   I_TENANT_ID      IN     VARCHAR2
 , I_AGENT_ID       IN     VARCHAR2
 , O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD_02
   PURPOSE:    

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
     SELECT   '1주' AS TITLE , '30' AS 근태, '33' AS QA모니터링, '37' AS 생산성평가  FROM DUAL
     UNION ALL
     SELECT   '2주' AS TITLE , '60' AS 근태, '28' AS QA모니터링, '32' AS 생산성평가  FROM DUAL
     UNION ALL
     SELECT   '3주' AS TITLE , '20' AS 근태, '68' AS QA모니터링, '30' AS 생산성평가  FROM DUAL     
     UNION ALL
     SELECT   '4주' AS TITLE , '50' AS 근태, '30' AS QA모니터링, '20' AS 생산성평가  FROM DUAL      
      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD_03 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD_03
   PURPOSE:    

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
     SELECT   '1주' AS TITLE , '30' AS VALUE1, '12' AS VALUE2, '37' AS VALUE3  FROM DUAL
     UNION ALL
     SELECT   '2주' AS TITLE , '60' AS VALUE1, '360' AS VALUE2, '120' AS VALUE3  FROM DUAL
     UNION ALL
     SELECT   '3주' AS TITLE , '300' AS VALUE1, '200' AS VALUE2, '180' AS VALUE3  FROM DUAL     
     UNION ALL
     SELECT   '4주' AS TITLE , '180' AS VALUE1, '80' AS VALUE2, '200' AS VALUE3  FROM DUAL
      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD_04 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD_04
   PURPOSE:    

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
     SELECT   'A사' AS TITLE , '1058' AS VALUE , '#67b7dc' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'B사' AS TITLE , '726' AS VALUE , '#eed44a' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'C사' AS TITLE , '1417' AS VALUE , '#d593b9' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'D사' AS TITLE , '500' AS VALUE , '#92c96c' AS COLOR FROM DUAL
      UNION ALL
     SELECT   'E사' AS TITLE , '746' AS VALUE , '#55c6c2' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'F사' AS TITLE , '245' AS VALUE , '#5983f0' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'G사' AS TITLE , '989' AS VALUE , '#db9d61' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'H사' AS TITLE , '643' AS VALUE , '#5571c6' AS COLOR FROM DUAL;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD_CHART_01 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD_CHART_01
   PURPOSE:    

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD_S_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
     SELECT   '금융' AS TITLE , '520' AS VALUE FROM DUAL
     UNION ALL
     SELECT   '일반' AS TITLE , '460' AS VALUE FROM DUAL
     UNION ALL
     SELECT   '야간' AS TITLE , '320' AS VALUE FROM DUAL        
     UNION ALL
     SELECT   '발표' AS TITLE , '260' AS VALUE FROM DUAL ;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD_CHART_02 (
   I_TENANT_ID      IN     VARCHAR2
 , I_AGENT_ID       IN     VARCHAR2
 , O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD_CHART_02
   PURPOSE:    

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD_S_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
     SELECT   '1주' AS TITLE , '30' AS 근태, '33' AS QA모니터링, '37' AS 생산성평가  FROM DUAL
     UNION ALL
     SELECT   '2주' AS TITLE , '60' AS 근태, '28' AS QA모니터링, '32' AS 생산성평가  FROM DUAL
     UNION ALL
     SELECT   '3주' AS TITLE , '20' AS 근태, '68' AS QA모니터링, '30' AS 생산성평가  FROM DUAL     
     UNION ALL
     SELECT   '4주' AS TITLE , '50' AS 근태, '30' AS QA모니터링, '20' AS 생산성평가  FROM DUAL      
      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD_CHART_03 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD_CHART_03
   PURPOSE:    

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD_S_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
     SELECT   '1주' AS TITLE , '30' AS VALUE1, '12' AS VALUE2, '37' AS VALUE3  FROM DUAL
     UNION ALL
     SELECT   '2주' AS TITLE , '60' AS VALUE1, '360' AS VALUE2, '120' AS VALUE3  FROM DUAL
     UNION ALL
     SELECT   '3주' AS TITLE , '300' AS VALUE1, '200' AS VALUE2, '180' AS VALUE3  FROM DUAL     
     UNION ALL
     SELECT   '4주' AS TITLE , '180' AS VALUE1, '80' AS VALUE2, '200' AS VALUE3  FROM DUAL
      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD_CHART_04 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD_CHART_04
   PURPOSE:    

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD_S_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
     SELECT   'A사' AS TITLE , '1058' AS VALUE , '#67b7dc' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'B사' AS TITLE , '726' AS VALUE , '#eed44a' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'C사' AS TITLE , '1417' AS VALUE , '#d593b9' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'D사' AS TITLE , '500' AS VALUE , '#92c96c' AS COLOR FROM DUAL
      UNION ALL
     SELECT   'E사' AS TITLE , '746' AS VALUE , '#55c6c2' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'F사' AS TITLE , '245' AS VALUE , '#5983f0' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'G사' AS TITLE , '989' AS VALUE , '#db9d61' AS COLOR FROM DUAL
     UNION ALL
     SELECT   'H사' AS TITLE , '643' AS VALUE , '#5571c6' AS COLOR FROM DUAL;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

create or replace PROCEDURE "SP_EDU1020M01_01" (
   I_TENANT_ID      IN VARCHAR2
 , I_LOGIN_DEPT_CD  IN VARCHAR2  /* 로그인사용자 DEPT_CD */     
 , I_DT_FROM        IN VARCHAR2
 , I_DT_TO          IN VARCHAR2
 , I_EDU_SHEET_TYPE IN VARCHAR2
 , I_SUBJECT        IN VARCHAR2
 , I_AGENT_ID       IN VARCHAR2 
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU1020M01_01
   PURPOSE:    시험지관리-시험지 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR 
	SELECT
		A.TENANT_ID
		,A.SHEET_ID
		,A.SHEET_NM
		,A.EDU_SHEET_TYPE
		,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_SHEET_TYPE',A.EDU_SHEET_TYPE) AS EDU_SHEET_TYPE_NM
		,NVL(A.HIDE_YN,0)  AS HIDE_YN
		,CASE (SELECT COUNT(S.SHEET_ID) 
				FROM TB_EDU_EXAM_SCHE S
				WHERE S.TENANT_ID = A.TENANT_ID
				AND S.SHEET_ID  = A.SHEET_ID )
			WHEN 0 THEN 0 ELSE 1 END AS  EVAL_YN
		,A.MODIFY_AGENT_ID
		,FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.MODIFY_AGENT_ID) AS MODIFY_AGENT_INFO         
		,TO_CHAR(A.MODIFY_DT,'YYYY-MM-DD') AS MODIFY_DT
		,NVL((SELECT SUM(S.SCORE) FROM TB_EDU_SHEET_DETAIL S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID),0) AS SCORE_SUM
		,(SELECT COUNT(S.QUESTION_ID) FROM TB_EDU_SHEET_DETAIL S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID) AS QUESTION_CNT
		,FN_CM_GET_DEPT_ACCESS_SCOPE(A.TENANT_ID, '20',A.SHEET_ID,'ID') AS DEPT1_ID
		,FN_CM_GET_DEPT_ACCESS_SCOPE(A.TENANT_ID, '20',A.SHEET_ID,'NM') AS DEPT1_NM 
		, FN_CM_GET_AGENT_NM(I_TENANT_ID, A.MODIFY_AGENT_ID) || ' (' || FN_CM_GET_AGENT_SABUN(I_TENANT_ID, A.MODIFY_AGENT_ID) || ')' AS AGENT_NM
		, TO_CHAR(A.MODIFY_DT, 'YYYY-MM-DD') AS CREATE_DT
     FROM TB_EDU_SHEET_HEADER A
    WHERE TO_CHAR(A.MODIFY_DT,'YYYYMMDD') BETWEEN I_DT_FROM AND I_DT_TO
     AND A.EDU_SHEET_TYPE = CASE WHEN I_EDU_SHEET_TYPE IS NULL THEN A.EDU_SHEET_TYPE ELSE I_EDU_SHEET_TYPE END
     AND (( I_SUBJECT IS NULL AND 1=1 )
		OR (I_SUBJECT IS NOT NULL AND INSTR(A.SHEET_NM, I_SUBJECT) > 0)) 
     AND (( I_AGENT_ID IS NULL AND 1=1 )
		OR (I_AGENT_ID IS NOT NULL AND INSTR(A.MODIFY_AGENT_ID, I_AGENT_ID) > 0)) 
     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
     AND EXISTS (SELECT 1 
     			   FROM TB_CM_ACCESS_SCOPE S 
     			  WHERE S.TENANT_ID   = A.TENANT_ID
     			    AND S.SCOPE_GUBUN = '20'
     			    AND S.ITEM_ID     = A.SHEET_ID
     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )           
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1020M01_02" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_QUESTION_ID    IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_EDU1020M01_02
   PURPOSE:    시험지관리-문항조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ******************************************************************************** 
	OPEN O_CUR_LIST FOR 
	SELECT
		A.TENANT_ID
		,A.SHEET_ID
		,B.QUESTION_ID
		,B.QUESTION_NO
		,B.WORK_TYPE1
		,B.WORK_TYPE2
		,B.QUESTION_TYPE
		,B.SCORE
		,B.ANSWER_CNT
		,B.AUTO_MARKING_YN
		-- 목록에서 조회 시 html tag 제거
		,SUBSTR(REGEXP_REPLACE(DBMS_LOB.SUBSTR(B.QUESTION, DBMS_LOB.GETLENGTH(B.QUESTION),1), '<[^>]*>', ''),1, 50)||'...' AS QUESTION_TEXT
		,DBMS_LOB.SUBSTR(B.QUESTION, DBMS_LOB.GETLENGTH(B.QUESTION),1) AS QUESTION
		,B.DESCRIPT
		,A.EDU_SHEET_TYPE
		,FN_CM_GET_CODE_NM(B.TENANT_ID, 'WORK_TYPE1',B.WORK_TYPE1) AS WORK_TYPE1_NM
		,FN_CM_GET_CODE_NM(B.TENANT_ID, 'WORK_TYPE2',B.WORK_TYPE2) AS WORK_TYPE2_NM
		,FN_CM_GET_CODE_NM(B.TENANT_ID, 'QUESTION_TYPE',B.QUESTION_TYPE) AS QUESTION_TYPE_NM
		,A.MODIFY_AGENT_ID
		,FN_CM_GET_AGENT_INFO(A.TENANT_ID, B.MODIFY_AGENT_ID) AS MODIFY_AGENT_INFO            
		,TO_CHAR(B.MODIFY_DT,'YYYY-MM-DD') AS MODIFY_DT
		,(SELECT COUNT(S.ANSWER_ID) FROM TB_EDU_SHEET_ANSWER S WHERE S.TENANT_ID = B.TENANT_ID AND S.SHEET_ID  = B.SHEET_ID AND S.QUESTION_ID = B.QUESTION_ID) AS ANSWER_CNT
	  FROM TB_EDU_SHEET_HEADER A
	 INNER JOIN TB_EDU_SHEET_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
	 WHERE A.TENANT_ID = I_TENANT_ID
	   AND A.SHEET_ID  = I_SHEET_ID
	   AND B.QUESTION_ID = CASE WHEN I_QUESTION_ID IS NULL THEN B.QUESTION_ID ELSE I_QUESTION_ID END /* 문항관리에서 요청 시 */
	ORDER BY B.QUESTION_NO  
	;
    

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1020M01_03" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_QUESTION_ID    IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_EDU1020M01_03
   PURPOSE:    시험지관리-답항조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1020M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ******************************************************************************** 
OPEN O_CUR_LIST FOR 
    SELECT   A.TENANT_ID
            ,A.SHEET_ID
            ,A.QUESTION_ID
            ,A.ANSWER_ID
            ,A.ANSWER
            ,A.CORRECT_YN
     FROM TB_EDU_SHEET_ANSWER A 
     WHERE A.TENANT_ID  = I_TENANT_ID
       AND A.SHEET_ID   = I_SHEET_ID 
       AND A.QUESTION_ID= ( CASE WHEN I_QUESTION_ID IS NULL THEN A.QUESTION_ID ELSE I_QUESTION_ID END)
    ORDER BY ANSWER_ID;
 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1020M01_04" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_QUESTION_ID    IN VARCHAR2
    ,I_ANSWER_ID  	  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU1020M01_04
   PURPOSE:    시험지관리-삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1020M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 BEGIN
 
-- ********************************************************************************
-- 0.삭제
-- ********************************************************************************    
   IF (I_QUESTION_ID IS NULL ) THEN /* 시험지 삭제*/
	 	  DELETE FROM TB_EDU_SHEET_HEADER WHERE TENANT_ID = I_TENANT_ID AND SHEET_ID = I_SHEET_ID;
	  	  DELETE FROM TB_EDU_SHEET_DETAIL WHERE TENANT_ID = I_TENANT_ID AND SHEET_ID = I_SHEET_ID;
	  	  DELETE FROM TB_EDU_SHEET_ANSWER WHERE TENANT_ID = I_TENANT_ID AND SHEET_ID = I_SHEET_ID;
	  	  /* 관리소속 삭제 */
	  	  DELETE FROM TB_CM_ACCESS_SCOPE 
	  	  WHERE TENANT_ID = I_TENANT_ID
	  	    AND SCOPE_GUBUN = '20'
	        AND ITEM_ID     = I_SHEET_ID  ;
	      COMMIT;
    ELSE        
      IF (I_ANSWER_ID IS NULL) THEN /* 시험문항 삭제 - 답항까지 삭제처리 */
  	  	  DELETE FROM TB_EDU_SHEET_DETAIL WHERE TENANT_ID = I_TENANT_ID AND SHEET_ID = I_SHEET_ID AND QUESTION_ID = I_QUESTION_ID;
	  	  DELETE FROM TB_EDU_SHEET_ANSWER WHERE TENANT_ID = I_TENANT_ID AND SHEET_ID = I_SHEET_ID AND QUESTION_ID = I_QUESTION_ID;
	  	   COMMIT;
     ELSE /* 답항만 삭제 */
           DELETE FROM TB_EDU_SHEET_ANSWER 
           WHERE TENANT_ID = I_TENANT_ID 
              AND SHEET_ID = I_SHEET_ID
              AND QUESTION_ID = I_QUESTION_ID ;
           COMMIT;    
      END IF;
    END IF;
 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1020M01_05" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU1020M01_05
   PURPOSE:    시험지관리-복사

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/08  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1020M01_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    V_SHEET_ID TB_EDU_SHEET_HEADER.SHEET_ID%TYPE ;
    
    V_QUESTION_ID TB_EDU_SHEET_DETAIL.QUESTION_ID%TYPE ;
    V_QUESTION_NO TB_EDU_SHEET_DETAIL.QUESTION_NO%TYPE ;
    
 BEGIN
 
-- ********************************************************************************
-- 0.KEY 생성
-- ******************************************************************************** 
 -- I_SHEET_ID 생성
     SELECT LPAD(NVL(MAX(SHEET_ID),0)+1 ,10, '0') 
       INTO V_SHEET_ID 
       FROM TB_EDU_SHEET_HEADER 
      WHERE TENANT_ID = I_TENANT_ID;

-- ********************************************************************************
-- 1. 시험지  복사
-- ********************************************************************************              
	    INSERT INTO TB_EDU_SHEET_HEADER ( 
	               TENANT_ID
	              ,SHEET_ID
	              ,SHEET_NM
	              ,EDU_SHEET_TYPE
	              ,HIDE_YN
	              ,CREATE_AGENT_ID
	              ,CREATE_DT
	              ,MODIFY_AGENT_ID
	              ,MODIFY_DT
	      ) SELECT TENANT_ID
	              ,V_SHEET_ID AS SHEET_ID
	              ,SUBSTRB(SHEET_NM,1,80)||' - 복사본' AS SHEET_NM
	              ,EDU_SHEET_TYPE
	              ,HIDE_YN
	              ,I_LOGIN_ID   AS CREATE_AGENT_ID
	              ,SYSTIMESTAMP AS CREATE_DT
	              ,I_LOGIN_ID   AS MODIFY_AGENT_ID
	              ,SYSTIMESTAMP AS MODIFY_DT
	         FROM TB_EDU_SHEET_HEADER
	        WHERE TENANT_ID = I_TENANT_ID 
	          AND SHEET_ID  = I_SHEET_ID  ;
	      
	    COMMIT; 
-- ********************************************************************************
-- 2. 관리소속  복사
-- ********************************************************************************             
  INSERT INTO TB_CM_ACCESS_SCOPE (
	  	TENANT_ID , SCOPE_GUBUN, ITEM_ID, DEPT_CD
	  )
	SELECT  TENANT_ID 
	      , SCOPE_GUBUN
	      , V_SHEET_ID AS  ITEM_ID
	      , DEPT_CD
	  FROM  TB_CM_ACCESS_SCOPE		 
	 WHERE TENANT_ID   = I_TENANT_ID 
	   AND ITEM_ID     = I_SHEET_ID  
	   AND SCOPE_GUBUN = '20'
	   AND ITEM_ID     = I_SHEET_ID  ;
	 COMMIT;

-- ********************************************************************************
-- 3. 문항  복사
-- ********************************************************************************             
   INSERT INTO TB_EDU_SHEET_DETAIL(
               TENANT_ID
              ,SHEET_ID
              ,QUESTION_ID
              ,QUESTION_NO
              ,WORK_TYPE1
              ,WORK_TYPE2
              ,QUESTION_TYPE
              ,SCORE
              ,ANSWER_CNT
              ,AUTO_MARKING_YN
              ,QUESTION
              ,DESCRIPT
              ,CREATE_AGENT_ID
              ,CREATE_DT
              ,MODIFY_AGENT_ID
              ,MODIFY_DT
      ) SELECT S.TENANT_ID
              ,V_SHEET_ID AS SHEET_ID
              ,S.QUESTION_ID
              ,S.QUESTION_NO
              ,S.WORK_TYPE1
              ,S.WORK_TYPE2
              ,S.QUESTION_TYPE
              ,S.SCORE
              ,S.ANSWER_CNT
              ,S.AUTO_MARKING_YN
              ,S.QUESTION
              ,S.DESCRIPT
              ,I_LOGIN_ID   AS CREATE_AGENT_ID
              ,SYSTIMESTAMP AS CREATE_DT
              ,I_LOGIN_ID   AS MODIFY_AGENT_ID
              ,SYSTIMESTAMP AS MODIFY_DT
        FROM TB_EDU_SHEET_DETAIL S
       WHERE TENANT_ID = I_TENANT_ID 
         AND SHEET_ID  = I_SHEET_ID  ;
      COMMIT;

-- ********************************************************************************
-- 4. 답항  복사
-- ********************************************************************************             
 INSERT INTO TB_EDU_SHEET_ANSWER (
               TENANT_ID
              ,SHEET_ID
              ,QUESTION_ID
              ,ANSWER_ID
              ,ANSWER
              ,CORRECT_YN
   ) SELECT   TENANT_ID
              ,V_SHEET_ID AS SHEET_ID
              ,QUESTION_ID
              ,ANSWER_ID
              ,ANSWER
              ,CORRECT_YN
       FROM  TB_EDU_SHEET_ANSWER
      WHERE TENANT_ID = I_TENANT_ID 
        AND SHEET_ID  = I_SHEET_ID  ;

   COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1020M01_06" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_AGENT_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_QUESTION_ID	  IN VARCHAR2
    ,I_QUESTION_NO    IN VARCHAR2    
) AS 
/******************************************************************************
   NAME:       SP_EDU1020M01_06
   PURPOSE:    문항 순서 변경

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/25  
******************************************************************************/

-- ########## LOG DB START ########################
	v_work_date     DATE := SYSDATE;
	v_work_date_str TIMESTAMP := SYSTIMESTAMP;
	v_work_date_end TIMESTAMP := SYSTIMESTAMP;
	v_work_id       VARCHAR2(30) := 'SP_EDU1020M01_06';
	v_work_result   VARCHAR2(1) := 'F';
	v_work_count    NUMBER := 0;
	v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

    
BEGIN

    UPDATE TB_EDU_SHEET_DETAIL
       SET QUESTION_NO     = I_QUESTION_NO
         , MODIFY_AGENT_ID = I_AGENT_ID
         , MODIFY_DT       = SYSDATE
     WHERE TENANT_ID   = I_TENANT_ID
       AND SHEET_ID    = I_SHEET_ID
       AND QUESTION_ID = I_QUESTION_ID ;

   COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK; 

    RAISE_APPLICATION_ERROR(-20001, SQLERRM); 
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1020S03_01" (
	 I_TENANT_ID      IN VARCHAR2
	,I_CUD_GUBUN      IN VARCHAR2  /* C/U/D  */
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_QUESTION_ID    IN VARCHAR2
    ,I_QUESTION_NO    IN NUMBER
    ,I_WORK_TYPE1     IN VARCHAR2
    ,I_WORK_TYPE2     IN VARCHAR2  
    ,I_QUESTION_TYPE  IN VARCHAR2
    ,I_SCORE          IN NUMBER
    ,I_ANSWER_CNT     IN NUMBER
    ,I_AUTO_MARKING_YN IN NUMBER
    ,I_QUESTION       IN CLOB
    ,I_DESCRIPT       IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_EDU1020S03_01
   PURPOSE:    시험지관리-문항등록수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1020S03_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

    V_QUESTION_ID TB_EDU_SHEET_DETAIL.QUESTION_ID%TYPE := I_QUESTION_ID;
    V_QUESTION_NO TB_EDU_SHEET_DETAIL.QUESTION_NO%TYPE := I_QUESTION_NO;
    
 BEGIN
 
-- ********************************************************************************
-- 0.등록/수정/삭제
-- ******************************************************************************** 
  IF (I_CUD_GUBUN ='I') THEN
       -- I_SHEET_ID 생성
         SELECT LPAD(NVL(MAX(QUESTION_ID),0)+1 ,10, '0') 
           ,NVL(MAX(QUESTION_NO),0) + 1 
           INTO V_QUESTION_ID , V_QUESTION_NO
           FROM TB_EDU_SHEET_DETAIL
          WHERE TENANT_ID = I_TENANT_ID
            AND SHEET_ID  = I_SHEET_ID;
  END IF;
	 
    MERGE INTO TB_EDU_SHEET_DETAIL T
    USING (SELECT  I_TENANT_ID       AS TENANT_ID
                  ,I_SHEET_ID        AS SHEET_ID
                  ,V_QUESTION_ID     AS QUESTION_ID
                  ,V_QUESTION_NO     AS QUESTION_NO
                  ,I_WORK_TYPE1      AS WORK_TYPE1
                  ,I_WORK_TYPE2      AS WORK_TYPE2
                  ,I_QUESTION_TYPE   AS QUESTION_TYPE
                  ,I_SCORE           AS SCORE
                  ,I_ANSWER_CNT      AS ANSWER_CNT
                  ,NVL(I_AUTO_MARKING_YN,0)   AS AUTO_MARKING_YN
                  ,I_DESCRIPT         AS DESCRIPT
             FROM DUAL ) S
    ON (  T.TENANT_ID  = S.TENANT_ID
      AND T.SHEET_ID   = S.SHEET_ID 
      AND T.QUESTION_ID= S.QUESTION_ID)
    WHEN MATCHED THEN
      UPDATE SET QUESTION_NO     = S.QUESTION_NO
                ,WORK_TYPE1      = S.WORK_TYPE1
                ,WORK_TYPE2      = S.WORK_TYPE2
                ,QUESTION_TYPE = S.QUESTION_TYPE
                ,SCORE           = S.SCORE
                ,ANSWER_CNT      = S.ANSWER_CNT 
                ,AUTO_MARKING_YN = S.AUTO_MARKING_YN                
                ,QUESTION        = I_QUESTION
                ,DESCRIPT        = S.DESCRIPT
                ,MODIFY_AGENT_ID = I_LOGIN_ID
                ,MODIFY_DT       = SYSTIMESTAMP
    WHEN NOT MATCHED THEN
      INSERT( TENANT_ID
              ,SHEET_ID
              ,QUESTION_ID
              ,QUESTION_NO
              ,WORK_TYPE1
              ,WORK_TYPE2
              ,QUESTION_TYPE
              ,SCORE
              ,ANSWER_CNT
              ,AUTO_MARKING_YN
              ,QUESTION
              ,DESCRIPT
              ,CREATE_AGENT_ID
              ,CREATE_DT
              ,MODIFY_AGENT_ID
              ,MODIFY_DT
      ) VALUES (S.TENANT_ID
              ,S.SHEET_ID
              ,S.QUESTION_ID
              ,S.QUESTION_NO
              ,S.WORK_TYPE1
              ,S.WORK_TYPE2
              ,S.QUESTION_TYPE
              ,S.SCORE
              ,S.ANSWER_CNT
              ,S.AUTO_MARKING_YN
              ,I_QUESTION
              ,S.DESCRIPT
              ,I_LOGIN_ID
              ,SYSTIMESTAMP
              ,I_LOGIN_ID
              ,SYSTIMESTAMP
      )  ;
      
    COMMIT; 
 
-- ********************************************************************************
-- 2.처리 결과 리턴
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
 SELECT V_QUESTION_ID   AS KEY_ID
  FROM DUAL ; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1020S03_02" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_QUESTION_ID    IN VARCHAR2
    ,I_ANSWER_ID      IN NUMBER
    ,I_ANSWER         IN VARCHAR2
    ,I_CORRECT_YN     IN NUMBER
) AS 
/******************************************************************************
   NAME:       SP_EDU1020S03_02
   PURPOSE:    시험지관리-답항등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1020S03_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
 BEGIN
 
-- ********************************************************************************
-- 0.등록 >> 답항은 문항 등록 시 일괄 삭제 후 다시 등록 하므로 INSERT 만
-- ******************************************************************************** 
  
   INSERT INTO TB_EDU_SHEET_ANSWER (
               TENANT_ID
              ,SHEET_ID
              ,QUESTION_ID
              ,ANSWER_ID
              ,ANSWER
              ,CORRECT_YN
   ) VALUES (  I_TENANT_ID
              ,I_SHEET_ID
              ,I_QUESTION_ID
              ,I_ANSWER_ID
              ,I_ANSWER
              ,NVL(I_CORRECT_YN,0)
   ) ;
   COMMIT;
 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1030M01_01" (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_EDU_EVAL_TYPE IN VARCHAR2
 , I_EDU_EXAM_TYPE IN VARCHAR2
,  I_SCHE_STATUS   IN VARCHAR2 
 , I_SUBJECT       IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU1030M01_01
   PURPOSE:    평가계획관리-목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT   A.TENANT_ID
    		,A.SCHE_ID
            ,A.SCHE_NM
            ,NVL(A.KPI_YN,0) AS KPI_YN
            ,A.EDU_EVAL_TYPE
            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EVAL_TYPE',A.EDU_EVAL_TYPE) AS EDU_EVAL_TYPE_NM
            ,A.EDU_EXAM_TYPE
            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EXAM_TYPE',A.EDU_EXAM_TYPE) AS EDU_EXAM_TYPE_NM
            ,A.SCHE_STATUS
            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'SCHE_STATUS',A.SCHE_STATUS) AS SCHE_STATUS_NM   
            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@-@@') AS EVAL_YMD
            ,FN_CM_STRING_FORMAT(A.STR_TM,'@@:@@') AS STR_TM
            ,FN_CM_STRING_FORMAT(A.END_TM,'@@:@@') AS END_TM
            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@') AS STD_MONTH
            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@-@@')
             ||' '||FN_CM_STRING_FORMAT(SUBSTR(A.STR_TM,1,4),'@@:@@')
             ||' ('||FLOOR(FN_CM_GET_TIME_DIFF_TO_SECOND(A.STR_TM,A.END_TM)/60)||'분)' 
             AS EXAM_PERIOD
            ,A.PASS_SCORE
            ,A.INFO_TEXT   
            ,NVL(A.RANDOM_YN,0)  AS RANDOM_YN             
            ,(SELECT COUNT(S.AGENT_ID) 
	                 FROM TB_EDU_EXAM_TARGET S
	                WHERE S.TENANT_ID = A.TENANT_ID
	                  AND S.SCHE_ID  = A.SCHE_ID ) AS TARGET_CNT
	        ,B.SHEET_ID
	        ,B.SHEET_NM 
          ,FN_CM_GET_DEPT_ACCESS_SCOPE(A.TENANT_ID, '30',A.SCHE_ID,'ID') AS DEPT1_ID
          ,FN_CM_GET_DEPT_ACCESS_SCOPE(A.TENANT_ID, '30',A.SCHE_ID,'NM') AS DEPT1_NM 
	                 
     FROM TB_EDU_EXAM_SCHE A
     LEFT OUTER JOIN TB_EDU_SHEET_HEADER B ON ( A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID )
    WHERE A.TENANT_ID    = I_TENANT_ID
     AND  A.EVAL_YMD BETWEEN I_DT_FROM AND I_DT_TO
     AND A.EDU_EVAL_TYPE = CASE WHEN I_EDU_EVAL_TYPE IS NULL THEN A.EDU_EVAL_TYPE ELSE I_EDU_EVAL_TYPE END    
     AND A.EDU_EXAM_TYPE = CASE WHEN I_EDU_EXAM_TYPE IS NULL THEN A.EDU_EXAM_TYPE ELSE I_EDU_EXAM_TYPE END
     AND A.SCHE_STATUS   = CASE WHEN I_SCHE_STATUS IS NULL   THEN A.SCHE_STATUS ELSE I_SCHE_STATUS END
     AND (( I_SUBJECT IS NULL AND 1=1 )
          OR (I_SUBJECT IS NOT NULL AND INSTR(A.SCHE_NM, I_SUBJECT) > 0))
     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
     AND EXISTS (SELECT 1 
     			   FROM TB_CM_ACCESS_SCOPE S 
     			  WHERE S.TENANT_ID   = A.TENANT_ID
     			    AND S.SCOPE_GUBUN = '30'
     			    AND S.ITEM_ID     = A.SCHE_ID
     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )      
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1030M01_02" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SCHE_ID	      IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU1030M01_02
   PURPOSE:    평가계획관리-삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1030M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 BEGIN
 
-- ********************************************************************************
-- 0.삭제
-- ********************************************************************************    
	  DELETE FROM TB_EDU_EXAM_SCHE   WHERE TENANT_ID = I_TENANT_ID AND SCHE_ID = I_SCHE_ID;
  	  DELETE FROM TB_EDU_EXAM_TARGET WHERE TENANT_ID = I_TENANT_ID AND SCHE_ID = I_SCHE_ID;
  	  
  	  /* 관리소속 삭제 */
  	  DELETE FROM TB_CM_ACCESS_SCOPE 
  	  WHERE TENANT_ID = I_TENANT_ID
  	    AND SCOPE_GUBUN = '30'
        AND ITEM_ID     = I_SCHE_ID  ;
      COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1030M01_03" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SCHE_ID	      IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU1030M01_03
   PURPOSE:    평가계획관리-복사

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
    1.1       2017/05/16  YAKIM            평가대상은 복사에서 제외 ( 평가대상 중복체크 되어야 하므로)
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1030M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    V_SCHE_ID TB_EDU_EXAM_SCHE.SCHE_ID%TYPE ;
    
 BEGIN
 
-- ********************************************************************************
-- 0.KEY 생성
-- ******************************************************************************** 
 -- V_SCHE_ID 생성
     SELECT LPAD(NVL(MAX(SCHE_ID),0)+1 ,10, '0') 
       INTO V_SCHE_ID 
       FROM TB_EDU_EXAM_SCHE 
      WHERE TENANT_ID = I_TENANT_ID;

-- ********************************************************************************
-- 1. 평가계획  복사
-- ********************************************************************************              
	    INSERT INTO TB_EDU_EXAM_SCHE ( 
	               TENANT_ID
	              ,SCHE_ID
	              ,SCHE_NM
	              ,KPI_YN
	              ,EDU_EVAL_TYPE
	              ,EDU_EXAM_TYPE
	              ,EVAL_YMD
	              ,STR_TM
	              ,END_TM
	              ,SCHE_STATUS
	              ,SHEET_ID
	              ,PASS_SCORE
	              ,INFO_TEXT
	              ,RANDOM_YN	              
	              ,CREATE_AGENT_ID
	              ,CREATE_DT
	              ,MODIFY_AGENT_ID
	              ,MODIFY_DT
	      ) SELECT TENANT_ID
	              ,V_SCHE_ID AS SCHE_ID
	              ,SUBSTRB(SCHE_NM,1,180)||' - 복사본' AS SCHE_NM
	              ,KPI_YN
	              ,EDU_EVAL_TYPE
	              ,EDU_EXAM_TYPE
	              ,EVAL_YMD
	              ,STR_TM
	              ,END_TM
	              ,'10' AS SCHE_STATUS /* 준비중 상태로 복사 */
	              ,SHEET_ID
	              ,PASS_SCORE
	              ,INFO_TEXT
	              ,RANDOM_YN
	              ,I_LOGIN_ID   AS CREATE_AGENT_ID
	              ,SYSTIMESTAMP AS CREATE_DT
	              ,I_LOGIN_ID   AS MODIFY_AGENT_ID
	              ,SYSTIMESTAMP AS MODIFY_DT
	         FROM TB_EDU_EXAM_SCHE
	        WHERE TENANT_ID = I_TENANT_ID 
	          AND SCHE_ID   = I_SCHE_ID  ;
	      
	    COMMIT; 
-- ********************************************************************************
-- 2. 관리소속  복사
-- ********************************************************************************             
  INSERT INTO TB_CM_ACCESS_SCOPE (
	  	TENANT_ID , SCOPE_GUBUN, ITEM_ID, DEPT_CD
	  )
	SELECT  TENANT_ID 
	      , SCOPE_GUBUN
	      , V_SCHE_ID AS  ITEM_ID
	      , DEPT_CD
	  FROM  TB_CM_ACCESS_SCOPE		 
	 WHERE TENANT_ID   = I_TENANT_ID 
	   AND SCOPE_GUBUN = '30'
	   AND ITEM_ID     = I_SCHE_ID  ;
	 COMMIT;

-- ********************************************************************************
-- 3. 평가대상  복사 
-- ********************************************************************************             
/*
   INSERT INTO TB_EDU_EXAM_TARGET(
               TENANT_ID
              ,SCHE_ID
              ,AGENT_ID
              ,EXAM_STATUS
              ,EXAM_TAKE_DT
              ,EXAM_STR_DT
              ,CREATE_AGENT_ID
              ,CREATE_DT
              ,MODIFY_AGENT_ID
              ,MODIFY_DT
      ) SELECT S.TENANT_ID
              ,V_SCHE_ID AS SCHE_ID
              ,S.AGENT_ID
              ,'10' AS EXAM_STATUS
              ,NULL AS EXAM_TAKE_DT
              ,NULL AS EXAM_STR_DT
             ,I_LOGIN_ID   AS CREATE_AGENT_ID
              ,SYSTIMESTAMP AS CREATE_DT
              ,I_LOGIN_ID   AS MODIFY_AGENT_ID
              ,SYSTIMESTAMP AS MODIFY_DT
        FROM TB_EDU_EXAM_TARGET S
       WHERE TENANT_ID = I_TENANT_ID 
         AND SCHE_ID   = I_SCHE_ID  ;
      COMMIT;
*/

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1030M01_05" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SCHE_ID	      IN VARCHAR2
    ,I_SCHE_STATUS    IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU1030M01_05
   PURPOSE:    평가계획관리-진행상태 변경(JOB 에 의해서 자동 수행)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/04  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1030M01_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
   V_RLT VARCHAR2(50) :='성공' ;
 BEGIN
 
-- ********************************************************************************
-- 0.평가계획관리 - 진행상태 수정
-- ******************************************************************************** 
	  UPDATE TB_EDU_EXAM_SCHE 
	    SET SCHE_STATUS     = I_SCHE_STATUS
	       ,MODIFY_AGENT_ID = 'JOBUSER'
	       ,MODIFY_DT  		= SYSTIMESTAMP
	  WHERE TENANT_ID = I_TENANT_ID
	    AND SCHE_ID   = I_SCHE_ID  ;
	  COMMIT;

-- ********************************************************************************
-- 1.JOB 테이블 경과 처리
-- ******************************************************************************** 
	UPDATE TB_CM_JOB
	   SET JOB_RESULT = V_RLT
	 WHERE TENANT_ID =  I_TENANT_ID
	   AND JOB_GUBUN =  (CASE I_SCHE_STATUS WHEN '30' THEN 'EDU1030M01_S' ELSE 'EDU1030M01_E' END)
	   AND ITEM_ID   = I_SCHE_ID ;
	 COMMIT;
   

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
      
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result :=  'F';
        v_work_bigo   := I_SCHE_ID||' '||I_SCHE_STATUS||' ' ||SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE SP_EDU1030S02_02 (
   I_TENANT_ID    IN VARCHAR2
 , I_SCHE_ID      IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU1030S02_02
   PURPOSE:    평가계획관리 - 평가대상자관리 - 대상자조회(선택)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1030S02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT 
          --,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
          FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
           ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
            ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
          ,A.DEPT_CD
  		  ,A.SABUN
  		  ,A.AGENT_ID
  		  ,A.AGENT_NM
          ,A.TM_KIND
	      ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
	      ,FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
     FROM TB_CM_USER_MASTER A
    INNER JOIN TB_EDU_EXAM_TARGET B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
    WHERE 1=1 
      AND B.TENANT_ID = I_TENANT_ID
      AND B.SCHE_ID   = I_SCHE_ID
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2010M01_04" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SCHE_ID        IN VARCHAR2
    ,I_AGENT_ID       IN VARCHAR2  /* 변경대상자 ID */	 
    ,I_EXAM_STATUS    IN VARCHAR2
    ,I_LOGIN_ID	      IN VARCHAR2  /* 로그인사용자 ID */	 
) AS 
/******************************************************************************
   NAME:       SP_EDU2010M01_04
   PURPOSE:    업무평가응시 - 응시시작/답안제출

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/14  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2010M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.응시상태 갱신
-- ******************************************************************************** 
   UPDATE TB_EDU_EXAM_TARGET 
      SET EXAM_STATUS = I_EXAM_STATUS
        , EXAM_TAKE_DT = CASE I_EXAM_STATUS WHEN '20' THEN SYSDATE ELSE EXAM_TAKE_DT END /* 응시(20) 일때 응시일시 */
        , EXAM_STR_DT  = CASE I_EXAM_STATUS WHEN '30' THEN SYSDATE ELSE EXAM_STR_DT END  /* 진행(30) 일때 시작일시 */
        , MODIFY_DT    = SYSDATE
        , MODIFY_AGENT_ID =  I_LOGIN_ID
     WHERE TENANT_ID = I_TENANT_ID
       AND SCHE_ID   = I_SCHE_ID
       AND AGENT_ID  = I_AGENT_ID ;
       
    COMMIT;     

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.

    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2010M01_06" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID	      IN VARCHAR2  /* 로그인사용자 ID */	 
    ,I_SHEETKEY       IN VARCHAR2
    ,I_QUESTION_ID    IN VARCHAR2   
    ,I_ANSWER_VALUE   IN VARCHAR2 
) AS 
/******************************************************************************
   NAME:       SP_EDU2010M01_06
   PURPOSE:    업무평가응시 - 답항 저장

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/15  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2010M01_06';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.답항저장
-- ******************************************************************************** 

	MERGE INTO TB_EDU_EXAM_RESULT_DETAIL T 
	USING (SELECT I_TENANT_ID   AS TENANT_ID
				 ,I_SHEETKEY    AS SHEETKEY
				 ,I_QUESTION_ID AS QUESTION_ID
				 ,I_ANSWER_VALUE AS ANSWER_VALUE
			 FROM DUAL ) S
	ON (T.TENANT_ID = S.TENANT_ID AND T.SHEETKEY = S.SHEETKEY AND T.QUESTION_ID = S.QUESTION_ID)
	WHEN MATCHED THEN
	  UPDATE SET ANSWER_VALUE = S.ANSWER_VALUE
	            ,WORK_MEMB  = I_LOGIN_ID
	            ,WORK_DATE  = SYSDATE
	WHEN NOT MATCHED THEN
	INSERT ( TENANT_ID
			,SHEETKEY
			,QUESTION_ID
			,ANSWER_VALUE
			,SCORE
			,MOD_SCORE
			,RESULT_SCORE
			,WORK_MEMB
			,WORK_DATE)
	VALUES ( S.TENANT_ID
			,S.SHEETKEY
			,S.QUESTION_ID
			,S.ANSWER_VALUE
			,0
			,0
			,0
			,I_LOGIN_ID
			,SYSDATE) ;

-- ********************************************************************************
-- 1.로그저장
-- ******************************************************************************** 
	INSERT INTO TB_EDU_EXAM_LOG
	SELECT I_TENANT_ID   AS TENANT_ID
		  ,I_SHEETKEY    AS SHEETKEY
		  ,(SELECT NVL(MAX(SNO),0)+1 
		     FROM TB_EDU_EXAM_LOG S 
		    WHERE S.TENANT_ID = I_TENANT_ID
		      AND S.SHEETKEY  = I_SHEETKEY
		  ) AS SNO    
		  ,I_QUESTION_ID AS QUESTION_ID
		  ,I_LOGIN_ID AS AGENT_ID
		  ,I_ANSWER_VALUE AS ANSWER_VALUE
	      ,SYSDATE AS SAVE_TIME
	 FROM DUAL ;
  
  		
COMMIT;
   
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
         RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.

    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2020M01_01" (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_EDU_EVAL_TYPE IN VARCHAR2
 , I_EDU_EXAM_TYPE IN VARCHAR2
,  I_SCHE_STATUS   IN VARCHAR2 
 , I_SUBJECT       IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU2020M01_01
   PURPOSE:    평가진행관리 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/17  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    WITH TEMP_LIST AS (
    SELECT   A.TENANT_ID
    		,A.SCHE_ID
            ,A.SCHE_NM
            ,NVL(A.KPI_YN,0) AS KPI_YN
            ,A.EDU_EVAL_TYPE
            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EVAL_TYPE',A.EDU_EVAL_TYPE) AS EDU_EVAL_TYPE_NM
            ,A.EDU_EXAM_TYPE
            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EXAM_TYPE',A.EDU_EXAM_TYPE) AS EDU_EXAM_TYPE_NM
            ,A.SCHE_STATUS
            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'SCHE_STATUS',A.SCHE_STATUS) AS SCHE_STATUS_NM   
            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@-@@') AS EVAL_YMD
            ,FN_CM_STRING_FORMAT(A.STR_TM,'@@:@@') AS STR_TM
            ,FN_CM_STRING_FORMAT(A.END_TM,'@@:@@') AS END_TM
            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@') AS STD_MONTH
            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@-@@')
             ||' '||FN_CM_STRING_FORMAT(SUBSTR(A.STR_TM,1,4),'@@:@@')
             ||' ('||FLOOR(FN_CM_GET_TIME_DIFF_TO_SECOND(A.STR_TM,A.END_TM)/60)||'분)' 
             AS EXAM_PERIOD
            ,A.PASS_SCORE
            ,A.INFO_TEXT   
            ,NVL(A.RANDOM_YN,0)  AS RANDOM_YN             
            ,(SELECT COUNT(S.AGENT_ID) 
	                 FROM TB_EDU_EXAM_TARGET S
	                WHERE S.TENANT_ID = A.TENANT_ID
	                  AND S.SCHE_ID  = A.SCHE_ID
	                  AND S.EXAM_STATUS !='10' ) AS EXAM_CNT /* 응시자수 - 대상(10) 이외 상태 */
 		   ,(SELECT COUNT(S.AGENT_ID) 
	                 FROM TB_EDU_EXAM_TARGET S
	                WHERE S.TENANT_ID = A.TENANT_ID
	                  AND S.SCHE_ID  = A.SCHE_ID ) AS TARGET_CNT	                  
	        ,B.SHEET_ID
	        ,B.SHEET_NM 
     FROM TB_EDU_EXAM_SCHE A
     LEFT OUTER JOIN TB_EDU_SHEET_HEADER B ON ( A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID )
    WHERE A.TENANT_ID    = I_TENANT_ID
     AND A.EVAL_YMD BETWEEN I_DT_FROM AND I_DT_TO
     AND A.EDU_EVAL_TYPE = CASE WHEN I_EDU_EVAL_TYPE IS NULL THEN A.EDU_EVAL_TYPE ELSE I_EDU_EVAL_TYPE END    
     AND A.EDU_EXAM_TYPE = CASE WHEN I_EDU_EXAM_TYPE IS NULL THEN A.EDU_EXAM_TYPE ELSE I_EDU_EXAM_TYPE END
     AND A.SCHE_STATUS   = CASE WHEN I_SCHE_STATUS IS NULL   THEN A.SCHE_STATUS ELSE I_SCHE_STATUS END
     AND (( I_SUBJECT IS NULL AND 1=1 )
          OR (I_SUBJECT IS NOT NULL AND INSTR(A.SCHE_NM, I_SUBJECT) > 0))
     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
     AND EXISTS (SELECT 1 
     			   FROM TB_CM_ACCESS_SCOPE S 
     			  WHERE S.TENANT_ID   = A.TENANT_ID
     			    AND S.SCOPE_GUBUN = '30'
     			    AND S.ITEM_ID     = A.SCHE_ID
     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )      
   ) SELECT A.*
   		  ,TO_CHAR(EXAM_CNT)||'/'||TO_CHAR(TARGET_CNT) AS STARE_INFO
   		  ,TO_CHAR(ROUND((EXAM_CNT/(CASE TARGET_CNT WHEN 0 THEN 1 ELSE TARGET_CNT END))*100,2), 'FM990.00')||'%'  AS STARE_RATIO /* 응시율 */
      FROM TEMP_LIST A      
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2020M01_02" (
   I_TENANT_ID     IN VARCHAR2
 , I_SCHE_ID	   IN VARCHAR2
 , I_EXAM_STATUS   IN VARCHAR2  /* 콤마구분자로 넘겨 받는다*/ 
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU2020M01_02
   PURPOSE:    평가진행관리 - 목록조회2 >> 상담사별 응시상태 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/17  YAKIM
    1.1       2017/05/22  YAKIM           응시상태 조건 추가
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT   A.TENANT_ID
    		,A.SCHE_ID
            ,A.SCHE_NM
           ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'center', C.DEPT_CD) AS CENTER
           ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'part', C.DEPT_CD) AS PART
           ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'team', C.DEPT_CD) AS TEAM
           ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'jo', C.DEPT_CD) AS JO
           ,C.TM_KIND
           ,FN_CM_GET_CODE_NM(C.TENANT_ID,'TM_KIND', C.TM_KIND) AS TM_KIND_NM    
           ,C.SABUN
           ,C.AGENT_NM
           ,C.AGENT_JIKGUP
           ,FN_CM_GET_CODE_NM(C.TENANT_ID,'AGENT_JIKGUP', C.AGENT_JIKGUP) AS AGENT_JIKGUP_NM    
           ,C.AGENT_JIKCHK
           ,FN_CM_GET_CODE_NM(C.TENANT_ID,'AGENT_JIKCHK', C.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
           ,B.EXAM_STATUS
           ,FN_CM_GET_CODE_NM(B.TENANT_ID,'EXAM_STATUS', B.EXAM_STATUS) AS EXAM_STATUS_NM  
     FROM TB_EDU_EXAM_SCHE A
     INNER JOIN TB_EDU_EXAM_TARGET B ON ( A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID )
     INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
    WHERE A.TENANT_ID    = I_TENANT_ID
     AND A.SCHE_ID       = I_SCHE_ID
      AND ((I_EXAM_STATUS IS NULL AND 1=1)
           OR (I_EXAM_STATUS IS NOT NULL AND  INSTR(I_EXAM_STATUS, B.EXAM_STATUS) > 0))
     
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2020S01_01" (
   I_TENANT_ID     IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2  
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU2020S01_01
   PURPOSE:    평가진행관리 - 상세조회 팝업 >> 전체 상태별 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/17  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR 
	SELECT 
		COUNT(A.AGENT_ID) AS EXAM_STATUS0
		,NVL(SUM(CASE EXAM_STATUS WHEN '10' THEN 1 ELSE 0 END),0) AS EXAM_STATUS1
		,NVL(SUM(CASE EXAM_STATUS WHEN '20' THEN 1 ELSE 0 END),0) AS EXAM_STATUS2
		,NVL(SUM(CASE EXAM_STATUS WHEN '30' THEN 1 ELSE 0 END),0) AS EXAM_STATUS3
		,NVL(SUM(CASE EXAM_STATUS WHEN '40' THEN 1 ELSE 0 END),0) AS EXAM_STATUS4
		,NVL(SUM(CASE EXAM_STATUS WHEN '50' THEN 1 ELSE 0 END),0) AS EXAM_STATUS5
		,TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') AS SERVER_DATE
	FROM  TB_EDU_EXAM_TARGET A 
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.SCHE_ID     = I_SCHE_ID
	;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2020S01_02" (
   I_TENANT_ID     IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2  
 , I_EXAM_STATUS   IN VARCHAR2  /* 콤마구분자로 넘겨 받는다*/
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU2020S01_02
   PURPOSE:    평가진행관리 - 상세조회 팝업 >> 상담사별 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/17  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2020S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS (
	SELECT
		A.TENANT_ID
		,A.SCHE_ID
		,A.SCHE_NM
		,FN_CM_GET_DEPT_NM(C.TENANT_ID,'center', C.DEPT_CD) AS CENTER
		,FN_CM_GET_DEPT_NM(C.TENANT_ID,'part', C.DEPT_CD) AS PART
		,FN_CM_GET_DEPT_NM(C.TENANT_ID,'team', C.DEPT_CD) AS TEAM
		,FN_CM_GET_DEPT_NM(C.TENANT_ID,'jo', C.DEPT_CD) AS JO
		,FN_CM_GET_AGENT_NM(C.TENANT_ID, C.AGENT_ID) AS AGENT_NM
		,FN_CM_GET_AGENT_SABUN(C.TENANT_ID, C.AGENT_ID) AS AGENT_SABUN
		,B.EXAM_STATUS
		,FN_CM_GET_CODE_NM(B.TENANT_ID,'EXAM_STATUS', B.EXAM_STATUS) AS EXAM_STATUS_NM  
		,D.SHEETKEY
		,(SELECT COUNT(S.QUESTION_ID) 
			FROM TB_EDU_EXAM_RESULT_DETAIL S 
			WHERE S.TENANT_ID = D.TENANT_ID
			AND S.SHEETKEY  = D.SHEETKEY ) AS RESOLVED_CNT   
		,(SELECT COUNT(S.QUESTION_ID) 
		FROM TB_EDU_SHEET_DETAIL S 
		WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID) AS QUESTION_CNT               
	FROM TB_EDU_EXAM_SCHE A
	INNER JOIN TB_EDU_EXAM_TARGET B ON ( A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID )
	INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
	LEFT OUTER JOIN TB_EDU_EXAM_RESULT_HEADER D ON (A.TENANT_ID = D.TENANT_ID AND A.SCHE_ID = D.SCHE_ID AND A.SHEET_ID = D.SHEET_ID AND B.AGENT_ID = D.AGENT_ID)
	WHERE A.TENANT_ID    = I_TENANT_ID
	AND A.SCHE_ID      = I_SCHE_ID
	AND ((I_EXAM_STATUS IS NULL AND 1=1)
		OR (I_EXAM_STATUS IS NOT NULL AND  INSTR(I_EXAM_STATUS, B.EXAM_STATUS) > 0))
	)  
	SELECT 
		A.*
		,TO_CHAR(RESOLVED_CNT)||'/'||TO_CHAR(QUESTION_CNT) AS STARE_INFO
		,TO_CHAR(ROUND((RESOLVED_CNT/(CASE QUESTION_CNT WHEN 0 THEN 1 ELSE QUESTION_CNT END))*100,0), 'FM990')  AS STARE_RATIO /* 응시율 */
	FROM TEMP_LIST A      
	;     
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2030S01_01" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SHEETKEY       IN VARCHAR2
    ,I_SCHE_ID        IN VARCHAR2    
    ,I_SHEET_ID	      IN VARCHAR2
     ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_EDU2030S01_01
   PURPOSE:    평가이력조회 - 평가채점 팝업 - 문항목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/21  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2030S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ******************************************************************************** 
	OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS (
		SELECT
			A.TENANT_ID
			,A.SHEET_ID
			,B.QUESTION_ID
			,B.QUESTION_NO
			,B.WORK_TYPE1
			,B.WORK_TYPE2
			,B.QUESTION_TYPE
			,B.SCORE  /* 배점 */
			,B.ANSWER_CNT
			,B.AUTO_MARKING_YN
			,DBMS_LOB.SUBSTR(B.QUESTION, DBMS_LOB.GETLENGTH(B.QUESTION),1) AS QUESTION
			,B.DESCRIPT
			,A.EDU_SHEET_TYPE
			,FN_CM_GET_CODE_NM(B.TENANT_ID, 'WORK_TYPE1',B.WORK_TYPE1) AS WORK_TYPE1_NM
			,FN_CM_GET_CODE_NM(B.TENANT_ID, 'WORK_TYPE2',B.WORK_TYPE2) AS WORK_TYPE2_NM
			,FN_CM_GET_CODE_NM(B.TENANT_ID, 'QUESTION_TYPE',B.QUESTION_TYPE) AS QUESTION_TYPE_NM
			,C.ANSWER_VALUE AS ANSWER_VALUE
			,NVL(C.RESULT_SCORE,0) AS RESULT_SCORE
			,CASE WHEN B.SCORE = NVL(C.RESULT_SCORE,0) THEN 'correct' 
				WHEN NVL(C.RESULT_SCORE,0) > 0 AND NVL(C.RESULT_SCORE,0)< B.SCORE THEN 'middle'
				ELSE 'incorrect' END AS ANSWER_GUBUN /* html css 명 */
			,TO_CHAR(NVL(C.RESULT_SCORE,0))||'/'||TO_CHAR(B.SCORE) AS SCORE_INFO      
		FROM TB_EDU_SHEET_HEADER A
		INNER JOIN TB_EDU_SHEET_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
		LEFT OUTER JOIN TB_EDU_EXAM_RESULT_DETAIL C ON (B.TENANT_ID = C.TENANT_ID  AND C.SHEETKEY = I_SHEETKEY AND B.QUESTION_ID = C.QUESTION_ID )
		WHERE A.TENANT_ID = I_TENANT_ID
		AND A.SHEET_ID  = I_SHEET_ID
		ORDER BY B.QUESTION_NO
	)
	SELECT 
		ROWNUM AS RN
		, A.*
		, CASE WHEN ANSWER_GUBUN ='correct' THEN '○' 
				WHEN ANSWER_GUBUN ='middle' THEN '△'
				ELSE 'X' END AS ANSWER_GUBUN_NM
	FROM TEMP_LIST A 
	;
    

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU3010M01_01" (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_EDU_EVAL_TYPE IN VARCHAR2
 , I_EDU_EXAM_TYPE IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2 /* 콤마구분자로 여러건 */
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3010M01_01
   PURPOSE:    종합평가결과 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/24  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU3010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR
	WITH TEMP_LIST AS (
		SELECT
			A.TENANT_ID
			,A.SCHE_ID
			,A.SCHE_NM
			,NVL(A.KPI_YN,0) AS KPI_YN
			,A.EDU_EVAL_TYPE
			,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EVAL_TYPE',A.EDU_EVAL_TYPE) AS EDU_EVAL_TYPE_NM
			,A.EDU_EXAM_TYPE
			,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EXAM_TYPE',A.EDU_EXAM_TYPE) AS EDU_EXAM_TYPE_NM
			,A.SCHE_STATUS
			,FN_CM_GET_CODE_NM(A.TENANT_ID, 'SCHE_STATUS',A.SCHE_STATUS) AS SCHE_STATUS_NM
			,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@-@@') AS EVAL_YMD
			,FN_CM_STRING_FORMAT(A.STR_TM,'@@:@@') AS STR_TM
			,FN_CM_STRING_FORMAT(A.END_TM,'@@:@@') AS END_TM
			,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@') AS STD_MONTH
			,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@-@@')
				||' '||FN_CM_STRING_FORMAT(SUBSTR(A.STR_TM,1,4),'@@:@@')
				||' ('||FLOOR(FN_CM_GET_TIME_DIFF_TO_SECOND(A.STR_TM,A.END_TM)/60)||'분)' AS EXAM_PERIOD
			,A.PASS_SCORE
			,A.INFO_TEXT
			,NVL(A.RANDOM_YN,0)  AS RANDOM_YN
			,(SELECT COUNT(S.AGENT_ID)
				FROM TB_EDU_EXAM_TARGET S
				WHERE S.TENANT_ID = A.TENANT_ID
				AND S.SCHE_ID  = A.SCHE_ID
				AND S.EXAM_STATUS !='10' ) AS EXAM_CNT /* 응시자수 - 대상(10) 이외 상태 */
			,(SELECT COUNT(S.AGENT_ID)
				FROM TB_EDU_EXAM_TARGET S
				WHERE S.TENANT_ID = A.TENANT_ID
				AND S.SCHE_ID  = A.SCHE_ID ) AS TARGET_CNT
			,NVL((SELECT SUM(S.TOTAL_SCORE)
					FROM TB_EDU_EXAM_RESULT_HEADER S
					WHERE S.TENANT_ID = A.TENANT_ID
					AND S.SCHE_ID   = A.SCHE_ID      ),0) AS TOTAL_SCORE
			,(SELECT COUNT(S.AGENT_ID)
				FROM TB_EDU_EXAM_RESULT_HEADER S
				WHERE S.TENANT_ID = A.TENANT_ID
				AND S.SCHE_ID   = A.SCHE_ID ) AS TOTAL_CNT
			,B.SHEET_ID
			,B.SHEET_NM
		FROM TB_EDU_EXAM_SCHE A
		LEFT OUTER JOIN TB_EDU_SHEET_HEADER B ON ( A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID )
		WHERE A.TENANT_ID    = I_TENANT_ID
		AND A.EVAL_YMD BETWEEN I_DT_FROM||'01' AND I_DT_TO||'31'
		AND A.EDU_EVAL_TYPE = CASE WHEN I_EDU_EVAL_TYPE IS NULL THEN A.EDU_EVAL_TYPE ELSE I_EDU_EVAL_TYPE END
		AND A.EDU_EXAM_TYPE = CASE WHEN I_EDU_EXAM_TYPE IS NULL THEN A.EDU_EXAM_TYPE ELSE I_EDU_EXAM_TYPE END
		AND (( I_SCHE_ID IS NULL AND 1=1 )
			OR (I_SCHE_ID IS NOT NULL AND INSTR(I_SCHE_ID, A.SCHE_ID) > 0))
		/* 로그인 사용자의 부서가 관리소속 내 있는 것만*/
		AND EXISTS (SELECT 1
					FROM TB_CM_ACCESS_SCOPE S
					WHERE S.TENANT_ID   = A.TENANT_ID
					AND S.SCOPE_GUBUN = '30'
					AND S.ITEM_ID     = A.SCHE_ID
					AND S.DEPT_CD     = I_LOGIN_DEPT_CD )
		)
	SELECT 
		A.*
		,TO_CHAR(EXAM_CNT)||'('||TO_CHAR(TOTAL_CNT-EXAM_CNT)||')/'||TO_CHAR(TARGET_CNT) AS STARE_INFO
		,TO_CHAR(ROUND((EXAM_CNT/(CASE TARGET_CNT WHEN 0 THEN 1 ELSE TARGET_CNT END))*100,2), 'FM990.00')  AS STARE_RATIO /* 응시율 */
		,TO_CHAR(ROUND((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)),2), 'FM990.00') AS AVG_SCORE
	FROM TEMP_LIST A
	ORDER BY A.EVAL_YMD, A.SCHE_NM
	;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU3010M01_02" (
   I_TENANT_ID     IN VARCHAR2
 , I_SCHE_ID	   IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3010M01_02
   PURPOSE:    종합평가결과 - 개인별
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/24  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT   A.TENANT_ID
    		,A.SCHE_ID
            ,A.SCHE_NM
           ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'center', C.DEPT_CD) AS CENTER
           ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'part', C.DEPT_CD) AS PART
           ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'team', C.DEPT_CD) AS TEAM
           ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'jo', C.DEPT_CD) AS JO
           ,C.TM_KIND
           ,FN_CM_GET_CODE_NM(C.TENANT_ID,'TM_KIND', C.TM_KIND) AS TM_KIND_NM    
           ,C.SABUN
           ,C.AGENT_NM
           ,C.AGENT_JIKGUP
           ,FN_CM_GET_CODE_NM(C.TENANT_ID,'AGENT_JIKGUP', C.AGENT_JIKGUP) AS AGENT_JIKGUP_NM    
           ,C.AGENT_JIKCHK
           ,FN_CM_GET_CODE_NM(C.TENANT_ID,'AGENT_JIKCHK', C.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
           ,B.EXAM_STATUS
           ,FN_CM_GET_CODE_NM(B.TENANT_ID,'EXAM_STATUS', B.EXAM_STATUS) AS EXAM_STATUS_NM 
           ,(SELECT S.SHEET_NM
	           FROM TB_EDU_SHEET_HEADER S
	          WHERE S.TENANT_ID = A.TENANT_ID
	            AND S.SHEET_ID  = A.SHEET_ID      ) AS SHEET_NM 
	       ,D.TOTAL_SCORE
	       ,D.CONVERT_SCORE
	       ,D.TYPE_SCORE1
	       ,(D.TYPE_SCORE2 + D.TYPE_SCORE3 + D.TYPE_SCORE4) AS TYPE_SCORE2
	       ,D.TYPE_SCORE3
	       ,D.TYPE_SCORE4        
     FROM TB_EDU_EXAM_SCHE A
     INNER JOIN TB_EDU_EXAM_TARGET B ON ( A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID )
     INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
     INNER JOIN TB_EDU_EXAM_RESULT_HEADER D ON ( B.TENANT_ID = D.TENANT_ID AND B.SCHE_ID = D.SCHE_ID AND B.AGENT_ID =D.AGENT_ID )
    WHERE A.TENANT_ID    = I_TENANT_ID
     AND A.SCHE_ID       = I_SCHE_ID
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_EDU3010M01_03 (
   I_TENANT_ID     IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3010M01_03
   PURPOSE:    종합평가결과 - 직급별/직책별/업무그룹별/근속기간별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU3010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
		WITH TEMP_LIST AS (	                       
	    SELECT  FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD) AS CENTER
	           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD) AS PART
	           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD) AS TEAM
	           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD) AS JO
	           ,B.DEPT_CD
	           ,COUNT(A.AGENT_ID) AS TOTAL_CNT
	  		   ,SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
	      FROM TB_EDU_EXAM_RESULT_HEADER A
	     INNER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID )
	    WHERE A.TENANT_ID  = I_TENANT_ID
	      AND A.SCHE_ID    = I_SCHE_ID
	   GROUP BY B.TENANT_ID, B.DEPT_CD 
	  ) 
	  SELECT A.CENTER
	        ,A.PART
	        ,A.TEAM
	        ,A.JO
	        ,A.DEPT_CD
	        ,A.TOTAL_SCORE
	        ,A.TOTAL_CNT
	        ,TO_CHAR(ROUND((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)),1), 'FM990.0') AS TOTAL_AVG
	    FROM TEMP_LIST A
	  ORDER BY 1,2,3,4
	    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_EDU3010M01_04 (
   I_TENANT_ID     IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2
 , I_COLUMN_ID     IN VARCHAR2 /* 구분 - 1(직급별)/2(직책별)/3(업무그룹별)/4(근속기간별) */
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3010M01_04
   PURPOSE:    종합평가결과 - 직급별/직책별/업무그룹별/근속기간별 - 데이터목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/24  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU3010M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
		 	 SELECT A.TENANT_ID
			       ,A.AGENT_ID
				   ,A.TOTAL_SCORE
				   ,B.DEPT_CD
				   ,NVL((CASE I_COLUMN_ID WHEN '1' THEN B.AGENT_JIKGUP
			     					  WHEN '2' THEN B.AGENT_JIKCHK
			     					  WHEN '3' THEN B.TM_KIND
			     					  WHEN '4' THEN (SELECT S.CODE
										             FROM TB_CM_CODE S 
										            WHERE S.TENANT_ID = B.TENANT_ID 
										              AND S.SORT_CD   = 'WORK_PERIOD'
											          AND B.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
										             AND ROWNUM = 1 )  END),'NOITEM') AS COLUMN_ID /* 값이없거나 공통코드에 없는 값는 별도 컬럼으로  계산하기 위해 */
				  FROM TB_EDU_EXAM_RESULT_HEADER A
				  INNER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID )
				  WHERE A.TENANT_ID  = I_TENANT_ID
				    AND A.SCHE_ID    = I_SCHE_ID
	   ), TEMP_CD AS (
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_COLUMN_ID  WHEN '1' THEN 'AGENT_JIKGUP'
				     					 WHEN '2' THEN 'AGENT_JIKCHK'
				     					 WHEN '3' THEN 'TM_KIND'
				     					 WHEN '4' THEN 'WORK_PERIOD' END)
		), TEMP_LIST2 AS (  
				SELECT A.DEPT_CD
				       ,A.COLUMN_ID	
					  ,COUNT(A.AGENT_ID)  AS TOTAL_CNT
			  		  ,SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( A.COLUMN_ID = B.CODE )
			   GROUP BY A.TENANT_ID, A.DEPT_CD
			          , A.COLUMN_ID	
	          )  
      SELECT A.DEPT_CD
            ,A.COLUMN_ID
            ,A.TOTAL_SCORE
		     -- 응시인원(평균점수)    
			,TO_CHAR(TOTAL_CNT,'FM990')
			 ||'('||TO_CHAR(ROUND((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)),1), 'FM990.0') ||')' AS TOTAL_INFO
			 ,A.TOTAL_CNT
			 ,TO_CHAR(ROUND((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)),1), 'FM990.0') AS TOTAL_AVG
		FROM  TEMP_LIST2 A
		;  
			      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU3030M01_03" (
   I_TENANT_ID     IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2  
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3030M01_03
   PURPOSE:    평가항목별보고서 - 문항별 컬럼 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/29  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU3030M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
		SELECT B.QUESTION_ID AS CODE
		      ,TO_CHAR(B.QUESTION_NO) || '번 ('||TO_CHAR(B.SCORE )||')' AS CODE_NM
		      ,COUNT(B.QUESTION_ID) OVER(PARTITION BY B.TENANT_ID, B.SHEET_ID) AS TOTAL_CNT /* 문항옆에 건수 보이기 위해 */
		  FROM TB_EDU_EXAM_SCHE A 
		      INNER JOIN TB_EDU_SHEET_DETAIL B ON ( A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
		WHERE A.TENANT_ID  = I_TENANT_ID
		  AND A.SCHE_ID = I_SCHE_ID
  ORDER BY QUESTION_NO
       ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU3030M01_04" (
   I_TENANT_ID     IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2
 , I_SCORT_CD      IN VARCHAR2 /* 대분류 (WORK_TYPE1) /소분류(WORK_TYPE2) */  
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3030M01_04
   PURPOSE:    평가항목별보고서 - 업무구분별 컬럼 목록 조회 

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/30  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU3030M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
		WITH TEMP_LIST AS (
		SELECT NVL(B.CODE,'NOITEM') AS CODE
		     , NVL(B.CODE_NM,'코드없음') AS CODE_NM
		     , NVL(B.PARENT_CODE,A.CODE) AS PARENT_CODE
		     , NVL(B.SORT,999) AS SORT
			  FROM TB_CM_CODE A
			  LEFT OUTER JOIN (
			  SELECT CODE, CODE_NM
			  , CASE I_SCORT_CD WHEN 'WORK_TYPE1' THEN CODE ELSE USER_DATA1 END AS PARENT_CODE
			  ,SORT
			  FROM TB_CM_CODE 
			 WHERE SORT_CD = I_SCORT_CD
			   AND HIDE_YN = 0 ) B ON ( A.CODE = B.PARENT_CODE )
			 WHERE SORT_CD = 'WORK_TYPE1'
			   AND HIDE_YN = 0
		 )
		 , TEMP_LIST2 AS (
		  SELECT NVL(B.WORK_TYPE1,'NOITEM') AS WORK_TYPE1
		        ,NVL(B.WORK_TYPE2,'NOITEM') AS WORK_TYPE2
		        ,B.SCORE
		    FROM TB_EDU_EXAM_SCHE A
		    INNER JOIN TB_EDU_SHEET_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID )
		   WHERE  A.TENANT_ID = I_TENANT_ID
		      AND A.SCHE_ID   = I_SCHE_ID
		 ) 
		  SELECT /* 소분류일 경우 대분류||소분류 코드로 */
		         CASE I_SCORT_CD WHEN 'WORK_TYPE1' THEN A.CODE ELSE MAX(A.PARENT_CODE)||A.CODE END AS CODE
		        ,A.CODE_NM||'('||TO_CHAR(NVL(SUM(B.SCORE),0) )||')' AS CODE_NM
		        ,ROW_NUMBER() OVER( ORDER BY MAX(A.SORT)) AS SORT /* 코드순으로 정렬하기 위해  */
		        ,MAX(A.PARENT_CODE) AS PARENT_CODE
		     FROM TEMP_LIST A
		    LEFT OUTER JOIN TEMP_LIST2 B ON (
		             A.PARENT_CODE = NVL(B.WORK_TYPE1,'NOITEM')
		         AND A.CODE = NVL(CASE I_SCORT_CD WHEN 'WORK_TYPE1' THEN B.WORK_TYPE1 ELSE B.WORK_TYPE2 END,'NOITEM') )
		 GROUP BY A.PARENT_CODE, A.CODE , A.CODE_NM
         ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU4010M01_01" (
	I_TENANT_ID     IN VARCHAR2
  , I_LOGIN_DEPT_CD IN VARCHAR2
  , I_START_DT      IN VARCHAR2
  , I_END_DT        IN VARCHAR2
  , I_SCHE_NM       IN VARCHAR2
  , I_EDU_STATUS    IN VARCHAR2
  , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4010M01_01
   PURPOSE:    교육계획관리 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/20
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 

		SELECT A.TENANT_ID
		     , A.SCHE_ID
		     , FN_CM_STRING_FORMAT(A.STD_MONTH, '@@@@-@@') AS STD_MONTH
		     , A.SCHE_NM
		     , A.EDU_KIND AS EDU_KIND
			 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_KIND', A.EDU_KIND) AS EDU_KIND_NM
		     , A.EDU_TARGET AS EDU_TARGET
			 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_TARGET', A.EDU_TARGET) AS EDU_TARGET_NM
		     , A.START_YMD
		     , A.END_YMD
		     , TO_CHAR(TO_DATE(A.START_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') || '~' || TO_CHAR(TO_DATE(A.END_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')
		       || ' (' || (TO_DATE(A.END_YMD, 'YYYYMMDD') - TO_DATE(A.START_YMD, 'YYYYMMDD') + 1) || '일)' AS EDU_PERIOD		     		   
		     , A.EDU_STATUS AS EDU_STATUS
			 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_STATUS', A.EDU_STATUS) AS EDU_STATUS_NM
		     , A.NOTICE_YN
--		     , ( SELECT COUNT(T.SUBJECT_ID)
--		           FROM TB_EDU_SUBJECT T
--		          WHERE T.TENANT_ID = I_TENANT_ID
--		            AND T.SCHE_ID   = A.SCHE_ID ) AS SUBJECT_CNT
		     
		     , ( SELECT COUNT(T.SUBJECT_ID)
		           FROM TB_EDU_SUBJECT T
		          WHERE T.TENANT_ID = I_TENANT_ID
		            AND T.SCHE_ID   = A.SCHE_ID ) || ' ' ||
	          ( SELECT CASE WHEN SUM(TRUNC((TO_DATE(T.EDU_END_TM, 'HH24MI') - TO_DATE(T.EDU_START_TM, 'HH24MI')) * 24 * 60)) != 0
	                        THEN '(' || SUM(TRUNC((TO_DATE(T.EDU_END_TM, 'HH24MI') - TO_DATE(T.EDU_START_TM, 'HH24MI')) * 24 * 60)) || '분)'
	                        ELSE NULL END
 		           FROM TB_EDU_SUBJECT T
 		          WHERE T.TENANT_ID = I_TENANT_ID
 		            AND T.SCHE_ID   = A.SCHE_ID ) AS SUBJECT_CNT
             , ( SELECT COUNT(T.SCHE_ID)
                   FROM TB_EDU_TARGET T
                  WHERE T.TENANT_ID = I_TENANT_ID
                    AND T.SCHE_ID   = A.SCHE_ID ) AS TARGET_CNT
			 , ( SELECT WM_CONCAT(T.DEPT_CD) 
			       FROM TB_CM_ACCESS_SCOPE T 
			      WHERE T.TENANT_ID = I_TENANT_ID 
			        AND SCOPE_GUBUN = '80' 
			        AND T.ITEM_ID = A.SCHE_ID) AS DEPT1_ID                    
		  FROM TB_EDU_SCHE A
		 WHERE A.TENANT_ID  = I_TENANT_ID
		   AND (A.START_YMD BETWEEN I_START_DT AND I_END_DT 
				OR A.END_YMD BETWEEN I_START_DT AND I_END_DT )
		   AND ( ( I_SCHE_NM IS NULL AND 1 = 1 )   OR I_SCHE_NM    IS NOT NULL AND INSTR( I_SCHE_NM, A.SCHE_NM ) > 0)
		   AND ( ( I_EDU_STATUS IS NULL AND 1 = 1) OR I_EDU_STATUS IS NOT NULL AND INSTR( I_EDU_STATUS, A.EDU_STATUS) > 0)
	       AND EXISTS (SELECT 1 
 					     FROM TB_CM_ACCESS_SCOPE S 
						WHERE S.TENANT_ID   = A.TENANT_ID
						  AND S.SCOPE_GUBUN = '80'
						  AND S.ITEM_ID     = A.SCHE_ID
						  AND S.DEPT_CD     = I_LOGIN_DEPT_CD )     
		ORDER BY A.STD_MONTH, A.START_YMD, A.SCHE_NM
         ;
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU4010M01_02" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SCHE_ID	      IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU4010M01_02
   PURPOSE:    교육계획관리-복사

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/26
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
    V_SCHE_ID TB_EDU_SCHE.SCHE_ID%TYPE ;
    
 BEGIN
 
-- ********************************************************************************
-- 0.KEY 생성
-- ******************************************************************************** 
 -- V_SCHE_ID 생성
	SELECT LPAD(NVL(MAX(SCHE_ID),0)+1 ,10, '0') 
      INTO V_SCHE_ID 
      FROM TB_EDU_SCHE 
     WHERE TENANT_ID = I_TENANT_ID;

-- ********************************************************************************
-- 1. 평가계획  복사
-- ********************************************************************************              
		INSERT INTO TB_EDU_SCHE ( TENANT_ID
				                , SCHE_ID
				                , SCHE_NM
				                , EDU_KIND
   								, EDU_TARGET
   								, START_YMD
   								, END_YMD
   								, EDU_STATUS
   								, NOTICE_YN
				                , CREATE_AGENT_ID
				                , CREATE_DT
				                , MODIFY_AGENT_ID
				                , MODIFY_DT
 				         ) SELECT TENANT_ID
				                , V_SCHE_ID AS SCHE_ID
				                , SUBSTRB(SCHE_NM, 1, 180)||' - 복사본' AS SCHE_NM
				                , EDU_KIND
				                , EDU_TARGET
				                , START_YMD
				                , END_YMD				              
				                , '10' AS EDU_STATUS /* 준비중 상태로 복사 */
				                , '0'  AS NOTICE_YN				              
				                , I_LOGIN_ID   AS CREATE_AGENT_ID
				                , SYSTIMESTAMP AS CREATE_DT
				                , I_LOGIN_ID   AS MODIFY_AGENT_ID
				                , SYSTIMESTAMP AS MODIFY_DT
				             FROM TB_EDU_SCHE
				            WHERE TENANT_ID = I_TENANT_ID 
				              AND SCHE_ID   = I_SCHE_ID  ;
	      
	    COMMIT; 
-- ********************************************************************************
-- 2. 관리소속  복사
-- ********************************************************************************             
	INSERT INTO TB_CM_ACCESS_SCOPE ( TENANT_ID
								   , SCOPE_GUBUN
								   , ITEM_ID
								   , DEPT_CD
	  					   ) SELECT  TENANT_ID 
						           , SCOPE_GUBUN
 					               , V_SCHE_ID AS  ITEM_ID
					               , DEPT_CD
					            FROM TB_CM_ACCESS_SCOPE		 
					           WHERE TENANT_ID   = I_TENANT_ID 
					             AND SCOPE_GUBUN = '80'
					             AND ITEM_ID     = I_SCHE_ID  ;
	 COMMIT;


-- ********************************************************************************
-- 3. 과목  복사
-- ********************************************************************************             
	INSERT INTO TB_EDU_SUBJECT ( TENANT_ID
							   , SCHE_ID
							   , SUBJECT_ID
							   , SUBJECT_NM
							   , TEACHER_KIND
							   , TEACHER_ID
							   , TEACHER_NM
							   , EDU_YMD
							   , EDU_START_TM
							   , EDU_END_TM
							   , CLASSROOM_ID
							   , CREATE_AGENT_ID
							   , CREATE_DT
							   , MODIFY_AGENT_ID
							   , MODIFY_DT
  					   ) SELECT  TENANT_ID 
				               , V_SCHE_ID AS SCHE_ID
				               , SUBJECT_ID
				               , SUBJECT_NM
				               , TEACHER_KIND
				               , TEACHER_ID
				               , TEACHER_NM
				               , EDU_YMD
				               , EDU_START_TM
				               , EDU_END_TM
				               , CLASSROOM_ID
			                   , I_LOGIN_ID   AS CREATE_AGENT_ID
			                   , SYSTIMESTAMP AS CREATE_DT
			                   , I_LOGIN_ID   AS MODIFY_AGENT_ID
			                   , SYSTIMESTAMP AS MODIFY_DT
				            FROM TB_EDU_SUBJECT		 
				           WHERE TENANT_ID   = I_TENANT_ID 
				             AND SCHE_ID     = I_SCHE_ID  ;
	 COMMIT;


-- ********************************************************************************
-- 4. 평가대상  복사 
-- ********************************************************************************             
/*
   INSERT INTO TB_EDU_EXAM_TARGET(
               TENANT_ID
              ,SCHE_ID
              ,AGENT_ID
              ,EXAM_STATUS
              ,EXAM_TAKE_DT
              ,EXAM_STR_DT
              ,CREATE_AGENT_ID
              ,CREATE_DT
              ,MODIFY_AGENT_ID
              ,MODIFY_DT
      ) SELECT S.TENANT_ID
              ,V_SCHE_ID AS SCHE_ID
              ,S.AGENT_ID
              ,'10' AS EXAM_STATUS
              ,NULL AS EXAM_TAKE_DT
              ,NULL AS EXAM_STR_DT
             ,I_LOGIN_ID   AS CREATE_AGENT_ID
              ,SYSTIMESTAMP AS CREATE_DT
              ,I_LOGIN_ID   AS MODIFY_AGENT_ID
              ,SYSTIMESTAMP AS MODIFY_DT
        FROM TB_EDU_EXAM_TARGET S
       WHERE TENANT_ID = I_TENANT_ID 
         AND SCHE_ID   = I_SCHE_ID  ;
      COMMIT;
*/

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4010M01_03" (
	  I_TENANT_ID   IN VARCHAR2
	, I_SCHE_ID     IN VARCHAR2
) AS 

/******************************************************************************
   NAME:       SP_EDU4010M01_03
   PURPOSE:    교육계획 관리 - 삭제 (계획, 과목, 대상자)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/23
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_EDU4010M01_03';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	
BEGIN
		
	-- 계획 삭제	
	DELETE 
	  FROM TB_EDU_SCHE 
	 WHERE TENANT_ID = I_TENANT_ID 
	   AND SCHE_ID   = I_SCHE_ID ;
	   

	-- 과목 삭제
	DELETE
	  FROM TB_EDU_SUBJECT
	 WHERE TENANT_ID = I_TENANT_ID
	   AND SCHE_ID   = I_SCHE_ID ;
	   

	-- 대상자 삭제
	DELETE 
	  FROM TB_EDU_TARGET
	 WHERE TENANT_ID = I_TENANT_ID
	   AND SCHE_ID   = I_SCHE_ID ;
	          	
	          	
	-- 업무별 접근범위 정보 삭제
	DELETE
	  FROM TB_CM_ACCESS_SCOPE 
	 WHERE TENANT_ID = I_TENANT_ID
	   AND SCOPE_GUBUN = '80'
	   AND ITEM_ID = I_SCHE_ID ;
	          		   
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4010M01_04" (
	  I_TENANT_ID   IN VARCHAR2
	, I_LOGIN_ID    IN VARCHAR2
	, I_SCHE_ID     IN VARCHAR2
	, I_NOTICE_YN   IN VARCHAR2
) AS 

/******************************************************************************
   NAME:       SP_EDU4010M01_04
   PURPOSE:    교육계획 관리 - 공지/공지취소

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/27
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_EDU4010M01_04';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	
BEGIN
		
	UPDATE TB_EDU_SCHE
	   SET NOTICE_YN = I_NOTICE_YN
	     , MODIFY_AGENT_ID = I_LOGIN_ID
	     , MODIFY_DT = SYSDATE
	 WHERE TENANT_ID = I_TENANT_ID
	   AND SCHE_ID   = I_SCHE_ID  ;
	  

	          		   
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU4010S01_02" (
	I_TENANT_ID  IN VARCHAR2
  , I_SCHE_ID    IN VARCHAR2
  , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4010S01_02
   PURPOSE:    교육계획 관리 - 과목조회(팝업)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/22
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4010S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
	SELECT 
		A.SUBJECT_NM
		, A.TEACHER_KIND
		, A.TEACHER_ID
		, A.TEACHER_NM
		, A.EDU_YMD
		, A.EDU_START_TM
		, A.EDU_END_TM
		, A.CLASSROOM_ID
		, FN_CM_GET_CODE_NM(I_TENANT_ID, 'CLASSROOM_ID', A.CLASSROOM_ID) AS CLASSROOM_NM
		, TO_CHAR(TO_DATE(A.EDU_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || TO_CHAR(TO_DATE(A.EDU_START_TM, 'HH24MI'), 'HH24:MI')
			|| ' (' || TRUNC((TO_DATE(A.EDU_END_TM, 'HH24MI') - TO_DATE(A.EDU_START_TM, 'HH24MI')) * 24 * 60) || '분)' AS EDU_TIME
		, A.TENANT_ID
		, A.SCHE_ID
		, A.SUBJECT_ID		  
		, TO_CHAR(TO_DATE(A.EDU_YMD, 'YYYYMMDD'), 'MM/DD') AS SUBJECT_DT
		, TO_CHAR(TO_DATE(A.EDU_START_TM, 'HH24MI'), 'HH24:MI') ||
			CASE WHEN TRUNC((TO_DATE(A.EDU_END_TM, 'HH24MI') - TO_DATE(A.EDU_START_TM, 'HH24MI')) * 24 * 60) != 0
				THEN ' (' || TRUNC((TO_DATE(A.EDU_END_TM, 'HH24MI') - TO_DATE(A.EDU_START_TM, 'HH24MI')) * 24 * 60) || '분)'
				ELSE NULL END AS SUBJECT_TM
	FROM TB_EDU_SUBJECT A
	WHERE TENANT_ID = I_TENANT_ID
	AND SCHE_ID   = I_SCHE_ID
	ORDER BY A.EDU_YMD, A.EDU_START_TM;
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4010S01_03" (
	  I_TENANT_ID    IN VARCHAR2
	, I_AGENT_ID     IN VARCHAR2
	, I_CUD_GUBUN    IN VARCHAR2
	, I_SCHE_ID      IN VARCHAR2
	, I_SUBJECT_NM   IN VARCHAR2
	, I_TEACHER_KIND IN VARCHAR2
	, I_TEACHER_ID   IN VARCHAR2
	, I_TEACHER_NM   IN VARCHAR2
	, I_EDU_YMD      IN VARCHAR2
	, I_EDU_START_TM IN VARCHAR2
	, I_EDU_END_TM   IN VARCHAR2
	, I_CLASSROOM_ID IN VARCHAR2
) AS 

/******************************************************************************
   NAME:       SP_EDU4010S01_03
   PURPOSE:    교육계획 관리 - 과목 삭제/등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/23  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_EDU4010S01_03';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

	V_SUBJECT_ID		VARCHAR2(10)		:=''; 
	
BEGIN

  -- ********************************************************************************
  -- 1. 삭제, 등록
  -- ********************************************************************************

	IF I_CUD_GUBUN = 'D' THEN
	
		DELETE 
		  FROM TB_EDU_SUBJECT
		 WHERE TENANT_ID = I_TENANT_ID
		   AND SCHE_ID   = I_SCHE_ID ;


	ELSIF I_CUD_GUBUN = 'I' THEN

		SELECT CASE WHEN CHK.SUBJECT_ID IS NULL THEN TO_CHAR(SYSDATE, 'YYYYMM') || '0001'
	                ELSE TO_CHAR(SYSDATE, 'YYYYMM') || SUBSTR(CHK.SUBJECT_ID, 7, 4)
	                 END INTO V_SUBJECT_ID
		  FROM (SELECT MAX(SUBJECT_ID + 1) AS SUBJECT_ID
	      		  FROM TB_EDU_SUBJECT
	      		 WHERE 1 = 1 
	               AND TENANT_ID = I_TENANT_ID
		           AND TO_CHAR(SYSDATE, 'YYYYMM') = SUBSTR(SUBJECT_ID, 0, 6)) CHK; 


		INSERT INTO TB_EDU_SUBJECT ( TENANT_ID
							       , SCHE_ID
							       , SUBJECT_ID
								   , SUBJECT_NM
								   , TEACHER_KIND
								   , TEACHER_ID
								   , TEACHER_NM					   
								   , EDU_YMD					   
								   , EDU_START_TM
								   , EDU_END_TM
								   , CLASSROOM_ID
			   					   , CREATE_AGENT_ID
								   , CREATE_DT
				          ) VALUES ( I_TENANT_ID
				                   , I_SCHE_ID
				                   , V_SUBJECT_ID
				                   , I_SUBJECT_NM
				                   , I_TEACHER_KIND
				                   , CASE WHEN I_TEACHER_ID = 'null' THEN NULL ELSE I_TEACHER_ID END
				                   , I_TEACHER_NM
				                   , I_EDU_YMD
				                   , I_EDU_START_TM
				                   , I_EDU_END_TM
				                   , I_CLASSROOM_ID
				                   , I_AGENT_ID
				          		   , SYSDATE
				          		   ) ;
	          			     			          		   
	END IF;


	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU4010S03_01" (
	I_TENANT_ID  IN VARCHAR2
  , I_SCHE_ID    IN VARCHAR2
  , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4010S03_01
   PURPOSE:    교육계획 관리 - 과목정보 상세보기

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/26
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4010S03_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 	
	SELECT 
		A.TENANT_ID
		, A.SCHE_ID
		, A.SUBJECT_ID
		, A.SUBJECT_NM
		, A.TEACHER_KIND
		, A.TEACHER_ID
		, A.TEACHER_NM
		, TO_CHAR(TO_DATE(A.EDU_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS EDU_YMD
		, TO_CHAR(TO_DATE(A.EDU_START_TM, 'HH24MI'), 'HH24:MI') AS EDU_START_TM
		, TO_CHAR(TO_DATE(A.EDU_END_TM, 'HH24MI'), 'HH24:MI') AS EDU_END_TM
		, A.CLASSROOM_ID
	FROM TB_EDU_SUBJECT A
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.SCHE_ID   = I_SCHE_ID
	ORDER BY A.EDU_YMD, A.EDU_START_TM
	;
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU4020M01_01" (
	I_TENANT_ID     IN VARCHAR2
  , I_LOGIN_DEPT_CD IN VARCHAR2
  , I_STD_MONTH     IN VARCHAR2
  , I_SCHE_ID       IN VARCHAR2
  , I_EDU_STATUS    IN VARCHAR2
  , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4020M01_01
   PURPOSE:    교육진행관리 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/27
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
	SELECT
		A.TENANT_ID
		, A.SCHE_ID
		, FN_CM_STRING_FORMAT(A.STD_MONTH, '@@@@-@@') AS STD_MONTH
		, A.SCHE_NM
		, A.EDU_KIND AS EDU_KIND
		, FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_KIND', A.EDU_KIND) AS EDU_KIND_NM
		, A.EDU_TARGET AS EDU_TARGET
		, FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_TARGET', A.EDU_TARGET) AS EDU_TARGET_NM
		, A.START_YMD
		, A.END_YMD
		, TO_CHAR(TO_DATE(A.START_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') || '~' || TO_CHAR(TO_DATE(A.END_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')
			|| ' (' || (TO_DATE(A.END_YMD, 'YYYYMMDD') - TO_DATE(A.START_YMD, 'YYYYMMDD') + 1) || '일)' AS EDU_PERIOD		     		   
		, A.EDU_STATUS AS EDU_STATUS
		, FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_STATUS', A.EDU_STATUS) AS EDU_STATUS_NM
		, A.NOTICE_YN		     
		,( SELECT COUNT(T.SUBJECT_ID)
			FROM TB_EDU_SUBJECT T
			WHERE T.TENANT_ID = I_TENANT_ID
			AND T.SCHE_ID   = A.SCHE_ID ) || ' ' ||
		( SELECT CASE WHEN SUM(TRUNC((TO_DATE(T.EDU_END_TM, 'HH24MI') - TO_DATE(T.EDU_START_TM, 'HH24MI')) * 24 * 60)) != 0
					THEN '(' || SUM(TRUNC((TO_DATE(T.EDU_END_TM, 'HH24MI') - TO_DATE(T.EDU_START_TM, 'HH24MI')) * 24 * 60)) || '분)'
					ELSE NULL END
			FROM TB_EDU_SUBJECT T
			WHERE T.TENANT_ID = I_TENANT_ID
			AND T.SCHE_ID   = A.SCHE_ID ) AS SUBJECT_CNT
		,( SELECT COUNT(T.SUBJECT_ID)
			FROM TB_EDU_SUBJECT T
			WHERE T.TENANT_ID = I_TENANT_ID
			AND T.SCHE_ID   = A.SCHE_ID ) AS SUBJECT_CNT_POP
		,( SELECT CASE WHEN SUM(TRUNC((TO_DATE(T.EDU_END_TM, 'HH24MI') - TO_DATE(T.EDU_START_TM, 'HH24MI')) * 24 * 60)) != 0
					THEN SUM(TRUNC((TO_DATE(T.EDU_END_TM, 'HH24MI') - TO_DATE(T.EDU_START_TM, 'HH24MI')) * 24 * 60)) || '분'
					ELSE NULL END
			FROM TB_EDU_SUBJECT T
			WHERE T.TENANT_ID = I_TENANT_ID
			AND T.SCHE_ID   = A.SCHE_ID ) AS SUBJECT_TM_POP
		,( SELECT COUNT(T.SCHE_ID)
			FROM TB_EDU_TARGET T
			WHERE T.TENANT_ID = I_TENANT_ID
			AND T.SCHE_ID   = A.SCHE_ID ) AS TARGET_CNT
		,( SELECT WM_CONCAT(T.DEPT_CD) 
			FROM TB_CM_ACCESS_SCOPE T 
			WHERE T.TENANT_ID = I_TENANT_ID 
			AND SCOPE_GUBUN = '80' 
			AND T.ITEM_ID = A.SCHE_ID) AS DEPT1_ID                    
	FROM TB_EDU_SCHE A
	WHERE A.TENANT_ID  = I_TENANT_ID
	AND STD_MONTH = I_STD_MONTH
	AND ( ( I_SCHE_ID IS NULL AND 1 = 1 )   OR I_SCHE_ID    IS NOT NULL AND INSTR( I_SCHE_ID, A.SCHE_ID ) > 0)
	AND ( ( I_EDU_STATUS IS NULL AND 1 = 1) OR I_EDU_STATUS IS NOT NULL AND INSTR( I_EDU_STATUS, A.EDU_STATUS) > 0)
	AND EXISTS (SELECT 1 
				FROM TB_CM_ACCESS_SCOPE S 
				WHERE S.TENANT_ID   = A.TENANT_ID
				AND S.SCOPE_GUBUN = '80'
				AND S.ITEM_ID     = A.SCHE_ID
				AND S.DEPT_CD     = I_LOGIN_DEPT_CD )     
	ORDER BY A.STD_MONTH, A.START_YMD, A.SCHE_NM
	;
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4020M01_02" (
   I_TENANT_ID   IN VARCHAR2
 , I_LOGIN_ID    IN VARCHAR2
 , I_SCHE_ID     IN VARCHAR2
 , I_EDU_STATUS  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU4020M01_02
   PURPOSE:    교육진행관리 - 상태변경 (진행/완료/취소)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/28
    
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 	 
BEGIN
 
	UPDATE TB_EDU_SCHE
	   SET EDU_STATUS = I_EDU_STATUS
	     , MODIFY_AGENT_ID = I_LOGIN_ID
	     , MODIFY_DT = SYSDATE
	 WHERE TENANT_ID  = I_TENANT_ID
	   AND SCHE_ID    = I_SCHE_ID  ; 
 
 
COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4020S01_02" (
	I_TENANT_ID     IN VARCHAR2
  , I_LOGIN_ID      IN VARCHAR2
  , I_SCHE_ID       IN VARCHAR2
  , I_AGENT_ID      IN VARCHAR2
  , I_SUBJECT_ID    IN VARCHAR2
  , I_ATTENDANCE_YN IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU4020S01_02
   PURPOSE:    교육진행 관리 - 출석부(팝업) 등록/수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/29
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4020S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
BEGIN

	
	     MERGE INTO TB_EDU_ATTENDANCE T
	  	 USING (SELECT I_TENANT_ID  AS TENANT_ID
	                 , I_SCHE_ID    AS SCHE_ID
	                 , I_AGENT_ID   AS AGENT_ID
	                 , I_SUBJECT_ID AS SUBJECT_ID
	              FROM DUAL ) S
	        ON ( T.TENANT_ID  = S.TENANT_ID 
	             AND T.SCHE_ID    = S.SCHE_ID
	             AND T.AGENT_ID   = S.AGENT_ID
	             AND T.SUBJECT_ID = S.SUBJECT_ID)
	                    
			WHEN MATCHED THEN
			
				UPDATE SET ATTENDANCE_YN   = I_ATTENDANCE_YN
				         , MODIFY_AGENT_ID = I_LOGIN_ID
				         , MODIFY_DT       = SYSDATE             
					
			WHEN NOT MATCHED THEN
			
				INSERT ( TENANT_ID
				       , SCHE_ID
				       , SUBJECT_ID
				       , AGENT_ID
				       , ATTENDANCE_YN
				       , CREATE_AGENT_ID
				       , CREATE_DT
	          ) VALUES ( I_TENANT_ID
	          		   , I_SCHE_ID
	          		   , I_SUBJECT_ID
	          		   , I_AGENT_ID
	          		   , I_ATTENDANCE_YN
	          		   , I_LOGIN_ID
	          		   , SYSTIMESTAMP
	          		   ) ;	    

	
	COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

create or replace PROCEDURE "SP_EDU4020S01_03" (
	I_TENANT_ID  IN VARCHAR2
  , I_SCHE_ID    IN VARCHAR2
  , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4020S01_03
   PURPOSE:    교육진행관리 - 출석부(팝업) - 출석여부 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/29
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4020S01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
		
		SELECT TENANT_ID
		     , SCHE_ID
		     , SUBJECT_ID
		     , AGENT_ID
		     , ATTENDANCE_YN
		     , SATISFACTION_SCORE
		     , SATISFACTION_COMMENT
		  FROM TB_EDU_ATTENDANCE
		 WHERE TENANT_ID = I_TENANT_ID
		   AND SCHE_ID   = I_SCHE_ID;
		
		 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4020S02_02" (
	I_TENANT_ID     IN VARCHAR2
  , I_LOGIN_ID      IN VARCHAR2
  , I_SCHE_ID       IN VARCHAR2
  , I_AGENT_ID      IN VARCHAR2
  , I_COMPLETE_YN   IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU4020S02_02
   PURPOSE:    교육진행관리 - 교육이수/승인(팝업) - 이수/취소

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/30
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4020S02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
BEGIN

	UPDATE TB_EDU_TARGET
	   SET COMPLETE_YN = I_COMPLETE_YN
	     , MODIFY_AGENT_ID = I_LOGIN_ID
	     , MODIFY_DT = SYSDATE
     WHERE TENANT_ID = I_TENANT_ID
       AND SCHE_ID   = I_SCHE_ID
       AND AGENT_ID  = I_AGENT_ID ;
    

	
	COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4020S03_01" (
	I_TENANT_ID     IN VARCHAR2
  , I_LOGIN_ID      IN VARCHAR2
  , I_SCHE_ID       IN VARCHAR2
  , I_AGENT_ID      IN VARCHAR2
  , I_GONGMU_GBN    IN VARCHAR2
  , I_GONGMU_YN     IN VARCHAR2  
  , I_GONGMU_TM     IN NUMBER
) AS 
/******************************************************************************
   NAME:       SP_EDU4020S03_01
   PURPOSE:    교육진행관리 - 교육이수/승인(팝업) - 공무승인/취소

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/30
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4020S03_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
	V_GONGMU_TM  TB_EDU_TARGET.GONGMU_TM%TYPE ;
    
BEGIN
 
-- ********************************************************************************
-- 0. 출석기준 선택 시 시간 조회
-- ******************************************************************************** 

	SELECT SUM(TRUNC((TO_DATE(C.EDU_END_TM, 'HH24MI') - TO_DATE(C.EDU_START_TM, 'HH24MI')) * 24 * 60)) INTO V_GONGMU_TM
	  FROM TB_EDU_TARGET A INNER JOIN TB_EDU_ATTENDANCE B
	    ON A.TENANT_ID = B.TENANT_ID
	   AND A.SCHE_ID   = B.SCHE_ID
	   AND A.AGENT_ID  = B.AGENT_ID
	 INNER JOIN TB_EDU_SUBJECT C
	    ON A.TENANT_ID  = C.TENANT_ID
	   AND A.SCHE_ID    = C.SCHE_ID
       AND B.SUBJECT_ID = C.SUBJECT_ID
	 WHERE B.AGENT_ID   = I_AGENT_ID
	   AND B.ATTENDANCE_YN = 1  ;
	   
	   
	UPDATE TB_EDU_TARGET
	   SET GONGMU_YN = I_GONGMU_YN
	     , GONGMU_TM = CASE WHEN I_GONGMU_GBN = 'A' THEN V_GONGMU_TM
	                        WHEN I_GONGMU_GBN = 'U' THEN I_GONGMU_TM
	                        WHEN I_GONGMU_GBN = 'C' THEN 0 END
	     , MODIFY_AGENT_ID = I_LOGIN_ID
	     , MODIFY_DT = SYSDATE
	 WHERE TENANT_ID = I_TENANT_ID
	   AND SCHE_ID   = I_SCHE_ID
	   AND AGENT_ID  = I_AGENT_ID ;

	
	
	COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4030S01_01" (
	I_TENANT_ID  IN VARCHAR2
  , I_SCHE_ID    IN VARCHAR2
  , I_AGENT_ID   IN VARCHAR2
  , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4030S01_01
   PURPOSE:    대상자이력 조회 - 상세보기(팝업) : 과목/강사 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/03
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4030S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
	SELECT 
		A.TENANT_ID
		, A.SCHE_ID
		, A.SUBJECT_ID
		, CASE WHEN VSIZE(A.SUBJECT_NM) > 40 THEN  SUBSTRB(A.SUBJECT_NM, 0, 40) || '...'
			ELSE A.SUBJECT_NM 
			END AS SUBJECT_NM
		, A.TEACHER_ID
		, A.TEACHER_NM
		, B.ATTENDANCE_YN
		, B.SATISFACTION_SCORE AS SATIS_SCORE
		, B.SATISFACTION_COMMENT AS SATIS_COMMENT
	FROM TB_EDU_SUBJECT A
	LEFT OUTER JOIN TB_EDU_ATTENDANCE B 
		ON A.TENANT_ID = B.TENANT_ID 
		AND A.SCHE_ID = B.SCHE_ID 
		AND A.SUBJECT_ID = B.SUBJECT_ID 
		AND B.AGENT_ID = I_AGENT_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.SCHE_ID   = I_SCHE_ID
	ORDER BY A.EDU_YMD, EDU_START_TM ;
	  

         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4030S01_02" (
	I_TENANT_ID   IN VARCHAR2
  , I_LOGIN_ID    IN VARCHAR2
  , I_SCHE_ID     IN VARCHAR2
  , I_SUBJECT_ID  IN VARCHAR2
  , I_AGENT_ID    IN VARCHAR2
  , I_SCORE       IN VARCHAR2
  , I_COMMENT     IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU4030S01_02
   PURPOSE:    대상자이력 조회 - 상세보기(팝업) : 변경사항 저장

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/04
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4030S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
BEGIN

	
     MERGE INTO TB_EDU_ATTENDANCE T
  	 USING (SELECT I_TENANT_ID  AS TENANT_ID
                 , I_SCHE_ID    AS SCHE_ID
                 , I_SUBJECT_ID AS SUBJECT_ID	                 
                 , I_AGENT_ID   AS AGENT_ID
              FROM DUAL ) S
        ON ( T.TENANT_ID  = S.TENANT_ID 
             AND T.SCHE_ID    = S.SCHE_ID
             AND T.SUBJECT_ID = S.SUBJECT_ID
             AND T.AGENT_ID   = S.AGENT_ID)
                    
		WHEN MATCHED THEN
		
			UPDATE SET SATISFACTION_SCORE   = I_SCORE
			         , SATISFACTION_COMMENT = I_COMMENT
			         , MODIFY_AGENT_ID = I_LOGIN_ID
			         , MODIFY_DT       = SYSTIMESTAMP             
				
		WHEN NOT MATCHED THEN
		
			INSERT ( TENANT_ID
			       , SCHE_ID
			       , SUBJECT_ID
			       , AGENT_ID
			       , ATTENDANCE_YN
			       , SATISFACTION_SCORE
			       , SATISFACTION_COMMENT
			       , CREATE_AGENT_ID
			       , CREATE_DT
			       , MODIFY_AGENT_ID
			       , MODIFY_DT
          ) VALUES ( I_TENANT_ID
          		   , I_SCHE_ID
          		   , I_SUBJECT_ID
          		   , I_AGENT_ID
          		   , 0
          		   , I_SCORE
          		   , I_COMMENT
          		   , I_LOGIN_ID
          		   , SYSTIMESTAMP
          		   , I_LOGIN_ID
          		   , SYSTIMESTAMP
          		   ) ;	    

	COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4040S01_01" (
	I_TENANT_ID   IN VARCHAR2
  , I_SCHE_ID     IN VARCHAR2
  , I_SUBJECT_ID  IN VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4040S01_01
   PURPOSE:    강의이력 조회 - 교육만족도(팝업) - 코멘트 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/05
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4040S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
	SELECT 
		A.SCHE_ID
		, A.SUBJECT_ID
		, A.AGENT_ID
		, FN_CM_GET_AGENT_NM(I_TENANT_ID, A.AGENT_ID)    AS AGENT_NM
		, FN_CM_GET_AGENT_SABUN(I_TENANT_ID, A.AGENT_ID) AS SABUN
		, A.SATISFACTION_SCORE
		, '[' || FN_CM_GET_CODE_NM(I_TENANT_ID, 'SATISFACTION_SCORE', A.SATISFACTION_SCORE) || ']' AS SATISFACTION_SCORE_NM
		, A.SATISFACTION_COMMENT AS SATIS_COMMENT
		, CASE WHEN A.MODIFY_DT IS NOT NULL THEN TO_CHAR(A.MODIFY_DT, 'YYYY-MM-DD HH24:MI:SS')
			ELSE TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD HH24:MI:SS') END AS CREATE_DT
	FROM TB_EDU_ATTENDANCE A
	WHERE A.TENANT_ID  = I_TENANT_ID
	AND A.SCHE_ID    = I_SCHE_ID
	AND A.SUBJECT_ID = I_SUBJECT_ID
	AND A.SATISFACTION_COMMENT IS NOT NULL
	ORDER BY A.MODIFY_DT DESC
	;

         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1010M01_02 (
   I_TENANT_ID    IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1010M01_02
   PURPOSE:    상담사정보관리 - 발령정보

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/08  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 상담사 정보 조회
-- ********************************************************************************    
  
    OPEN O_CUR_LIST FOR 
    SELECT FN_CM_STRING_FORMAT(A.OFFICIAL_ORDER_YMD,'@@@@-@@-@@') AS OFFICIAL_ORDER_YMD 
          , A.APPOINT_KIND
    	  , FN_CM_GET_CODE_NM(A.TENANT_ID,'APPOINT_KIND',A.APPOINT_KIND) AS APPOINT_KIND_NM
          , A.BF_DEPT_NM
          , A.BF_TMKIND_NM
          , A.BF_JIKGUP_NM
          , A.BF_JIKCHK_NM    	  
          , A.AF_DEPT_NM
          , A.AF_TMKIND_NM
          , A.AF_JIKGUP_NM
          , A.AF_JIKCHK_NM
          , FN_CM_GET_AGENT_NM(A.TENANT_ID, A.WORK_MEMB) AS WORK_MEMB_NM
          , TO_CHAR(A.WORK_YMD,'YYYY-MM-DD HH24:MI:SS') AS WORK_YMD
    FROM TB_HR_OFFICIAL_ORDER A
    WHERE A.TENANT_ID = I_TENANT_ID
      AND A.AGENT_ID  = I_AGENT_ID
     ORDER BY A.OFFICIAL_ORDER_YMD DESC, SNO DESC
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1010M01_03 (
   I_TENANT_ID    IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1010M01_03
   PURPOSE:    상담사정보관리 - 변경이력

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/09  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  
    OPEN O_CUR_LIST FOR 
    
    SELECT A.CREATE_AGENT_ID
        ,FN_CM_GET_AGENT_NM(I_TENANT_ID, A.CREATE_AGENT_ID) AS CREATE_AGENT_NM
		,TO_CHAR(CREATE_DT,'YYYY-MM-DD HH24:MI:SS') AS CREATE_DT
		,AGENT_ID 
		,ASIS_AGENT_NM 
		,TOBE_AGENT_NM 
		,ASIS_AGENT_PW 
		,TOBE_AGENT_PW 
		,ASIS_SABUN 
		,TOBE_SABUN 
		,ASIS_JIKJONG_KIND 
		,TOBE_JIKJONG_KIND 
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'JIKJONG_KIND',A.ASIS_JIKJONG_KIND) AS ASIS_JIKJONG_KIND_NM
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'JIKJONG_KIND',A.TOBE_JIKJONG_KIND) AS TOBE_JIKJONG_KIND_NM
		,ASIS_DAYNIGHT_GUBUN
		,TOBE_DAYNIGHT_GUBUN 
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'DAYNIGHT_GUBUN',A.ASIS_DAYNIGHT_GUBUN) AS ASIS_DAYNIGHT_GUBUN_NM
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'DAYNIGHT_GUBUN',A.TOBE_DAYNIGHT_GUBUN) AS TOBE_DAYNIGHT_GUBUN_NM
		,FN_CM_STRING_FORMAT(A.ASIS_BIRTH_YMD,'@@@@-@@-@@') AS ASIS_BIRTH_YMD 
		,FN_CM_STRING_FORMAT(A.TOBE_BIRTH_YMD,'@@@@-@@-@@') AS TOBE_BIRTH_YMD 
		,ASIS_HIDE_YN 
		,TOBE_HIDE_YN 
		,ASIS_TEL_NO 
		,TOBE_TEL_NO 
		,ASIS_GRANT_ID
		,(SELECT S.GRANT_NM FROM TB_CM_GRANT_HEADER S WHERE S.TENANT_ID = I_TENANT_ID AND S.GRANT_ID = A.ASIS_GRANT_ID) AS ASIS_GRANT_NM
		,TOBE_GRANT_ID
		,(SELECT S.GRANT_NM FROM TB_CM_GRANT_HEADER S WHERE S.TENANT_ID = I_TENANT_ID AND S.GRANT_ID = A.TOBE_GRANT_ID) AS TOBE_GRANT_NM
     FROM TB_CM_USER_MASTER_MOD A
	WHERE 1=1 -- A.TENANT_ID = I_TENANT_ID
	  AND A.AGENT_ID  = I_AGENT_ID
	 ORDER BY A.CREATE_DT DESC
    ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1010M01_04 (
   I_TENANT_ID    IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1010M01_04
   PURPOSE:    상담사정보관리 - 경력사항

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/09  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1010M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  
    OPEN O_CUR_LIST FOR 
    SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') AS CHANGE_YMD
          ,'변경항목' AS CHANGE_GUBUN_NM
          ,'변경전'  AS BF_CHANGE
          ,'변경후'  AS AF_CHANGE
          ,'변경자'  AS WORK_MEMB_NM
     FROM DUAL     ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1010M01_05 (
   I_TENANT_ID    IN VARCHAR2
 , I_LOGIN_ID     IN VARCHAR2 /* 로그인사용자ID */   
 , I_CUD_GUBUN    IN VARCHAR2  /* C/U/D  */
 , I_AGENT_ID     IN VARCHAR2
 , I_PWD          IN VARCHAR2
 , I_IMG_PATH     IN VARCHAR2
 , I_IMG_REAL_FILE_NM  IN VARCHAR2
 , I_IMG_USER_FILE_NM  IN VARCHAR2  
) AS 
/******************************************************************************
   NAME:       SP_HR1010M01_05
   PURPOSE:    상담사정보관리 - 비밀번호초기화/잠금해제/삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/09  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1010M01_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 저장
-- ********************************************************************************    
  
 IF I_CUD_GUBUN ='INITPWD' THEN /* 비밀번호 초기화  */
		UPDATE TB_CM_USER_MASTER 
		   SET AGENT_PW = I_PWD
		      ,LOGIN_TRY_COUNT = 0
		      ,MODIFY_AGENT_ID = I_LOGIN_ID
		      ,MODIFY_DT       = SYSTIMESTAMP
		 WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
	 	COMMIT;
 	
 ELSIF I_CUD_GUBUN ='UNLOCK' THEN  /* 잠금해제 */
	 	UPDATE TB_CM_USER_MASTER 
	 	   SET LOCK_YN = 0
	 	      ,LOGIN_TRY_COUNT = 0
		      ,MODIFY_AGENT_ID = I_LOGIN_ID
		      ,MODIFY_DT       = SYSTIMESTAMP 	    
	 	 WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
	 	COMMIT;
	 	
 ELSIF I_CUD_GUBUN ='IMGUUPLOAD' THEN  /* 사진업로드 */
	 	UPDATE TB_CM_USER_MASTER 
	 	   SET IMG_PATH = I_IMG_PATH
	 	      ,IMG_REAL_FILENAME = I_IMG_REAL_FILE_NM
	 	      ,IMG_USER_FILENAME = I_IMG_USER_FILE_NM
		      ,MODIFY_AGENT_ID   = I_LOGIN_ID
		      ,MODIFY_DT         = SYSTIMESTAMP 	    
	 	 WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
	 	COMMIT; 	
	 	
 ELSIF I_CUD_GUBUN ='DEL' THEN   /* 삭제 */
	  	DELETE FROM TB_CM_USER_MASTER WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
	  	DELETE FROM TB_CM_USER_DETAIL WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
	  	DELETE FROM TB_HR_OFFICIAL_ORDER WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
	  	COMMIT;
 END IF;
    
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
   
   RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1010S03_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1010S03_01
   PURPOSE:    상담사정보관리 - 결재선관리-조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/02  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1010S03_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  
    OPEN O_CUR_LIST FOR 
	SELECT A.CODE
	     , A.CODE_NM 
	     , NVL(B.AGENT_ID ,I_AGENT_ID) AS AGENT_ID
	     , B.APPROVAL_ID1
	     , B.APPROVAL_ID2
	     , B.APPROVAL_ID3 
		 , FN_CM_GET_AGENT_NM(B.TENANT_ID, B.APPROVAL_ID1) AS APPROVAL_AGENT_NM1
		 , FN_CM_GET_AGENT_NM(B.TENANT_ID, B.APPROVAL_ID2) AS APPROVAL_AGENT_NM2
		 , FN_CM_GET_AGENT_NM(B.TENANT_ID, B.APPROVAL_ID3) AS APPROVAL_AGENT_NM3
	  FROM TB_CM_CODE A
	  LEFT OUTER JOIN TB_CM_APPROVAL_LINE B ON ( A.TENANT_ID = B.TENANT_ID AND A.CODE = B.APPROVAL_KIND AND B.AGENT_ID = I_AGENT_ID)
	 WHERE A.TENANT_ID = I_TENANT_ID 
	   AND A.SORT_CD = 'APPROVAL_KIND'
	   AND A.HIDE_YN = 0
	 ORDER BY A.SORT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_HR1010S03_02 (
      I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_CUD_GUBUN      IN VARCHAR2  /* U/D  */
    , I_AGENT_ID       IN VARCHAR2
    , I_APPROVAL_KIND  IN VARCHAR2
    , I_APPROVAL_ID1   IN VARCHAR2    
    , I_APPROVAL_ID2   IN VARCHAR2
    , I_APPROVAL_ID3   IN VARCHAR2    
) AS 
/******************************************************************************
   NAME:       SP_HR1010S03_02
   PURPOSE:    상담사정보관리 - 결재선관리-저장 또는 삭제(AGENT별 결재라인 삭제)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/02  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2030S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.근태신청 등록/수정
-- ********************************************************************************    
  IF (I_CUD_GUBUN ='D') THEN /* 결재라인 삭제 */
  
    DELETE FROM TB_CM_APPROVAL_LINE WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
    COMMIT;

 ELSIF (I_CUD_GUBUN ='U') THEN   
 
  MERGE INTO TB_CM_APPROVAL_LINE T
    USING (SELECT  I_TENANT_ID      AS TENANT_ID
                  , I_AGENT_ID      AS AGENT_ID
                  , I_APPROVAL_KIND AS APPROVAL_KIND
                  , I_APPROVAL_ID1  AS APPROVAL_ID1
                  , I_APPROVAL_ID2  AS APPROVAL_ID2
                  , I_APPROVAL_ID3  AS APPROVAL_ID3                                    
             FROM DUAL ) S
    ON (  T.TENANT_ID     = S.TENANT_ID 
      AND T.AGENT_ID      = S.AGENT_ID
      AND T.APPROVAL_KIND = S.APPROVAL_KIND)
    WHEN MATCHED THEN
      UPDATE SET    APPROVAL_ID1 = S.APPROVAL_ID1
                  , APPROVAL_ID2 = S.APPROVAL_ID2
                  , APPROVAL_ID3 = S.APPROVAL_ID3
        --          , MODIFY_AGENT_ID = I_LOGIN_ID
        --          , MODIFY_DT = SYSTIMESTAMP
    WHEN NOT MATCHED THEN
      INSERT(   TENANT_ID
              , AGENT_ID
              , APPROVAL_KIND
              , APPROVAL_ID1
              , APPROVAL_ID2
              , APPROVAL_ID3                           
              , CREATE_AGENT_ID
              , CREATE_DT
    --          , MODIFY_AGENT_ID
     --         , MODIFY_DT

      ) VALUES (  S.TENANT_ID
                , S.AGENT_ID
                , S.APPROVAL_KIND
                , S.APPROVAL_ID1
                , S.APPROVAL_ID2
                , S.APPROVAL_ID3
                , I_LOGIN_ID
                , SYSTIMESTAMP
       --         , I_LOGIN_ID
       --         , SYSTIMESTAMP
      )  ;
      
    COMMIT; 
    
 END IF;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1020M01_02 (
   I_TENANT_ID           IN VARCHAR2
  ,I_LOGIN_ID            IN VARCHAR2
  ,I_AGENT_ID            IN VARCHAR2
  ,I_SNO				 IN VARCHAR2
)AS 
/******************************************************************************
   NAME:       SP_HR1020M01_02
   PURPOSE:    상담사 발령 - 예약취소
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/15  YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN 
 
-- ********************************************************************************
-- 0. 신규발령인 경우 USER 삭제 >> 신규발령은 발령일자 상관없이 바로 시행이므로 예약취소가 없다..
-- ******************************************************************************** 
/* 
	DELETE FROM TB_CM_USER_MASTER A
	    WHERE EXISTS (SELECT 1 
	                    FROM  TB_HR_OFFICIAL_ORDER S
	                   WHERE S.TENANT_ID = I_TENANT_ID
	                     AND S.AGENT_ID  = I_AGENT_ID
	                     AND S.SNO       = I_SNO
	                     AND S.APPOINT_KIND = '00'  
	                     AND S.TENANT_ID = A.TENANT_ID
	                     AND S.AGENT_ID  = A.AGENT_ID ) ;
	                     
	DELETE FROM TB_CM_USER_DETAIL A
	    WHERE EXISTS (SELECT 1 
	                    FROM  TB_HR_OFFICIAL_ORDER S
	                   WHERE S.TENANT_ID = I_TENANT_ID
	                     AND S.AGENT_ID  = I_AGENT_ID
	                     AND S.SNO       = I_SNO
	                     AND S.APPOINT_KIND = '00'  
	                     AND S.TENANT_ID = A.TENANT_ID
	                     AND S.AGENT_ID  = A.AGENT_ID ) ;
	                     
	COMMIT;                     
 */
-- ********************************************************************************
-- 0. 발령이력 삭제
-- ********************************************************************************    
   DELETE FROM TB_HR_OFFICIAL_ORDER 
     WHERE TENANT_ID = I_TENANT_ID 
       AND AGENT_ID  = I_AGENT_ID 
       AND SNO       = I_SNO ;
    COMMIT;           
        
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1030M01_03 (
     I_TENANT_ID         IN VARCHAR2
    ,I_LOGIN_ID          IN VARCHAR2
    ,I_AGENT_ID          IN VARCHAR2    
    ,I_STD_MONTH 		 IN VARCHAR2
    ,I_SCHE_TARGET_YN    IN NUMBER
    ,I_EDU_TARGET_YN     IN NUMBER
    ,I_QA_TARGET_YN      IN NUMBER
    ,I_KPI_TARGET_YN     IN NUMBER
) AS 
/******************************************************************************
   NAME:       SP_HR1030M01_03
   PURPOSE:    평가대상자관리 - 저장

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/15  YAKIM
******************************************************************************/
   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1030M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN 
    
-- ********************************************************************************
-- 1. 상담사 이력 테이블 수정
-- ******************************************************************************** 
                
	 UPDATE TB_CM_USER_MASTER_HISTORY SET
	         SCHE_TARGET_YN   = NVL(I_SCHE_TARGET_YN,0)
	        ,EDU_TARGET_YN    = NVL(I_EDU_TARGET_YN,0)
	        ,QA_TARGET_YN     = NVL(I_QA_TARGET_YN,0)
	        ,KPI_TARGET_YN    = NVL(I_KPI_TARGET_YN,0)
	        ,MODIFY_AGENT_ID = I_LOGIN_ID
	        ,MODIFY_DT       = SYSTIMESTAMP
	 WHERE TENANT_ID = I_TENANT_ID 
	   AND AGENT_ID  = I_AGENT_ID 
	   AND STD_MONTH = I_STD_MONTH;
	COMMIT ;   
 
-- ********************************************************************************
-- 2. 당월건일 경우 상담사 정보도 수정
-- ********************************************************************************     
	IF I_STD_MONTH = TO_CHAR(SYSDATE, 'YYYYMM') THEN
		 UPDATE TB_CM_USER_MASTER SET
		         SCHE_TARGET_YN   = NVL(I_SCHE_TARGET_YN,0)
		        ,EDU_TARGET_YN    = NVL(I_EDU_TARGET_YN,0)
		        ,QA_TARGET_YN     = NVL(I_QA_TARGET_YN,0)
		        ,KPI_TARGET_YN    = NVL(I_KPI_TARGET_YN,0)
		        ,MODIFY_AGENT_ID = I_LOGIN_ID
		        ,MODIFY_DT       = SYSTIMESTAMP
		 WHERE TENANT_ID = I_TENANT_ID 
		   AND AGENT_ID  = I_AGENT_ID ;
		COMMIT ;
	
	END IF;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  -- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
       
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1030S01_01 (
     I_TENANT_ID         IN VARCHAR2
    ,I_LOGIN_ID          IN VARCHAR2
    ,I_AGENT_ID          IN VARCHAR2    
    ,I_STD_MONTH 		 IN VARCHAR2
    ,I_DEPT_CD           IN VARCHAR2
    ,I_TM_KIND           IN VARCHAR2
    ,I_AGENT_JIKGUP	     IN VARCHAR2
    ,I_AGENT_JIKCHK      IN VARCHAR2
    ,I_JIKJONG_KIND      IN VARCHAR2
    ,I_ENTER_YMD         IN VARCHAR2        
    ,I_JAEJIK_GUBUN      IN VARCHAR2 )
 AS 
/******************************************************************************
   NAME:       SP_HR1030S01_01
   PURPOSE:    평가대상자관리 - 개인정보변경 저장

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/15  YAKIM
******************************************************************************/
   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1030S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN 
    
-- ********************************************************************************
-- 1. 상담사 이력 테이블 수정
-- ******************************************************************************** 
                
	 UPDATE TB_CM_USER_MASTER_HISTORY SET
	         DEPT_CD		  = I_DEPT_CD
	        ,TM_KIND		  = I_TM_KIND
	        ,AGENT_JIKGUP     = I_AGENT_JIKGUP
	        ,AGENT_JIKCHK     = I_AGENT_JIKCHK
	        ,JIKJONG_KIND     = I_JIKJONG_KIND
	        ,ENTER_YMD        = I_ENTER_YMD
	        ,JAEJIK_GUBUN     = I_JAEJIK_GUBUN
	        /* 재직으로 수정 시 퇴직관련 컬럼 초기화 */
	        ,RETIRE_YMD       = (CASE WHEN I_JAEJIK_GUBUN = '10' THEN '' ELSE RETIRE_YMD END)
	        ,RETIRE_GUBUN     = (CASE WHEN I_JAEJIK_GUBUN = '10' THEN '' ELSE RETIRE_GUBUN END)
	        ,RETIRE_RSN       = (CASE WHEN I_JAEJIK_GUBUN = '10' THEN '' ELSE RETIRE_RSN END)
	        ,MODIFY_AGENT_ID = I_LOGIN_ID
	        ,MODIFY_DT       = SYSTIMESTAMP
	 WHERE TENANT_ID = I_TENANT_ID 
	   AND AGENT_ID  = I_AGENT_ID 
	   AND STD_MONTH = I_STD_MONTH;
	COMMIT ;   
 
-- ********************************************************************************
-- 2. 당월건일 경우 상담사 정보도 수정
-- ********************************************************************************     
	IF I_STD_MONTH = TO_CHAR(SYSDATE, 'YYYYMM') THEN
		 UPDATE TB_CM_USER_MASTER SET
		         DEPT_CD		  = I_DEPT_CD
		        ,TM_KIND		  = I_TM_KIND
		        ,AGENT_JIKGUP     = I_AGENT_JIKGUP
		        ,AGENT_JIKCHK     = I_AGENT_JIKCHK
		        ,JIKJONG_KIND     = I_JIKJONG_KIND
		        ,ENTER_YMD        = I_ENTER_YMD
		        ,JAEJIK_GUBUN     = I_JAEJIK_GUBUN
		        /* 재직으로 수정 시 퇴직관련 컬럼 초기화 */
		        ,RETIRE_YMD       = (CASE WHEN I_JAEJIK_GUBUN = '10' THEN '' ELSE RETIRE_YMD END)
		        ,RETIRE_GUBUN     = (CASE WHEN I_JAEJIK_GUBUN = '10' THEN '' ELSE RETIRE_GUBUN END)
		        ,RETIRE_RSN       = (CASE WHEN I_JAEJIK_GUBUN = '10' THEN '' ELSE RETIRE_RSN END)
		        ,MODIFY_AGENT_ID = I_LOGIN_ID
		        ,MODIFY_DT       = SYSTIMESTAMP
		 WHERE TENANT_ID = I_TENANT_ID 
		   AND AGENT_ID  = I_AGENT_ID ;
		COMMIT ;
	
	END IF;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  -- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
       
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2010S01_01
(
    I_TENANT_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_HR2010S01_01
   PURPOSE:    근무유형관리

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/02/14
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_HR2010S01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
      SELECT
		 WORK_ID
		,WORK_NM 
		,WORK_FRM_TM
		,WORK_END_TM
		,NEXT_DAY_YN
		,MEET_LATE_TM
		,JOB_LATE_TM
		,MEAL_FRM_TM
		,MEAL_END_TM
		,WORK_TM
		,HIDE_YN
		,DEFAULT_YN
	  FROM TB_HR_WORK_TYPE A
	  WHERE TENANT_ID = I_TENANT_ID
	  ORDER BY WORK_ID;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2010S01_02 
(
	I_TENANT_ID    IN VARCHAR2,
	I_GBN          IN VARCHAR2,
	I_AGENT_ID     IN VARCHAR2,
	I_WORK_ID      IN VARCHAR2,
	I_WORK_NM      IN VARCHAR2,
	I_WORK_FRM_TM  IN VARCHAR2,
	I_WORK_END_TM  IN VARCHAR2,
	I_NEXT_DAY_YN  IN VARCHAR2,
	I_MEET_LATE_TM IN VARCHAR2,
	I_JOB_LATE_TM  IN VARCHAR2,
	I_MEAL_FRM_TM  IN VARCHAR2,
	I_MEAL_END_TM  IN VARCHAR2,
	I_HIDE_YN      IN VARCHAR2,
	I_DEFAULT_YN   IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR2010S01_02
   PURPOSE:    근무유형관리 데이터 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/02/14
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2010S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
    
    I_N_WORK_ID   VARCHAR2(5);
    V_WORK_TIME   VARCHAR2(4);
    
BEGIN
	
	IF I_NEXT_DAY_YN = '1' THEN
		SELECT FN_CM_GET_TIME_DIFF_TO_HHMI(0, FN_CM_GET_TIME_DIFF_TO_HHMI(1, I_WORK_FRM_TM, I_WORK_END_TM), FN_CM_GET_TIME_DIFF_TO_HHMI(0, I_MEAL_FRM_TM, I_MEAL_END_TM)) INTO V_WORK_TIME FROM DUAL;
	ELSE
		SELECT FN_CM_GET_TIME_DIFF_TO_HHMI(0, FN_CM_GET_TIME_DIFF_TO_HHMI(0, I_WORK_FRM_TM, I_WORK_END_TM), FN_CM_GET_TIME_DIFF_TO_HHMI(0, I_MEAL_FRM_TM, I_MEAL_END_TM)) INTO V_WORK_TIME FROM DUAL;
	END IF;
	
	
	
	IF I_GBN = 'C' THEN
		SELECT 
			CASE WHEN CHK.WORK_ID IS NULL THEN '00001'
				ELSE CHK.WORK_ID
				END INTO I_N_WORK_ID
		FROM(
			SELECT
				LPAD(MAX(WORK_ID+1),5,'0') AS WORK_ID
			FROM TB_HR_WORK_TYPE
		) CHK;
    
      INSERT INTO TB_HR_WORK_TYPE 
        (TENANT_ID
        ,WORK_ID
		,WORK_NM 
		,WORK_FRM_TM
		,WORK_END_TM
		,NEXT_DAY_YN
		,MEET_LATE_TM
		,JOB_LATE_TM
		,MEAL_FRM_TM
		,MEAL_END_TM
		,WORK_TM
		,HIDE_YN
		,DEFAULT_YN
		,CREATE_AGENT_ID
		,CREATE_DT) 
      VALUES
        (I_TENANT_ID
        ,I_N_WORK_ID
		,I_WORK_NM 
		,I_WORK_FRM_TM
		,I_WORK_END_TM
		,I_NEXT_DAY_YN
		,I_MEET_LATE_TM
		,I_JOB_LATE_TM
		,I_MEAL_FRM_TM
		,I_MEAL_END_TM
		,V_WORK_TIME
		,I_HIDE_YN
		,I_DEFAULT_YN
		,I_AGENT_ID
		,SYSDATE);
      
    ELSIF I_GBN = 'U' THEN
      UPDATE TB_HR_WORK_TYPE SET 
         WORK_NM = I_WORK_NM
		,WORK_FRM_TM = I_WORK_FRM_TM
		,WORK_END_TM = I_WORK_END_TM
		,NEXT_DAY_YN = I_NEXT_DAY_YN
		,MEET_LATE_TM = I_MEET_LATE_TM
		,JOB_LATE_TM = I_JOB_LATE_TM
		,MEAL_FRM_TM = I_MEAL_FRM_TM
		,MEAL_END_TM = I_MEAL_END_TM
		,WORK_TM = V_WORK_TIME
		,HIDE_YN = I_HIDE_YN
		,DEFAULT_YN = I_DEFAULT_YN
        ,MODIFY_AGENT_ID = I_AGENT_ID
        ,MODIFY_DT = sysdate
      WHERE TENANT_ID = I_TENANT_ID
      AND WORK_ID = I_WORK_ID;

    ELSIF I_GBN = 'D' THEN
      DELETE FROM TB_HR_WORK_TYPE
      WHERE TENANT_ID = I_TENANT_ID
      AND WORK_ID = I_WORK_ID;    
      
    END IF;
    
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2010S02_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_HR2010S02_01
   PURPOSE:    근무유형

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/02/08
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_HR2010S02_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
      SELECT
		WORK_ID||'^'||SUBSTR(WORK_FRM_TM, 0, 2)||':'||SUBSTR(WORK_FRM_TM, 3, 2)
		||'~'||SUBSTR(WORK_END_TM, 0, 2)||':'||SUBSTR(WORK_END_TM, 3, 2)||' ('||TO_CHAR(TO_TIMESTAMP(WORK_TM, 'HH24:MI'), 'HH24:MI')||')' AS CODE
		, WORK_NM AS CODE_NM
	  FROM TB_HR_WORK_TYPE A
	  WHERE 1=1
	  AND TENANT_ID = I_TENANT_ID
	  AND HIDE_YN = 0;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2010S02_02 
(
  I_TENANT_ID        IN  VARCHAR2,
  I_AGENT_ID         IN  VARCHAR2,
  I_WORK_ID          IN  VARCHAR2,
  I_STD_MONTH        IN  VARCHAR2,
  I_WORK_MEMB        IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR2010S02_02
   PURPOSE:    근무유형 변경

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/01/10  JYMOON
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2010S02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
	
BEGIN
    
	MERGE INTO TB_HR_AGENT_WORK A
		USING (
			SELECT REPLACE(I_STD_MONTH,'-','') AS I_STD_MONTH, I_TENANT_ID AS I_TENANT_ID, I_AGENT_ID AS I_AGENT_ID, I_WORK_ID AS I_WORK_ID 
			FROM DUAL 
		) B
			ON (A.TENANT_ID = B.I_TENANT_ID AND A.STD_MONTH = B.I_STD_MONTH AND A.AGENT_ID = B.I_AGENT_ID)
		
		WHEN MATCHED THEN
			UPDATE SET 
				 A.WORK_ID         = I_WORK_ID
				,A.MODIFY_AGENT_ID = I_WORK_MEMB
				,A.MODIFY_DT       = SYSDATE
		WHEN NOT MATCHED THEN
			INSERT 
			(
				STD_MONTH,        TENANT_ID,         AGENT_ID,      WORK_ID,       CREATE_AGENT_ID,
				CREATE_DT,        MODIFY_AGENT_ID,   MODIFY_DT
			) VALUES (
				I_STD_MONTH,      I_TENANT_ID,       I_AGENT_ID,    I_WORK_ID,     I_WORK_MEMB,
				SYSDATE,          I_WORK_MEMB,       SYSDATE
			);
						
	COMMIT;
   
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2020S01_01
(
  	I_TENANT_ID    IN VARCHAR2,
  	I_AGENT_ID     IN VARCHAR2,
  	I_LAZY_TYPE    IN VARCHAR2,
  	I_AGENT_ID_YMD IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR2020S01_01
   PURPOSE:    지각처리 업데이트

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/02/14
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
    
    I_N_WORK_ID   VARCHAR2(5);
    
BEGIN

    UPDATE TB_HR_AGENT_ABSENCE SET 
         LAZY_TYPE = I_LAZY_TYPE
        ,MODIFY_AGENT_ID = I_AGENT_ID
        ,MODIFY_DT = sysdate
      WHERE TENANT_ID = I_TENANT_ID
      AND AGENT_ID||WORK_YMD = I_AGENT_ID_YMD;
    
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2020S02_01
(
  	I_TENANT_ID    IN VARCHAR2,
  	I_AGENT_ID     IN VARCHAR2,
  	I_REASONABLE   IN VARCHAR2,
  	I_AGENT_ID_YMD IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR2020S02_01
   PURPOSE:    정당성인정 업데이트

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/02/14
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2020S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
    
    I_N_WORK_ID   VARCHAR2(5);
    
BEGIN

    UPDATE TB_HR_AGENT_ABSENCE SET 
         REASONABLE_YN = I_REASONABLE
        ,MODIFY_AGENT_ID = I_AGENT_ID
        ,MODIFY_DT = sysdate
      WHERE TENANT_ID = I_TENANT_ID
      AND AGENT_ID||WORK_YMD = I_AGENT_ID_YMD;
    
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2020S03_01
(
  	I_TENANT_ID      IN VARCHAR2,
  	I_AGENT_ID       IN VARCHAR2,
  	I_WARNING_INFO   IN VARCHAR2,
  	I_AGENT_ID_SABUN IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR2020S03_01
   PURPOSE:    근태현황 업데이트

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/02/20
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2020S03_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
    
    I_N_WORK_ID   VARCHAR2(5);
    
BEGIN

    UPDATE TB_CM_USER_MASTER SET 
         WARNING_INFO = I_WARNING_INFO
        ,MODIFY_AGENT_ID = I_AGENT_ID
        ,MODIFY_DT = sysdate
      WHERE TENANT_ID = I_TENANT_ID
      AND AGENT_ID||SABUN = I_AGENT_ID_SABUN;
    
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2020S03_02 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_AGENT_ID    IN  VARCHAR2
  , I_DT_FROM     IN  NUMBER
  , I_DT_TO	      IN  NUMBER
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_HR2020S03_02
   PURPOSE:    CTI일일근무현황 상세보기

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/02/20
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_HR2020S03_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    
    OPEN O_CUR_LIST FOR 
        SELECT 
			SUBSTR(WORK_YMD, 0, 6) AS COLUMN_ID
			, LAZY_TYPE 
			, FN_CM_GET_CODE_NM(I_TENANT_ID,'LAZY_TYPE', LAZY_TYPE) AS LAZY_NM
			, COUNT(*) AS TOTAL_CNT
		FROM TB_HR_AGENT_ABSENCE
		WHERE TENANT_ID = I_TENANT_ID 
		AND AGENT_ID = I_AGENT_ID
		AND SUBSTR(WORK_YMD, 0, 6) BETWEEN I_DT_FROM AND I_DT_TO
		AND LAZY_TYPE IN ('40', '50', '60')
		GROUP BY SUBSTR(WORK_YMD, 0, 6), LAZY_TYPE ORDER BY SUBSTR(WORK_YMD, 0, 6), LAZY_TYPE;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_HR2030S01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2   
 , I_APPROVAL_ID   IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR2030S01_01
   PURPOSE:    근태신청/처리 - 근태신청 - 결재라인 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/27  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2030S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************   
IF I_APPROVAL_ID IS NOT NULL THEN  /* 조회 인 경우*/
  OPEN O_CUR_LIST FOR 	
	SELECT A.TENANT_ID
	      ,A.APPROVAL_STATUS
		  ,B.SNO
		  ,B.APPROVAL_AGENT_ID
		  ,FN_CM_GET_AGENT_NM(B.TENANT_ID, B.APPROVAL_AGENT_ID) AS APPROVAL_AGENT_NM
	 	  ,FN_CM_GET_AGENT_SABUN(B.TENANT_ID, B.APPROVAL_AGENT_ID) AS APPROVAL_AGENT_SABUN
		  ,TO_CHAR(B.APPROVAL_DT,'YYYY-MM-DD') AS APPROVAL_DT
		  ,TO_CHAR(B.APPROVAL_DT,'HH24:MI:SS') AS APPROVAL_TIME
		  ,B.APPROVAL_CODE
		  ,FN_CM_GET_CODE_NM(B.TENANT_ID, 'APPROVAL_CODE', B.APPROVAL_CODE) AS APPROVAL_CODE_NM
		  ,B.APPROVAL_COMMENT
	  FROM TB_CM_APPROVAL_HEADER A
	  INNER JOIN TB_CM_APPROVAL_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.APPROVAL_ID = B.APPROVAL_ID )
	  WHERE A.TENANT_ID   = I_TENANT_ID
	    AND B.APPROVAL_ID = I_APPROVAL_ID
	  ORDER BY B.SNO
     ;

ELSE /* 신규인 경우  해당 AGENT의 결재선  조회 */
	OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS (
	SELECT A.TENANT_ID
		  ,'00' AS APPROVAL_STATUS /* 작성중 상태로 */		  
	      ,A.AGENT_ID
	      ,A.SABUN
	      ,A.AGENT_NM
	      /* 개별결재라인이 없을 경우 소속부서의 결재라인으로 */
	      ,NVL(C.APPROVAL_ID1, B.APPROVAL_ID1) AS APPROVAL_ID1
	      ,NVL2(C.APPROVAL_ID1, C.APPROVAL_ID2, B.APPROVAL_ID2) AS APPROVAL_ID2
	      ,NVL2(C.APPROVAL_ID1, C.APPROVAL_ID3, B.APPROVAL_ID3) AS APPROVAL_ID3
	  FROM TB_CM_USER_MASTER A 
	   INNER JOIN TB_CM_DEPT_CD B ON (A.TENANT_ID = B.TENANT_ID AND A.DEPT_CD = B.DEPT_CD )
	   LEFT OUTER JOIN TB_CM_APPROVAL_LINE C ON (A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID AND C.APPROVAL_KIND='10' /* 근태 결재라인*/)
	  WHERE A.TENANT_ID = I_TENANT_ID
	    AND A.AGENT_ID  = I_AGENT_ID
	) , TEMP_LIST2 AS (
	  SELECT A.TENANT_ID
	        ,A.APPROVAL_STATUS
	        ,1 AS SNO
	 	 	,A.APPROVAL_ID1 AS APPROVAL_AGENT_ID
	    FROM TEMP_LIST A 
	   UNION ALL
		SELECT A.TENANT_ID
	        ,A.APPROVAL_STATUS
	        ,2 AS SNO
	 	 	,A.APPROVAL_ID2 AS APPROVAL_AGENT_ID
	    FROM TEMP_LIST A
	   UNION ALL
		SELECT A.TENANT_ID
	        ,A.APPROVAL_STATUS
	        ,3 AS SNO
	 	 	,A.APPROVAL_ID3 AS APPROVAL_AGENT_ID
	    FROM TEMP_LIST A 
    ) SELECT A.TENANT_ID
    	    ,A.APPROVAL_STATUS
    	    ,A.SNO
    	    ,A.APPROVAL_AGENT_ID
	 	 	,FN_CM_GET_AGENT_NM(A.TENANT_ID, A.APPROVAL_AGENT_ID) AS APPROVAL_AGENT_NM
	 	 	,FN_CM_GET_AGENT_SABUN(A.TENANT_ID, A.APPROVAL_AGENT_ID) AS APPROVAL_AGENT_SABUN
	 	 	,'' AS APPROVAL_DT
	 	 	,'' AS APPROVAL_TIME
	 	 	,'' AS APPROVAL_CODE
	 	 	,'' AS APPROVAL_CODE_NM
	 	 	,'' AS APPROVAL_COMMENT    	    
        FROM TEMP_LIST2 A
       WHERE A.APPROVAL_AGENT_ID IS NOT NULL 
       ;
END IF;
 
 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2030S01_03 (
      I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_CONSULT_ID     IN VARCHAR2
    , I_APPROVAL_ID    IN VARCHAR2 
    , I_SNO            IN VARCHAR2   
    , I_APPROVAL_AGENT_ID IN VARCHAR2   
    , I_APPROVAL_CODE     IN VARCHAR2
    , I_APPROVAL_COMMENT  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR2030S01_03
   PURPOSE:    근태신청/처리 - 결재처리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/27  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2030S01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

     V_APPROVAL_STATUS VARCHAR2(50) := '';

 BEGIN
 
-- ********************************************************************************
-- 0.결재라인 수정
-- APPROVAL_CODE  10	결재 /20	전결 /99	반려
-- ********************************************************************************    
	UPDATE TB_CM_APPROVAL_DETAIL 
	   SET APPROVAL_CODE    = I_APPROVAL_CODE
	      ,APPROVAL_COMMENT = I_APPROVAL_COMMENT
	      ,APPROVAL_DT      = SYSDATE
	  WHERE TENANT_ID   = I_TENANT_ID
	    AND APPROVAL_ID = I_APPROVAL_ID
	    AND SNO         = I_SNO ;
	    
	   COMMIT;
   
-- ********************************************************************************
-- 1.결재 마스터 수정  
-- APPROVAL_STATUS >> 00 작성중 / 10상신/20	진행/30	반려/40	종결/50	종결(전결)
-- ********************************************************************************
	  IF(I_APPROVAL_CODE='10') THEN /* 결재면 이후 남은 결재건이 없으면 종결(40) 있으면 진행(20) */
	
	     SELECT CASE COUNT(SNO) WHEN 0 THEN '40' ELSE '20' END 
	       INTO V_APPROVAL_STATUS
	       FROM TB_CM_APPROVAL_DETAIL 
	      WHERE TENANT_ID = I_TENANT_ID
	        AND APPROVAL_ID =  I_APPROVAL_ID
	        AND APPROVAL_CODE IS NULL;
	  
	  ELSIF (I_APPROVAL_CODE='20') THEN /* 전결이면  50 종결(전결) 처리*/
	      V_APPROVAL_STATUS :='50' ;
	  ELSIF (I_APPROVAL_CODE='99') THEN /* 반려 이면  30 반려 처리 */
	      V_APPROVAL_STATUS :='30' ;
	  END IF;
	
	  UPDATE TB_CM_APPROVAL_HEADER 
	     SET APPROVAL_STATUS = V_APPROVAL_STATUS
	    WHERE  TENANT_ID = I_TENANT_ID
	     AND APPROVAL_ID =  I_APPROVAL_ID ;
	  COMMIT;    

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2030S01_04 (
      I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_CONSULT_ID     IN VARCHAR2
    , I_APPROVAL_ID    IN VARCHAR2    
) AS 
/******************************************************************************
   NAME:       SP_HR2030S01_04
   PURPOSE:    근태신청/처리 - 근태신청 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/27  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2030S01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 BEGIN
 
-- ********************************************************************************
-- 0.근태신청 삭제
-- ********************************************************************************    
 DELETE FROM TB_HR_CONDUCT WHERE TENANT_ID = I_TENANT_ID AND CONSULT_ID = I_CONSULT_ID ;
 DELETE FROM TB_CM_APPROVAL_HEADER WHERE TENANT_ID = I_TENANT_ID AND APPROVAL_ID = I_APPROVAL_ID ;
 DELETE FROM TB_CM_APPROVAL_DETAIL WHERE TENANT_ID = I_TENANT_ID AND APPROVAL_ID = I_APPROVAL_ID ; 
 DELETE FROM TB_CM_APPROVAL_CONSULT WHERE TENANT_ID = I_TENANT_ID AND APPROVAL_ID = I_APPROVAL_ID ; 
 COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

create or replace PROCEDURE SP_HR2040S01_01
(
  I_TENANT_ID       IN  VARCHAR2,
  I_STD_MONTH       IN  VARCHAR2,
  O_CUR_LIST        OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM1010M01_01
   PURPOSE:    근태 현황 상세 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/12/27   
******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2040S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
BEGIN

	OPEN O_CUR_LIST FOR
	SELECT 
		'H'||ROWNUM AS ID
		,HOLI_NM AS TITLE
		,'#FFFFFF' AS COLOR
		,'#DB0000' AS TEXT_COLOR
		,TO_CHAR(TO_DATE(STD_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')||'T'||TO_CHAR(TO_DATE('000000', 'HH24MISS'), 'HH24:MI:SS') AS "START"
		,TO_CHAR(TO_DATE(STD_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')||'T'||TO_CHAR(TO_DATE('235959', 'HH24MISS'), 'HH24:MI:SS') AS "END"
	FROM TB_CM_HOLIDAY
	WHERE TENANT_ID = I_TENANT_ID
	AND HOLI_YN = '1'
	AND TO_CHAR(TO_DATE(STD_YMD, 'YYYYMMDD'), 'YYYYMM') = I_STD_MONTH
	;


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    
	END;

END;
/

;

create or replace PROCEDURE "SP_HR3010M01_01" (
   I_TENANT_ID           IN VARCHAR2
 , I_LOGIN_DEPT_CD       IN VARCHAR2  /* 로그인사용자 DEPT_CD */     
 , I_SHEET_NM            IN VARCHAR2
 , I_TARGET_AGENT_JIKCHK IN VARCHAR2
 , I_AGENT_ID            IN VARCHAR2 
 , O_CUR_LIST            OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3010M01_01
   PURPOSE:    인사고과평가 - 평가표 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/25  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR3010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    
	    SELECT 
	    	A.TENANT_ID
			, A.SHEET_ID
			, A.SHEET_NM
			, A.TARGET_AGENT_JIKCHK
			, FN_CM_GET_CODE_NM(A.TENANT_ID, 'AGENT_JIKCHK', A.TARGET_AGENT_JIKCHK) AS AGENT_JIKCHK_NM
			, NVL(A.HIDE_YN, 0) AS HIDE_YN
			, A.MODIFY_AGENT_ID
			, FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.MODIFY_AGENT_ID) AS MODIFY_AGENT_INFO         
			, TO_CHAR(A.MODIFY_DT,'YYYY-MM-DD') AS MODIFY_DT
			, NVL((SELECT SUM(S.SCORE) 
					FROM TB_HR_SHEET_DETAIL S 
					WHERE S.TENANT_ID = A.TENANT_ID
					AND S.SHEET_ID  = A.SHEET_ID), 0) AS SCORE_SUM
			, ( SELECT COUNT(S.QUESTION_ID) 
				FROM TB_HR_SHEET_DETAIL S 
				WHERE S.TENANT_ID = A.TENANT_ID 
				AND S.SHEET_ID = A.SHEET_ID) AS QUESTION_CNT
			, CASE ( SELECT COUNT(T.SHEETKEY)
					FROM TB_HR_EVAL_RESULT_HEADER T
					WHERE T.TENANT_ID = I_TENANT_ID
					AND T.SHEET_ID  = A.SHEET_ID )
				WHEN 0 THEN 0 ELSE 1 END AS EVAL_YN
			, FN_CM_GET_DEPT_ACCESS_SCOPE(A.TENANT_ID, '60',A.SHEET_ID,'ID') AS DEPT1_ID
			, FN_CM_GET_DEPT_ACCESS_SCOPE(A.TENANT_ID, '60',A.SHEET_ID,'NM') AS DEPT1_NM
			, CASE WHEN ( SELECT COUNT(T.SHEETKEY)
						FROM TB_HR_EVAL_RESULT_HEADER T
						WHERE T.TENANT_ID = I_TENANT_ID
						AND T.SHEET_ID  = A.SHEET_ID ) > 0 THEN 1 ELSE 0 END AS EVAL_YN
			, FN_CM_GET_AGENT_NM(I_TENANT_ID ,CREATE_AGENT_ID) || ' (' || FN_CM_GET_AGENT_SABUN(I_TENANT_ID ,CREATE_AGENT_ID) || ')' AS CREATE_AGENT_NM
			, TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT
	  FROM TB_HR_SHEET_HEADER A
	 WHERE TENANT_ID = I_TENANT_ID
	   AND ( ( I_SHEET_NM IS NULL AND 1=1 ) OR (I_SHEET_NM IS NOT NULL AND INSTR(A.SHEET_NM, NULL) > 0)) 
	   AND A.TARGET_AGENT_JIKCHK = CASE WHEN I_TARGET_AGENT_JIKCHK IS NULL THEN A.TARGET_AGENT_JIKCHK 
	   					                ELSE I_TARGET_AGENT_JIKCHK END
	   AND ( ( I_AGENT_ID IS NULL AND 1 = 1 )
	       OR (I_AGENT_ID IS NOT NULL AND INSTR(A.MODIFY_AGENT_ID, NULL) > 0)) 
       /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
       AND EXISTS (SELECT 1 
     		  	     FROM TB_CM_ACCESS_SCOPE S 
     			    WHERE S.TENANT_ID   = A.TENANT_ID
     			      AND S.SCOPE_GUBUN = '60'
     			      AND S.ITEM_ID     = A.SHEET_ID
     			      AND S.DEPT_CD     = I_LOGIN_DEPT_CD ) ;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_HR3010M01_02" (
	  I_TENANT_ID   IN VARCHAR2
	, I_SHEET_ID    IN VARCHAR2
	, I_QUESTION_ID IN VARCHAR2
    , O_CUR_LIST    OUT SYS_REFCURSOR        
) AS 
/******************************************************************************
   NAME:       SP_HR3010S02_01
   PURPOSE:    인사고과 평가표 관리 - 평가기준 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/26  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR3010S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN
 
OPEN O_CUR_LIST FOR 


	SELECT TENANT_ID
	     , SHEET_ID
	     , QUESTION_ID
	     , QUESTION_NO
	     , QUESTION_NM
		 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'HR_EVAL_TYPE', HR_EVAL_TYPE) AS EVAL_TYPE
		 , HR_EVAL_TYPE AS EVAL_TYPE_CD
	     , SCORE AS SCORE_0
	     , SCORE_A
	     , SCORE_B
	     , SCORE_C
	     , SCORE_D
	     , SCORE_E
	  FROM TB_HR_SHEET_DETAIL
	 WHERE TENANT_ID = I_TENANT_ID
	   AND SHEET_ID  = I_SHEET_ID
       AND QUESTION_ID = CASE WHEN I_QUESTION_ID IS NULL THEN QUESTION_ID 
                              ELSE I_QUESTION_ID END
	 ORDER BY QUESTION_NO;		


EXCEPTION

    WHEN OTHERS 
    THEN 
	BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
		RAISE_APPLICATION_ERROR(-20001, SQLERRM); --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

create or replace PROCEDURE "SP_HR3010M01_03" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_QUESTION_ID    IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR3010M01_03
   PURPOSE:    인사고과평가 - 평가표관리 - 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/29
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR3010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
   
BEGIN

	IF(I_QUESTION_ID IS NULL) THEN
		DELETE FROM TB_HR_SHEET_HEADER WHERE TENANT_ID = I_TENANT_ID AND SHEET_ID = I_SHEET_ID;
		DELETE FROM TB_HR_SHEET_DETAIL WHERE TENANT_ID = I_TENANT_ID AND SHEET_ID = I_SHEET_ID;
	
		/* 관리소속 삭제 */
		DELETE
		  FROM TB_CM_ACCESS_SCOPE 
		 WHERE TENANT_ID = I_TENANT_ID
		   AND SCOPE_GUBUN = '60'
		   AND ITEM_ID     = I_SHEET_ID  ;
	
		COMMIT;

	ELSE
		DELETE 
		  FROM TB_HR_SHEET_DETAIL 
		 WHERE TENANT_ID   = I_TENANT_ID 
		   AND SHEET_ID    = I_SHEET_ID
		   AND QUESTION_ID = I_QUESTION_ID;
		   
		COMMIT;
		
    END IF;
 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;        
    END;
END ;
/

;

create or replace PROCEDURE "SP_HR3010M01_04" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR3010M01_04
   PURPOSE:    인사고과평가 - 평가표 관리 - 복사

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/29
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR3010M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
    V_SHEET_ID TB_HR_SHEET_HEADER.SHEET_ID%TYPE ;
    
    V_QUESTION_ID TB_HR_SHEET_DETAIL.QUESTION_ID%TYPE ;
    V_QUESTION_NO TB_HR_SHEET_DETAIL.QUESTION_NO%TYPE ;
    
BEGIN
 
-- ********************************************************************************
-- 0.KEY 생성
-- ******************************************************************************** 
 -- I_SHEET_ID 생성
     SELECT LPAD(NVL(MAX(SHEET_ID),0)+1 ,10, '0') 
       INTO V_SHEET_ID 
       FROM TB_HR_SHEET_HEADER 
      WHERE TENANT_ID = I_TENANT_ID;

-- ********************************************************************************
-- 1. 평가표  복사
-- ********************************************************************************              
	INSERT INTO TB_HR_SHEET_HEADER ( TENANT_ID
					               , SHEET_ID
					               , SHEET_NM
					               , TARGET_AGENT_JIKCHK
					               , HIDE_YN
					               , CREATE_AGENT_ID
					               , CREATE_DT
					               , MODIFY_AGENT_ID
					               , MODIFY_DT
					        ) SELECT TENANT_ID
							       , V_SHEET_ID AS SHEET_ID
							       , SUBSTRB(SHEET_NM, 1, 80)||' - 복사본' AS SHEET_NM
 					               , TARGET_AGENT_JIKCHK
					               , HIDE_YN
					               , I_LOGIN_ID   AS CREATE_AGENT_ID
					               , SYSTIMESTAMP AS CREATE_DT
					               , I_LOGIN_ID   AS MODIFY_AGENT_ID
					               , SYSTIMESTAMP AS MODIFY_DT
							    FROM TB_HR_SHEET_HEADER
							   WHERE TENANT_ID = I_TENANT_ID 
							     AND SHEET_ID  = I_SHEET_ID  ;
	      
	COMMIT; 
	
-- ********************************************************************************
-- 2. 관리소속  복사
-- ********************************************************************************             
	INSERT INTO TB_CM_ACCESS_SCOPE ( TENANT_ID
  								   , SCOPE_GUBUN	
  								   , ITEM_ID
  								   , DEPT_CD
  				  		    ) SELECT TENANT_ID 
						  	       , SCOPE_GUBUN
							       , V_SHEET_ID AS  ITEM_ID
							       , DEPT_CD
	  						    FROM TB_CM_ACCESS_SCOPE		 
							   WHERE TENANT_ID   = I_TENANT_ID 
							     AND ITEM_ID     = I_SHEET_ID  
							     AND SCOPE_GUBUN = '60' ;
	COMMIT;

-- ********************************************************************************
-- 3. 평가기준  복사
-- ********************************************************************************             
	INSERT INTO TB_HR_SHEET_DETAIL( TENANT_ID
					              , SHEET_ID
					              , QUESTION_ID
					              , QUESTION_NO
					              , HR_EVAL_TYPE
					              , QUESTION_NM
					              , SCORE
					              , SCORE_A
					              , SCORE_B
					              , SCORE_C
					              , SCORE_D
					              , SCORE_E
					              , CREATE_AGENT_ID
					              , CREATE_DT
					              , MODIFY_AGENT_ID
					              , MODIFY_DT
					       ) SELECT S.TENANT_ID
					              , V_SHEET_ID AS SHEET_ID
					              , S.QUESTION_ID
					              , S.QUESTION_NO
					              , S.HR_EVAL_TYPE
					              , S.QUESTION_NM
					              , S.SCORE
					              , S.SCORE_A
					              , S.SCORE_B
					              , S.SCORE_C
					              , S.SCORE_D
					              , S.SCORE_E
					              , I_LOGIN_ID   AS CREATE_AGENT_ID
					              , SYSTIMESTAMP AS CREATE_DT
					              , I_LOGIN_ID   AS MODIFY_AGENT_ID
					              , SYSTIMESTAMP AS MODIFY_DT
						       FROM TB_HR_SHEET_DETAIL S
					    	  WHERE TENANT_ID = I_TENANT_ID 
					        	AND SHEET_ID  = I_SHEET_ID  ;
      COMMIT;



EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
 
    END;
END ;
/

;

create or replace PROCEDURE "SP_HR3010M01_05" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_AGENT_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_QUESTION_ID	  IN VARCHAR2
    ,I_QUESTION_NO    IN VARCHAR2    
) AS 
/******************************************************************************
   NAME:       SP_HR3010M01_05
   PURPOSE:    평가기준 순서 변경

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/29  
******************************************************************************/

-- ########## LOG DB START ########################
	v_work_date     DATE := SYSDATE;
	v_work_date_str TIMESTAMP := SYSTIMESTAMP;
	v_work_date_end TIMESTAMP := SYSTIMESTAMP;
	v_work_id       VARCHAR2(30) := 'SP_HR3010M01_05';
	v_work_result   VARCHAR2(1) := 'F';
	v_work_count    NUMBER := 0;
	v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

    
BEGIN

    UPDATE TB_HR_SHEET_DETAIL
       SET QUESTION_NO     = I_QUESTION_NO
         , MODIFY_AGENT_ID = I_AGENT_ID
         , MODIFY_DT       = SYSDATE
     WHERE TENANT_ID   = I_TENANT_ID
       AND SHEET_ID    = I_SHEET_ID
       AND QUESTION_ID = I_QUESTION_ID ;

   COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK; 

    RAISE_APPLICATION_ERROR(-20001, SQLERRM); 
    END;
END ;
/

;

create or replace PROCEDURE "SP_HR3010S02_01" (
	  I_TENANT_ID   IN VARCHAR2
	, I_AGENT_ID    IN VARCHAR2
	, I_CUD_GUBUN   IN VARCHAR2  /* C/U/D  */
    , I_SHEET_ID	IN VARCHAR2
    , I_QUESTION_ID	IN VARCHAR2
    , I_QUESTION_NM	IN VARCHAR2
    , I_EVAL_TYPE 	IN VARCHAR2
    , I_SCORE	    IN VARCHAR2
    , I_SCORE_A	    IN VARCHAR2
    , I_SCORE_B	    IN VARCHAR2
    , I_SCORE_C	    IN VARCHAR2
    , I_SCORE_D	    IN VARCHAR2
    , I_SCORE_E	    IN VARCHAR2        
) AS 
/******************************************************************************
   NAME:       SP_HR3010S02_01
   PURPOSE:    인사고과 평가표 관리 - 평가기준 데이터 컨트롤

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/26  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR3010S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

	V_QUESTION_ID TB_HR_SHEET_DETAIL.QUESTION_ID%TYPE := I_QUESTION_ID;
    V_QUESTION_NO NUMBER :=0;
 BEGIN
 
-- ********************************************************************************
-- 0.등록/수정/삭제
-- ******************************************************************************** 

	IF (I_CUD_GUBUN ='I') THEN
	
         SELECT LPAD(NVL(MAX(QUESTION_ID),0)+1 ,10, '0') 
              , NVL(MAX(QUESTION_NO),0) + 1 
           INTO V_QUESTION_ID , V_QUESTION_NO
           FROM TB_HR_SHEET_DETAIL
          WHERE TENANT_ID = I_TENANT_ID
            AND SHEET_ID  = I_SHEET_ID;	

		INSERT INTO TB_HR_SHEET_DETAIL( TENANT_ID
					 			      , SHEET_ID
								      , QUESTION_ID
								      , QUESTION_NO
								      , HR_EVAL_TYPE
								      , QUESTION_NM
								      , SCORE
								      , SCORE_A
								      , SCORE_B
								      , SCORE_C
								      , SCORE_D
								      , SCORE_E
								      , CREATE_AGENT_ID
								      , CREATE_DT
						     ) VALUES ( I_TENANT_ID
								      , I_SHEET_ID
								      , V_QUESTION_ID
								      , V_QUESTION_NO
								      , I_EVAL_TYPE
								      , I_QUESTION_NM
								      , I_SCORE
								      , I_SCORE_A
								      , I_SCORE_B
								      , I_SCORE_C
								      , I_SCORE_D
								      , I_SCORE_E								      
						              , I_AGENT_ID
						              , SYSTIMESTAMP
									  ) ;

	  
	ELSIF (I_CUD_GUBUN ='U') THEN	  
	  
		UPDATE TB_HR_SHEET_DETAIL
		   SET HR_EVAL_TYPE = I_EVAL_TYPE
		     , QUESTION_NM  = I_QUESTION_NM
		     , SCORE        = I_SCORE
		     , SCORE_A      = I_SCORE_A
		     , SCORE_B      = I_SCORE_B
		     , SCORE_C      = I_SCORE_C
		     , SCORE_D      = I_SCORE_D
		     , SCORE_E      = I_SCORE_E
		     , MODIFY_AGENT_ID = I_AGENT_ID
		     , MODIFY_DT       = SYSTIMESTAMP
		 WHERE TENANT_ID   = I_TENANT_ID
		   AND SHEET_ID    = I_SHEET_ID
		   AND QUESTION_ID = I_QUESTION_ID ;
	  
	  
	ELSIF (I_CUD_GUBUN ='D') THEN

		DELETE 
		  FROM TB_HR_SHEET_DETAIL
		 WHERE TENANT_ID   = I_TENANT_ID
		   AND SHEET_ID    = I_SHEET_ID
		   AND QUESTION_ID = I_QUESTION_ID ;
	  
	  END IF;
	  	         
	COMMIT; 


EXCEPTION

    WHEN OTHERS 
    THEN 
	BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
	    ROLLBACK; 
  
		RAISE_APPLICATION_ERROR(-20001, SQLERRM); --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M01_01" (
    I_TENANT_ID   IN  VARCHAR2
  , I_YEAR		  IN  VARCHAR2
  , I_DEPT_CD	  IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_HR3020M01_01
   PURPOSE:    인사고과평가 - 평가계획 관리 - TREE 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/05/29
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_HR3020M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 

	WITH TEMP AS(
		SELECT SUBSTR(STD_YMD,0,6) AS SCHE_ID
			 , SUBSTR(STD_YMD,0,4)||'년'||SUBSTR(STD_YMD,5,2)||'월' AS SCHE_NM
			 , 0
			 , 1
  	      FROM TB_CM_HOLIDAY
	     WHERE SUBSTR(STD_YMD,0,4) = I_YEAR
	     GROUP BY SUBSTR(STD_YMD,0,6) 
			    , SUBSTR(STD_YMD,0,4)||'년'||SUBSTR(STD_YMD,5,2)||'월'
	)
	
	SELECT A.SCHE_ID
		 , A.SCHE_NM
		 , SUBSTR(A.SCHE_ID,0,6) AS PARENT_DEPT_CD
		 , 1 AS VALUE_CNT
		 , 2
	 FROM TB_HR_EVAL_SCHE A
 	WHERE A.TENANT_ID = I_TENANT_ID
	  AND SUBSTR(A.SCHE_ID,0,4) = I_YEAR
	  AND I_DEPT_CD IN ( SELECT S.DEPT_CD
	                       FROM TB_CM_ACCESS_SCOPE S 
	 					  WHERE S.TENANT_ID = A.TENANT_ID 
						    AND S.ITEM_ID = A.SCHE_ID
	  	 				    AND S.SCOPE_GUBUN ='70')
		 	 
	UNION ALL
	 	 
	SELECT A.SCHE_ID AS SCHE_ID
	 	 , A.SCHE_NM AS SCHE_NM
	 	 , SUBSTR(A.SCHE_ID,0,4) AS PARENT_DEPT_CD
	 	 , COUNT(B.SCHE_ID) AS VALUE_CNT
	 	 , 1
	  FROM TEMP A
	  LEFT JOIN ( SELECT T.TENANT_ID
	                   , T.SCHE_ID 
	 			    FROM TB_HR_EVAL_SCHE T
	 			   WHERE T.TENANT_ID = I_TENANT_ID
	 			     AND SUBSTR(T.SCHE_ID,0,4) = I_YEAR
	 			     AND I_DEPT_CD IN (SELECT S.DEPT_CD FROM TB_CM_ACCESS_SCOPE S 
	 			   WHERE S.TENANT_ID = T.TENANT_ID 
	 				 AND S.ITEM_ID   = T.SCHE_ID
	 				 AND S.SCOPE_GUBUN ='70')
	 		    ) B
	    ON A.SCHE_ID = SUBSTR(B.SCHE_ID,0,6)
	 GROUP BY A.SCHE_ID, A.SCHE_NM
	 
	 UNION ALL
	 
	 SELECT I_YEAR
	 	  , I_YEAR AS SCHE_NM
	 	  , '' AS PARENT_DEPT_CD
	 	  , ( SELECT COUNT(A.SCHE_ID) 
	 		    FROM TB_HR_EVAL_SCHE A 
	 		   WHERE A.TENANT_ID = I_TENANT_ID 
	 		   	 AND SUBSTR(A.SCHE_ID,0,4) = I_YEAR
	 		   	 AND I_DEPT_CD IN ( SELECT S.DEPT_CD 
	 		   	                      FROM TB_CM_ACCESS_SCOPE S 
						 			 WHERE S.TENANT_ID = A.TENANT_ID 
						 			   AND S.ITEM_ID   = A.SCHE_ID
					  	 			   AND S.SCOPE_GUBUN = '70')
	 		  	) AS VALUE_CNT
	 		,0
	  FROM DUAL
	 ORDER BY SCHE_ID;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M01_02"
(
    I_TENANT_ID   IN  VARCHAR2
  , I_SCHE_ID	  IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_HR3020M01_02
   PURPOSE:    인사고과평가 - 평가계획 관리 - 평가계획 상세 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/05/30
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_HR3020M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
  
    OPEN O_CUR_LIST FOR 
	
		SELECT A.SCHE_ID
			 , A.SCHE_NM
			 , A.SHEET_ID
			 ,( SELECT SHEET_NM 
			      FROM TB_HR_SHEET_HEADER 
			     WHERE TENANT_ID = I_TENANT_ID 
			       AND SHEET_ID = A.SHEET_ID) AS SHEET_NM
			 , A.KPI_YN
			 , A.SELF_YN
			 , A.HIDE_YN
			 , A.INFO_TEXT
			 , TO_CHAR(TO_DATE(A.START_DT,'yyyymmdd'),'YYYY-MM-DD') AS START_DT
			 , TO_CHAR(TO_DATE(A.END_DT,'yyyymmdd'),'YYYY-MM-DD')   AS END_DT
			 , ( SELECT WM_CONCAT(T.DEPT_CD) 
			       FROM TB_CM_ACCESS_SCOPE T 
			      WHERE T.TENANT_ID = A.TENANT_ID 
			        AND SCOPE_GUBUN = '70' 
			        AND T.ITEM_ID = I_SCHE_ID) AS DEPT1_ID
             , CASE WHEN END_DT   < TO_CHAR(SYSDATE, 'yyyymmdd') THEN '완료'
		 	        WHEN START_DT > TO_CHAR(SYSDATE, 'yyyymmdd') THEN '준비'
		 	        ELSE '진행' END AS STATUS_NM
 			 , SUBSTR(SCHE_ID,0,4) || '년 ' || SUBSTR(SCHE_ID,5,2) || '월' AS STD_MONTH
 			 , TO_CHAR(TO_DATE(START_DT, 'yyyymmdd'),'YYYY-MM-DD') || ' ~ ' ||
 			   TO_CHAR(TO_DATE( END_DT,  'yyyymmdd'),'YYYY-MM-DD') AS EVAL_PERIOD
			 , ( SELECT COUNT(*) 
			       FROM TB_HR_EVAL_VALUE V
			      WHERE V.TENANT_ID = I_TENANT_ID
			        AND V.SCHE_ID   = I_SCHE_ID ) AS VALUE_CNT
			 , ( SELECT COUNT(*) 
			       FROM TB_HR_EVAL_TARGET T
			      WHERE T.TENANT_ID = I_TENANT_ID
			        AND T.SCHE_ID   = I_SCHE_ID ) AS TARGET_CNT			        
			 , ( SELECT COUNT(T.SHEETKEY) 
			       FROM TB_HR_EVAL_RESULT_HEADER T
			      WHERE T.TENANT_ID  = A.TENANT_ID 
			        AND T.SCHE_ID    = A.SCHE_ID
			        AND T.VALUE_MEMB != T.TARGET_MEMB) AS EVAL_CNT
		  FROM TB_HR_EVAL_SCHE A
		 WHERE TENANT_ID = I_TENANT_ID
		   AND A.SCHE_ID = I_SCHE_ID;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M01_03"
(
	  I_TENANT_ID		IN  VARCHAR2
	, I_KPI_YN			IN	VARCHAR2
	, I_HIDE_YN			IN	VARCHAR2
	, I_SCHE_ID			IN  VARCHAR2
	, I_SCHE_NM			IN	VARCHAR2
	, I_SHEET_ID		IN	VARCHAR2
	, I_SELF_YN         IN  VARCHAR2
	, I_START_DT        IN  VARCHAR2
	, I_END_DT          IN  VARCHAR2
	, I_INFO_TEXT       IN  VARCHAR2
	, I_AGENT_ID		IN	VARCHAR2
	, I_DEPT_CD			IN	VARCHAR2
    , O_CUR_LIST        OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3020M01_03
   PURPOSE:    인사고과 평가 - 평가계획 관리 - 평가계획 등록, 수정

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/05/30
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)     := 'SP_HR3020M01_03';
    v_work_result   VARCHAR2(1)      := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)   := '';
   -- ########## LOG DB END  #########################

	V_SCHE_ID		VARCHAR2(10)		:='';

    
BEGIN
   
  -- ********************************************************************************
  -- 1. 수정, 등록
  -- ********************************************************************************

		SELECT CASE WHEN CHK.SCHE_ID IS NULL THEN TO_CHAR(TO_DATE(I_START_DT, 'yyyymmdd'), 'YYYYMM')||'0001'
	                ELSE TO_CHAR(TO_DATE(I_START_DT, 'yyyymmdd'), 'YYYYMM') || SUBSTR(CHK.SCHE_ID,7,4)
	                 END INTO V_SCHE_ID
		  FROM (SELECT MAX(SCHE_ID+1) AS SCHE_ID
	      		  FROM TB_HR_EVAL_SCHE
	      		 WHERE 1 = 1 
	               AND TENANT_ID = I_TENANT_ID
		           AND TO_CHAR(TO_DATE(I_START_DT, 'yyyymmdd'), 'YYYYMM') = SUBSTR(SCHE_ID,0,6)) CHK; 
		    		    
		      
		 MERGE INTO TB_HR_EVAL_SCHE T
      	 USING (SELECT I_TENANT_ID AS TENANT_ID
                     , I_SCHE_ID   AS SCHE_ID
                  FROM DUAL ) S
            ON ( T.TENANT_ID = S.TENANT_ID AND T.SCHE_ID = S.SCHE_ID)
            
            
			WHEN MATCHED THEN
			
				UPDATE SET SCHE_NM   = I_SCHE_NM
					 	 , SHEET_ID  = I_SHEET_ID
	        			 , KPI_YN    = I_KPI_YN                     
	                     , SELF_YN   = I_SELF_YN        			 
	                     , HIDE_YN   = I_HIDE_YN	
	                     , START_DT  = I_START_DT	                     
	                     , END_DT    = I_END_DT				 
						 , INFO_TEXT = I_INFO_TEXT
	                     , MODIFY_DT = SYSDATE
	                     , MODIFY_AGENT_ID = I_AGENT_ID                     
	
			WHEN NOT MATCHED THEN
			
				INSERT ( TENANT_ID
				       , SCHE_ID
				       , SCHE_NM
				       , SHEET_ID			       
				       , KPI_YN
				       , SELF_YN
				       , HIDE_YN
				       , START_DT
				       , END_DT
				       , INFO_TEXT
				       , CREATE_AGENT_ID
				       , CREATE_DT
	          ) VALUES ( I_TENANT_ID
	          		   , V_SCHE_ID
	          		   , I_SCHE_NM
	          		   , I_SHEET_ID          		   
	          		   , I_KPI_YN
	          		   , I_SELF_YN
	          		   , I_HIDE_YN
	          		   , I_START_DT
	          		   , I_END_DT
	          		   , I_INFO_TEXT
	          		   , I_AGENT_ID
	          		   , SYSDATE
	          		   ) ;
    
		IF LENGTH(I_SCHE_ID) = 10 
		   THEN V_SCHE_ID   := I_SCHE_ID;
		END IF;
	
		DELETE 
		  FROM TB_CM_ACCESS_SCOPE
		 WHERE TENANT_ID   = I_TENANT_ID
		   AND SCOPE_GUBUN = '70'
		   AND ITEM_ID     = I_SCHE_ID;
	
		IF I_DEPT_CD IS NOT NULL THEN
			INSERT INTO TB_CM_ACCESS_SCOPE
				 SELECT I_TENANT_ID
				      , '70'
				      , V_SCHE_ID
				      , DEPT_CD
				   FROM ( SELECT DISTINCT REGEXP_SUBSTR(A.DEPT_CD, '[^,]+', 1, LEVEL) DEPT_CD
		   					FROM ( SELECT I_DEPT_CD AS DEPT_CD
		   					         FROM DUAL ) A
		                 CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(A.DEPT_CD, '[^,]+','')) + 1
		                );
		END IF;
		
		  OPEN O_CUR_LIST FOR    
		
		  SELECT V_SCHE_ID AS SCHE_ID
		    FROM DUAL;
        	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M01_04"
(
	  I_TENANT_ID		IN  VARCHAR2
	, I_SCHE_ID			IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR3020M01_04
   PURPOSE:    인사고과 평가 - 평가계획 관리 - 평가계획 삭제

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/05/30
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)     := 'SP_HR3020M01_04';
    v_work_result   VARCHAR2(1)      := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)   := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
		DELETE
		  FROM TB_HR_EVAL_SCHE
	     WHERE TENANT_ID = I_TENANT_ID
    	   AND SCHE_ID   = I_SCHE_ID;
	
		DELETE
		  FROM TB_CM_ACCESS_SCOPE
		 WHERE TENANT_ID   = I_TENANT_ID
		   AND SCOPE_GUBUN = '70'
		   AND ITEM_ID     = I_SCHE_ID;
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M02_02" (
	  I_TENANT_ID   IN VARCHAR2
	, I_LOGIN_ID    IN VARCHAR2	
	, I_SCHE_ID	    IN VARCHAR2
	, I_CUD_GUBUN   IN VARCHAR2
	, I_AGENT_ID	IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR3020M02_02
   PURPOSE:    인사고과평가 - 평가계획 관리 - 평가대상자 선택 - 대상자 등록/삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/31  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR3020M02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	IF I_CUD_GUBUN = 'I' THEN
		
		INSERT INTO TB_HR_EVAL_TARGET ( TENANT_ID
									  , SCHE_ID
									  , TARGET_MEMB
									  , CREATE_AGENT_ID
									  , CREATE_DT		
  						     ) VALUES ( I_TENANT_ID
  						     		  , I_SCHE_ID
  						     		  , I_AGENT_ID
  						     		  , I_LOGIN_ID
  						     		  , SYSDATE
  						     		  );
	
	
	ELSIF I_CUD_GUBUN = 'D' THEN

		DELETE
		  FROM TB_HR_EVAL_TARGET
		 WHERE TENANT_ID = I_TENANT_ID
   		   AND SCHE_ID   = I_SCHE_ID
		   AND TARGET_MEMB = CASE WHEN I_AGENT_ID IS NULL THEN TARGET_MEMB 
		                          ELSE I_AGENT_ID END
		;
		
	ELSIF I_CUD_GUBUN = 'DA' THEN

		DELETE
		  FROM TB_HR_EVAL_TARGET
		 WHERE TENANT_ID = I_TENANT_ID
   		   AND SCHE_ID   = I_SCHE_ID
		   AND TARGET_MEMB = CASE WHEN I_AGENT_ID IS NULL THEN TARGET_MEMB 
		                          ELSE I_AGENT_ID END
		;
		
		DELETE
		  FROM TB_HR_EVAL_MAPPING
		 WHERE TENANT_ID = I_TENANT_ID
		   AND SCHE_ID   = I_SCHE_ID
		   AND TARGET_MEMB = I_AGENT_ID ; 
					
	END IF;
	
	
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M03_02" (
	  I_TENANT_ID    IN VARCHAR2
	, I_LOGIN_ID     IN VARCHAR2	
	, I_SCHE_ID	     IN VARCHAR2
	, I_CUD_GUBUN    IN VARCHAR2
	, I_AGENT_ID 	 IN VARCHAR2
	, I_TARGET_GUBUN IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR3020M03_02
   PURPOSE:    인사고과평가 - 평가계획 관리 - 평가자 선택 - 평가자 등록/삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/31  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3020M03_02';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	IF I_CUD_GUBUN = 'I' THEN
		
		INSERT INTO TB_HR_EVAL_VALUE ( TENANT_ID
									 , SCHE_ID
									 , VALUE_MEMB
									 , HR_TARGET_GUBUN
									 , CREATE_AGENT_ID
									 , CREATE_DT		
  						    ) VALUES ( I_TENANT_ID
  						    		 , I_SCHE_ID
  						    		 , I_AGENT_ID
  						    		 , I_TARGET_GUBUN
  						    		 , I_LOGIN_ID
  						     		 , SYSDATE
  						     		 );


	ELSIF I_CUD_GUBUN = 'D' THEN

		DELETE
		  FROM TB_HR_EVAL_VALUE
		 WHERE TENANT_ID  = I_TENANT_ID
		   AND SCHE_ID    = I_SCHE_ID
		   AND VALUE_MEMB = CASE WHEN I_AGENT_ID IS NULL THEN VALUE_MEMB
		                         ELSE I_AGENT_ID END
		;
		
		DELETE 
		  FROM TB_HR_EVAL_MAPPING
		 WHERE TENANT_ID  = I_TENANT_ID
		   AND SCHE_ID    = I_SCHE_ID
		   AND VALUE_MEMB = CASE WHEN I_AGENT_ID IS NULL THEN VALUE_MEMB
		                         ELSE I_AGENT_ID END ;
		                     

	END IF;
	
	
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M03_03"
(
	  I_TENANT_ID	 IN VARCHAR2
	, I_SCHE_ID		 IN VARCHAR2
	, I_VALUE_MEMB   IN VARCHAR2
	, I_TARGET_GUBUN IN VARCHAR2	
	, O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3020M03_03
   PURPOSE:    인사고과 평가 - 평가계획 관리 - 평가자 선택 - 대상구분에 따른 대상인원 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/06/01
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)     := 'SP_HR3020M03_03';
    v_work_result   VARCHAR2(1)      := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)   := '';
   -- ########## LOG DB END  #########################
    
BEGIN
	
	OPEN O_CUR_LIST FOR    
	
		WITH TEMP_LIST1 AS (
		
			SELECT ( CASE I_TARGET_GUBUN WHEN '10' THEN A.TENANT_ID
			 		                     WHEN '20' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'center', A.DEPT_CD)
			        		             WHEN '30' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'part', A.DEPT_CD)
			                		     WHEN '40' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'team', A.DEPT_CD)
			    	              	     WHEN '50' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'jo', A.DEPT_CD)
					                     WHEN '90' THEN NULL END ) AS CODE
		         , A.TENANT_ID
			  FROM TB_CM_USER_MASTER A
			 WHERE A.TENANT_ID = I_TENANT_ID
			   AND A.AGENT_ID  = I_VALUE_MEMB

		
		) , TEMP_LIST2 AS (
		
			SELECT B.TENANT_ID
			     , B.TARGET_MEMB
			     , A.SABUN
				 , ( CASE I_TARGET_GUBUN WHEN '10' THEN A.TENANT_ID
					                     WHEN '20' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'center', A.DEPT_CD)
					                     WHEN '30' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'part', A.DEPT_CD)
					                     WHEN '40' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'team', A.DEPT_CD)
					                     WHEN '50' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'jo', A.DEPT_CD)
					                     WHEN '90' THEN NULL END ) AS CODE
			  FROM TB_CM_USER_MASTER A
		     INNER JOIN TB_HR_EVAL_TARGET B
		        ON A.TENANT_ID = B.TENANT_ID
		       AND A.AGENT_ID  = B.TARGET_MEMB       	  
			 WHERE B.TENANT_ID = I_TENANT_ID
			   AND B.SCHE_ID   = I_SCHE_ID
				
		)  

			
		SELECT A.CODE
		     , B.TENANT_ID
		     , B.TARGET_MEMB
		     , B.SABUN
		     , CASE WHEN B.TARGET_MEMB IS NULL THEN 0 
		     		ELSE (SELECT COUNT(*)		
						   FROM TEMP_LIST1 A LEFT OUTER JOIN TEMP_LIST2 B
							 ON A.CODE = B.CODE) END AS CNT		
		  FROM TEMP_LIST1 A LEFT OUTER JOIN TEMP_LIST2 B
		    ON A.TENANT_ID = B.TENANT_ID
		   AND A.CODE = B.CODE ;
		  

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M03_04" (
	  I_TENANT_ID    IN VARCHAR2
	, I_LOGIN_ID     IN VARCHAR2	
	, I_SCHE_ID	     IN VARCHAR2
	, I_VALUE_MEMB 	 IN VARCHAR2
	, I_TARGET_GUBUN IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR3020M03_04
   PURPOSE:    인사고과평가 - 평가계획 관리 - 평가자 선택 - 매핑정보 등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/02  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3020M03_04';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	INSERT INTO TB_HR_EVAL_MAPPING ( TENANT_ID
								   , SCHE_ID
								   , VALUE_MEMB
								   , TARGET_MEMB
								   , CREATE_AGENT_ID
								   , CREATE_DT
								   )
						      SELECT I_TENANT_ID
							       , I_SCHE_ID
							       , I_VALUE_MEMB
							       , TARGET_MEMB
							       , I_LOGIN_ID
							       , SYSDATE
							    FROM (SELECT ( CASE I_TARGET_GUBUN WHEN '10' THEN A.TENANT_ID
										 		                   WHEN '20' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'center', A.DEPT_CD)
										        		           WHEN '30' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'part', A.DEPT_CD)
										                		   WHEN '40' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'team', A.DEPT_CD)
										    	              	   WHEN '50' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'jo', A.DEPT_CD)
												                   WHEN '90' THEN NULL END ) AS CODE
										FROM TB_CM_USER_MASTER A
									   WHERE A.TENANT_ID = I_TENANT_ID
										 AND A.AGENT_ID  = I_VALUE_MEMB) A 
								
								LEFT OUTER JOIN 
								
									 (SELECT B.TENANT_ID
									       , B.TARGET_MEMB
									       , A.SABUN
										   , ( CASE I_TARGET_GUBUN WHEN '10' THEN A.TENANT_ID
											                       WHEN '20' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'center', A.DEPT_CD)
											                       WHEN '30' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'part', A.DEPT_CD)
											                       WHEN '40' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'team', A.DEPT_CD)
											                       WHEN '50' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'jo', A.DEPT_CD)
											                       WHEN '90' THEN NULL END ) AS CODE
									    FROM TB_CM_USER_MASTER A
								       INNER JOIN TB_HR_EVAL_TARGET B
								          ON A.TENANT_ID = B.TENANT_ID
								         AND A.AGENT_ID  = B.TARGET_MEMB       	  
									   WHERE B.TENANT_ID = I_TENANT_ID
									     AND B.SCHE_ID   = I_SCHE_ID) B
							    ON A.CODE = B.CODE ;
														           
	
	
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M04_02" (
	  I_TENANT_ID    IN VARCHAR2
	, I_LOGIN_ID     IN VARCHAR2	
	, I_SCHE_ID	     IN VARCHAR2
	, I_CUD_GUBUN    IN VARCHAR2
	, I_VALUE_MEMB 	 IN VARCHAR2
	, I_TARGET_MEMB  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_HR3020M04_01
   PURPOSE:    인사고과평가 - 평가계획 관리 - 개별조정 - 평가대상자 등록/삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/02  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3020M04_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	IF I_CUD_GUBUN = 'I' THEN
		
		INSERT INTO TB_HR_EVAL_MAPPING ( TENANT_ID
									   , SCHE_ID
									   , VALUE_MEMB
									   , TARGET_MEMB
									   , CREATE_AGENT_ID
									   , CREATE_DT		
  						      ) VALUES ( I_TENANT_ID
  						    		   , I_SCHE_ID
  						    		   , I_VALUE_MEMB
  						    		   , I_TARGET_MEMB
  						    		   , I_LOGIN_ID
  						     		   , SYSDATE
  						     		   );

		UPDATE TB_HR_EVAL_VALUE
		   SET HR_TARGET_GUBUN = 90
		 WHERE TENANT_ID  = I_TENANT_ID
		   AND SCHE_ID    = I_SCHE_ID
		   AND VALUE_MEMB = I_VALUE_MEMB ;
		   
		
		
	ELSIF I_CUD_GUBUN = 'D' THEN

		DELETE 
		  FROM TB_HR_EVAL_MAPPING
		 WHERE TENANT_ID    = I_TENANT_ID
		   AND SCHE_ID      = I_SCHE_ID
		   AND VALUE_MEMB   = I_VALUE_MEMB
		   AND TARGET_MEMB  = CASE WHEN I_TARGET_MEMB IS NULL THEN TARGET_MEMB
		                           ELSE I_TARGET_MEMB END;		                     


	END IF;
	
	
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3030M01_01" (
	  I_TENANT_ID IN VARCHAR2
	, I_STD_MONTH IN VARCHAR2
	, I_SCHE_ID   IN VARCHAR2
	, I_AGENT_ID  IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3030M01_01
   PURPOSE:    인사고과평가 - 평가진행 관리 - 평가계획/평가표 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/07  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3030M01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR    
	

		SELECT AA.TENANT_ID
			 , AA.SCHE_ID
		     , AA.TENANT_ID
		     , AA.SCHE_NM
		     , AA.SELF_YN
		     , AA.SHEET_ID
		     , AA.SHEET_NM
		     , AA.START_DT
		     , AA.END_DT
		     , AA.TARGET_CNT
		     , AA.VALUE_CNT
		     , AA.RESULT_CNT || ' / ' || AA.MAPPING_CNT AS EVAL_CNT
		     , CASE WHEN AA.RESULT_CNT = 0 THEN '0.00' 
		            ELSE TO_CHAR((AA.RESULT_CNT/AA.MAPPING_CNT) * 100, 'FM990.00') END AS EVAL_PERCENT
		     , CASE WHEN TO_CHAR(((SELECT SUM(T.TOTAL_SCORE)
						             FROM TB_HR_EVAL_RESULT_HEADER T
						            WHERE T.TENANT_ID = I_TENANT_ID
						              AND T.SCHE_ID   = AA.SCHE_ID
						              AND T.SHEET_ID  = AA.SHEET_ID
						              AND T.VALUE_MEMB != T.TARGET_MEMB
						              AND T.SELF_YN   = 0) / AA.RESULT_CNT), 'FM990.00') IS NULL THEN '0.00'
				    ELSE TO_CHAR(((SELECT SUM(T.TOTAL_SCORE)
						             FROM TB_HR_EVAL_RESULT_HEADER T
						            WHERE T.TENANT_ID = I_TENANT_ID
						              AND T.SCHE_ID   = AA.SCHE_ID
						              AND T.SHEET_ID  = AA.SHEET_ID
						              AND T.VALUE_MEMB != T.TARGET_MEMB
						              AND T.SELF_YN   = 0) / AA.RESULT_CNT), 'FM990.00') END  AS AVG_SCORE
			 , TO_CHAR((SELECT CASE WHEN STDDEV(T.TOTAL_SCORE) IS NULL THEN 0 
			                        ELSE STDDEV(T.TOTAL_SCORE) END
					      FROM TB_HR_EVAL_RESULT_HEADER T
					     WHERE T.TENANT_ID = I_TENANT_ID
					       AND T.SCHE_ID   = AA.SCHE_ID
					       AND T.SHEET_ID  = AA.SHEET_ID
					       AND T.VALUE_MEMB != T.TARGET_MEMB
				           AND T.SELF_YN   = 0  ), 'FM990.00') 
				AS STD_DEVIATION
		  FROM (SELECT DISTINCT A.SCHE_ID
				     , A.TENANT_ID
				     , A.SCHE_NM
				     , A.SELF_YN
				     , B.SHEET_ID
				     , B.SHEET_NM
				     , TO_CHAR(TO_DATE(A.START_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS START_DT
				     , TO_CHAR(TO_DATE(A.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD')   AS END_DT
				     , ( SELECT COUNT(T.TARGET_MEMB)
				           FROM TB_HR_EVAL_TARGET T
				          WHERE T.TENANT_ID = I_TENANT_ID
				            AND T.SCHE_ID   = A.SCHE_ID ) AS TARGET_CNT
				     , ( SELECT COUNT(T.VALUE_MEMB)
				           FROM TB_HR_EVAL_VALUE T
				          WHERE T.TENANT_ID = I_TENANT_ID
				            AND T.SCHE_ID   = A.SCHE_ID ) AS VALUE_CNT
				     , ( SELECT COUNT(T.SHEETKEY)
				           FROM TB_HR_EVAL_RESULT_HEADER T
				          WHERE T.TENANT_ID = I_TENANT_ID
				            AND T.SCHE_ID   = A.SCHE_ID
				            AND T.VALUE_MEMB != T.TARGET_MEMB
				            AND T.SELF_YN   = 0 ) AS RESULT_CNT
					 , ( SELECT COUNT(T.SCHE_ID)
					       FROM TB_HR_EVAL_MAPPING T
					      WHERE T.TENANT_ID = I_TENANT_ID
					        AND T.SCHE_ID   = A.SCHE_ID) AS MAPPING_CNT
				  FROM TB_HR_EVAL_SCHE A
				 INNER JOIN TB_HR_SHEET_HEADER B
				    ON A.TENANT_ID = B.TENANT_ID
				   AND A.SHEET_ID  = B.SHEET_ID
				 INNER JOIN TB_HR_EVAL_MAPPING C
				    ON A.TENANT_ID = C.TENANT_ID
				   AND A.SCHE_ID   = C.SCHE_ID
				 WHERE A.TENANT_ID = I_TENANT_ID
				   AND SUBSTR(A.SCHE_ID, 0, 6) = I_STD_MONTH
		           AND ((I_SCHE_ID  IS NULL AND 1 = 1) OR I_SCHE_ID  IS NOT NULL AND INSTR( I_SCHE_ID,  A.SCHE_ID) > 0)
		           AND ((I_AGENT_ID IS NULL AND 1 = 1) OR I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID, C.TARGET_MEMB) > 0))AA	
			
          
		      			   
		   ;


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3030S01_01" (
	  I_TENANT_ID IN VARCHAR2
	, I_SHEET_ID  IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3030S01_01
   PURPOSE:    인사고과평가 - 평가진행 관리 - 팝업 평가계획 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/09  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3030S01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR
	
		SELECT A.TENANT_ID
		     , A.SHEET_ID
		     , A.QUESTION_ID
		     , A.QUESTION_NO
		     , A.HR_EVAL_TYPE AS EVAL_TYPE_CD
		     , FN_CM_GET_CODE_NM(A.TENANT_ID, 'HR_EVAL_TYPE', A.HR_EVAL_TYPE) AS EVAL_TYPE
		     , A.QUESTION_NM
		     , A.SCORE
		     , A.SCORE_A
		     , A.SCORE_B
		     , A.SCORE_C
		     , A.SCORE_D
		     , A.SCORE_E     	     	     	     
		  FROM TB_HR_SHEET_DETAIL A
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND A.SHEET_ID  = I_SHEET_ID
		 ORDER BY QUESTION_NO ASC;
		

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3030S01_02" (
	  I_TENANT_ID     IN VARCHAR2
	, I_AGENT_ID      IN VARCHAR2
	, I_SCHE_ID       IN VARCHAR2
	, I_SHEET_ID      IN VARCHAR2
	, I_TARGET_MEMB   IN VARCHAR2
	, I_VALUE_MEMB    IN VARCHAR2
	, I_SELF_YN       IN VARCHAR2
	, I_TOTAL_SCORE   IN VARCHAR2
	, I_CONVERT_SCORE IN VARCHAR2
	, I_TOTAL_COMMENT IN VARCHAR2
	, I_SHEETKEY	  IN VARCHAR2
    , O_CUR_LIST      OUT SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 

/******************************************************************************
   NAME:       SP_HR3030S01_02
   PURPOSE:    인사고과평가 - 평가진행 관리 - 평가정보 등록, 수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/09  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3030S01_02';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

	V_SHEETKEY		VARCHAR2(14)		:=''; 
	
BEGIN

  -- ********************************************************************************
  -- 1. 수정, 등록
  -- ********************************************************************************

		SELECT CASE WHEN CHK.SHEETKEY IS NULL THEN TO_CHAR(SYSDATE, 'YYYYMMDD')||'0001'
	                ELSE TO_CHAR(SYSDATE, 'YYYYMMDD') || SUBSTR(CHK.SHEETKEY,9,4)
	                 END INTO V_SHEETKEY
		  FROM (SELECT MAX(SHEETKEY + 1) AS SHEETKEY
	      		  FROM TB_HR_EVAL_RESULT_HEADER
	      		 WHERE 1 = 1 
	               AND TENANT_ID = I_TENANT_ID
		           AND TO_CHAR(SYSDATE, 'YYYYMMDD') = SUBSTR(SHEETKEY, 0, 8)) CHK; 

		      
		 MERGE INTO TB_HR_EVAL_RESULT_HEADER T
      	 USING (SELECT I_TENANT_ID  AS TENANT_ID
                     , I_SHEETKEY   AS SHEETKEY
                  FROM DUAL ) S
            ON ( T.TENANT_ID = S.TENANT_ID AND T.SHEETKEY = S.SHEETKEY)
            
            
			WHEN MATCHED THEN
			
				UPDATE SET TOTAL_SCORE   = I_TOTAL_SCORE
						 , CONVERT_SCORE = I_CONVERT_SCORE
						 , TOTAL_COMMENT = I_TOTAL_COMMENT
	                     , MODIFY_DT = SYSDATE
	                     , MODIFY_AGENT_ID = I_AGENT_ID                     
	
			WHEN NOT MATCHED THEN
			
				INSERT ( TENANT_ID
				       , SHEETKEY				       
				       , SCHE_ID
				       , SHEET_ID
				       , TARGET_MEMB
				       , VALUE_MEMB
				       , SELF_YN
				       , TOTAL_SCORE
				       , CONVERT_SCORE
				       , TOTAL_COMMENT				       
				       , CREATE_AGENT_ID
				       , CREATE_DT
	          ) VALUES ( I_TENANT_ID
	          		   , V_SHEETKEY
	          		   , I_SCHE_ID
	          		   , I_SHEET_ID
	          		   , I_TARGET_MEMB
	          		   , I_VALUE_MEMB
	          		   , I_SELF_YN
	          		   , I_TOTAL_SCORE
	          		   , I_CONVERT_SCORE
	          		   , I_TOTAL_COMMENT
	          		   , I_AGENT_ID
	          		   , SYSDATE
	          		   ) ;
	          		   
	
		  OPEN O_CUR_LIST FOR    
		
			  SELECT V_SHEETKEY AS SHEETKEY
			    FROM DUAL;
			
	COMMIT;
    
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3030S01_03" (
	  I_TENANT_ID     IN VARCHAR2
	, I_AGENT_ID      IN VARCHAR2
	, I_CUD_GUBUN     IN VARCHAR2
	, I_SHEETKEY      IN VARCHAR2
	, I_SHEET_ID      IN VARCHAR2
    , I_QUESTION_ID   IN VARCHAR2
    , I_VALUE_ID      IN VARCHAR2    
    , I_VALUE_SCORE   IN VARCHAR2    	
) AS 

/******************************************************************************
   NAME:       SP_HR3030S01_03
   PURPOSE:    인사고과평가 - 평가진행 관리 - 평가내용 상세정보 등록, 수정, 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/09  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3030S01_03';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN

  -- ********************************************************************************
  -- 1. 수정, 등록
  -- ********************************************************************************

	IF I_CUD_GUBUN = 'U' THEN
		      
		 MERGE INTO TB_HR_EVAL_RESULT_DETAIL T
      	 USING (SELECT I_TENANT_ID   AS TENANT_ID
                     , I_SHEETKEY    AS SHEETKEY
                     , I_SHEET_ID    AS SHEET_ID
                     , I_QUESTION_ID AS QUESTION_ID
                  FROM DUAL ) S
            ON ( T.TENANT_ID = S.TENANT_ID 
	             AND T.SHEETKEY = S.SHEETKEY 
	             AND T.SHEET_ID = S.SHEET_ID 
	             AND T.QUESTION_ID = S.QUESTION_ID)
            
            
			WHEN MATCHED THEN
			
				UPDATE SET VALUE_ID    = I_VALUE_ID
				         , VALUE_SCORE = I_VALUE_SCORE
	                     , MODIFY_DT = SYSDATE
	                     , MODIFY_AGENT_ID = I_AGENT_ID                     
	
			WHEN NOT MATCHED THEN
			
				INSERT ( TENANT_ID
				       , SHEETKEY
				       , SHEET_ID
				       , QUESTION_ID
				       , VALUE_ID
				       , VALUE_SCORE
				       , CREATE_AGENT_ID
				       , CREATE_DT
	          ) VALUES ( I_TENANT_ID
	          		   , I_SHEETKEY
	          		   , I_SHEET_ID
	          		   , I_QUESTION_ID
	          		   , I_VALUE_ID
					   , I_VALUE_SCORE
	          		   , I_AGENT_ID
	          		   , SYSDATE
	          		   ) ;	    
	          		   
	          		   
	ELSIF I_CUD_GUBUN = 'D' THEN
	
		DELETE
		  FROM TB_HR_EVAL_RESULT_DETAIL
		 WHERE TENANT_ID = I_TENANT_ID
		   AND SHEETKEY  = I_SHEETKEY;
	
	END IF;
	
	
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3030S01_04" (
	  I_TENANT_ID   IN VARCHAR2
	, I_SCHE_ID     IN VARCHAR2
	, I_SHEET_ID    IN VARCHAR2
	, I_VALUE_MEMB  IN VARCHAR2
	, I_TARGET_MEMB IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3030S01_04
   PURPOSE:    인사고과평가 - 평가진행 관리 - 팝업 평가정보 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/12
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3030S01_04';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR	
			
		SELECT A.TENANT_ID
		     , A.SHEETKEY
		     , A.SCHE_ID
		     , A.SHEET_ID
		     , A.VALUE_MEMB
		     , A.TARGET_MEMB
		     , A.TOTAL_SCORE
		     , A.TOTAL_COMMENT
		     , B.VALUE_ID
			 , B.VALUE_SCORE
			 , C.QUESTION_ID
			 , C.QUESTION_NO
			 , C.QUESTION_NM
		  FROM TB_HR_EVAL_RESULT_HEADER A
		 INNER JOIN TB_HR_EVAL_RESULT_DETAIL B
		    ON A.TENANT_ID = I_TENANT_ID
		   AND A.TENANT_ID = B.TENANT_ID
		   AND A.SHEET_ID  = B.SHEET_ID
		   AND A.SHEETKEY  = B.SHEETKEY
		 INNER JOIN TB_HR_SHEET_DETAIL C 
		    ON C.TENANT_ID   = I_TENANT_ID
		   AND A.TENANT_ID   = C.TENANT_ID
		   AND A.SHEET_ID    = C.SHEET_ID
		   AND B.QUESTION_ID = C.QUESTION_ID
		 WHERE A.TENANT_ID = I_TENANT_ID		   
		   AND A.SCHE_ID   = I_SCHE_ID
		   AND A.SHEET_ID  = I_SHEET_ID
		   AND A.VALUE_MEMB  = I_VALUE_MEMB
		   AND A.TARGET_MEMB = I_TARGET_MEMB
		 ORDER BY C.QUESTION_NO
		
		
		;
		

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3030S01_05" (
	  I_TENANT_ID     IN VARCHAR2
	, I_SHEETKEY	  IN VARCHAR2
) AS 

/******************************************************************************
   NAME:       SP_HR3030S01_05
   PURPOSE:    인사고과평가 - 평가진행 관리 - 평가정보 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/13  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3030S01_05';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN

	DELETE 
	  FROM TB_HR_EVAL_RESULT_HEADER
	 WHERE TENANT_ID = I_TENANT_ID
	   AND SHEETKEY  = I_SHEETKEY ;

	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3030S01_06" (
	  I_TENANT_ID   IN VARCHAR2
	, I_SCHE_ID     IN VARCHAR2
	, I_SHEET_ID    IN VARCHAR2
	, I_TARGET_MEMB IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3030S01_06
   PURPOSE:    인사고과평가 - 평가진행 관리 - 팝업 평가정보 조회(본인평가)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/12
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3030S01_06';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR
	
			SELECT A.TENANT_ID
			     , A.SCHE_ID
			     , A.SHEET_ID
			     , NVL(A.TOTAL_SCORE, 0) AS SELF_TOTAL_SCORE			     
				 , NVL(B.VALUE_SCORE, 0) AS SELF_VALUE_SCORE
				 , C.QUESTION_ID
				 , C.QUESTION_NO
				 , C.QUESTION_NM
			  FROM TB_HR_EVAL_RESULT_HEADER A
			 INNER JOIN TB_HR_EVAL_RESULT_DETAIL B
			    ON A.TENANT_ID = I_TENANT_ID
			   AND A.TENANT_ID = B.TENANT_ID
			   AND A.SHEET_ID  = B.SHEET_ID
			   AND A.SHEETKEY  = B.SHEETKEY
			 INNER JOIN TB_HR_SHEET_DETAIL C 
			    ON C.TENANT_ID   = I_TENANT_ID
			   AND A.TENANT_ID   = C.TENANT_ID
			   AND A.SHEET_ID    = C.SHEET_ID
			   AND B.QUESTION_ID = C.QUESTION_ID
			 WHERE A.TENANT_ID = I_TENANT_ID		   
			   AND A.SCHE_ID   = I_SCHE_ID
			   AND A.SHEET_ID  = I_SHEET_ID
			   AND A.VALUE_MEMB  = I_TARGET_MEMB
			   AND A.TARGET_MEMB = I_TARGET_MEMB
			 ORDER BY C.QUESTION_NO
		
		
		;
		

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3040S01_01" (
	  I_TENANT_ID IN VARCHAR2
	, I_SHEET_ID  IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3040S01_01
   PURPOSE:    인사고과평가 - 본인평가 - 팝업 평가계획 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/13
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3040S01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR
	
		SELECT A.TENANT_ID
		     , A.SHEET_ID
		     , A.QUESTION_ID
		     , A.QUESTION_NO
		     , A.HR_EVAL_TYPE AS EVAL_TYPE_CD
		     , FN_CM_GET_CODE_NM(A.TENANT_ID, 'HR_EVAL_TYPE', A.HR_EVAL_TYPE) AS EVAL_TYPE
		     , A.QUESTION_NM
		     , A.SCORE
		     , A.SCORE_A
		     , A.SCORE_B
		     , A.SCORE_C
		     , A.SCORE_D
		     , A.SCORE_E     	     	     	     
		  FROM TB_HR_SHEET_DETAIL A
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND A.SHEET_ID  = I_SHEET_ID
		 ORDER BY QUESTION_NO ASC;
		

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3040S01_02" (
	  I_TENANT_ID     IN VARCHAR2
	, I_AGENT_ID      IN VARCHAR2
	, I_SCHE_ID       IN VARCHAR2
	, I_SHEET_ID      IN VARCHAR2
	, I_TARGET_MEMB   IN VARCHAR2
	, I_SELF_YN       IN VARCHAR2
	, I_TOTAL_SCORE   IN VARCHAR2
	, I_CONVERT_SCORE IN VARCHAR2
	, I_TOTAL_COMMENT IN VARCHAR2
	, I_SHEETKEY	  IN VARCHAR2
    , O_CUR_LIST      OUT SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 

/******************************************************************************
   NAME:       SP_HR3040S01_02
   PURPOSE:    인사고과평가 - 본인평가 - 평가정보 등록, 수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/13  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3040S01_02';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

	V_SHEETKEY		VARCHAR2(14)		:=''; 
	
BEGIN

  -- ********************************************************************************
  -- 1. 수정, 등록
  -- ********************************************************************************

		SELECT CASE WHEN CHK.SHEETKEY IS NULL THEN TO_CHAR(SYSDATE, 'YYYYMMDD')||'0001'
	                ELSE TO_CHAR(SYSDATE, 'YYYYMMDD') || SUBSTR(CHK.SHEETKEY,9,4)
	                 END INTO V_SHEETKEY
		  FROM (SELECT MAX(SHEETKEY + 1) AS SHEETKEY
	      		  FROM TB_HR_EVAL_RESULT_HEADER
	      		 WHERE 1 = 1 
	               AND TENANT_ID = I_TENANT_ID
		           AND TO_CHAR(SYSDATE, 'YYYYMMDD') = SUBSTR(SHEETKEY, 0, 8)) CHK; 

		      
		 MERGE INTO TB_HR_EVAL_RESULT_HEADER T
      	 USING (SELECT I_TENANT_ID  AS TENANT_ID
                     , I_SHEETKEY   AS SHEETKEY
                  FROM DUAL ) S
            ON ( T.TENANT_ID = S.TENANT_ID AND T.SHEETKEY = S.SHEETKEY)
            
            
			WHEN MATCHED THEN
			
				UPDATE SET TOTAL_SCORE   = I_TOTAL_SCORE
						 , CONVERT_SCORE = I_CONVERT_SCORE
						 , TOTAL_COMMENT = I_TOTAL_COMMENT
	                     , MODIFY_DT = SYSDATE
	                     , MODIFY_AGENT_ID = I_AGENT_ID                     
	
			WHEN NOT MATCHED THEN
			
				INSERT ( TENANT_ID
				       , SHEETKEY				       
				       , SCHE_ID
				       , SHEET_ID
				       , TARGET_MEMB
				       , VALUE_MEMB
				       , SELF_YN
				       , TOTAL_SCORE
				       , CONVERT_SCORE
				       , TOTAL_COMMENT				       
				       , CREATE_AGENT_ID
				       , CREATE_DT
	          ) VALUES ( I_TENANT_ID
	          		   , V_SHEETKEY
	          		   , I_SCHE_ID
	          		   , I_SHEET_ID
	          		   , I_TARGET_MEMB
	          		   , I_TARGET_MEMB
	          		   , I_SELF_YN
	          		   , I_TOTAL_SCORE
	          		   , I_CONVERT_SCORE
	          		   , I_TOTAL_COMMENT
	          		   , I_AGENT_ID
	          		   , SYSDATE
	          		   ) ;
	          		   
	
		  OPEN O_CUR_LIST FOR    
		
			  SELECT V_SHEETKEY AS SHEETKEY
			    FROM DUAL;
		
	COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3040S01_03" (
	  I_TENANT_ID     IN VARCHAR2
	, I_AGENT_ID      IN VARCHAR2
	, I_CUD_GUBUN     IN VARCHAR2
	, I_SHEETKEY      IN VARCHAR2
	, I_SHEET_ID      IN VARCHAR2
    , I_QUESTION_ID   IN VARCHAR2
    , I_VALUE_ID      IN VARCHAR2
    , I_VALUE_SCORE   IN VARCHAR2    	
) AS 

/******************************************************************************
   NAME:       SP_HR3040S01_03
   PURPOSE:    인사고과평가 - 본인평가 - 평가내용 상세정보 등록, 수정, 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/13  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3040S01_03';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN

  -- ********************************************************************************
  -- 1. 수정, 등록
  -- ********************************************************************************

	IF I_CUD_GUBUN = 'U' THEN
		      
		 MERGE INTO TB_HR_EVAL_RESULT_DETAIL T
      	 USING (SELECT I_TENANT_ID   AS TENANT_ID
                     , I_SHEETKEY    AS SHEETKEY
                     , I_SHEET_ID    AS SHEET_ID
                     , I_QUESTION_ID AS QUESTION_ID
                  FROM DUAL ) S
            ON ( T.TENANT_ID = S.TENANT_ID 
	             AND T.SHEETKEY = S.SHEETKEY 
	             AND T.SHEET_ID = S.SHEET_ID 
	             AND T.QUESTION_ID = S.QUESTION_ID)
            
            
			WHEN MATCHED THEN
			
				UPDATE SET VALUE_ID    = I_VALUE_ID
				         , VALUE_SCORE = I_VALUE_SCORE
	                     , MODIFY_DT = SYSDATE
	                     , MODIFY_AGENT_ID = I_AGENT_ID                     
	
			WHEN NOT MATCHED THEN
			
				INSERT ( TENANT_ID
				       , SHEETKEY
				       , SHEET_ID
				       , QUESTION_ID
				       , VALUE_ID
				       , VALUE_SCORE
				       , CREATE_AGENT_ID
				       , CREATE_DT
	          ) VALUES ( I_TENANT_ID
	          		   , I_SHEETKEY
	          		   , I_SHEET_ID
	          		   , I_QUESTION_ID
	          		   , I_VALUE_ID
					   , I_VALUE_SCORE
	          		   , I_AGENT_ID
	          		   , SYSDATE
	          		   ) ;	    
	          		   
	          		   
	ELSIF I_CUD_GUBUN = 'D' THEN
	
		DELETE
		  FROM TB_HR_EVAL_RESULT_DETAIL
		 WHERE TENANT_ID = I_TENANT_ID
		   AND SHEETKEY  = I_SHEETKEY;
	
	END IF;
	
	
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3040S01_04" (
	  I_TENANT_ID   IN VARCHAR2
	, I_SCHE_ID     IN VARCHAR2
	, I_SHEET_ID    IN VARCHAR2
	, I_TARGET_MEMB IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3040S01_04
   PURPOSE:    인사고과평가 - 본인평가 - 팝업 평가정보 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/13
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3040S01_04';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR
	
		SELECT A.TENANT_ID
		     , A.SHEETKEY
		     , A.SCHE_ID
		     , A.SHEET_ID
		     , A.VALUE_MEMB
		     , A.TARGET_MEMB
		     , A.TOTAL_SCORE
		     , A.TOTAL_COMMENT
			 , B.QUESTION_ID
			 , B.VALUE_ID
			 , B.VALUE_SCORE
			 , C.QUESTION_ID
			 , C.QUESTION_NO
			 , C.QUESTION_NM
		  FROM TB_HR_EVAL_RESULT_HEADER A
		 INNER JOIN TB_HR_EVAL_RESULT_DETAIL B
		    ON A.TENANT_ID = I_TENANT_ID
		   AND A.TENANT_ID = B.TENANT_ID
		   AND A.SHEET_ID  = B.SHEET_ID
		   AND A.SHEETKEY  = B.SHEETKEY
		 INNER JOIN TB_HR_SHEET_DETAIL C 
		    ON C.TENANT_ID   = I_TENANT_ID
		   AND A.TENANT_ID   = C.TENANT_ID
		   AND A.SHEET_ID    = C.SHEET_ID
		   AND B.QUESTION_ID = C.QUESTION_ID
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND A.SCHE_ID   = I_SCHE_ID
		   AND A.SHEET_ID  = I_SHEET_ID
		   AND A.VALUE_MEMB  = I_TARGET_MEMB
		   AND A.TARGET_MEMB = I_TARGET_MEMB
		 ORDER BY C.QUESTION_NO

		;
		

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3040S01_05" (
	  I_TENANT_ID     IN VARCHAR2
	, I_SHEETKEY	  IN VARCHAR2
) AS 

/******************************************************************************
   NAME:       SP_HR3040S01_05
   PURPOSE:    인사고과평가 - 본인평가 - 평가정보 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/13  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3040S01_05';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN

	DELETE 
	  FROM TB_HR_EVAL_RESULT_HEADER
	 WHERE TENANT_ID = I_TENANT_ID
	   AND SHEETKEY  = I_SHEETKEY ;

	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3050M01_01" (
	  I_TENANT_ID IN VARCHAR2
	, I_START_DT  IN VARCHAR2
	, I_END_DT    IN VARCHAR2
	, I_SCHE_ID   IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3050M01_01
   PURPOSE:    인사고과평가 - 고가평가결과 - 평가계획 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/14  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3050M01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR    
	
		WITH TEMP_LIST AS (
			
				SELECT A.TENANT_ID
				     , A.SCHE_ID
				     , A.STD_MONTH
				     , A.SCHE_NM
				     , A.START_DT
				     , A.END_DT
				     , A.KPI_YN
				     , A.SHEET_NM
				     , A.SHEET_ID
				     , A.RESULT_CNT || ' / ' || A.MAPPING_CNT AS EVAL_CNT
	  			     , CASE WHEN A.RESULT_CNT = 0 THEN '0.00' 
		        		    ELSE TO_CHAR((A.RESULT_CNT/A.MAPPING_CNT) * 100, 'FM990.00') END AS EVAL_PERCENT
				     , CASE WHEN TO_CHAR(((SELECT SUM(T.TOTAL_SCORE)
								             FROM TB_HR_EVAL_RESULT_HEADER T
								            WHERE T.TENANT_ID = I_TENANT_ID
								              AND T.SCHE_ID   = A.SCHE_ID
								              AND T.SHEET_ID  = A.SHEET_ID
								              AND T.VALUE_MEMB != T.TARGET_MEMB
							                  AND T.SELF_YN   = 0) / A.RESULT_CNT), 'FM990.00') IS NULL THEN '0.00'
						    ELSE TO_CHAR(((SELECT SUM(T.TOTAL_SCORE)
								             FROM TB_HR_EVAL_RESULT_HEADER T
								            WHERE T.TENANT_ID = I_TENANT_ID
								              AND T.SCHE_ID   = A.SCHE_ID
								              AND T.SHEET_ID  = A.SHEET_ID
								              AND T.VALUE_MEMB != T.TARGET_MEMB
							                  AND T.SELF_YN   = 0) / A.RESULT_CNT), 'FM990.00') END  AS AVG_SCORE
					 , ( SELECT SUM(T.SCORE)
					       FROM TB_HR_SHEET_DETAIL T
					      WHERE T.TENANT_ID = I_TENANT_ID
					        AND T.SHEET_ID  = A.SHEET_ID) AS TOTAL_SCORE									              
				  FROM ( SELECT A.TENANT_ID
						      , A.SCHE_ID
						      , TO_CHAR(TO_DATE(A.START_DT, 'YYYYMMDD'), 'YYYY-MM') AS STD_MONTH
						      , A.SCHE_NM
						      , TO_CHAR(TO_DATE(A.START_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS START_DT
						      , TO_CHAR(TO_DATE(A.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD')   AS END_DT	     
						      , A.KPI_YN
						      , ( SELECT T.SHEET_NM 
						            FROM TB_HR_SHEET_HEADER T
						           WHERE T.TENANT_ID = I_TENANT_ID 
						             AND SHEET_ID = A.SHEET_ID) AS SHEET_NM
						      , A.SHEET_ID
						      , ( SELECT COUNT(T.SHEETKEY)
						            FROM TB_HR_EVAL_RESULT_HEADER T
						           WHERE T.TENANT_ID = I_TENANT_ID
						             AND T.SCHE_ID   = A.SCHE_ID
						             AND T.VALUE_MEMB != T.TARGET_MEMB ) AS RESULT_CNT
							  , ( SELECT COUNT(T.SCHE_ID)
							        FROM TB_HR_EVAL_MAPPING T
							       WHERE T.TENANT_ID = I_TENANT_ID
							         AND T.SCHE_ID   = A.SCHE_ID) AS MAPPING_CNT
						   FROM TB_HR_EVAL_SCHE A
						  WHERE A.TENANT_ID = I_TENANT_ID
						    AND SUBSTR(A.SCHE_ID, 0, 6) >= I_START_DT 
						    AND SUBSTR(A.SCHE_ID, 0, 6) <= I_END_DT
						    AND ((I_SCHE_ID  IS NULL AND 1 = 1) OR I_SCHE_ID  IS NOT NULL AND INSTR( I_SCHE_ID,  A.SCHE_ID) > 0) ) A
		
		)
		
		
		SELECT A.TENANT_ID
		     , A.SCHE_ID
		     , A.STD_MONTH
		     , A.SCHE_NM
		     , A.START_DT
		     , A.END_DT
		     , A.KPI_YN
		     , A.SHEET_NM
		     , A.SHEET_ID
		     , A.EVAL_CNT
		     , A.EVAL_PERCENT
		     , A.AVG_SCORE
		     , TO_CHAR(( A.AVG_SCORE / A.TOTAL_SCORE ) * 100, 'FM990.00') AS CONVERT_SCORE
		  FROM TEMP_LIST A ;
		  
		


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3050M01_03" (
	  I_TENANT_ID  IN VARCHAR2
	, I_SCHE_ID    IN VARCHAR2  
	, O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3050M01_03
   PURPOSE:    인사고과평가 - 고과평가결과 - 직급별/직책별/업무그룹별/근속기간별 : 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/14
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR3050M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN
 
	OPEN O_CUR_LIST FOR 
		
		WITH TEMP_LIST AS (	                       
	    
		    SELECT FN_CM_GET_DEPT_NM(B.TENANT_ID, 'center', B.DEPT_CD) AS CENTER
		         , FN_CM_GET_DEPT_NM(B.TENANT_ID, 'part', B.DEPT_CD)   AS PART
		         , FN_CM_GET_DEPT_NM(B.TENANT_ID, 'team', B.DEPT_CD)   AS TEAM
		         , FN_CM_GET_DEPT_NM(B.TENANT_ID, 'jo', B.DEPT_CD)     AS JO
		         , B.DEPT_CD
		         , COUNT(A.TARGET_MEMB)  AS TOTAL_CNT
		  		 , SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
		      FROM TB_HR_EVAL_RESULT_HEADER A
		     INNER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.TARGET_MEMB = B.AGENT_ID )
		    WHERE A.TENANT_ID  = I_TENANT_ID
		      AND A.VALUE_MEMB != A.TARGET_MEMB
		      AND A.SELF_YN = 0
		      AND INSTR( I_SCHE_ID,  A.SCHE_ID) > 0
		    GROUP BY B.TENANT_ID, B.DEPT_CD 
		) 
		
		
	SELECT A.CENTER
	     , A.PART
	     , A.TEAM
	     , A.JO
	     , A.DEPT_CD
	     , A.TOTAL_SCORE
	     , A.TOTAL_CNT
	     , TO_CHAR(ROUND((TOTAL_SCORE / (CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)), 1), 'FM990.0') AS TOTAL_AVG
	  FROM TEMP_LIST A
	 ORDER BY 1, 2, 3, 4 ;
	    
	    
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_HR3050M01_04 (
	  I_TENANT_ID     IN VARCHAR2
	, I_SCHE_ID       IN VARCHAR2
	, I_COLUMN_ID     IN VARCHAR2 /* 구분 - 1(직급별)/2(직책별)/3(업무그룹별)/4(근속기간별) */
	, O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3050M01_04
   PURPOSE:    종합평가결과 - 직급별/직책별/업무그룹별/근속기간별 - 데이터목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/14
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR3050M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
	
	OPEN O_CUR_LIST FOR 
	
		WITH TEMP_LIST AS (

			SELECT A.TENANT_ID
			     , A.TARGET_MEMB
				 , A.TOTAL_SCORE
				 , B.DEPT_CD
				 , NVL((CASE I_COLUMN_ID WHEN 1 THEN B.AGENT_JIKGUP
			     					     WHEN 2 THEN B.AGENT_JIKCHK
			     					     WHEN 3 THEN B.TM_KIND
			     					     WHEN 4 THEN ( SELECT S.CODE
											             FROM TB_CM_CODE S 
											            WHERE S.TENANT_ID = B.TENANT_ID 
											              AND S.SORT_CD   = 'WORK_PERIOD'
												          AND B.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
											              AND ROWNUM = 1 )  END),'NOITEM') AS COLUMN_ID /* 값이없거나 공통코드에 없는 값는 별도 컬럼으로  계산하기 위해 */
 		     FROM TB_HR_EVAL_RESULT_HEADER A
		    INNER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.TARGET_MEMB = B.AGENT_ID )
			WHERE A.TENANT_ID = I_TENANT_ID
			  AND A.VALUE_MEMB != A.TARGET_MEMB
			  AND A.SELF_YN = 0
		      AND INSTR( I_SCHE_ID,  A.SCHE_ID) > 0
		      
		), TEMP_CD AS (
		
			SELECT CODE
		      FROM TB_CM_CODE S
		     WHERE S.TENANT_ID = I_TENANT_ID
		       AND S.SORT_CD   = (CASE I_COLUMN_ID  WHEN 1 THEN 'AGENT_JIKGUP'
							     					WHEN 2 THEN 'AGENT_JIKCHK'
							     					WHEN 3 THEN 'TM_KIND'
							     					WHEN 4 THEN 'WORK_PERIOD' END)
							     					
		), TEMP_LIST2 AS (
		  
			SELECT A.DEPT_CD
			     , A.COLUMN_ID	
				 , COUNT(A.TARGET_MEMB)  AS TOTAL_CNT
			  	 , SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
			  FROM TEMP_LIST A
			  LEFT OUTER JOIN TEMP_CD B ON ( A.COLUMN_ID = B.CODE )
			 GROUP BY A.TENANT_ID, A.DEPT_CD, A.COLUMN_ID	
		)
		
		  
	
	SELECT A.DEPT_CD
         , A.COLUMN_ID
         , A.TOTAL_SCORE		 
	     , TO_CHAR(TOTAL_CNT,'FM990') || '(' || 
	       TO_CHAR(ROUND((TOTAL_SCORE / (CASE TOTAL_CNT WHEN 0 THEN 1 
	                                                    ELSE TOTAL_CNT END)),1), 'FM990.0') ||')' AS TOTAL_INFO
		 , A.TOTAL_CNT
		 , TO_CHAR(ROUND((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)),1), 'FM990.0') AS TOTAL_AVG
	  FROM TEMP_LIST2 A ;

			      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1010S01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_STD_MONTH   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI1010S01_01
   PURPOSE:    근태 점수 산정 기준_01

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/14
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1010S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
	SELECT STD_ID
		   ,STD_NM
	FROM TB_KPI_CONDUCT_STD
	WHERE TENANT_ID = I_TENANT_ID
	AND STD_MONTH = I_STD_MONTH
	GROUP BY STD_ID, STD_NM
	ORDER BY STD_ID ASC
;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1010S01_02
(
    I_TENANT_ID   IN  VARCHAR2
  , I_STD_ID	  IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI1010S01_02
   PURPOSE:    근태 점수 산정 기준_02

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/14
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1010S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
	SELECT A.CONDUCT_CODE AS CONDUCT_CD
		,CASE WHEN A.CONDUCT_CODE = '10' OR A.CONDUCT_CODE = '20' OR A.CONDUCT_CODE ='30' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'LAZY_TYPE', A.CONDUCT_CODE) 
			  ELSE FN_CM_GET_CODE_NM(A.TENANT_ID,'CONDUCT_CODE', A.CONDUCT_CODE) END AS CONDUCT_NM
		,A.FAIR_SCORE
		,A.UNFAIR_SCORE
		,A.CUMULATE_CNT
		,A.CUMULATE_SCORE
	FROM TB_KPI_CONDUCT_STD A
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.STD_ID = I_STD_ID
	ORDER BY TO_NUMBER(A.CONDUCT_CODE)
;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1010S01_03
(
    I_TENANT_ID   IN  VARCHAR2
  , I_STD_ID	  IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI1010S01_03
   PURPOSE:    근태 점수 산정 기준_03

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/14
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1010S01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
    SELECT FN_CM_GET_DEPT_NM(I_TENANT_ID,'center',DEPT_CD) AS CETNER_NM
    		,FN_CM_GET_DEPT_NM(I_TENANT_ID,'part',DEPT_CD) AS PART_NM
    		,FN_CM_GET_DEPT_NM(I_TENANT_ID,'team',DEPT_CD) AS TEAM_NM
			,FN_CM_GET_DEPT_NM(I_TENANT_ID,'jo',DEPT_CD) AS JO_NM
    		,A.DEPT_CD
    FROM TB_CM_ACCESS_SCOPE A
    WHERE A.TENANT_ID = I_TENANT_ID
	AND	A.ITEM_ID = I_STD_ID
	AND A.SCOPE_GUBUN = 10

;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1010S01_04
(
  I_TENANT_ID       IN VARCHAR2,
  I_GBN             IN VARCHAR2,
  I_STD_ID    		IN VARCHAR2,
  I_STD_NM         	IN VARCHAR2,
  I_STD_MONTH       IN VARCHAR2,
  I_CONDUCT_CODE    IN VARCHAR2,
  I_FAIR_SCORE      IN NUMBER,
  I_UNFAIR_SCORE	IN NUMBER,
  I_CUMULATE_CNT	IN NUMBER,
  I_CUMULATE_SCORE	IN NUMBER

) AS 
/******************************************************************************
   NAME:       SP_KPI1010S01_04
   PURPOSE:    코드관리 데이터 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/01/10
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1010S01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

	--I_N_STD_ID              VARCHAR2(10);
BEGIN


    -- 신규코드등록
    IF I_GBN = 'SC' THEN 
    
--    SELECT
--      CASE WHEN CHK.STD_ID is null THEN TO_CHAR(sysdate, 'YYYYMM')||'0001'
--      		WHEN (SELECT COUNT(STD_ID) FROM TB_KPI_CONDUCT_STD WHERE STD_ID = CHK.STD_ID) = 5 THEN TO_CHAR(sysdate, 'YYYYMMDD')||SUBSTR(CHK.STD_ID+1,7,4)
--      ELSE TO_CHAR(sysdate, 'YYYYMM')||SUBSTR(CHK.STD_ID,7,4)
--      END 
--      INTO I_N_STD_ID
--    FROM 
--      (SELECT 
--        MAX(STD_ID) AS STD_ID
--      FROM TB_KPI_CONDUCT_STD WHERE 1=1 AND TB_KPI_CONDUCT_STD.TENANT_ID = I_TENANT_ID
--      AND SUBSTR(STD_ID, 0,6) = TO_CHAR(sysdate, 'YYYYMM')
--      ) CHK ;
    
    
		INSERT INTO TB_KPI_CONDUCT_STD
					  (
					    TENANT_ID,
					    STD_ID,
					    STD_NM,
					    STD_MONTH,
					    CONDUCT_CODE,
					    FAIR_SCORE,
					    UNFAIR_SCORE,
					    CUMULATE_CNT,
					    CUMULATE_SCORE
					  )
		  VALUES
		  (
		    I_TENANT_ID,
		    I_STD_ID,
		    I_STD_NM,
		    I_STD_MONTH,
		    I_CONDUCT_CODE,
		    I_FAIR_SCORE,
		    I_UNFAIR_SCORE,
		    I_CUMULATE_CNT,
		    I_CUMULATE_SCORE
		  );
		  
	-- 기준 삭제시	  
  	ELSIF I_GBN = 'D' THEN
  	
  	DELETE FROM TB_KPI_CONDUCT_STD
  	WHERE TENANT_ID = I_TENANT_ID
  	  AND STD_ID = I_STD_ID;

	DELETE FROM TB_CM_ACCESS_SCOPE
	WHERE TENANT_ID = I_TENANT_ID
	  AND ITEM_ID = I_STD_ID
	  AND SCOPE_GUBUN = 10;
	
	-- 기준명만 변경시
 	ELSIF I_GBN = 'U' THEN
	
	UPDATE TB_KPI_CONDUCT_STD
	SET STD_NM = I_STD_NM
	WHERE TENANT_ID = I_TENANT_ID
	  AND STD_ID = I_STD_ID
	;
    
    ELSIF I_GBN = 'SU' THEN 
    
    UPDATE TB_KPI_CONDUCT_STD
    SET FAIR_SCORE = I_FAIR_SCORE
	    ,UNFAIR_SCORE = I_UNFAIR_SCORE
	    ,CUMULATE_CNT = I_CUMULATE_CNT
	    ,CUMULATE_SCORE = I_CUMULATE_SCORE
    WHERE TENANT_ID = I_TENANT_ID
	  AND STD_ID = I_STD_ID
	  AND CONDUCT_CODE = I_CONDUCT_CODE
	
	;
	
    END IF;
    
    COMMIT;
    
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1010S01_05
(
  I_TENANT_ID       IN  VARCHAR2
, I_STD_MONTH		IN	VARCHAR2
, O_CUR_LIST        OUT SYS_REFCURSOR   
) AS 
/******************************************************************************
   NAME:       SP_KPI1010S01_05
   PURPOSE:    코드관리 데이터 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/01/10
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1010S01_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

BEGIN

	OPEN O_CUR_LIST FOR 
    SELECT
      CASE WHEN CHK.STD_ID is null THEN I_STD_MONTH||'0001'
      ELSE I_STD_MONTH||SUBSTR(CHK.STD_ID+1,7,4) 
      END AS STD_ID
  
    FROM 
      (SELECT 
        MAX(STD_ID) AS STD_ID
      FROM TB_KPI_CONDUCT_STD WHERE 1=1 AND TB_KPI_CONDUCT_STD.TENANT_ID = I_TENANT_ID
      AND SUBSTR(STD_ID, 0,6) = I_STD_MONTH
      ) CHK ;
    
    
	    
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1020M01_02
(
    I_TENANT_ID   	IN  VARCHAR2
  , O_CUR_LIST      OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI1020M01_02
   PURPOSE:    가감점 기준 콤보박스 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/10
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
   

    OPEN O_CUR_LIST FOR 
		
	SELECT STD_ID AS CODE
	     , STD_NM AS CODE_NM
	  FROM TB_KPI_PLUS_MINUS_STD	  
	 WHERE TENANT_ID = I_TENANT_ID
	   AND HIDE_YN = 0
	 ORDER BY SORT_SEQ ASC;
               
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1020M01_03
(
    I_TENANT_ID IN VARCHAR2
  , I_SNO       IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI1020M01_03
   PURPOSE:    가감점 삭제

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/11
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1020M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################

BEGIN

    DELETE FROM TB_KPI_PLUS_MINUS
          WHERE TENANT_ID = I_TENANT_ID
            AND SNO       = I_SNO;
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
 -- ********************************************************************************
 -- X. LOG INFO SET >> FAIL
 -- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1020S01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI1020S01_01
   PURPOSE:    가감점 기준 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/07
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
   

    OPEN O_CUR_LIST FOR 
	
	SELECT STD_ID
	     , STD_NM
	     , AGENT_MAX_SCORE
	     , AGENT_MIN_SCORE
	     , STEP_MAX_SCORE
	     , STEP_MIN_SCORE
	     , APPLY_KIND
	     , HIDE_YN
	     , SORT_SEQ
	  FROM TB_KPI_PLUS_MINUS_STD
	 WHERE TENANT_ID = I_TENANT_ID;
               
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1020S01_02
(
    I_TENANT_ID   	  IN VARCHAR2
  , I_AGENT_ID	      IN VARCHAR2
  , I_GBN		      IN VARCHAR2
  , I_STD_ID          IN VARCHAR2
  , I_STD_NM          IN VARCHAR2
  , I_AGENT_MAX_SCORE IN NUMBER
  , I_AGENT_MIN_SCORE IN NUMBER
  , I_STEP_MAX_SCORE  IN NUMBER
  , I_STEP_MIN_SCORE  IN NUMBER
  , I_APPLY_KIND      IN VARCHAR2
  , I_HIDE_YN	      IN NUMBER 
) AS 
/******************************************************************************
   NAME:       SP_KPI1020S01_02
   PURPOSE:    가감점 기준 등록, 수정, 삭제

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/10
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################

	I_N_STD_ID	VARCHAR2(10); -- 기준 ID    
BEGIN
   
  -- ********************************************************************************
  -- 1. 가감점 기준 등록
  -- ********************************************************************************

	IF I_GBN = 'C' THEN
	
    SELECT CASE WHEN CHK.STD_ID IS NULL THEN TO_CHAR(SYSDATE, 'YYYYMM')||'0001'
        		WHEN ( SELECT COUNT(STD_ID) 
        		         FROM TB_KPI_PLUS_MINUS_STD 
        		        WHERE STD_ID = CHK.STD_ID ) > 0 
        		THEN TO_CHAR(SYSDATE, 'YYYYMM')||SUBSTR(CHK.STD_ID + 1 ,7, 4) END 
      INTO I_N_STD_ID
      FROM ( SELECT MAX(STD_ID) AS STD_ID
               FROM TB_KPI_PLUS_MINUS_STD 
              WHERE 1 = 1 
                AND TENANT_ID = I_TENANT_ID
                AND SUBSTR(STD_ID, 1, 6) = TO_CHAR(SYSDATE, 'YYYYMM') ) CHK ;

    
	INSERT INTO TB_KPI_PLUS_MINUS_STD ( TENANT_ID
		                              , STD_ID
		                              , STD_NM
		                              , AGENT_MAX_SCORE
		                              , AGENT_MIN_SCORE
		                              , STEP_MAX_SCORE
		                              , STEP_MIN_SCORE
		                              , APPLY_KIND
		                              , HIDE_YN
		                              , CREATE_AGENT_ID
									  , CREATE_DT								  	
									  ) 
									  VALUES 
									  ( I_TENANT_ID
									  , I_N_STD_ID
									  , I_STD_NM
									  , I_AGENT_MAX_SCORE
									  , I_AGENT_MIN_SCORE
									  , I_STEP_MAX_SCORE 
									  , I_STEP_MIN_SCORE 
									  , I_APPLY_KIND     
									  , I_HIDE_YN
									  , I_AGENT_ID
									  , SYSDATE									  								  
									  );

  -- ********************************************************************************
  -- 2. 가감점 기준 수정
  -- ********************************************************************************
									  
	ELSIF I_GBN = 'U' THEN 
    
    UPDATE TB_KPI_PLUS_MINUS_STD
       SET STD_NM          = I_STD_NM
	     , AGENT_MAX_SCORE = I_AGENT_MAX_SCORE
	     , AGENT_MIN_SCORE = I_AGENT_MIN_SCORE
	     , STEP_MAX_SCORE  = I_STEP_MAX_SCORE
	     , STEP_MIN_SCORE  = I_STEP_MIN_SCORE
	     , APPLY_KIND      = I_APPLY_KIND
	     , HIDE_YN         = I_HIDE_YN
         , MODIFY_AGENT_ID = I_AGENT_ID
         , MODIFY_DT       = SYSDATE
     WHERE TENANT_ID = I_TENANT_ID
	   AND STD_ID = I_STD_ID;

  -- ********************************************************************************
  -- 3. 가감점 기준 삭제
  -- ********************************************************************************
									  
	ELSIF I_GBN = 'D' THEN 
    
    DELETE FROM TB_KPI_PLUS_MINUS_STD
          WHERE TENANT_ID = I_TENANT_ID
            AND STD_ID    = I_STD_ID;
	   
	   	   
	END IF;
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1020S02_01
(
	    I_TENANT_ID    IN VARCHAR2
	  , I_CREATE_ID    IN VARCHAR2 
	  , I_GBN          IN VARCHAR2
	  , I_STD_ID	   IN VARCHAR2
	  , I_AGENT_ID     IN VARCHAR2
  	  , I_STEP_ID      IN VARCHAR2
	  , I_AGENT_SCORE  IN NUMBER
	  , I_STEP_SCORE   IN NUMBER
	  , I_START_MONTH  IN VARCHAR2
	  , I_END_MONTH    IN VARCHAR2
	  , I_KPI_YN       IN NUMBER
	  , I_UPDATE_SNO   IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI1020S02_01
   PURPOSE:    가감점 등록, 수정

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/11
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################

	I_N_SNO	VARCHAR2(12); -- 등록ID
BEGIN
   
  -- ********************************************************************************
  -- 1. 가감점 등록
  -- ********************************************************************************

	IF I_GBN = 'C' THEN
	
	SELECT CASE WHEN CHK.SNO IS NULL THEN TO_CHAR(SYSDATE, 'YYYYMMDD')||'0001'
        		WHEN ( SELECT COUNT(SNO) 
        		         FROM TB_KPI_PLUS_MINUS
        		        WHERE SNO = CHK.SNO ) > 0 
        		THEN TO_CHAR(SYSDATE, 'YYYYMMDD')||SUBSTR(CHK.SNO + 1 ,9, 4) END 
      INTO I_N_SNO
      FROM ( SELECT MAX(SNO) AS SNO
               FROM TB_KPI_PLUS_MINUS
              WHERE 1 = 1 
                AND TENANT_ID = I_TENANT_ID
                AND SUBSTR(SNO, 1, 8) = TO_CHAR(SYSDATE, 'YYYYMMDD') ) CHK ;

    
	INSERT INTO TB_KPI_PLUS_MINUS ( TENANT_ID
	                              , SNO
	                              , STD_ID
	                              , AGENT_ID
	                              , STEP_ID		                              
	                              , AGENT_SCORE
	                              , STEP_SCORE
	                              , START_MONTH
	                              , END_MONTH
	                              , KPI_YN
	                              , CREATE_AGENT_ID
								  , CREATE_DT								  	
								  ) 
								  VALUES 
								  ( I_TENANT_ID
								  , I_N_SNO
								  , I_STD_ID
								  , I_AGENT_ID
								  , I_STEP_ID
								  , I_AGENT_SCORE
								  , I_STEP_SCORE
								  , I_START_MONTH
								  , I_END_MONTH    
								  , I_KPI_YN
								  , I_CREATE_ID
								  , SYSDATE									  								  
								  );

  -- ********************************************************************************
  -- 2. 가감점 수정
  -- ********************************************************************************
									  
	ELSIF I_GBN = 'U' THEN 
    
    UPDATE TB_KPI_PLUS_MINUS
       SET STD_ID          = I_STD_ID
	     , START_MONTH     = I_START_MONTH
	     , END_MONTH       = I_END_MONTH
	     , AGENT_SCORE     = I_AGENT_SCORE
   	     , STEP_SCORE      = I_STEP_SCORE
   	     , KPI_YN          = I_KPI_YN
         , MODIFY_AGENT_ID = I_AGENT_ID
         , MODIFY_DT       = SYSDATE
     WHERE TENANT_ID = I_TENANT_ID
	   AND SNO       = I_UPDATE_SNO;

	END IF;
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1020S02_02
(
	    I_TENANT_ID        IN VARCHAR2
	  , I_STD_ID           IN VARCHAR2 
      , O_CUR_LIST         OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI1020S02_02
   PURPOSE:    가감점 점수 콤보박스 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/12
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################

BEGIN
   
  -- ********************************************************************************
  -- 1. 상담사, 스텝 가감점 최대값, 최소값 조회
  -- ********************************************************************************
	
	OPEN O_CUR_LIST FOR 
	
	SELECT AGENT_MAX_SCORE
	     , AGENT_MIN_SCORE
	     , STEP_MAX_SCORE
	     , STEP_MIN_SCORE
	  FROM TB_KPI_PLUS_MINUS_STD
	 WHERE TENANT_ID = I_TENANT_ID
	   AND STD_ID    = I_STD_ID;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
 
END;
/

;

create or replace PROCEDURE SP_KPI1040S01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_STD_MONTH     IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI1040S01_01
   PURPOSE:    생산성평가 - 평가기준관리-조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/11  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1040S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
		WITH TEMP_CODE AS (
			SELECT FN_CM_GET_CODE_NM( S.TENANT_ID,'CONDUCT_KIND', S.USER_DATA1) AS PARENT_NM
				,S.CODE
				,S.CODE_NM
			  FROM TB_CM_CODE S
			WHERE S.TENANT_ID = I_TENANT_ID
			  AND S.SORT_CD   = 'CONDUCT_CODE'
		)
		SELECT A.TENANT_ID
				,A.COSTVALUE_ID
				,A.COSTVALUE_NM
				,A.STD_MONTH
				,A.SCHE_YN
				,A.PROC_STATUS
			    ,FN_CM_GET_CODE_NM(I_TENANT_ID,'PROC_STATUS',A.PROC_STATUS) AS PROC_STATUS_NM 
				,A.CALL_IB
				,A.CALL_OB
				,A.CALL_INTERNAL_S
				,A.CALL_INTENAL_R
				,A.CALL_CONSULT
				,A.CALL_TRANSFER_S
				,A.CALL_TRANSFER_R
				,A.CALL_CONFERENCE
				,A.TIME_IB
				,A.TIME_OB
				,A.TIME_INTERNAL_S
				,A.TIME_INTERNAL_R
				,A.TIME_CONSULT
				,A.TIME_TRANSFER_S
				,A.TIME_TRANSFER_R
				,A.TIME_CONFERENCE
				,A.TIME_READY
				,A.TIME_ACW
				,(SELECT WM_CONCAT(S.DEPT_CD) 
				    FROM TB_KPI_COSTVALUE_STD_DEPT S
			       WHERE S.TENANT_ID    = A.TENANT_ID
			         AND S.COSTVALUE_ID = A.COSTVALUE_ID
		 		) AS DEPT_ID				
				,(SELECT WM_CONCAT(D.DEPT_NM) 
				    FROM TB_KPI_COSTVALUE_STD_DEPT S
				    INNER JOIN TB_CM_DEPT_CD D ON (S.TENANT_ID = D.TENANT_ID AND S.DEPT_CD = D.DEPT_CD)
			       WHERE S.TENANT_ID    = A.TENANT_ID
			         AND S.COSTVALUE_ID = A.COSTVALUE_ID
		 		) AS DEPT_NM
				,(SELECT WM_CONCAT(S.CONDUCT_CODE) 
				    FROM TB_KPI_COSTVALUE_STD_CONDUCT S
			       WHERE S.TENANT_ID    = A.TENANT_ID
			         AND S.COSTVALUE_ID = A.COSTVALUE_ID
		 		) AS CONDUCT_ID		 		
		 		,(SELECT WM_CONCAT( '['||T.PARENT_NM||']' || T.CODE_NM) 
				    FROM TB_KPI_COSTVALUE_STD_CONDUCT S
				   INNER JOIN TEMP_CODE T ON (S.CONDUCT_CODE = T.CODE ) 
			      WHERE S.TENANT_ID    = A.TENANT_ID
			        AND S.COSTVALUE_ID = A.COSTVALUE_ID
		 		) AS CONDUCT_NM		
		  FROM TB_KPI_COSTVALUE_STD_HEADER A
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND A.STD_MONTH = I_STD_MONTH
 		 ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI1040S01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_COSTVALUE_ID  IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI1040S01_02
   PURPOSE:    생산성평가 - 평가기준관리-업무그룹조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/11  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1040S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
 	SELECT A.TENANT_ID
			,B.COSTVALUE_ID
			,A.CODE AS TM_KIND
		    ,A.CODE_NM AS TM_KIND_NM 
			,NVL(B.WEIGHT_IBCALL ,100) AS WEIGHT_IBCALL
			,NVL(B.WEIGHT_IBTIME ,100) AS WEIGHT_IBTIME
			,NVL(B.WEIGHT_OBCALL ,100) AS WEIGHT_OBCALL
			,NVL(B.WEIGHT_OBTIME ,100) AS WEIGHT_OBTIME
			,NVL(B.WEIGHT_TRCALL ,100) AS WEIGHT_TRCALL
			,NVL(B.WEIGHT_TRTIME ,100) AS WEIGHT_TRTIME
	  FROM (
				SELECT S.TENANT_ID 
				      ,S.CODE
				      ,S.CODE_NM
			  FROM TB_CM_CODE S
			WHERE S.TENANT_ID = I_TENANT_ID
			  AND S.SORT_CD   = 'TM_KIND'
			   AND S.HIDE_YN = 0
			   ORDER BY S.SORT
	  ) A LEFT OUTER JOIN TB_KPI_COSTVALUE_STD_TMKIND B 
	  ON ( A.TENANT_ID = B.TENANT_ID AND B.COSTVALUE_ID = I_COSTVALUE_ID AND A.CODE = B.TM_KIND) ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1040S01_04 (
      I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_CUD_GUBUN      IN VARCHAR2  /* C/U/D  */ 
    , I_COSTVALUE_ID   IN VARCHAR2
    , I_TM_KIND        IN VARCHAR2    
	, I_WEIGHT_IBCALL  IN NUMBER
	, I_WEIGHT_IBTIME  IN NUMBER
	, I_WEIGHT_OBCALL  IN NUMBER
	, I_WEIGHT_OBTIME  IN NUMBER
	, I_WEIGHT_TRCALL  IN NUMBER
	, I_WEIGHT_TRTIME  IN NUMBER
) AS 
/******************************************************************************
   NAME:       SP_KPI1040S01_04
   PURPOSE:    생산성평가 - 평가기준관리-업무그룹 저장

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/11  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1040S01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.평가기준관리 -근태정보 등록/수정
-- ********************************************************************************    
    MERGE INTO TB_KPI_COSTVALUE_STD_TMKIND T
    USING (SELECT  I_TENANT_ID      AS TENANT_ID
                  ,I_COSTVALUE_ID   AS COSTVALUE_ID
			      ,I_TM_KIND        AS TM_KIND
				, NVL(I_WEIGHT_IBCALL   ,0) AS WEIGHT_IBCALL
				, NVL(I_WEIGHT_IBTIME   ,0) AS WEIGHT_IBTIME
				, NVL(I_WEIGHT_OBCALL   ,0) AS WEIGHT_OBCALL
				, NVL(I_WEIGHT_OBTIME   ,0) AS WEIGHT_OBTIME
				, NVL(I_WEIGHT_TRCALL 	,0) AS WEIGHT_TRCALL
				, NVL(I_WEIGHT_TRTIME   ,0) AS WEIGHT_TRTIME
             FROM DUAL ) S
    ON (  T.TENANT_ID      = S.TENANT_ID 
      AND T.COSTVALUE_ID   = S.COSTVALUE_ID
      AND T.TM_KIND        = S.TM_KIND)
    WHEN MATCHED THEN
      UPDATE SET WEIGHT_IBCALL 	  = S.WEIGHT_IBCALL
				,WEIGHT_IBTIME    = S.WEIGHT_IBTIME
				,WEIGHT_OBCALL    = S.WEIGHT_OBCALL
				,WEIGHT_OBTIME    = S.WEIGHT_OBTIME
				,WEIGHT_TRCALL    = S.WEIGHT_TRCALL
				,WEIGHT_TRTIME    = S.WEIGHT_TRTIME
    WHEN NOT MATCHED THEN
      INSERT(  	 TENANT_ID 
				,COSTVALUE_ID 
				,TM_KIND
				,WEIGHT_IBCALL 
				,WEIGHT_IBTIME 
				,WEIGHT_OBCALL 
				,WEIGHT_OBTIME 
				,WEIGHT_TRCALL 
				,WEIGHT_TRTIME 

      ) VALUES ( S.TENANT_ID 
				,S.COSTVALUE_ID 
				,S.TM_KIND
				,S.WEIGHT_IBCALL 
				,S.WEIGHT_IBTIME 
				,S.WEIGHT_OBCALL 
				,S.WEIGHT_OBTIME 
				,S.WEIGHT_TRCALL 
				,S.WEIGHT_TRTIME 
      )  ;
      
    COMMIT; 
       	 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1040S01_05 (
	  I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_COSTVALUE_ID   IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI1040S01_05
   PURPOSE:    생산성평가 - 평가기준관리-삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/11  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1040S01_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.평가기준관리 - 삭제
-- ********************************************************************************    
   DELETE FROM TB_KPI_COSTVALUE_STD_HEADER  WHERE TENANT_ID = I_TENANT_ID AND COSTVALUE_ID = I_COSTVALUE_ID ;
   DELETE FROM TB_KPI_COSTVALUE_STD_DEPT    WHERE TENANT_ID = I_TENANT_ID AND COSTVALUE_ID = I_COSTVALUE_ID ;
   DELETE FROM TB_KPI_COSTVALUE_STD_CONDUCT WHERE TENANT_ID = I_TENANT_ID AND COSTVALUE_ID = I_COSTVALUE_ID ;
   DELETE FROM TB_KPI_COSTVALUE_STD_TMKIND  WHERE TENANT_ID = I_TENANT_ID AND COSTVALUE_ID = I_COSTVALUE_ID ;
   DELETE FROM TB_KPI_COSTVALUE_STATICS     WHERE TENANT_ID = I_TENANT_ID AND COSTVALUE_ID = I_COSTVALUE_ID ;       
   
   COMMIT;     
   

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI1040S02_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_STD_MONTH     IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI1040S02_01
   PURPOSE:    생산성평가 - 월집계 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/11  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1040S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
		SELECT A.TENANT_ID
				,A.COSTVALUE_ID
				,A.COSTVALUE_NM
				,A.STD_MONTH
				,A.SCHE_YN
				,A.PROC_STATUS
			    ,FN_CM_GET_CODE_NM(I_TENANT_ID,'PROC_STATUS',A.PROC_STATUS) AS PROC_STATUS_NM 
				,(SELECT WM_CONCAT(D.DEPT_NM) 
				    FROM TB_KPI_COSTVALUE_STD_DEPT S
				    INNER JOIN TB_CM_DEPT_CD D ON (S.TENANT_ID = D.TENANT_ID AND S.DEPT_CD = D.DEPT_CD)
			       WHERE S.TENANT_ID    = A.TENANT_ID
			         AND S.COSTVALUE_ID = A.COSTVALUE_ID
		 		) AS DEPT_NM
				,(SELECT COUNT(T.AGENT_ID)
				    FROM TB_KPI_COSTVALUE_STD_DEPT S
				    INNER JOIN TB_CM_USER_MASTER T ON (S.TENANT_ID = T.TENANT_ID AND S.DEPT_CD = T.DEPT_CD)
			       WHERE S.TENANT_ID    = A.TENANT_ID
			         AND S.COSTVALUE_ID = A.COSTVALUE_ID
			         AND T.KPI_TARGET_YN = 1     /* KPI대상자만 */
			         AND NVL(T.JAEJIK_GUBUN, '-') <> '99' /* 재직인 경우만 */
				 ) AS AGENT_CNT  
		  FROM TB_KPI_COSTVALUE_STD_HEADER A
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND A.STD_MONTH = I_STD_MONTH
 		 ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI1040S03_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_ID      IN VARCHAR2  /* 로그인사용자ID */   
 , I_COSTVALUE_ID  IN VARCHAR2
 , I_PROC_STATUS   IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI1040S02_02
   PURPOSE:    생산성평가 - 마감처리 팝업 -마감/마감해제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/12  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1040S03_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
   
-- ********************************************************************************
-- 1.처리상태  변경
-- ********************************************************************************   
 UPDATE TB_KPI_COSTVALUE_STD_HEADER 
    SET PROC_STATUS     = I_PROC_STATUS
       ,MODIFY_AGENT_ID = I_LOGIN_ID
       ,MODIFY_DT 	 	= SYSTIMESTAMP
  WHERE TENANT_ID    = I_TENANT_ID
    AND COSTVALUE_ID = I_COSTVALUE_ID ;
    
   COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
        
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1040S04_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI1040S04_01
   PURPOSE:    근태코드 팝업조회 (TREE)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/11   YAKIM 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI1040S04_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	   SELECT
	      GR.SORT_CD AS DEPT_CD, 
	      GR.SORT_NM AS DEPT_NM, 
	      GR.SYSTEM_GUBUN AS PARENT_DEPT_CD
	    FROM(
	      SELECT
	          CODE AS SORT_CD, 
	          CODE_NM AS SORT_NM, 
	          '#' AS SYSTEM_GUBUN
	        FROM TB_CM_CODE WHERE 1=1
	        AND TENANT_ID = I_TENANT_ID
	        AND SORT_CD = 'CONDUCT_KIND'
	      UNION ALL
	      SELECT
	          CODE AS SORT_CD, 
	          '['||FN_CM_GET_CODE_NM(TENANT_ID,'CONDUCT_KIND', USER_DATA1)||']'||CODE_NM AS SORT_NM, 
	          USER_DATA1 AS SYSTEM_GUBUN
	        FROM TB_CM_CODE WHERE 1=1
	        AND TENANT_ID = I_TENANT_ID
	        AND SORT_CD = 'CONDUCT_CODE'
	      ) GR
	    ORDER BY GR.SYSTEM_GUBUN;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_KPI1050M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_TIME_FROM     IN VARCHAR2
 , I_TIME_TO       IN VARCHAR2 
 , I_QUEUE_ID	   IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 일자별(D)/시간대별(T)/주별(W)/월별(M) */ 
 , I_HOLIDAY       IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI1050M01_01
   PURPOSE:    큐실적조회 - 일자별/시간대별/주별/월별

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/06  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1050M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
		SELECT
			A.TENANT_ID ,
		 (CASE I_VIEW_GUBUN  WHEN 'D' THEN  A.CALL_DATE
							   WHEN 'T' THEN  SUBSTR(A.HOUR_TIME,1,2)
							   WHEN 'W' THEN  TO_CHAR(TO_DATE(A.CALL_DATE,'YYYYMMDD'), 'WW')
							   WHEN 'M' THEN  SUBSTR(A.CALL_DATE,1,6)
		   END ) AS CALL_DATE,					   
		--	A.CALL_DATE ,
		--	A.HOUR_TIME ,
			A.QUEUE_ID ,
			A.QUEUE_NM ,
			A.CENTER_KIND ,
			A.TOT_IB_CNT ,
			A.REAL_IB_CNT ,
			A.OTHQ_IB_CNT ,
			A.OTHCEN_IB_CNT ,
			A.INTERNAL_IB_CNT ,
			A.ANSWER_CNT ,
			A.ABANDON_CNT ,
			A.DENY_CNT ,
			A.NONSERVICE_CNT ,
			A.OTHQ_RT_CNT ,
			A.OTHCEN_RT_CNT ,
			A.IVR_CALLBACK_CNT ,
			A.SL_ANSWER_CNT ,
			A.SL_ABDN_CNT ,
			A.ALLOW_ABDN_CNT ,
			A.MAX_WAITING_TIME ,
			A.MAX_ABDN_WAITIME ,
			A.SUM_WAITING_TIME ,
			A.SUM_ABDN_WAITIME ,
			A.SUM_ANSW_WAITIME ,
			A.SUM_ANSW_TALKTIME ,
			A.REAL_ANSW_CNT ,
			A.REAL_ABDN_CNT ,
			A.REAL_DENY_CNT ,
			A.REAL_NONSERVICE ,
			A.REAL_OTHERCEN_CNT ,
			A.REAL_SLANSW_CNT 
		 FROM TB_KPI_QUEUE_STATICS_HH A 
		      INNER JOIN TB_CM_HOLIDAY E ON (A.CALL_DATE = E.STD_YMD )	
	    WHERE A.TENANT_ID  = I_TENANT_ID
	      AND A.CALL_DATE BETWEEN I_DT_FROM AND I_DT_TO
	      AND A.HOUR_TIME BETWEEN I_TIME_FROM||'00' AND I_TIME_TO||'59'
	      AND (( I_QUEUE_ID IS NULL AND 1=1 )
	       OR (I_QUEUE_ID IS NOT NULL AND INSTR(I_QUEUE_ID,A.CENTER_KIND||'^'||A.QUEUE_ID) > 0))      
	      
		  AND E.HOLI_YN = CASE WHEN I_HOLIDAY = '1' THEN 0 ELSE E.HOLI_YN END /* 휴일제외 */
	   )
	,TEMP_LIST2 AS (
				SELECT  A.TENANT_ID, A.CENTER_KIND, A.QUEUE_ID, A.CALL_DATE 
				        ,SUM(A.TOT_IB_CNT)  AS TOTAL_CNT1 /* 총인입 */
				        ,SUM(A.REAL_IB_CNT) AS TOTAL_CNT2 /* 실인입 */    
				        
				        ,SUM(A.ANSWER_CNT) AS TOTAL_CNT3 /* 총인입-응답 */  
				        ,SUM(A.ABANDON_CNT) AS TOTAL_CNT4 /* 총인입-포기 */  
				        ,SUM(A.DENY_CNT) AS TOTAL_CNT5 /* 총인입-거부 */  
				        ,SUM(A.NONSERVICE_CNT) AS TOTAL_CNT6 /* 총인입-실패 */  
				        ,TO_CHAR(ROUND((SUM(A.ANSWER_CNT)/SUM(A.TOT_IB_CNT)) * 100, 2),'fm999,990.00')  AS TOTAL_CNT7 /* 총인입-응답율=총인입응답/총인입 */  
					    ,TO_CHAR(ROUND((SUM(A.SL_ANSWER_CNT)/SUM(A.ANSWER_CNT)) * 100 ,2),'fm999,990.00') AS TOTAL_CNT8 /* 총인입-SL=서비스레벨응답/응답호 */
					    
				        ,SUM(A.REAL_ANSW_CNT) AS TOTAL_CNT9 /* 실인입-응답 */  
				        ,SUM(A.REAL_ABDN_CNT) AS TOTAL_CNT10 /* 실인입-포기 */  
				        ,SUM(A.REAL_DENY_CNT) AS TOTAL_CNT11 /* 실인입-거부 */  
				        ,SUM(A.REAL_NONSERVICE) AS TOTAL_CNT12 /* 실인입-실패 */  
				        ,TO_CHAR(ROUND((SUM(A.REAL_ANSW_CNT)/SUM(A.REAL_IB_CNT)) * 100, 2),'fm999,990.00') AS TOTAL_CNT13 /* 실인입-응답율=총인입응답/총인입 */  
					    ,TO_CHAR(ROUND((SUM(A.REAL_SLANSW_CNT)/SUM(A.REAL_ANSW_CNT)) * 100, 2),'fm999,990.00') AS TOTAL_CNT14 /* 실인입-SL=서비스레벨응답/응답호 */  	                                                 
				
				        ,SUM(A.OTHQ_IB_CNT)  AS TOTAL_CNT15 /* 타큐인입 */
				        ,SUM(A.OTHQ_RT_CNT)  AS TOTAL_CNT16 /* 타큐전환 */
				        ,SUM(A.OTHCEN_IB_CNT)  AS TOTAL_CNT17 /* 타센터인입 */
				        ,SUM(A.OTHCEN_RT_CNT)  AS TOTAL_CNT18 /* 타센터전환 */     
				        ,ROUND(SUM(A.SUM_WAITING_TIME)/SUM(A.TOT_IB_CNT),1) AS TOTAL_CNT19 /* 평균대기시간=총큐대기시간/총인입 */  
				        ,ROUND(SUM(A.SUM_ABDN_WAITIME)/SUM(A.TOT_IB_CNT),1) AS TOTAL_CNT20 /* 평균포기시간=총큐포기시간/총인입 */  
				   FROM TEMP_LIST A
				  GROUP BY A.TENANT_ID, A.CENTER_KIND, A.QUEUE_ID, A.CALL_DATE  			     			 
	          ) 
 	    SELECT FN_CM_GET_CODE_NM(A.TENANT_ID,'CENTER_KIND',A.CENTER_KIND) AS CENTER
 	       ,(SELECT S.QUEUE_NAME
 	          FROM TB_IF_CTI_QUEUE_MASTER S
 	         WHERE S.TENANT_ID = A.TENANT_ID
 	           AND S.CENTER_KIND = A.CENTER_KIND
 	           AND S.QUEUE_ID  = A.QUEUE_ID) AS QUEUE_NM 
 	       ,(CASE I_VIEW_GUBUN  WHEN 'D' THEN  FN_CM_STRING_FORMAT(A.CALL_DATE,'@@@@-@@-@@')
							   WHEN 'T' THEN  A.CALL_DATE
							   WHEN 'W' THEN  A.CALL_DATE
							   WHEN 'M' THEN  FN_CM_STRING_FORMAT(A.CALL_DATE,'@@@@-@@')
		     END ) AS CALL_DATE	
		     ,TOTAL_CNT1
		     ,TOTAL_CNT2
		     ,TOTAL_CNT3
		     ,TOTAL_CNT4
		     ,TOTAL_CNT5
		     ,TOTAL_CNT6
		     ,TOTAL_CNT7
		     ,TOTAL_CNT8
		     ,TOTAL_CNT9
		     ,TOTAL_CNT10
		     ,TOTAL_CNT11
		     ,TOTAL_CNT12
		     ,TOTAL_CNT13
		     ,TOTAL_CNT14
		     ,TOTAL_CNT15
		     ,TOTAL_CNT16
		     ,TOTAL_CNT17
		     ,TOTAL_CNT18 			
 			, A.TOTAL_CNT19
 			, A.TOTAL_CNT20                 		      			      			      
		FROM  TEMP_LIST2 A
		ORDER BY 1,2,3
        ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1050M01_02 
(
    I_TENANT_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI1050M01_02
   PURPOSE:    큐 팝업조회 (TREE)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/07   YAKIM 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI1050M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	   SELECT
	      GR.SORT_CD AS DEPT_CD, 
	      GR.SORT_NM AS DEPT_NM, 
	      GR.SYSTEM_GUBUN AS PARENT_DEPT_CD
	    FROM(
	      SELECT
	          CODE AS SORT_CD, 
	          CODE_NM AS SORT_NM, 
	          '#' AS SYSTEM_GUBUN
	        FROM TB_CM_CODE WHERE 1=1
	        AND TENANT_ID = I_TENANT_ID
	        AND SORT_CD = 'CENTER_KIND'
	      UNION ALL
	      SELECT
	        CENTER_KIND||'^'||QUEUE_ID AS SORT_CD,  /* CENTER_KIND+ QUEUE_ID 가 PK 이므로*/
        '[' || QUEUE_ID || ']' || TO_CHAR(QUEUE_NAME) AS SORT_NM, 
	        CENTER_KIND AS SYSTEM_GUBUN
	      FROM TB_IF_CTI_QUEUE_MASTER WHERE 1=1
	      AND TENANT_ID = I_TENANT_ID
	      ) GR
	    ORDER BY GR.SYSTEM_GUBUN;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2010M01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_STD_MONTH   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2010M01_01
   PURPOSE:    평가그룹관리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/03/17  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2010M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	SELECT
		GR.GRP_ID AS GRP_ID, 
		GR.GRP_NM AS GRP_NM, 
		GR.PARENT_CD AS PARENT_CD
    FROM(
		SELECT
			I_STD_MONTH AS GRP_ID, 
			FN_CM_STRING_FORMAT(I_STD_MONTH, '@@@@-@@') AS GRP_NM, 
			'#' AS PARENT_CD
		FROM DUAL
		UNION ALL
		SELECT
        	GRP_ID AS GRP_ID, 
	        GRP_NM AS GRP_NM, 
    	    I_STD_MONTH AS PARENT_CD
		FROM TB_KPI_EVAL_GROUP
		WHERE 1=1
		  AND TENANT_ID = I_TENANT_ID
		  AND STD_MONTH = I_STD_MONTH
	) GR
    ORDER BY GR.GRP_ID, GR.GRP_NM;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2010M01_02
(
    I_TENANT_ID   IN  VARCHAR2
  , I_STD_MONTH   IN  VARCHAR2
  , I_GRP_ID      IN  VARCHAR2
  , I_GRP_NM      IN  VARCHAR2
  , I_AGENT_ID    IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI2010M01_02
   PURPOSE:    평가그룹관리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/03/17  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE           := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2010M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
	V_GRP_ID VARCHAR2(10) := '';
BEGIN

	IF I_GRP_ID IS NULL THEN --신규건의 경우 insert
		SELECT 
			CASE 
				WHEN MAX(GRP_ID) IS NULL THEN NVL(MAX(GRP_ID), I_STD_MONTH || '0001')
				ELSE I_STD_MONTH || LPAD(TO_CHAR(TO_NUMBER(SUBSTR(MAX(GRP_ID), -4)) + 1), 4, '0')
			END
			INTO V_GRP_ID
		FROM TB_KPI_EVAL_GROUP
		WHERE TENANT_ID = I_TENANT_ID
		  AND STD_MONTH = I_STD_MONTH;
		  
		INSERT INTO TB_KPI_EVAL_GROUP (
			TENANT_ID,        STD_MONTH,  GRP_ID,           GRP_NM,    KPI_STATUS,
			CREATE_AGENT_ID,  CREATE_DT,  MODIFY_AGENT_ID,  MODIFY_DT
		) VALUES (
			I_TENANT_ID, I_STD_MONTH, V_GRP_ID, I_GRP_NM, '10',
			I_AGENT_ID, SYSDATE, I_AGENT_ID, SYSDATE
		);
	ELSE
		UPDATE TB_KPI_EVAL_GROUP SET 
			GRP_NM = I_GRP_NM
		WHERE TENANT_ID = I_TENANT_ID
		  AND GRP_ID = I_GRP_ID;
	END IF;

   COMMIT;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_KPI2010M01_04
(
    I_TENANT_ID   IN  VARCHAR2
  , I_GRP_ID      IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2010M01_04
   PURPOSE:    기 집계내용 확인

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/11   
******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI2010M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

BEGIN
	OPEN O_CUR_LIST FOR 
	SELECT COUNT(*) AS CALC_CNT
	FROM TB_KPI_RESULT_HEADER 
	WHERE TENANT_ID = I_TENANT_ID AND GRP_ID = I_GRP_ID;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);       
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2010M01_05 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_GRP_ID      IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI2010M01_05
   PURPOSE:    평가그룹 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/11
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2010M01_05';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
	DELETE FROM TB_KPI_EVAL_TARGET WHERE TENANT_ID = I_TENANT_ID AND GRP_ID = I_GRP_ID;
	
	DELETE FROM TB_KPI_EVAL_GROUP WHERE TENANT_ID = I_TENANT_ID AND GRP_ID = I_GRP_ID;
	
	COMMIT;


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_KPI2010M01_06
(
    I_TENANT_ID   IN  VARCHAR2
  , I_GRP_ID      IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2010M01_06
   PURPOSE:    진행상태 표시

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/11   
******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI2010M01_06';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################

BEGIN
	OPEN O_CUR_LIST FOR 
	SELECT 
		FN_CM_GET_CODE_NM(I_TENANT_ID, 'KPI_STATUS', KPI_STATUS) AS KPI_STATUS
	FROM TB_KPI_EVAL_GROUP
	WHERE TENANT_ID = I_TENANT_ID 
	AND GRP_ID = I_GRP_ID;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);       
    END;

END;
/

;

create or replace PROCEDURE SP_KPI2010S01_02 (
   I_TENANT_ID    IN VARCHAR2
 , I_GRP_ID       IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI2010S01_02
   PURPOSE:    평가그룹관리 - 평가대상자관리 - 대상자조회(선택)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/17  JYMOON
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI2010S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT 
          --,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
          FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
           ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
            ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
          ,A.DEPT_CD
  		  ,A.SABUN
  		  ,A.AGENT_ID
  		  ,A.AGENT_NM
          ,A.TM_KIND
	      ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
	      ,FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
	FROM TB_CM_USER_MASTER A
    INNER JOIN TB_KPI_EVAL_TARGET B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
    WHERE 1=1 
      AND B.TENANT_ID = I_TENANT_ID
      AND B.GRP_ID   = I_GRP_ID
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI2010S01_03 (
   I_TENANT_ID    IN VARCHAR2
 , I_GRP_ID       IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI2010S01_03
   PURPOSE:    평가그룹관리 - 평가대상자관리 - 대상자삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/17  JYMOON
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI2010S01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
 DELETE FROM TB_KPI_EVAL_TARGET WHERE TENANT_ID = I_TENANT_ID  AND GRP_ID   = I_GRP_ID ;
 COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI2010S01_04 (
   I_TENANT_ID    IN VARCHAR2
 , I_GRP_ID       IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , I_WORK_MEMB    IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI2010S01_03
   PURPOSE:    평가그룹관리 - 평가대상자관리 - 대상자등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/17  JYMOON
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI2010S01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 	V_MONTH  VARCHAR2(6) := SUBSTR(I_GRP_ID,0,6); 
 	V_DEPT_CD VARCHAR2(50) := '';
 	V_TM_KIND VARCHAR2(50) := '';
	AGENT_JIKGUP VARCHAR2(50) := '';
	AGENT_JIKCHK VARCHAR2(50) := '';
BEGIN

	SELECT 
		DEPT_CD, TM_KIND, AGENT_JIKGUP, AGENT_JIKCHK
	INTO V_DEPT_CD, V_TM_KIND, AGENT_JIKGUP, AGENT_JIKCHK
	FROM TB_CM_USER_MASTER 
	WHERE AGENT_ID = I_AGENT_ID;
 
	INSERT INTO TB_KPI_EVAL_TARGET(
		TENANT_ID, STD_MONTH,       GRP_ID,        AGENT_ID,          DEPT_CD,
		TM_KIND,   AGENT_JIKGUP,    AGENT_JIKCHK,  CREATE_AGENT_ID,   CREATE_DT
	)VALUES(
		I_TENANT_ID, V_MONTH,       I_GRP_ID,      I_AGENT_ID,   V_DEPT_CD,
		V_TM_KIND,   AGENT_JIKGUP,  AGENT_JIKCHK,  I_WORK_MEMB,  SYSDATE
	);

COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_STD_MONTH   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_01
   PURPOSE:    실적요소집계 트리

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/20  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
	SELECT FACTOR_ID, FACTOR_NM, PARENT_FACTOR_ID
	FROM (
		SELECT 
			DISTINCT SUBSTR(FACTOR_ID,0,2) AS FACTOR_ID, GROUP_NM AS FACTOR_NM, '#' AS PARENT_FACTOR_ID
		FROM TB_KPI_FACTOR
		WHERE TENANT_ID = I_TENANT_ID
		UNION ALL 
		SELECT 
			FACTOR_ID AS FACTOR_ID, FACTOR_NM AS FACTOR_NM, SUBSTR(FACTOR_ID,0,2) AS PARENT_FACTOR_ID
		FROM TB_KPI_FACTOR
		WHERE TENANT_ID = I_TENANT_ID
		UNION ALL
		SELECT 
			FACTORBASE_ID AS FACTOR_ID, FACTORBASE_NM AS FACTOR_NM, FACTOR_ID AS PARENT_FACTOR_ID
		FROM TB_KPI_FACTORBASE_HEADER
		WHERE TENANT_ID = I_TENANT_ID
		  AND STD_MONTH = I_STD_MONTH
	) A
	ORDER BY FACTOR_ID
	;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_02 
(
    I_TENANT_ID       IN  VARCHAR2
  , I_FACTORBASE_ID   IN  VARCHAR2
  , O_CUR_LIST        OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_02
   PURPOSE:    실적요소 집계기준 조회

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/20  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
	SELECT 
		A.FACTORBASE_ID,
		A.FACTORBASE_NM, 
		A.STD_MONTH,
		A.FACTOR_ID,
		A.DEPT_CD AS DEPT_ID,
		B.DEPT_NM,
		TO_CHAR(A.START_DATE, 'YYYY-MM-DD') AS START_DATE,
		TO_CHAR(A.END_DATE, 'YYYY-MM-DD') AS END_DATE,
		A.VALUATE_KIND,
		A.PLUS_MINUS,
		PROC_STATUS,
		FN_CM_GET_CODE_NM(I_TENANT_ID,'PROC_STATUS',A.PROC_STATUS) AS PROC_STATUS_NM
	FROM TB_KPI_FACTORBASE_HEADER A
	LEFT OUTER JOIN TB_CM_DEPT_CD B ON A.TENANT_ID = B.TENANT_ID AND A.DEPT_CD = B.DEPT_CD
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.FACTORBASE_ID = I_FACTORBASE_ID
	;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_03
(
    I_TENANT_ID       IN  VARCHAR2
  , I_FACTORBASE_ID   IN  VARCHAR2
  , O_CUR_LIST        OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_03
   PURPOSE:    실적요소 집계기준 조회

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/20  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_03';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
	SELECT 
		FACTORBASE_ID,
		SNO,
		CALC_YN,
		FACTORKEY_VALUE,
		FACTORKEY_NM,
		FACTORKEY_CNT,
		WEIGHT_KIND,
		WEIGHT_VALUE
	FROM TB_KPI_FACTORBASE_DETAIL
	WHERE TENANT_ID = I_TENANT_ID
	  AND FACTORBASE_ID = I_FACTORBASE_ID
	ORDER BY SNO
	;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_04 
(
    I_TENANT_ID       IN  VARCHAR2
  , I_FACTORBASE_ID   IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_04
   PURPOSE:    실적요소 집계기준 삭제

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/20  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_04';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN

	DELETE FROM TB_KPI_FACTORBASE_HEADER
	WHERE TENANT_ID = I_TENANT_ID
	  AND FACTORBASE_ID = I_FACTORBASE_ID;
	  
	DELETE FROM TB_KPI_FACTORBASE_DETAIL
	WHERE TENANT_ID = I_TENANT_ID
	  AND FACTORBASE_ID = I_FACTORBASE_ID;
	  
	DELETE FROM TB_KPI_FACTORVALUE_HEADER
	WHERE TENANT_ID = I_TENANT_ID
	  AND FACTORBASE_ID = I_FACTORBASE_ID;
	  
	DELETE FROM TB_KPI_FACTORVALUE_DETAIL
	WHERE TENANT_ID = I_TENANT_ID
	  AND FACTORBASE_ID = I_FACTORBASE_ID;
   
   COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_05 
(
    I_TENANT_ID       IN  VARCHAR2
  , I_FACTORBASE_ID   IN  VARCHAR2
  , I_FACTORBASE_NM   IN  VARCHAR2
  , I_DEPT_CD         IN  VARCHAR2
  , I_STD_MONTH       IN  VARCHAR2
  , I_FACTOR_ID       IN  VARCHAR2
  , I_START_DATE      IN  VARCHAR2
  , I_END_DATE        IN  VARCHAR2
  , I_VALUATE_KIND    IN  VARCHAR2
  , I_PLUS_MINUS      IN  VARCHAR2
  , I_CREATE_AGENT_ID IN  VARCHAR2
  , I_MODIFY_AGENT_ID IN  VARCHAR2
  , O_CUR_LIST        OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_05
   PURPOSE:    실적요소 집계기준 저장

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/20  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_05';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
    V_FACTORBASE_ID VARCHAR2(10) := '';
    
BEGIN

	IF I_FACTORBASE_ID IS NULL THEN
	
		SELECT 
			CASE 
				WHEN MAX(FACTORBASE_ID) IS NULL THEN I_STD_MONTH || '0001'
				ELSE TO_CHAR(MAX(FACTORBASE_ID)+1)
			END
		INTO V_FACTORBASE_ID
		FROM TB_KPI_FACTORBASE_HEADER 
		WHERE TENANT_ID = I_TENANT_ID
		  AND STD_MONTH = I_STD_MONTH;
	ELSE 
		V_FACTORBASE_ID := I_FACTORBASE_ID;
	END IF;

    MERGE INTO TB_KPI_FACTORBASE_HEADER A
    USING (
		SELECT
			I_TENANT_ID       AS I_TENANT_ID,
			V_FACTORBASE_ID   AS I_FACTORBASE_ID,
			I_FACTORBASE_NM   AS I_FACTORBASE_NM,
			I_STD_MONTH       AS I_STD_MONTH,
			I_FACTOR_ID       AS I_FACTOR_ID,
			I_DEPT_CD         AS I_DEPT_CD,
			I_START_DATE      AS I_START_DATE,
			I_END_DATE        AS I_END_DATE,
			I_VALUATE_KIND    AS I_VALUATE_KIND,
			I_PLUS_MINUS      AS I_PLUS_MINUS,
			I_CREATE_AGENT_ID AS I_CREATE_AGENT_ID,
			I_MODIFY_AGENT_ID AS I_MODIFY_AGENT_ID
		FROM DUAL
    ) T
    ON (A.TENANT_ID = TENANT_ID AND A.FACTORBASE_ID = I_FACTORBASE_ID)
    WHEN MATCHED THEN
		UPDATE SET 
			FACTORBASE_NM   = T.I_FACTORBASE_NM,
			STD_MONTH       = T.I_STD_MONTH,
			FACTOR_ID       = T.I_FACTOR_ID,
			DEPT_CD         = T.I_DEPT_CD,
			START_DATE      = T.I_START_DATE,
			END_DATE        = T.I_END_DATE,
			VALUATE_KIND    = T.I_VALUATE_KIND,
			PLUS_MINUS      = T.I_PLUS_MINUS,
			MODIFY_AGENT_ID = T.I_MODIFY_AGENT_ID,
			MODIFY_DT       = SYSDATE
    WHEN NOT MATCHED THEN
		INSERT(
			TENANT_ID,   FACTORBASE_ID, FACTORBASE_NM, STD_MONTH,     FACTOR_ID, 
			DEPT_CD,     START_DATE,    END_DATE,      VALUATE_KIND,  PLUS_MINUS,
			PROC_STATUS, CREATE_AGENT_ID, CREATE_DT
		) VALUES (
			T.I_TENANT_ID,  V_FACTORBASE_ID,     T.I_FACTORBASE_NM,  T.I_STD_MONTH,      T.I_FACTOR_ID, 
			T.I_DEPT_CD,    T.I_START_DATE,      T.I_END_DATE,       T.I_VALUATE_KIND,   T.I_PLUS_MINUS, 
			'10',           T.I_CREATE_AGENT_ID, SYSDATE
		);
	
	COMMIT;
	
	OPEN O_CUR_LIST FOR
	SELECT V_FACTORBASE_ID AS FACTORBASE_ID FROM DUAL;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_06
(
    I_TENANT_ID       IN  VARCHAR2
  , I_IDX             IN  NUMBER
  , I_FACTORBASE_ID   IN  VARCHAR2
  , I_CALC_YN         IN  NUMBER
  , I_SNO             IN  NUMBER
  , I_FACTORKEY_VALUE IN  VARCHAR2
  , I_FACTORKEY_NM    IN  VARCHAR2
  , I_FACTORKEY_CNT   IN  NUMBER
  , I_WEIGHT_KIND     IN  VARCHAR2
  , I_WEIGHT_VALUE    IN  NUMBER
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_06
   PURPOSE:    실적요소 상세내용 조회

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_06';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
	
	-- ********************************************************************************
	-- 첫번째 인서트의 경우 기존정보 삭제
	-- ********************************************************************************    
	IF I_IDX = 0 THEN
		DELETE FROM TB_KPI_FACTORBASE_DETAIL WHERE TENANT_ID = I_TENANT_ID AND FACTORBASE_ID = I_FACTORBASE_ID;
	END IF;
	
	INSERT INTO TB_KPI_FACTORBASE_DETAIL(
		TENANT_ID,    FACTORBASE_ID,  SNO,         CALC_YN,      FACTORKEY_VALUE,
		FACTORKEY_NM, FACTORKEY_CNT,  WEIGHT_KIND, WEIGHT_VALUE
	) VALUES (
		I_TENANT_ID,    I_FACTORBASE_ID,  I_SNO,         I_CALC_YN,      I_FACTORKEY_VALUE,
		I_FACTORKEY_NM, I_FACTORKEY_CNT,  I_WEIGHT_KIND, I_WEIGHT_VALUE		
	);
	
	COMMIT;
	
	EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020S01_01 
(
    I_TENANT_ID       IN  VARCHAR2
  , I_STD_MONTH       IN  VARCHAR2
  , O_CUR_LIST        OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2020S01_01
   PURPOSE:    실적요소 집계기준 조회

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/20  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020S01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
	SELECT 
		A.FACTORBASE_ID,
		A.FACTOR_ID,
		C.FACTOR_NM,
		A.FACTORBASE_NM, 
		B.DEPT_NM,
		TO_CHAR(A.START_DATE, 'YYYY-MM-DD') AS START_DATE,
		TO_CHAR(A.END_DATE, 'YYYY-MM-DD') AS END_DATE,
		A.PROC_STATUS,
		'●' ||FN_CM_GET_CODE_NM(I_TENANT_ID,'PROC_STATUS',A.PROC_STATUS) AS PROC_STATUS_NM
	FROM TB_KPI_FACTORBASE_HEADER A
	LEFT OUTER JOIN TB_CM_DEPT_CD B ON A.TENANT_ID = B.TENANT_ID AND A.DEPT_CD = B.DEPT_CD
	LEFT OUTER JOIN TB_KPI_FACTOR C ON A.TENANT_ID = C.TENANT_ID AND A.FACTOR_ID = C.FACTOR_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.STD_MONTH = I_STD_MONTH
	;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020S02_01 
(
    I_TENANT_ID       IN  VARCHAR2
  , I_STD_MONTH       IN  VARCHAR2
  , O_CUR_LIST        OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2020S02_01
   PURPOSE:    실적요소마감 조회

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/04  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020S02_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
	SELECT 
		A.FACTORBASE_ID,
		A.FACTOR_ID,
		C.FACTOR_NM,
		A.FACTORBASE_NM, 
		B.DEPT_NM,
		TO_CHAR(A.START_DATE, 'YYYY-MM-DD') AS START_DATE,
		TO_CHAR(A.END_DATE, 'YYYY-MM-DD') AS END_DATE,
		NVL(D.CALC_CNT,0) AS CALC_CNT,
		A.PROC_STATUS,
		'● ' ||FN_CM_GET_CODE_NM(I_TENANT_ID,'PROC_STATUS',A.PROC_STATUS) AS PROC_STATUS_NM		
	FROM TB_KPI_FACTORBASE_HEADER A
	LEFT OUTER JOIN TB_CM_DEPT_CD B ON A.TENANT_ID = B.TENANT_ID AND A.DEPT_CD = B.DEPT_CD
	LEFT OUTER JOIN TB_KPI_FACTOR C ON A.TENANT_ID = C.TENANT_ID AND A.FACTOR_ID = C.FACTOR_ID
	LEFT OUTER JOIN (
		SELECT TENANT_ID, FACTORBASE_ID, COUNT(*) AS CALC_CNT 
		FROM TB_KPI_FACTORVALUE_HEADER 
		GROUP BY TENANT_ID, FACTORBASE_ID
	) D ON A.TENANT_ID = D.TENANT_ID AND A.FACTORBASE_ID = D.FACTORBASE_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.STD_MONTH = I_STD_MONTH
	;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020S02_02 
(
    I_TENANT_ID       IN  VARCHAR2
  , I_FACTORBASE_ID   IN  VARCHAR2
  , I_GUBUN           IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI2020S02_02
   PURPOSE:    실적요소 마감/마감해제

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/04  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020S02_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    V_GUBUN VARCHAR2(2) := '';
BEGIN
	IF I_GUBUN = '1' THEN
		V_GUBUN := '30'; --마감
	ELSE
		V_GUBUN := '20'; --진행
	END IF;

   
	UPDATE TB_KPI_FACTORBASE_HEADER SET 
		PROC_STATUS = V_GUBUN 
	WHERE TENANT_ID = I_TENANT_ID
	  AND FACTORBASE_ID = I_FACTORBASE_ID;
	  
	COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2030M01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_STD_MONTH   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2030M01_01
   PURPOSE:    실적기준관리 - 평가그룹조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/10  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2030M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	SELECT
		GR.GRP_ID AS GRP_ID, 
		GR.GRP_NM AS GRP_NM, 
		GR.PARENT_CD AS PARENT_CD,
		GR.TARGET_CNT AS TARGET_CNT
    FROM(
		SELECT
			I_STD_MONTH AS GRP_ID, 
			FN_CM_STRING_FORMAT(I_STD_MONTH, '@@@@-@@') AS GRP_NM, 
			'#' AS PARENT_CD,
			0 AS TARGET_CNT
		FROM DUAL
		UNION ALL
		SELECT
        	A.GRP_ID AS GRP_ID, 
	        A.GRP_NM AS GRP_NM, 
    	    I_STD_MONTH AS PARENT_CD,
    	    COUNT(B.AGENT_ID) AS TARGET_CNT
		FROM TB_KPI_EVAL_GROUP A
		LEFT OUTER JOIN TB_KPI_EVAL_TARGET B ON A.TENANT_ID = B.TENANT_ID AND A.GRP_ID = B.GRP_ID
		WHERE 1=1
		  AND A.TENANT_ID = I_TENANT_ID
		  AND A.STD_MONTH = I_STD_MONTH
		GROUP BY A.GRP_ID, A.GRP_NM
	) GR
    ORDER BY GR.GRP_ID, GR.GRP_NM;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2030M01_02 
(
    I_TENANT_ID    IN  VARCHAR2
  , I_STD_MONTH    IN  VARCHAR2
  , I_PROC_STATUS  IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2030M01_02
   PURPOSE:    실적기준관리 - 실적요소 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/10  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2030M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	SELECT
		A.FACTOR_ID, 
		B.FACTOR_NM,
		A.FACTORBASE_ID,
		A.FACTORBASE_NM,
		D.DEPT_NM,
		TO_CHAR(A.START_DATE, 'YYYY-MM-DD') AS START_DATE,
		TO_CHAR(A.END_DATE, 'YYYY-MM-DD') AS END_DATE,
		CASE WHEN A.VALUATE_KIND = 'SUM' THEN '합계' ELSE '평균' END AS VALUATE_KIND,
		COUNT(C.AGENT_ID) AS CALC_CNT,
		A.PROC_STATUS,
		'● ' || FN_CM_GET_CODE_NM(I_TENANT_ID,'PROC_STATUS', A.PROC_STATUS) AS PROC_STATUS_NM
	FROM TB_KPI_FACTORBASE_HEADER A
	INNER JOIN TB_KPI_FACTOR B ON A.TENANT_ID = B.TENANT_ID AND A.FACTOR_ID = B.FACTOR_ID
	LEFT OUTER JOIN TB_KPI_FACTORVALUE_HEADER C ON A.TENANT_ID = C.TENANT_ID AND A.FACTORBASE_ID = C.FACTORBASE_ID
	LEFT OUTER JOIN TB_CM_DEPT_CD D ON  A.TENANT_ID = C.TENANT_ID AND A.DEPT_CD = D.DEPT_CD
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.STD_MONTH = I_STD_MONTH
	  AND ((I_PROC_STATUS IS NULL AND 1=1)
           OR (I_PROC_STATUS IS NOT NULL AND  INSTR(I_PROC_STATUS, A.PROC_STATUS) > 0))
	GROUP BY A.FACTOR_ID, B.FACTOR_NM, A.FACTORBASE_ID, A.FACTORBASE_NM, D.DEPT_NM, A.START_DATE, A.END_DATE, A.VALUATE_KIND, A.PROC_STATUS
	ORDER BY A.FACTORBASE_ID
	;
  
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2030M01_03
(
    I_TENANT_ID    IN  VARCHAR2
  , I_GRP_ID       IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2030M01_03
   PURPOSE:    실적기준관리 - 평가기준조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/10  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2030M01_03';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	SELECT
		A.FACTORBASE_ID,
		B.FACTORBASE_NM,
		A.MAJOR_GROUP,
		A.MINOR_GROUP,
		A.EVAL_SCORE,
		A.MAX_SCORE,
		A.MIN_SCORE,
		A.FACTOR_SCORE,
		A.VISIBLE_SCORE,
		A.VISIBLE_CONVERT,
		A.VISIBLE_RANK,
		A.PLUS_MINUS_YN
	FROM TB_KPI_EVAL_SHEET A
	INNER JOIN TB_KPI_FACTORBASE_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.FACTORBASE_ID = B.FACTORBASE_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.GRP_ID = I_GRP_ID
	ORDER BY SNO
	;
  
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2030M01_04
(
    I_TENANT_ID    IN  VARCHAR2
  , I_GRP_ID       IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI2030M01_04
   PURPOSE:    실적기준관리 - 평가기준삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/10  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2030M01_04';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

	DELETE FROM TB_KPI_EVAL_SHEET WHERE TENANT_ID = I_TENANT_ID AND GRP_ID = I_GRP_ID;

	COMMIT;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2030M01_05
(
	I_TENANT_ID        IN VARCHAR2
  , I_GRP_ID           IN VARCHAR2
  , I_SNO              IN NUMBER 
  , I_FACTORBASE_ID    IN VARCHAR2
  , I_MAJOR_GROUP      IN VARCHAR2
  , I_MINOR_GROUP      IN VARCHAR2
  , I_EVAL_SCORE       IN NUMBER 
  , I_MAX_SCORE        IN NUMBER 
  , I_MIN_SCORE        IN NUMBER 
  , I_FACTOR_SCORE     IN NUMBER 
  , I_VISIBLE_SCORE    IN NUMBER 
  , I_VISIBLE_CONVERT  IN NUMBER 
  , I_VISIBLE_RANK     IN NUMBER 
  , I_PLUS_MINUS_YN    IN NUMBER 
  , I_CREATE_AGENT_ID  IN VARCHAR2

) AS 
/******************************************************************************
   NAME:       SP_KPI2030M01_05
   PURPOSE:    실적기준관리 - 평가기준 등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/10  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2030M01_05';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

	INSERT INTO TB_KPI_EVAL_SHEET(
		TENANT_ID,     GRP_ID,          SNO,          FACTORBASE_ID,  MAJOR_GROUP,
		MINOR_GROUP,   EVAL_SCORE,      MAX_SCORE,    MIN_SCORE,      FACTOR_SCORE,
		VISIBLE_SCORE, VISIBLE_CONVERT, VISIBLE_RANK, PLUS_MINUS_YN,  CREATE_AGENT_ID,
		CREATE_DT
	) VALUES (
		I_TENANT_ID,     I_GRP_ID,          I_SNO,          I_FACTORBASE_ID,  I_MAJOR_GROUP,
		I_MINOR_GROUP,   I_EVAL_SCORE,      I_MAX_SCORE,    I_MIN_SCORE,      I_FACTOR_SCORE,
		I_VISIBLE_SCORE, I_VISIBLE_CONVERT, I_VISIBLE_RANK, I_PLUS_MINUS_YN,  I_CREATE_AGENT_ID,
		SYSDATE
	);

	COMMIT;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2040M01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_STD_MONTH   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2040M01_01
   PURPOSE:    성과실적계산 - 평가그룹조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/10  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2040M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	SELECT
		GR.GRP_ID AS GRP_ID, 
		GR.GRP_NM AS GRP_NM, 
		GR.PARENT_CD AS PARENT_CD,
		GR.TARGET_CNT AS TARGET_CNT
    FROM(
		SELECT
			I_STD_MONTH AS GRP_ID, 
			FN_CM_STRING_FORMAT(I_STD_MONTH, '@@@@-@@') AS GRP_NM, 
			'#' AS PARENT_CD,
			0 AS TARGET_CNT
		FROM DUAL
		UNION ALL
		SELECT
        	A.GRP_ID AS GRP_ID, 
	        A.GRP_NM AS GRP_NM, 
    	    I_STD_MONTH AS PARENT_CD,
    	    COUNT(B.AGENT_ID) AS TARGET_CNT
		FROM TB_KPI_EVAL_GROUP A
		LEFT OUTER JOIN TB_KPI_EVAL_TARGET B ON A.TENANT_ID = B.TENANT_ID AND A.GRP_ID = B.GRP_ID
		WHERE 1=1
		  AND A.TENANT_ID = I_TENANT_ID
		  AND A.STD_MONTH = I_STD_MONTH
		GROUP BY A.GRP_ID, A.GRP_NM
	) GR
    ORDER BY GR.GRP_ID, GR.GRP_NM;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2040M01_02
(
    I_TENANT_ID    IN  VARCHAR2
  , I_GRP_ID       IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2040M01_02
   PURPOSE:    성과실적계산 - 헤더조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/12  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2040M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	SELECT
		A.FACTORBASE_ID,
		A.MAJOR_GROUP,
		A.MINOR_GROUP,
		A.EVAL_SCORE,
		A.VISIBLE_SCORE,
		A.VISIBLE_CONVERT,
		A.VISIBLE_RANK
	FROM TB_KPI_EVAL_SHEET A
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.GRP_ID = I_GRP_ID
	ORDER BY SNO
	;
  
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2040M01_04
(
    I_TENANT_ID    IN  VARCHAR2
  , I_GRP_ID       IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2040M01_04
   PURPOSE:    성과실적계산 - 집계취소

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/25  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2040M01_04';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

    OPEN O_CUR_LIST FOR 
	SELECT
		A.TENANT_ID,
		A.GRP_ID,
		A.AGENT_ID,
		B.FACTORBASE_ID,
		TO_CHAR(C.FACTOR_SCORE,'fm9999999999999.00') AS FACTOR_SCORE,
		TO_CHAR(C.CONVERT_SCORE,'fm9999999999999.00') AS CONVERT_SCORE,
		TO_CHAR(C.FACTOR_RANK,'fm9999999999999.00') AS FACTOR_RANK
	FROM TB_KPI_EVAL_TARGET A
	INNER JOIN TB_KPI_EVAL_SHEET B ON A.TENANT_ID = B.TENANT_ID AND A.GRP_ID = B.GRP_ID
	INNER JOIN TB_KPI_RESULT_DETAIL C ON A.TENANT_ID = C.TENANT_ID AND A.GRP_ID = C.GRP_ID AND A.AGENT_ID = C.AGENT_ID AND B.FACTORBASE_ID = C.FACTORBASE_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.GRP_ID = I_GRP_ID
	ORDER BY A.AGENT_ID, B.SNO;
	COMMIT;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2040M01_05
(
    I_TENANT_ID    IN  VARCHAR2
  , I_GRP_ID       IN  VARCHAR2 
) AS 
/******************************************************************************
   NAME:       SP_KPI2040M01_05
   PURPOSE:    성과실적계산 - 집계취소

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/13  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2040M01_05';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

	DELETE FROM TB_KPI_RESULT_DETAIL WHERE TENANT_ID = I_TENANT_ID AND GRP_ID = I_GRP_ID;
	DELETE FROM TB_KPI_RESULT_HEADER WHERE TENANT_ID = I_TENANT_ID AND GRP_ID = I_GRP_ID;
	
	COMMIT;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2040S01_01
(
    I_TENANT_ID    IN  VARCHAR2
  , I_GRP_ID       IN  VARCHAR2 
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2040S01_01
   PURPOSE:    성과실적계산 - 팝업 - 실적요소 조회 

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/13  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2040S01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	SELECT
		A.MAJOR_GROUP,
		A.MINOR_GROUP,
		B.FACTOR_ID,
		C.FACTOR_NM,
		A.FACTORBASE_ID,
		B.FACTORBASE_NM,
		B.PROC_STATUS,
		'●' ||FN_CM_GET_CODE_NM(I_TENANT_ID,'PROC_STATUS',B.PROC_STATUS) AS PROC_STATUS_NM,
		A.EVAL_SCORE,
		CASE WHEN D.CALC_CNT > 0 THEN '1' ELSE '0' END AS ALEADY_CALC_YN
	FROM TB_KPI_EVAL_SHEET A
	INNER JOIN TB_KPI_FACTORBASE_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.FACTORBASE_ID = B.FACTORBASE_ID
	INNER JOIN TB_KPI_FACTOR C ON A.TENANT_ID = C.TENANT_ID AND B.FACTOR_ID = C.FACTOR_ID
	LEFT OUTER JOIN (
		SELECT TENANT_ID, GRP_ID, FACTORBASE_ID, COUNT(AGENT_ID) AS CALC_CNT
		FROM TB_KPI_RESULT_DETAIL
		GROUP BY TENANT_ID, GRP_ID, FACTORBASE_ID
	) D ON A.TENANT_ID = D.TENANT_ID AND A.GRP_ID = D.GRP_ID AND A.FACTORBASE_ID = D.FACTORBASE_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.GRP_ID = I_GRP_ID
	ORDER BY SNO
	;

  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2040S01_02
(
    I_TENANT_ID     IN  VARCHAR2
  , I_GRP_ID        IN  VARCHAR2
  , I_FACTORBASE_ID IN  VARCHAR2
  , I_GUBUN         IN  VARCHAR2
  , I_WORK_MEMB     IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI2040S01_02
   PURPOSE:    성과실적계산 - 팝업 - 전체계산

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/13  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2040S01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   
   V_EVAL_SCORE       NUMBER := 0;
   V_MAX_SCORE        NUMBER := 0;
   V_MIN_SCORE        NUMBER := 0;
   V_FACTOR_SCORE     NUMBER := 0;
   V_PLUS_MINUS_YN    NUMBER := 0;
   V_EVAL_SCORE_CNT   NUMBER := 0;
   V_EVAL_TOTAL_SCORE NUMBER := 0;
BEGIN

-- ********************************************************************************
-- 1. START 헤더결과 삭제, 평가대상자 초기셋팅
-- ********************************************************************************
	IF I_GUBUN = 'START' THEN
		DELETE FROM TB_KPI_RESULT_HEADER WHERE TENANT_ID = I_TENANT_ID AND GRP_ID = I_GRP_ID; 
		
		INSERT INTO TB_KPI_RESULT_HEADER
		SELECT 
			I_TENANT_ID AS TENANT_ID,
			I_GRP_ID AS GRP_ID,
			A.AGENT_ID,
			0 AS TOTAL_SCORE,
			0 AS CONVERT_SCORE,
			0 AS EVAL_GRP_RANK,
			0 AS EVAL_GRP_DIST,
			I_WORK_MEMB AS CREATE_AGENT_ID,
			SYSDATE AS CREATE_DT
		FROM TB_KPI_EVAL_TARGET A
		WHERE A.TENANT_ID = I_TENANT_ID
		  AND A.GRP_ID = I_GRP_ID;

		COMMIT;
	END IF;
	
-- ********************************************************************************
-- 2. BODY 
-- ********************************************************************************	
	IF I_GUBUN = 'BODY' THEN
		DELETE FROM TB_KPI_RESULT_DETAIL WHERE TENANT_ID = I_TENANT_ID AND GRP_ID = I_GRP_ID AND FACTORBASE_ID = I_FACTORBASE_ID;
		
		-- 실적요소에 대한 대상자 셋팅
		INSERT INTO TB_KPI_RESULT_DETAIL 
		SELECT 
			I_TENANT_ID AS TENANT_ID,
			I_GRP_ID AS GRP_ID,
			A.AGENT_ID,
			I_FACTORBASE_ID AS FACTORBASE_ID,
			'0' AS SOURCE_SCORE,
			'0' AS FACTOR_SCORE,
			'0' AS CONVERT_SCORE,
			'0' AS FACTOR_RANK,
			I_WORK_MEMB AS CREATE_AGENT_ID,
			SYSDATE AS CREATE_DT,
			NULL AS MODIFY_AGENT_ID,
			NULL AS MODIFY_DT
		FROM TB_KPI_EVAL_TARGET A
		WHERE A.TENANT_ID = I_TENANT_ID
		  AND A.GRP_ID = I_GRP_ID;

		-- 실적점수 기준 조회
		SELECT 
			EVAL_SCORE, MAX_SCORE, MIN_SCORE, FACTOR_SCORE, PLUS_MINUS_YN
		INTO 
		   V_EVAL_SCORE, V_MAX_SCORE, V_MIN_SCORE, V_FACTOR_SCORE, V_PLUS_MINUS_YN
		FROM TB_KPI_EVAL_SHEET
		WHERE TENANT_ID = I_TENANT_ID
		  AND GRP_ID = I_GRP_ID
		  AND FACTORBASE_ID = I_FACTORBASE_ID;
		
		-- 실적상세 업데이트
		UPDATE TB_KPI_RESULT_DETAIL X SET (
			SOURCE_SCORE,
			FACTOR_SCORE,
			CONVERT_SCORE,
			FACTOR_RANK
		) = (
			SELECT 
				NVL(FACTOR_SCORE,0),
				NVL(FACTOR_SCORE,0),
				CASE WHEN NVL(V_FACTOR_SCORE,0) = 0 THEN 0 ELSE NVL(FACTOR_SCORE,0) * NVL(V_EVAL_SCORE,0) / NVL(V_FACTOR_SCORE,0) END,
				NVL(FACTOR_RANK,0)
			FROM TB_KPI_EVAL_TARGET A
			LEFT OUTER JOIN TB_KPI_FACTORVALUE_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID AND B.FACTORBASE_ID = I_FACTORBASE_ID
			WHERE A.TENANT_ID = I_TENANT_ID
			  AND A.GRP_ID = I_GRP_ID
			  AND X.TENANT_ID = A.TENANT_ID
			  AND X.AGENT_ID = A.AGENT_ID
		)
		WHERE TENANT_ID = I_TENANT_ID
		  AND GRP_ID = I_GRP_ID
		  AND FACTORBASE_ID = I_FACTORBASE_ID;
		
		COMMIT;
		
	END IF;    

	
-- ********************************************************************************
-- 3. END
-- ********************************************************************************	     	
	IF I_GUBUN = 'END' THEN
		
		UPDATE TB_KPI_RESULT_HEADER X SET 
			TOTAL_SCORE = (
				SELECT SUM(CONVERT_SCORE) 
				FROM TB_KPI_RESULT_DETAIL 
				WHERE X.TENANT_ID = TENANT_ID 
				  AND X.GRP_ID = GRP_ID 
				  AND X.AGENT_ID = AGENT_ID 
				GROUP BY TENANT_ID, GRP_ID, AGENT_ID
			)
		WHERE TENANT_ID = I_TENANT_ID
		  AND GRP_ID = I_GRP_ID;
		
		SELECT COUNT(DISTINCT TOTAL_SCORE) INTO V_EVAL_SCORE_CNT
		FROM TB_KPI_RESULT_HEADER 
		WHERE TENANT_ID = I_TENANT_ID
		  AND GRP_ID = I_GRP_ID;
		
		SELECT SUM(EVAL_SCORE) INTO V_EVAL_TOTAL_SCORE
		FROM TB_KPI_EVAL_SHEET
		WHERE TENANT_ID = I_TENANT_ID
		  AND GRP_ID = I_GRP_ID
		  AND PLUS_MINUS_YN = 0;
		
		MERGE INTO TB_KPI_RESULT_HEADER T
		USING (
			SELECT
				A.TENANT_ID, A.GRP_ID, A.AGENT_ID
				,SUM(A.CONVERT_SCORE) * 100 / V_EVAL_TOTAL_SCORE AS CONVERT_SCORE
				,RANK() OVER (ORDER BY SUM(A.CONVERT_SCORE) DESC) AS EVAL_GRP_RANK
				,RANK() OVER (ORDER BY SUM(A.CONVERT_SCORE) DESC) * 100 / V_EVAL_SCORE_CNT AS EVAL_GRP_DIST
			FROM TB_KPI_RESULT_DETAIL A
			WHERE TENANT_ID = I_TENANT_ID
			  AND GRP_ID = I_GRP_ID
			GROUP BY A.TENANT_ID, A.GRP_ID, A.AGENT_ID
		 ) S ON (T.TENANT_ID = S.TENANT_ID AND T.GRP_ID = S.GRP_ID AND T.AGENT_ID = S.AGENT_ID )
		 WHEN MATCHED THEN
		 UPDATE SET  CONVERT_SCORE = S.CONVERT_SCORE
			    	,EVAL_GRP_RANK = S.EVAL_GRP_RANK
			    	,EVAL_GRP_DIST = S.EVAL_GRP_DIST;
		
		COMMIT;
	END IF;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI3010M01_01 
(
    I_TENANT_ID   	 IN VARCHAR2
  , I_STD_MONTH  	 IN VARCHAR2
  , O_CUR_LIST       OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI3010M01_01
   PURPOSE:    종합평가결과 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/13
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI3010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
   

	OPEN O_CUR_LIST FOR 

	SELECT TO_CHAR(TO_DATE(AA.STD_MONTH, 'YYYYMM'), 'YYYY-MM') AS STD_MONTH
	     , AA.GRP_ID           AS GRP_ID
	     , AA.GRP_NM           AS GRP_NM
	     , AA.TARGET_COUNT     AS TARGET_COUNT
	     , BB.FACTORBASE_COUNT AS FACTORBASE_COUNT
   	     , DECODE(BB.TOTAL_SCORE, 0, null, BB.TOTAL_SCORE)      AS TOTAL_SCORE
	     , DECODE(AA.AVG_SCORE, 0, null, TO_CHAR(AA.AVG_SCORE, 'FM999,999.00')) AS AVG_SCORE
         , DECODE(BB.TOTAL_SCORE, 0, null, 
           TO_CHAR(((AA.AVG_SCORE / BB.TOTAL_SCORE) * 100), 'FM999,999.00')) AS CONVERT_SCORE
	  FROM ( SELECT A.TENANT_ID
	              , A.STD_MONTH
			      , A.GRP_ID
			      , A.GRP_NM
			      , COUNT(B.AGENT_ID)      AS TARGET_COUNT
			      , SUM(B.TOTAL_SCORE) / COUNT(B.AGENT_ID) AS AVG_SCORE
			   FROM TB_KPI_EVAL_GROUP A
			  INNER JOIN TB_KPI_RESULT_HEADER B
			     ON A.TENANT_ID = B.TENANT_ID
                AND A.GRP_ID    = B.GRP_ID
			  GROUP BY A.TENANT_ID, A.STD_MONTH, A.GRP_ID, A.GRP_NM) AA
INNER JOIN ( SELECT TENANT_ID
                  , COUNT(FACTORBASE_ID) AS FACTORBASE_COUNT
                  , SUM(EVAL_SCORE)      AS TOTAL_SCORE
	           FROM TB_KPI_EVAL_SHEET
	          GROUP BY TENANT_ID ) BB
         ON AA.TENANT_ID = BB.TENANT_ID
	  WHERE AA.TENANT_ID = I_TENANT_ID
        AND AA.STD_MONTH = I_STD_MONTH;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI3010M01_02
(
    I_TENANT_ID  IN VARCHAR2
  , I_STD_MONTH	 IN VARCHAR2
  , I_GRP_ID     IN VARCHAR2
  , O_CUR_LIST   OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI3010M01_02
   PURPOSE:    종합평가결과 - 탭 조회 (개인별)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/14
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI3010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
   

	OPEN O_CUR_LIST FOR 
	
	WITH TEMP_LIST AS (
    
    SELECT A.TENANT_ID
 	     , A.GRP_ID
  	     , A.AGENT_ID
		 , FN_CM_GET_DEPT_NM(I_TENANT_ID,'center',A.DEPT_CD)  AS CENTER_NM
	  	 , FN_CM_GET_DEPT_NM(I_TENANT_ID,'part',A.DEPT_CD)    AS PART_NM
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'team',A.DEPT_CD)    AS TEAM_NM
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'jo',A.DEPT_CD)      AS JO_NM
		 , FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND
		 , B.SABUN
		 , B.AGENT_NM
		 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
   		 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
   		 , ( SELECT GRP_NM FROM TB_KPI_EVAL_GROUP WHERE GRP_ID = A.GRP_ID ) AS GRP_NM
   		 , DECODE(C.TOTAL_SCORE, 0, 0, TO_CHAR(C.TOTAL_SCORE, 'FM999,999.00')) AS TOTAL_SCORE
		 , DECODE(C.TOTAL_SCORE, 0, 0, TO_CHAR((C.TOTAL_SCORE / D.EVAL_SCORE) * 100, 'FM999,999.00')) AS CONVERT_SCORE
 		 , RANK() OVER( ORDER BY DECODE(C.TOTAL_SCORE, 0, null, TO_CHAR(C.TOTAL_SCORE, 'FM999,999.00')) DESC) AS EVAL_GRP_RANK 		 
 	  FROM TB_KPI_EVAL_TARGET A
     INNER JOIN TB_CM_USER_MASTER_HISTORY B
        ON A.TENANT_ID = B.TENANT_ID
       AND A.STD_MONTH = B.STD_MONTH
       AND A.AGENT_ID  = B.AGENT_ID
     INNER JOIN TB_KPI_RESULT_HEADER C
        ON A.TENANT_ID = C.TENANT_ID
       AND A.GRP_ID    = C.GRP_ID
       AND A.AGENT_ID  = C.AGENT_ID
     INNER JOIN (SELECT TENANT_ID
      				  , GRP_ID 
	                  , SUM(EVAL_SCORE) AS EVAL_SCORE
                  FROM TB_KPI_EVAL_SHEET
                 WHERE TENANT_ID   = I_TENANT_ID
                   AND (I_GRP_ID IS NOT NULL AND INSTR( I_GRP_ID, GRP_ID) > 0)
                 GROUP BY TENANT_ID, GRP_ID) D
        ON A.TENANT_ID = D.TENANT_ID
       AND A.GRP_ID = D.GRP_ID
     WHERE A.TENANT_ID = I_TENANT_ID
       AND A.STD_MONTH = I_STD_MONTH
       AND A.STD_MONTH = B.STD_MONTH
       AND (I_GRP_ID IS NOT NULL AND INSTR( I_GRP_ID, A.GRP_ID) > 0))
       
	, TEMP_CNT AS(
	
	SELECT AA.TENANT_ID          AS TENANT_ID
	     , AA.GRP_ID             AS GRP_ID
	     , MAX(AA.EVAL_GRP_RANK) AS MAX_CNT
	  FROM (SELECT A.TENANT_ID
		 	     , A.GRP_ID
		 		 , RANK() OVER( ORDER BY DECODE(C.TOTAL_SCORE, 0, null, TO_CHAR(C.TOTAL_SCORE, 'FM999,999.00'))) AS EVAL_GRP_RANK 		 
		 	  FROM TB_KPI_EVAL_TARGET A
		     INNER JOIN TB_CM_USER_MASTER_HISTORY B
		        ON A.TENANT_ID = B.TENANT_ID
		       AND A.STD_MONTH = B.STD_MONTH
		       AND A.AGENT_ID  = B.AGENT_ID
		     INNER JOIN TB_KPI_RESULT_HEADER C
		        ON A.TENANT_ID = C.TENANT_ID
		       AND A.GRP_ID    = C.GRP_ID
		       AND A.AGENT_ID  = C.AGENT_ID
		     INNER JOIN (SELECT TENANT_ID
		      				  , GRP_ID 
			                  , SUM(EVAL_SCORE) AS EVAL_SCORE
		                  FROM TB_KPI_EVAL_SHEET
		                 WHERE TENANT_ID   = I_TENANT_ID
		                   AND (I_GRP_ID IS NOT NULL AND INSTR( I_GRP_ID, GRP_ID) > 0)
		                 GROUP BY TENANT_ID, GRP_ID) D
		        ON A.TENANT_ID = D.TENANT_ID
		       AND A.GRP_ID = D.GRP_ID
		     WHERE A.TENANT_ID = I_TENANT_ID
		       AND A.STD_MONTH = I_STD_MONTH
		       AND A.STD_MONTH = B.STD_MONTH
		       AND (I_GRP_ID IS NOT NULL AND INSTR( I_GRP_ID, A.GRP_ID) > 0)) AA
		     GROUP BY AA.TENANT_ID, AA.GRP_ID		
				
	)

	SELECT A.TENANT_ID
 	     , A.GRP_ID
  	     , A.AGENT_ID
		 , A.CENTER_NM
	  	 , A.PART_NM
	     , A.TEAM_NM
	     , A.JO_NM
		 , A.TM_KIND
		 , A.SABUN
		 , A.AGENT_NM
		 , A.AGENT_JIKGUP_NM
   		 , A.AGENT_JIKCHK_NM
   		 , A.GRP_NM
   		 , A.TOTAL_SCORE
		 , A.CONVERT_SCORE
 		 , A.EVAL_GRP_RANK
 		 , TO_CHAR((A.EVAL_GRP_RANK / B.MAX_CNT) * 100, 'FM999.00') AS EVAL_GRP_DIST
	  FROM TEMP_LIST A INNER JOIN TEMP_CNT B
	    ON A.TENANT_ID = B.TENANT_ID
	   AND A.GRP_ID    = B.GRP_ID
	 ;

EXCEPTION
    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI3010M01_03
(
   I_TENANT_ID     IN VARCHAR2
 , I_STD_MONTH     IN VARCHAR2
 , I_GRP_ID        IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI3010M01_03
   PURPOSE:    종합평가결과회 (직급별 / 직책별 / 업무그룹별 / 근속기간별) 컬럼목록조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/14
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI3010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR
		WITH TEMP_LIST AS (	                       
	    SELECT  FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD) AS CENTER
	           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD) AS PART
	           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD) AS TEAM
	           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD) AS JO
	           ,B.DEPT_CD
	           ,COUNT(A.AGENT_ID) AS TOTAL_CNT
	  		   ,SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
	      FROM TB_KPI_RESULT_HEADER A
	     INNER JOIN TB_CM_USER_MASTER_HISTORY B ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID )
	    WHERE A.TENANT_ID  = I_TENANT_ID
	      AND B.STD_MONTH  = I_STD_MONTH
          AND (I_GRP_ID IS NOT NULL AND INSTR( I_GRP_ID, A.GRP_ID) > 0)
	      
	   GROUP BY B.TENANT_ID, B.DEPT_CD
	  )
	  
	  SELECT AA.CENTER
	       , AA.PART
	       , AA.TEAM
	       , AA.JO
	       , AA.DEPT_CD
           , AA.TOTAL_SCORE
           , AA.TOTAL_CNT
           , TO_CHAR(AA.TOTAL_AVG, 'FM999,999.00') AS TOTAL_AVG
	    FROM ( SELECT A.CENTER
			        , A.PART
			        , A.TEAM
			        , A.JO
			        , A.DEPT_CD
			        , DECODE(A.TOTAL_SCORE, 0, 0, A.TOTAL_SCORE) AS  TOTAL_SCORE
			        , A.TOTAL_CNT
			        , DECODE(TOTAL_SCORE, 0, 0, (TOTAL_SCORE/TOTAL_CNT)) AS TOTAL_AVG
			    FROM TEMP_LIST A
			   ORDER BY 1,2,3,4 ) AA
			    ;
      
EXCEPTION
    WHEN OTHERS 
    THEN 
    BEGIN
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI3010M01_04
(
    I_TENANT_ID  IN VARCHAR2
  , I_STD_MONTH	 IN VARCHAR2
  , I_GRP_ID     IN VARCHAR2
  , I_COLUMN_ID  IN VARCHAR2 /* 구분 - 1(직급별)/2(직책별)/3(업무그룹별)/4(근속기간별) */
  , O_CUR_LIST   OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI3010M01_03
   PURPOSE:    종합평가결과 - 탭 조회 (직급별 / 직책별 / 업무그룹별 / 근속기간별)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/14
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI3010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
   

	OPEN O_CUR_LIST FOR 
	
	 WITH TEMP_LIST AS (
   SELECT A.TENANT_ID
	    , A.AGENT_ID
	    , A.TOTAL_SCORE
		, B.DEPT_CD
		,(CASE I_COLUMN_ID WHEN '1' THEN B.AGENT_JIKGUP
		  				   WHEN '2' THEN B.AGENT_JIKCHK
			     		   WHEN '3' THEN B.TM_KIND
			     		   WHEN '4' THEN (SELECT S.CODE
							              FROM TB_CM_CODE S 
								         WHERE S.TENANT_ID = B.TENANT_ID 
								           AND S.SORT_CD   = 'WORK_PERIOD'
								           AND B.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
								           AND ROWNUM = 1 )  END) AS COLUMN_ID
    FROM TB_KPI_RESULT_HEADER A
   INNER JOIN TB_CM_USER_MASTER_HISTORY B 
      ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID )
   WHERE A.TENANT_ID  = I_TENANT_ID
     AND B.STD_MONTH = I_STD_MONTH
     AND (I_GRP_ID IS NOT NULL AND INSTR( I_GRP_ID, A.GRP_ID) > 0)
          
      ) , TEMP_CD AS (
   SELECT CODE
     FROM TB_CM_CODE S
    WHERE S.TENANT_ID = I_TENANT_ID
      AND S.SORT_CD   = (CASE I_COLUMN_ID  WHEN '1' THEN 'AGENT_JIKGUP'
				     			           WHEN '2' THEN 'AGENT_JIKCHK'
   				     					   WHEN '3' THEN 'TM_KIND'
 				     					   WHEN '4' THEN 'WORK_PERIOD' END)
	  ) , TEMP_LIST2 AS (  
   SELECT A.DEPT_CD
          /* 값이없거나 공통코드에 없는 값는 별도 컬럼으로  계산하기 위해 */
        , CASE WHEN A.COLUMN_ID IS NULL OR B.CODE IS NULL THEN 'NOITEM' ELSE A.COLUMN_ID END AS COLUMN_ID 
	    , COUNT(A.AGENT_ID)  AS TOTAL_CNT
		, SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
     FROM TEMP_LIST A
     LEFT OUTER JOIN TEMP_CD B ON ( A.COLUMN_ID = B.CODE )
    GROUP BY A.TENANT_ID, A.DEPT_CD, A.COLUMN_ID, B.CODE
  )  
       
       
      SELECT A.DEPT_CD
            ,A.COLUMN_ID
            ,A.TOTAL_SCORE
		     -- 응시인원(평균점수)    
			,TO_CHAR(TOTAL_CNT,'FM990')
			 ||'('||TO_CHAR(ROUND((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)),1), 'FM990.0') ||')' AS TOTAL_INFO
			 ,A.TOTAL_CNT
			 ,TO_CHAR((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)), 'FM990.00') AS TOTAL_AVG
		FROM  TEMP_LIST2 A
		;  

EXCEPTION
    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_KPI3030M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_GRP_ID        IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI3030M01_02
   PURPOSE:    평가항목별 보고서 - 가변컬럼 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/17
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI3030M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 가변컬럼 컬럼 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	
	SELECT DISTINCT A.MAJOR_GROUP AS MAJOR_GROUP
	     , A.MINOR_GROUP || '(' || A.EVAL_SCORE || ')' AS MINOR_GROUP
	     , A.FACTORBASE_ID AS CODE
	  FROM TB_KPI_EVAL_SHEET A
	 INNER JOIN TB_KPI_EVAL_TARGET B
	    ON A.TENANT_ID = B.TENANT_ID
	   AND A.GRP_ID    = B.GRP_ID
	 WHERE A.GRP_ID    = I_GRP_ID
	   AND A.TENANT_ID = I_TENANT_ID ;
	   
			      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI3030M01_03 (
   I_TENANT_ID     IN VARCHAR2
 , I_GRP_ID        IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI3030M01_03
   PURPOSE:    평가항목별 보고서 - 점수 데이터 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/19
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI3030M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 데이터 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	
	WITH TEMP_LIST AS (
	
		SELECT C.TENANT_ID
		     , C.DEPT_CD
		     , C.AGENT_ID
		     , C.AGENT_NM
		     , C.TM_KIND
		     , C.AGENT_JIKGUP
		     , C.AGENT_JIKCHK
		     , ( SELECT S.CODE
		           FROM TB_CM_CODE S 
		          WHERE S.TENANT_ID = C.TENANT_ID 
		            AND S.SORT_CD   = 'WORK_PERIOD'
			        AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		            AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		     , B.FACTORBASE_ID
		     , B.CONVERT_SCORE
		  FROM TB_KPI_EVAL_TARGET A
	     INNER JOIN TB_KPI_RESULT_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.GRP_ID = B.GRP_ID AND A.AGENT_ID = B.AGENT_ID)
	     INNER JOIN TB_CM_USER_MASTER_HISTORY C ON (A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID AND A.STD_MONTH = C.STD_MONTH)
	     WHERE A.TENANT_ID = I_TENANT_ID
	       AND A.GRP_ID = I_GRP_ID
	     
		), TEMP_CD AS (
	     
			SELECT CODE
		      FROM TB_CM_CODE S
		     WHERE S.TENANT_ID = I_TENANT_ID
		       AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
					  		     				     WHEN 'W' THEN 'WORK_PERIOD'
							     				     ELSE NULL END)
		
		), TEMP_LIST2 AS (
			SELECT A.TENANT_ID
			     , ( CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                            WHEN 'D' THEN  A.DEPT_CD
			                            ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' 
			                                       ELSE B.CODE END)
							     		END) AS CODE
			  	 , A.CONVERT_SCORE
			  	 , A.FACTORBASE_ID
			  FROM TEMP_LIST A
		LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                      WHEN 'T' THEN  A.TM_KIND
										      WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										      ELSE NULL END) = B.CODE )
		     GROUP BY A.TENANT_ID, A.CONVERT_SCORE, A.FACTORBASE_ID
			        , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                              WHEN 'D' THEN  A.DEPT_CD
			                              ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
				 		     			  END)	     			 		
		
		)
		
      SELECT A.TENANT_ID
      		,A.CODE
      		,A.FACTORBASE_ID
      		,SUM(A.CONVERT_SCORE) AS CONVERT_SCORE
		FROM  TEMP_LIST2 A
	GROUP BY A.TENANT_ID, A.CODE, A.FACTORBASE_ID ;
		
				      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI3030S01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_STD_MONTH   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI3030S01_01
   PURPOSE:    평가항목별 보고서 - 평가그룹조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/20  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI3030S01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	SELECT
		GR.GRP_ID AS GRP_ID, 
		GR.GRP_NM AS GRP_NM, 
		GR.PARENT_CD AS PARENT_CD,
		GR.TARGET_CNT AS TARGET_CNT
    FROM(
		SELECT
			I_STD_MONTH AS GRP_ID, 
			FN_CM_STRING_FORMAT(I_STD_MONTH, '@@@@-@@') AS GRP_NM, 
			'#' AS PARENT_CD,
			0 AS TARGET_CNT
		FROM DUAL
		UNION ALL
		SELECT
        	A.GRP_ID AS GRP_ID, 
	        A.GRP_NM AS GRP_NM, 
    	    I_STD_MONTH AS PARENT_CD,
    	    COUNT(B.AGENT_ID) AS TARGET_CNT
		FROM TB_KPI_EVAL_GROUP A
		LEFT OUTER JOIN TB_KPI_EVAL_TARGET B ON A.TENANT_ID = B.TENANT_ID AND A.GRP_ID = B.GRP_ID
		WHERE 1=1
		  AND A.TENANT_ID = I_TENANT_ID
		  AND A.STD_MONTH = I_STD_MONTH
		GROUP BY A.GRP_ID, A.GRP_NM
	) GR
    ORDER BY GR.GRP_ID, GR.GRP_NM;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_MNG1010M01_01 (
   O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG1010M01
   PURPOSE:    라이센스 정보 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/27  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010M01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	SELECT A.SNO
			,A.LICENSE
			,A.VERSION
			,A.COMPANY_NM
			,A.MAC_LIST
			,A.MAC_LIST_ENC
			,(SELECT WM_CONCAT(S.TENANT_ID||'('||S.TENANT_NAME||')') FROM TB_CM_TENANT_INFO S) AS TENANT_LIST
	FROM TB_CM_LICENSE A;
    
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_MNG1010M01_02 (
	O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG1010M01_02
   PURPOSE:    테넌트 정보 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/30  jin
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.테넌트 정보 조회
-- ******************************************************************************** 
	OPEN O_CUR_LIST FOR    
	SELECT A.TENANT_ID
			,A.TENANT_NAME
			,A.LICENSE_TYPE
			,FN_CM_STRING_FORMAT(A.USE_FRM_YMD, '@@@@-@@-@@') AS USE_FRM_YMD
			,FN_CM_STRING_FORMAT(A.USE_END_YMD, '@@@@-@@-@@') AS USE_END_YMD
			,NVL(B.CUR_USER_CNT,0) || ' / ' || A.USER_CNT || ' (' || ROUND(NVL(B.CUR_USER_CNT,0)*100/A.USER_CNT, 1) || ')' AS USER_CNT
			,A.ARGOCM_YN AS CM
			,A.ARGOHR_YN AS HR
			,A.ARGOEDU_YN AS EDU
			,A.ARGOQA_YN AS QA
			,A.ARGOKPI_YN AS KPI
	FROM TB_CM_TENANT_INFO A
	LEFT OUTER JOIN (
		SELECT A.TENANT_ID, COUNT(A.AGENT_ID) AS CUR_USER_CNT 
		  FROM TB_CM_USER_MASTER A 
		 INNER JOIN TB_CM_DEPT_CD B ON A.TENANT_ID = B.TENANT_ID AND A.DEPT_CD = B.DEPT_CD
	     WHERE A.SABUN NOT LIKE '%_ADMIN' --자동생성계정 제외
	       AND A.JAEJIK_GUBUN = '10' --재직자만
	     GROUP BY A.TENANT_ID
	) B ON A.TENANT_ID = B.TENANT_ID
	;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_MNG1010M01_03 (
	I_TENANT_ID		IN	VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_MNG1010M01_03
   PURPOSE:    코드생성

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/28  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.테넌트 등록/수정
-- ********************************************************************************    
 
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_KIND', '10', '교육구분', '신입교육', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_KIND', '20', '교육구분', '업무교육', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_KIND', '30', '교육구분', 'QA교육', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_KIND', '40', '교육구분', '상시교육', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_TARGET', '10', '교육대상', '파견', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_TARGET', '20', '교육대상', '정규', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_TARGET', '30', '교육대상', '계약', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_TARGET', '40', '교육대상', '도급', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_TARGET', '50', '교육대상', '기타', 'EDU', 0, 4, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TEACHER_KIND', '10', '교육강사', '교육강사', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TEACHER_KIND', '20', '교육강사', 'QAA', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TEACHER_KIND', '30', '교육강사', '일반직원', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TEACHER_KIND', '99', '교육강사', '외부강사', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_STATUS', '10', '교육진행상태', '준비중', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_STATUS', '20', '교육진행상태', '진행', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_STATUS', '30', '교육진행상태', '완료', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_STATUS', '90', '교육진행상태', '취소', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '110', '업무그룹', 'CS', 'HR', 0, 110, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKGUP', '10', '직급', '부장', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKGUP', '20', '직급', '차장', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKGUP', '30', '직급', '과장', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKGUP', '40', '직급', '대리', 'CM', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKGUP', '50', '직급', '계장', 'CM', 0, 50, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKGUP', '60', '직급', '행원A', 'CM', 0, 60, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKGUP', '70', '직급', '행원B', 'CM', 0, 70, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKGUP', '80', '직급', '행원C', 'CM', 0, 80, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKGUP', '90', '직급', '행원D', 'CM', 0, 90, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKCHK', '10', '직책', '관리자', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKCHK', '20', '직책', '책임자', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKCHK', '30', '직책', '슈퍼바이저', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKCHK', '40', '직책', '매니저', 'CM', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKCHK', '50', '직책', '상담팀장', 'CM', 0, 50, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKCHK', '60', '직책', 'QAA', 'CM', 0, 60, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKCHK', '70', '직책', '교육강사', 'CM', 0, 70, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGENT_JIKCHK', '80', '직책', '상담사', 'CM', 0, 80, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'JIKJONG_KIND', '10', '직종', '정규직', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'JIKJONG_KIND', '20', '직종', '계약직', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'JIKJONG_KIND', '30', '직종', '무기계약직', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'JIKJONG_KIND', '40', '직종', '도급직', 'CM', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'JIKJONG_KIND', '50', '직종', '파견직', 'CM', 0, 50, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'JIKJONG_KIND', '60', '직종', '파트타이머', 'CM', 0, 60, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'DAYNIGHT_GUBUN', '10', '주/야구분', '일반상담', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'DAYNIGHT_GUBUN', '20', '주/야구분', '야간상담', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'JAEJIK_GUBUN', '10', '재직구분', '재직', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'JAEJIK_GUBUN', '99', '재직구분', '퇴직', 'CM', 0, 99, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '101', '퇴직사유', '개인사정', 'HR', 0, 101, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '102', '퇴직사유', '자영업', 'HR', 0, 102, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '103', '퇴직사유', '타사이직', 'HR', 0, 103, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '104', '퇴직사유', '학업준비', 'HR', 0, 104, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '105', '퇴직사유', '군입대', 'HR', 0, 105, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '106', '퇴직사유', '본인중대과실', 'HR', 0, 106, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '107', '퇴직사유', '본인결혼', 'HR', 0, 107, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '108', '퇴직사유', '본인출산', 'HR', 0, 108, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '109', '퇴직사유', '육아문제', 'HR', 0, 109, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '110', '퇴직사유', '기타가사사정', 'HR', 0, 110, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '111', '퇴직사유', '노약자나동거가족의병간호', 'HR', 0, 111, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '112', '퇴직사유', '거주지변경(가족과동거를한주소', 'HR', 0, 112, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '113', '퇴직사유', '사업장이전', 'HR', 0, 113, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '114', '퇴직사유', '회사의원거리발령', 'HR', 0, 114, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '115', '퇴직사유', '본인의질병', 'HR', 0, 115, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '116', '퇴직사유', '본인의부상', 'HR', 0, 116, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '117', '퇴직사유', '고연령으로업무수행곤란', 'HR', 0, 117, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '118', '퇴직사유', '신규채용', 'HR', 0, 118, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '201', '퇴직사유', '계약기간만료', 'HR', 0, 201, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '202', '퇴직사유', '본인사망', 'HR', 0, 202, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '203', '퇴직사유', '정년퇴직', 'HR', 0, 203, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '301', '퇴직사유', '장기간업무수행불가', 'HR', 0, 301, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '302', '퇴직사유', '무단결근', 'HR', 0, 302, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '303', '퇴직사유', '직무수행능력부족', 'HR', 0, 303, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '304', '퇴직사유', '수습기간내퇴사', 'HR', 0, 304, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '305', '퇴직사유', '복무사항및근로계약위반', 'HR', 0, 305, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '306', '퇴직사유', '긴급경영상이유(일반사업의중단)', 'HR', 0, 306, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '307', '퇴직사유', '긴급경영상이유(사무소폐쇄)', 'HR', 0, 307, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '308', '퇴직사유', '긴급경영상이유(업무타법인이관)', 'HR', 0, 308, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '309', '퇴직사유', '긴급경영상이유(기타사무소형편)', 'HR', 0, 309, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '310', '퇴직사유', '긴급경영상이유(인원감축)', 'HR', 0, 310, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '311', '퇴직사유', '긴급경영상이유(권고사직)', 'HR', 0, 311, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '401', '퇴직사유', '근무지변경', 'HR', 0, 401, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'RETIRE_GUBUN', '501', '퇴직사유', '징계해직', 'HR', 0, 501, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'NOTI_GUBUN', 'HR', '공지구분', '인사', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'NOTI_GUBUN', 'QA', '공지구분', '교육', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'NOTI_GUBUN', 'EDU', '공지구분', '통화품질', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'NOTI_GUBUN', 'KPI', '공지구분', '성과실적', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'NOTI_GUBUN', 'ETC', '공지구분', '기타', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'NOTI_GRADE', '10', '공지등급', '공유', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'NOTI_GRADE', '20', '공지등급', '알림', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'NOTI_GRADE', '30', '공지등급', '중요', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'NOTI_GRADE', '40', '공지등급', '긴급', 'CM', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'ACTION_TYPE', 'L', '화면액션타입', '로드', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'ACTION_TYPE', 'R', '화면액션타입', '조회', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'ACTION_TYPE', 'W', '화면액션타입', '수정', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'ACTION_TYPE', 'D', '화면액션타입', '삭제', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'ACTION_TYPE', 'E', '화면액션타입', '기타', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPOINT_KIND', '00', '발령구분', '신규발령', 'HR', 1, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPOINT_KIND', '10', '발령구분', '전체변경', 'HR', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_TARGET_GUBUN', '10', '평가대상구분', '전체', 'HR', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_TARGET_GUBUN', '20', '평가대상구분', '본인 센터', 'HR', 1, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_TARGET_GUBUN', '30', '평가대상구분', '본인 파트', 'HR', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_TARGET_GUBUN', '40', '평가대상구분', '본인 팀', 'HR', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_TARGET_GUBUN', '50', '평가대상구분', '본인 조', 'HR', 0, 4, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_TARGET_GUBUN', '90', '평가대상구분', '수동입력', 'HR', 0, 5, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EVAL_STATUS', '10', '고과평가 진행상태', '미완료', 'HR', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EVAL_STATUS', '20', '고과평가 진행상태', '완료', 'HR', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPOINT_KIND', '20', '발령구분', '소속변경', 'HR', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPOINT_KIND', '30', '발령구분', '업무그룹변경', 'HR', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPOINT_KIND', '40', '발령구분', '직급변경', 'HR', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPOINT_KIND', '50', '발령구분', '직책변경', 'HR', 0, 50, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPOINT_KIND', '99', '발령구분', '퇴직발령', 'HR', 1, 99, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGTCNT_TYPE', 'C', '인원조회타입', '센터', 'HR', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGTCNT_TYPE', 'P', '인원조회타입', '파트', 'HR', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'AGTCNT_TYPE', 'T', '인원조회타입', '업무그룹', 'HR', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LAZY_TYPE', '00', '근태상태', '정상근무', 'HR', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LAZY_TYPE', '10', '근태상태', '조회지각대상', 'HR', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LAZY_TYPE', '20', '근태상태', '업무지각대상', 'HR', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LAZY_TYPE', '30', '근태상태', '결근대상', 'HR', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LAZY_TYPE', '40', '근태상태', '조회지각', 'HR', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LAZY_TYPE', '50', '근태상태', '업무지각', 'HR', 0, 50, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LAZY_TYPE', '60', '근태상태', '결근', 'HR', 0, 60, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LAZY_TYPE', '99', '근태상태', '기타', 'HR', 0, 99, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_KIND', '00', '권한접근범위', '전체', 'CM', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_KIND', '10', '권한접근범위', '센터', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_KIND', '20', '권한접근범위', '파트', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '101', '근태코드', '외출', 'HR', 0, 101, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_STATUS', '10', '결재진행상태', '상신', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_KIND', '30', '권한접근범위', '팀', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_STATUS', '20', '결재진행상태', '진행', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_STATUS', '30', '결재진행상태', '반려', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_STATUS', '40', '결재진행상태', '종결', 'CM', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_STATUS', '50', '결재진행상태', '종결(전결)', 'CM', 0, 50, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_KIND', '40', '권한접근범위', '조', 'CM', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_KIND', '50', '권한접근범위', '개인', 'CM', 0, 50, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '102', '근태코드', '조퇴(개인사유)', 'HR', 0, 102, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '103', '근태코드', '조퇴(경조사, 포상)', 'HR', 0, 103, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '104', '근태코드', '조퇴(산전검진)', 'HR', 0, 104, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '201', '근태코드', '연차휴가', 'HR', 0, 201, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_KIND', '90', '권한접근범위', '직접지정', 'CM', 0, 90, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '202', '근태코드', '보건휴가', 'HR', 0, 202, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '203', '근태코드', '당일휴가', 'HR', 0, 203, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '204', '근태코드', '산전후휴가', 'HR', 0, 204, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '205', '근태코드', '특별휴가', 'HR', 0, 205, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '206', '근태코드', '인정휴가', 'HR', 0, 206, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_KIND', '1', '근태종류', '근태', 'HR', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_KIND', '2', '근태종류', '휴가', 'HR', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_KIND', '3', '근태종류', '휴직', 'HR', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_KIND', '4', '근태종류', '공무', 'HR', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_KIND', '5', '근태종류', '기타', 'HR', 0, 50, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '207', '근태코드', '반일휴가(연차)', 'HR', 0, 207, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '208', '근태코드', '경조사휴가', 'HR', 0, 208, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '209', '근태코드', '기타휴가', 'HR', 0, 209, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '301', '근태코드', '육아휴직', 'HR', 0, 301, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '302', '근태코드', '질병휴직', 'HR', 0, 302, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '303', '근태코드', '간병휴직', 'HR', 0, 303, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '401', '근태코드', '타업무', 'HR', 0, 401, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '402', '근태코드', '교육 및 연수', 'HR', 0, 402, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '403', '근태코드', '코칭 및 면담', 'HR', 0, 403, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '501', '근태코드', '개인사유', 'HR', 0, 501, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '502', '근태코드', '포상휴식', 'HR', 0, 502, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CONDUCT_CODE', '503', '근태코드', '기타', 'HR', 0, 503, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_SHEET_TYPE', '30', '시험지유형', '쪽지시험', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QUESTION_TYPE', '30', '문제유형', '선다형(다답AND)', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QUESTION_TYPE', '20', '문제유형', '선다형(정답)', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QUESTION_TYPE', '10', '문제유형', '진위형', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QUESTION_TYPE', '40', '문제유형', '선다형(다답OR)', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QUESTION_TYPE', '50', '문제유형', '주관형', 'EDU', 0, 4, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QUESTION_TYPE', '60', '문제유형', '서술형', 'EDU', 0, 5, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_SHEET_TYPE', '10', '시험지유형', '신규직원평가', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_SHEET_TYPE', '20', '시험지유형', '업무능력평가', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_SHEET_TYPE', '40', '시험지유형', '연수시험지', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_TYPE2', '101', '업무구분(소)', '예금', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_TYPE2', '102', '업무구분(소)', '계좌조회', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_TYPE2', '201', '업무구분(소)', '대출', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_TYPE2', '202', '업무구분(소)', '인터넷', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCHE_STATUS', '10', '계획 진행상태', '준비중', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCHE_STATUS', '20', '계획 진행상태', '시작알림', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCHE_STATUS', '30', '계획 진행상태', '진행중', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCHE_STATUS', '40', '계획 진행상태', '완료', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCHE_STATUS', '50', '계획 진행상태', '마감', 'EDU', 0, 4, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_TYPE1', '20', '업무구분(대)', '여신업무', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_TYPE1', '30', '업무구분(대)', '대출업무', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_TYPE1', '10', '업무구분(대)', '수신업무', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_TYPE1', '40', '업무구분(대)', '세일즈업무', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPLY_KIND', '10', '가감 적용기준', '기준년월적용', 'KPI', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPLY_KIND', '20', '가감 적용기준', '영구적용', 'KPI', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_EVAL_TYPE', '99', '평가구분', '기타과정', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_EVAL_TYPE', '10', '평가구분', '신입과정', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_EVAL_TYPE', '20', '평가구분', '정기수행평가', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_EXAM_TYPE', '10', '업무유형', '수신유형', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_EXAM_TYPE', '20', '업무유형', '대출유형', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_EXAM_TYPE', '30', '업무유형', '카드유형', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_EXAM_TYPE', '40', '업무유형', '외국환유형', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDU_EXAM_TYPE', '50', '업무유형', '공통유형', 'EDU', 0, 4, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_EVAL_TYPE', '20', '평가 구분', '오상담평가', 'QA', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_EVAL_TYPE', '10', '평가 구분', '모니터링 평가', 'QA', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'KPI_STATUS', '30', '그룹평가 진행상태', '계산', 'KPI', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'PROC_STATUS', '10', '실적요소 진행상태', '생성', 'KPI', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'PROC_STATUS', '20', '실적요소 진행상태', '진행', 'KPI', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'PROC_STATUS', '30', '실적요소 진행상태', '마감', 'KPI', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'GENDER_KIND', 'F', '성별', '여', 'CM', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'GENDER_KIND', 'M', '성별', '남', 'CM', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TIMES_VALUE_STATUS', '10', '평가계획 진행상태', '생성', 'QA', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TIMES_VALUE_STATUS', '20', '평가계획 진행상태', '진행', 'QA', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QUEUE_GROUP_CD', 'C1', '큐그룹', '예금', 'CM', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QUEUE_GROUP_CD', 'C2', '큐그룹', '대출', 'CM', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QUEUE_GROUP_CD', 'C3', '큐그룹', '인터넷', 'CM', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_GUBUN', '60', '업무별 접근범위', 'HR평가표 관리소속', 'CM', 0, 6, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_GUBUN', '70', '업무별 접근범위', 'HR평가계획 관리소속', 'CM', 0, 7, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_GUBUN', '10', '코칭구분', '개인', 'QA', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_GUBUN', '20', '코칭구분', '그룹', 'QA', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_GUBUN', '90', '코칭구분', '기타', 'QA', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_REASON', '10', '코칭사유', '정기코칭', 'QA', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_REASON', '20', '코칭사유', '부진항목코칭', 'QA', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_REASON', '30', '코칭사유', '팀장요청', 'QA', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_REASON', '90', '코칭사유', '기타', 'QA', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_TYPE', '10', '코칭종류', '면대면', 'QA', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_TYPE', '20', '코칭종류', '실시간', 'QA', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COACHING_TYPE', '30', '코칭종류', '서면', 'QA', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_EVAL_TYPE', '10', '고과평가요소', '신속성', 'HR', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_EVAL_TYPE', '20', '고과평가요소', '정확성', 'HR', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_EVAL_TYPE', '30', '고과평가요소', '이해도', 'HR', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EXAM_STATUS', '20', '응시자 진행상태', '응시', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EXAM_STATUS', '30', '응시자 진행상태', '진행', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EXAM_STATUS', '40', '응시자 진행상태', '완료', 'EDU', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EXAM_STATUS', '10', '응시자 진행상태', '대상', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_CODE', '10', '결재코드', '결재', 'CM', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_CODE', '20', '결재코드', '전결', 'CM', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_CODE', '99', '결재코드', '반려', 'CM', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_VALUE_STATUS', '10', '평가 진행상태', '저장', 'QA', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_VALUE_STATUS', '20', '평가 진행상태', '완료', 'QA', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_VALUE_STATUS', '30', '평가 진행상태', '상신', 'QA', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_VALUE_STATUS', '40', '평가 진행상태', '승인', 'QA', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_PERIOD', '10', '근속기간', '1달 미만', 'HR', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_PERIOD', '20', '근속기간', '1~3 개월', 'HR', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_PERIOD', '30', '근속기간', '4~6개월', 'HR', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_PERIOD', '40', '근속기간', '7~12개월', 'HR', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_PERIOD', '50', '근속기간', '13~18개월', 'HR', 0, 4, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_PERIOD', '60', '근속기간', '19~24개월', 'HR', 0, 5, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WORK_PERIOD', '70', '근속기간', '24개월 이상', 'HR', 0, 6, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'KPI_STATUS', '10', '그룹평가 진행상태', '생성', 'KPI', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'KPI_STATUS', '20', '그룹평가 진행상태', '진행', 'KPI', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'KPI_STATUS', '40', '그룹평가 진행상태', '마감', 'KPI', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_KIND', '70', '결재종류', '통화품질', 'CM', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_TM_KIND', '120', '평가 업무분류', '[예금] 청약상품', 'QA', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_STATUS', '00', '결재진행상태', '작성중', 'CM', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_TM_KIND', '110', '평가 업무분류', '[예금] 적립식 상품', 'QA', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_TM_KIND', '210', '평가 업무분류', '[카드] 카드사용', 'QA', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_TM_KIND', '220', '평가 업무분류', '[카드] 카드발급 및 진행상태', 'QA', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_GUBUN', '10', '업무별 접근범위', '근태점수기준', 'CM', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_SEBU_CD', 'A', '평가항목 구분', 'A', 'QA', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_SEBU_CD', 'B', '평가항목 구분', 'B', 'QA', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_SEBU_CD', 'C', '평가항목 구분', 'C', 'QA', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_SEBU_CD', 'D', '평가항목 구분', 'D', 'QA', 0, 4, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_SEBU_CD', 'E', '평가항목 구분', 'E', 'QA', 0, 5, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'QA_SEBU_CD', '0', '평가항목 구분', '설명', 'QA', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_GUBUN', '20', '업무별 접근범위', 'EDU시험지 관리소속', 'CM', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_GUBUN', '30', '업무별 접근범위', 'EDU평가계획 관리소속', 'CM', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_GUBUN', '40', '업무별 접근범위', 'QA평가지 관리소속', 'CM', 0, 4, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_GUBUN', '50', '업무별 접근범위', 'QA평가계획 관리소속', 'CM', 0, 5, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WARNING_GBN', '3', '근태상황구분', '관리', 'HR', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WARNING_GBN', '1', '근태상황구분', '주의', 'HR', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WARNING_GBN', '0', '근태상황구분', '정상', 'HR', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'WARNING_GBN', '2', '근태상황구분', '경고', 'HR', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_KIND', '10', '결재종류', '근태', 'CM', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_KIND', '20', '결재종류', '업무일지', 'CM', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'APPROVAL_KIND', '30', '결재종류', '시간외근무', 'CM', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDIT_GRANT', 'A', '화면제어권한', '관리', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDIT_GRANT', 'W', '화면제어권한', '쓰기', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDIT_GRANT', 'R', '화면제어권한', '읽기', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'EDIT_GRANT', 'N', '화면제어권한', '권한없음', 'CM', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SYSTEM_GUBUN', 'CM', '시스템구분', '공통(CM)', 'CM', 0, 4, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SYSTEM_GUBUN', 'HR', '시스템구분', '인사(HR)', 'CM', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SYSTEM_GUBUN', 'EDU', '시스템구분', '교육(EDU)', 'CM', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SYSTEM_GUBUN', 'QA', '시스템구분', '통화품질(QA)', 'CM', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SYSTEM_GUBUN', 'KPI', '시스템구분', '성과실적(KPI)', 'CM', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CENTER_KIND', 'C1', '센터구분', '중앙센터', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CENTER_KIND', 'C2', '센터구분', '부산센터', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CENTER_KIND', 'C3', '센터구분', '광주센터', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LOC_KIND', '10', '지역구분', '서울', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LOC_KIND', '20', '지역구분', '부산', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'LOC_KIND', '30', '지역구분', '광주', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COM_KIND', '0', '회사구분', 'XX은행', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COM_KIND', '10', '회사구분', '유베이스', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COM_KIND', '20', '회사구분', '효성', 'CM', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'COM_KIND', '30', '회사구분', '부일정보', 'CM', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'INOUT_KIND', 'IN', '인/아웃구분', '인바운드', 'CM', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'INOUT_KIND', 'OUT', '인/아웃구분', '아웃바운드', 'CM', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'INOUT_KIND', 'COM', '인/아웃구분', '관리자', 'CM', 0, 90, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '10', '업무그룹', '관리자', 'HR', 0, 10, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '20', '업무그룹', '자동화', 'HR', 0, 20, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '30', '업무그룹', '예금', 'HR', 0, 30, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '40', '업무그룹', '수신', 'HR', 0, 40, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '50', '업무그룹', '대출', 'HR', 0, 50, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '60', '업무그룹', '카드', 'HR', 0, 60, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '70', '업무그룹', '상품판매', 'HR', 0, 70, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '80', '업무그룹', '이메일,채팅', 'HR', 0, 80, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '90', '업무그룹', '인터넷상담', 'HR', 0, 90, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'TM_KIND', '100', '업무그룹', 'QA', 'HR', 0, 100, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'SCOPE_GUBUN', '80', '업무별 접근범위', 'EDU교육계획', 'CM', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CLASSROOM_ID', '10', '교육장', '14F 1회의실', 'EDU', 0, 0, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CLASSROOM_ID', '20', '교육장', '14F 2회의실', 'EDU', 0, 1, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'CLASSROOM_ID', '30', '교육장', '15F 대회의실', 'EDU', 0, 2, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_EVAL_TYPE', '40', '고과평가요소', '성실도', 'HR', 0, 3, 'ARGO', sysdate);
	INSERT INTO TB_CM_CODE (TENANT_ID, SORT_CD, CODE, SORT_NM, CODE_NM, SYSTEM_GUBUN, HIDE_YN, SORT, CREATE_AGENT_ID, CREATE_DT) VALUES (I_TENANT_ID, 'HR_EVAL_TYPE', '50', '고과평가요소', '만족도', 'HR', 0, 4, 'ARGO', sysdate);
	  
      
    COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1010S01_01" (
    I_LIENSEKEY		  IN VARCHAR2
  , I_COMPANY		  IN VARCHAR2
  , I_MAC_LIST		  IN VARCHAR2
  , I_MAC_LIST_ENC	  IN VARCHAR2
  , I_TENANT_CNT	  IN VARCHAR2
  , I_VERSION		  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_MNG1010S01_01
   PURPOSE:    라이센스 등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/21
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		 := SYSDATE;
    v_work_date_str TIMESTAMP    := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP    := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010S01_01';
    v_work_result   VARCHAR2(1)  := 'F';
    v_work_count    NUMBER 		 := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
	V_BATCH_WORK_ID TB_CM_BATCH_WORK.WORK_ID%TYPE ;
    
BEGIN

	EXECUTE IMMEDIATE 'TRUNCATE TABLE TB_CM_LICENSE';
	EXECUTE IMMEDIATE 'TRUNCATE TABLE TB_CM_TENANT_INFO';
	
	INSERT INTO TB_CM_LICENSE(SNO
							,LICENSE
							,COMPANY_NM
							,MAC_LIST
							,MAC_LIST_ENC
							,TENANT_CNT
							,SERVICEABLE_YN
							,VERSION
							)
	VALUES (TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
			,I_LIENSEKEY
		    ,I_COMPANY
            ,I_MAC_LIST
	        ,I_MAC_LIST_ENC
			,I_TENANT_CNT
			,1
			,I_VERSION
			);
			
	COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1010S01_02" (
	 I_TENANT_ID			IN VARCHAR2
	,I_TENANT_NAME          IN VARCHAR2
	,I_LICENSE_TYPE         IN VARCHAR2
	,I_USE_FRM_YMD          IN VARCHAR2
	,I_USE_END_YMD          IN VARCHAR2
	,I_USER_CNT             IN VARCHAR2
	,I_ARGOCM_YN            IN VARCHAR2
	,I_ARGOHR_YN            IN VARCHAR2
	,I_ARGOEDU_YN           IN VARCHAR2
	,I_ARGOQA_YN            IN VARCHAR2
	,I_ARGOKPI_YN           IN VARCHAR2
	,I_LICENSE_TYPE_ENC     IN VARCHAR2
	,I_USE_FRM_YMD_ENC      IN VARCHAR2
	,I_USE_END_YMD_ENC      IN VARCHAR2
	,I_USER_CNT_ENC         IN VARCHAR2
	,I_MODULE_USE_ENC       IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_MNG1010S01_02
   PURPOSE:    테넌트 정보 등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/21
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		 := SYSDATE;
    v_work_date_str TIMESTAMP    := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP    := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010S01_02';
    v_work_result   VARCHAR2(1)  := 'F';
    v_work_count    NUMBER 		 := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
	V_BATCH_WORK_ID TB_CM_BATCH_WORK.WORK_ID%TYPE ;
    
BEGIN


--	EXECUTE IMMEDIATE 'TRUNCATE TABLE TB_CM_TENANT_INFO';

	INSERT INTO TB_CM_TENANT_INFO(
								    TENANT_ID,
								    TENANT_NAME ,
								    LICENSE_TYPE ,
								    USE_FRM_YMD ,
								    USE_END_YMD ,
								    USER_CNT ,
								    ARGOCM_YN ,
								    ARGOHR_YN ,
								    ARGOEDU_YN ,
								    ARGOQA_YN ,
								    ARGOKPI_YN ,
								    LICENSE_TYPE_ENC ,
								    USE_FRM_YMD_ENC ,
								    USE_END_YMD_ENC ,
								    USER_CNT_ENC ,
								    MODULE_USE_ENC
								  )
	  VALUES(
	  			I_TENANT_ID			
				,I_TENANT_NAME         
				,I_LICENSE_TYPE        
				,I_USE_FRM_YMD         
				,I_USE_END_YMD         
				,I_USER_CNT            
				,I_ARGOCM_YN           
				,I_ARGOHR_YN           
				,I_ARGOEDU_YN          
				,I_ARGOQA_YN           
				,I_ARGOKPI_YN          
				,I_LICENSE_TYPE_ENC    
				,I_USE_FRM_YMD_ENC     
				,I_USE_END_YMD_ENC     
				,I_USER_CNT_ENC        
				,I_MODULE_USE_ENC   
				);

COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_MNG1010S02_01 (
	I_TENANT_ID		IN	VARCHAR2
	,O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG1010S01_01
   PURPOSE:    테넌트 데이터 생성 정보 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/28  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.테넌트 등록/수정
-- ********************************************************************************    
 
	OPEN O_CUR_LIST FOR    
	SELECT (SELECT COUNT(S.TENANT_ID) FROM TB_CM_CODE S WHERE S.TENANT_ID = I_TENANT_ID AND ROWNUM=1) AS STEP1_YN
		,(SELECT COUNT(S.TENANT_ID) FROM TB_CM_ARGOWFM_PGM S WHERE S.TENANT_ID = I_TENANT_ID AND ROWNUM=1) AS STEP2_YN
		,(SELECT COUNT(S.TENANT_ID) FROM TB_CM_DEPT_CD S WHERE S.TENANT_ID = I_TENANT_ID AND ROWNUM=1) AS STEP3_YN
		,(SELECT WM_CONCAT(S.DEPT_CD) AS DEPT_CD FROM TB_CM_DEPT_CD S WHERE S.TENANT_ID = I_TENANT_ID AND DEPT_DEPTH = '0') AS DEPT_CD
		,(SELECT WM_CONCAT(S.DEPT_NM) AS DEPT_CD FROM TB_CM_DEPT_CD S WHERE S.TENANT_ID = I_TENANT_ID AND DEPT_DEPTH = '0') AS DEPT_NM
		,(SELECT COUNT(S.TENANT_ID) FROM TB_CM_DEPT_CD S WHERE S.TENANT_ID = I_TENANT_ID AND ROWNUM=1) AS STEP4_YN
		,(SELECT COUNT(S.TENANT_ID) FROM TB_CM_USER_MASTER S WHERE S.TENANT_ID = I_TENANT_ID AND ROWNUM=1) AS STEP5_YN
FROM DUAL;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_MNG1010S02_02 (
	I_TENANT_ID		IN	VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_MNG1010S02_02
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/04  JYMOON
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010S02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN
	INSERT INTO TB_CM_CODE
	SELECT
		I_TENANT_ID,
		SORT_CD,
		CODE,
		SORT_NM,
		CODE_NM,
		SYSTEM_GUBUN,
		HIDE_YN,
		SORT,
		USER_DATA1,
		USER_DATA2,
		USER_DATA3,
		USER_DATA4,
		USER_DATA5,
		'ARGO',
		SYSDATE,
		'ARGO',
		SYSDATE
	FROM TB_CM_CODE 
	WHERE TENANT_ID = 'BT';
	/*개발완료되면 일반 insert문으로 수정할 계획*/
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_MNG1010S02_03 (
	I_TENANT_ID		IN	VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_MNG1010S02_03
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/04  JYMOON
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010S02_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

BEGIN
	INSERT INTO TB_CM_ARGOWFM_PGM
	SELECT
		I_TENANT_ID,
		PGM_ID,
		SYSTEM_KIND,
		PGM_PATH,
		GROUP_NM,
		PGM_NM,
		SORT_SEQ,
		HIDE_YN,
		BIGO
	FROM TB_CM_ARGOWFM_PGM 
	WHERE TENANT_ID = 'BT';
	/*개발완료되면 일반 insert문으로 수정할 계획*/
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_MNG1010S02_04 (
	I_TENANT_ID		IN	VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_MNG1010S02_04
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/04  JYMOON
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010S02_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	 
	V_DEPT_CD TB_CM_DEPT_CD.DEPT_CD%TYPE         :='';
BEGIN
	SELECT LPAD(NVL(MAX(DEPT_CD),0)+1, 4,'0')
	  INTO V_DEPT_CD
	  FROM TB_CM_DEPT_CD;
	
	INSERT INTO TB_CM_DEPT_CD (
		TENANT_ID, DEPT_CD, DEPT_NM, DEPT_DEPTH, PARENT_DEPT_CD, 
		CENTER_KIND, LOC_KIND, COM_KIND, MANAGER_ID, APPROVAL_ID1, 
		APPROVAL_ID2, APPROVAL_ID3, STAFF_YN, INOUT_KIND, HIDE_YN, 
		BIGO, SORT_NO, CREATE_AGENT_ID, CREATE_DT, MODIFY_AGENT_ID, 
		MODIFY_DT
	) VALUES (
		I_TENANT_ID, V_DEPT_CD, '고객센터', 0, NULL,
		NULL, NULL, NULL, NULL, NULL,
		NULL, NULL, NULL, NULL, 0,
		NULL, 0, 'ARGO', NULL, 'ARGO',
		NULL
	);
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_MNG1010S02_05 (
	I_TENANT_ID		IN	VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_MNG1010S02_05
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/04  JYMOON
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010S02_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	 
	V_GRANT_ID TB_CM_GRANT_HEADER.GRANT_ID%TYPE :='';
BEGIN
	
	-- 신규 권한ID 생성
	SELECT LPAD(NVL(MAX(GRANT_ID), 0)+1 , 11, '0')
	  INTO V_GRANT_ID
	  FROM TB_CM_GRANT_HEADER
	 WHERE TENANT_ID = I_TENANT_ID ;
	
	-- 권한 마스터 정보 생성
	INSERT INTO TB_CM_GRANT_HEADER (
		GRANT_ID, TENANT_ID, GRANT_NM, HIDE_YN, JIKCHK_DEFAULT,
		SCOPE_KIND, CREATE_AGENT_ID, CREATE_DT, MODIFY_AGENT_ID, MODIFY_DT
	) VALUES (
		V_GRANT_ID, I_TENANT_ID, I_TENANT_ID || ' 전체권한', 0, NULL,
		NULL, 'ARGO', SYSDATE, 'ARGO', SYSDATE
	);
	
	-- 메뉴권한 정보 생성
	INSERT INTO TB_CM_GRANT_MENU
	SELECT 
		V_GRANT_ID, I_TENANT_ID, PGM_ID, 'A', '00', 
		0, 'ARGO', SYSDATE,  'ARGO', SYSDATE
	FROM TB_CM_ARGOWFM_PGM
	WHERE TENANT_ID = 'BT';
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_MNG1010S02_06 (
	I_TENANT_ID		IN	VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_MNG1010S02_06
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/04  JYMOON
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1010S02_06';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	 
	V_AGENT_ID TB_CM_USER_MASTER.AGENT_ID%TYPE :='';
	V_DEPT_CD TB_CM_DEPT_CD.DEPT_CD%TYPE := '';
	V_GRANT_ID TB_CM_GRANT_HEADER.GRANT_ID%TYPE := '';
BEGIN

	-- 관리자 신규ID 채번
	SELECT TO_CHAR(SYSDATE, 'YYYYMM') || LPAD( SUBSTR(NVL(MAX(AGENT_ID), '0000'), -4) + 1, 4, '0')
	  INTO V_AGENT_ID
	  FROM TB_CM_USER_MASTER
	 WHERE TENANT_ID = I_TENANT_ID
	   AND LENGTH(AGENT_ID) = 10
	   AND SUBSTR(AGENT_ID, 1, 6) = TO_CHAR(SYSDATE, 'YYYYMM');
	
	SELECT MIN(DEPT_CD)
	  INTO V_DEPT_CD
	  FROM TB_CM_DEPT_CD
	 WHERE TENANT_ID = I_TENANT_ID;
	
	SELECT MIN(GRANT_ID)
	  INTO V_GRANT_ID
	  FROM TB_CM_GRANT_HEADER
	 WHERE TENANT_ID = I_TENANT_ID;

	-- 신규계정 등록 (초기비번 : argo!2#4)
	INSERT INTO TB_CM_USER_MASTER (
		AGENT_ID, TENANT_ID, AGENT_NM, AGENT_PW, SABUN, 
		DEPT_CD, TM_KIND, AGENT_JIKGUP, AGENT_JIKCHK, JIKJONG_KIND, 
		DAYNIGHT_GUBUN, JAEJIK_GUBUN, GENDER_KIND, BIRTH_YMD, ENTER_YMD, 
		RETIRE_YMD, RETIRE_GUBUN, RETIRE_RSN, WORK_MONTH_PERIOD, HIDE_YN, 
		LOGIN_TRY_COUNT, TEL_NO, LOCK_YN, CONTRACT_FRM, CONTRACT_END, 
		SCHE_TARGET_YN, EDU_TARGET_YN, QA_TARGET_YN, KPI_TARGET_YN, IMG_REAL_FILENAME, 
		IMG_USER_FILENAME, IMG_PATH, GRANT_ID, CREATE_AGENT_ID, CREATE_DT, 
		MODIFY_AGENT_ID, MODIFY_DT, WARNING_INFO
	) VALUES (
		V_AGENT_ID, I_TENANT_ID, I_TENANT_ID || ' 관리자', '3debbeb51a650d5536ffe37305faaca8ce91c1408d02cf5874f02ca38af65353dce01d2d979575b6a99de79234c6895923292e80a3536384372b0f00efd5d00a', I_TENANT_ID || '_ADMIN', 
		V_DEPT_CD, '10', '10', '10', '10', 
		NULL, '10', 'M', NULL, TO_CHAR(SYSDATE, 'YYYYMMDD'), 
		NULL, NULL, NULL, 0, 0, 
		0, NULL, 0, NULL, NULL, 
		0, 0, 0, 0, NULL, 
		NULL, NULL, V_GRANT_ID, 'ARGO', SYSDATE, 
		'ARGO', SYSDATE, NULL
	);
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1020M01_01" (
	I_TENANT_ID   IN VARCHAR2
  , I_WORK_GUBUN  IN VARCHAR2
  , I_WORK_NM     IN VARCHAR2  
  , I_HIDE_YN     IN VARCHAR2  
  , O_CUR_LIST    OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG1020M01_01
   PURPOSE:    배치관리 - 배치작업 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/05
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG1020M01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 

		SELECT A.TENANT_ID
			 , ( SELECT T.TENANT_ID || ' (' || T.TENANT_NAME || ')' FROM TB_CM_TENANT_INFO T WHERE T.TENANT_ID = A.TENANT_ID) AS TENANT_NM
		     , A.WORK_ID
		     , A.WORK_NM
		     , A.WORK_GUBUN
		     , CASE A.WORK_GUBUN WHEN 'IN'  THEN CASE A.SOURCE_TYP WHEN 'DB'   THEN '수신(DB)' 
		     													   WHEN 'FILE' THEN '수신(FILE)' END
					             WHEN 'OUT' THEN '송신'
					             WHEN 'EXE_SP'  THEN '쿼리실행'
					             WHEN 'EXE_CMD' THEN '명령실행' END AS WORK_GUBUN_NM
		     , A.SOURCE_TYP
		     , A.JDBC_DRIVER
		     , A.JDBC_URL
		     , A.USER_ID
		     , A.USER_PW
		     , A.SEL_QUERY
		     , A.FILE_PATH
		     , A.FILE_NM
		     , A.FILE_ENCODE
		     , A.FILE_DELIMITER
		     , A.EXE_QUERY
		     , A.HIDE_YN
		     , A.RETRY_CNT
		     , A.FILE_DAYS
		     , B.SCHE_ID
		     , B.SCHE_NM
		     , B.REP_CYCLE
		     , TO_CHAR(TO_DATE(B.STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS STR_DT
	    	 , TO_CHAR(TO_DATE(B.STR_TM, 'HH24MI'), 'HH24:MI')		AS STR_TM
   	   	     , TO_CHAR(TO_DATE(B.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS END_DT
		     , TO_CHAR(TO_DATE(B.END_TM, 'HH24MI'), 'HH24:MI')		AS END_TM
		  FROM TB_CM_BATCH_WORK A INNER JOIN TB_CM_BATCH_WORK_SCHE B
		    ON A.TENANT_ID = B.TENANT_ID
		   AND A.WORK_ID   = B.WORK_ID
		 WHERE ( ( I_TENANT_ID  IS NULL AND 1 = 1) OR I_TENANT_ID  IS NOT NULL AND INSTR( I_TENANT_ID, A.TENANT_ID) > 0)
		   AND ( ( I_WORK_GUBUN IS NULL AND 1 = 1) OR I_WORK_GUBUN IS NOT NULL AND INSTR( I_WORK_GUBUN, A.WORK_GUBUN) > 0)
		   AND ( ( I_WORK_NM    IS NULL AND 1 = 1) OR I_WORK_NM    IS NOT NULL AND INSTR( I_WORK_NM, A.WORK_NM) > 0)
		   AND ( ( I_HIDE_YN    IS NULL AND 1 = 1) OR I_HIDE_YN    IS NOT NULL AND INSTR( I_HIDE_YN, A.HIDE_YN) > 0) 
		 ORDER BY A.TENANT_ID, A.WORK_ID;

         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1020M01_02" (
	  I_TENANT_ID  IN VARCHAR2
	, I_LOGIN_ID   IN VARCHAR2
	, I_WORK_ID    IN VARCHAR2
	, I_SCHE_ID    IN VARCHAR2
	, I_HIDE_YN    IN VARCHAR2
) AS 

/******************************************************************************
   NAME:       SP_MNG1020M01_02
   PURPOSE:    배치관리 - 배치작업 사용여부 변경

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/06
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG1020M01_02';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	
BEGIN
		
	UPDATE TB_CM_BATCH_WORK
	   SET HIDE_YN = I_HIDE_YN
	     , MODIFY_AGENT_ID = I_LOGIN_ID
	     , MODIFY_DT = SYSTIMESTAMP
	 WHERE TENANT_ID = I_TENANT_ID
	   AND WORK_ID   = I_WORK_ID  ;
	   
	   
	UPDATE TB_CM_BATCH_WORK_SCHE
	   SET HIDE_YN = I_HIDE_YN
	     , MODIFY_AGENT_ID = I_LOGIN_ID
	     , MODIFY_DT = SYSTIMESTAMP
	 WHERE TENANT_ID = I_TENANT_ID
	   AND WORK_ID   = I_WORK_ID
	   AND SCHE_ID   = I_SCHE_ID  ;	   
	  
	          		   
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1020M01_03" (
	  I_TENANT_ID  IN VARCHAR2
	, I_WORK_ID    IN VARCHAR2
	, I_SCHE_ID    IN VARCHAR2
) AS 

/******************************************************************************
   NAME:       SP_MNG1020M01_03
   PURPOSE:    배치관리 - 배치작업 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/11
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG1020M01_03';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	
BEGIN
		
	DELETE
	  FROM TB_CM_BATCH_WORK
	 WHERE TENANT_ID = I_TENANT_ID
	   AND WORK_ID   = I_WORK_ID ;	
		
	
	DELETE
	  FROM TB_CM_BATCH_WORK_SCHE
	 WHERE TENANT_ID = I_TENANT_ID
	   AND WORK_ID   = I_WORK_ID
	   AND SCHE_ID   = I_SCHE_ID ;
	   
	   	  
	          		   
	COMMIT;
      

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1020S01_01" (
	I_TENANT_ID       IN VARCHAR2
  , I_LOGIN_ID        IN VARCHAR2
  , I_WORK_ID         IN VARCHAR2
  , I_WORK_NM         IN VARCHAR2
  , I_WORK_GUBUN      IN VARCHAR2
  , I_SOURCE_TYP      IN VARCHAR2
  , I_JDBC_DRIVER     IN VARCHAR2
  , I_JDBC_URL        IN VARCHAR2
  , I_USER_ID         IN VARCHAR2
  , I_USER_PW         IN VARCHAR2
  , I_SEL_QUERY       IN VARCHAR2
  , I_FILE_PATH       IN VARCHAR2
  , I_FILE_NM         IN VARCHAR2
  , I_FILE_ENCODE     IN VARCHAR2
  , I_FILE_DELIMITER  IN VARCHAR2
  , I_FILE_DAYS       IN VARCHAR2
  , I_EXE_QUERY       IN VARCHAR2
  , I_RETRY_CNT       IN VARCHAR2
  , O_CUR_LIST        OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG1020S01_01
   PURPOSE:    배치관리 - 배치작업 등록/수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/07
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		 := SYSDATE;
    v_work_date_str TIMESTAMP    := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP    := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1020S01_01';
    v_work_result   VARCHAR2(1)  := 'F';
    v_work_count    NUMBER 		 := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
	V_BATCH_WORK_ID TB_CM_BATCH_WORK.WORK_ID%TYPE ;
    
BEGIN

	 -- V_WORK_ID 생성
	SELECT CASE WHEN MAX(TO_NUMBER(WORK_ID)) + 1 IS NULL THEN '1'
	            ELSE TO_CHAR(MAX(TO_NUMBER(WORK_ID)) + 1) END
      INTO V_BATCH_WORK_ID 
      FROM TB_CM_BATCH_WORK ;

	
	     MERGE INTO TB_CM_BATCH_WORK T
	  	 USING (SELECT I_WORK_ID AS WORK_ID
	              FROM DUAL ) S
	        ON ( T.WORK_ID = S.WORK_ID )
	                    
			WHEN MATCHED THEN
			
				UPDATE SET TENANT_ID       = I_TENANT_ID
				         , WORK_NM         = I_WORK_NM       
						 , WORK_GUBUN      = I_WORK_GUBUN    
						 , SOURCE_TYP      = I_SOURCE_TYP    
						 , JDBC_DRIVER     = I_JDBC_DRIVER   
						 , JDBC_URL        = I_JDBC_URL      
						 , USER_ID         = I_USER_ID       
						 , USER_PW         = I_USER_PW       
						 , SEL_QUERY       = I_SEL_QUERY     
						 , FILE_PATH       = I_FILE_PATH     
						 , FILE_NM         = I_FILE_NM       
						 , FILE_ENCODE     = I_FILE_ENCODE   
						 , FILE_DELIMITER  = I_FILE_DELIMITER
						 , FILE_DAYS       = I_FILE_DAYS     
						 , EXE_QUERY       = I_EXE_QUERY     
						 , RETRY_CNT       = I_RETRY_CNT     
					     , MODIFY_AGENT_ID = I_LOGIN_ID
					     , MODIFY_DT       = SYSTIMESTAMP             
					
			WHEN NOT MATCHED THEN
			
				 INSERT ( TENANT_ID
				        , WORK_ID
				        , WORK_NM        
						, WORK_GUBUN     
						, SOURCE_TYP     
						, JDBC_DRIVER    
						, JDBC_URL       
						, USER_ID        
						, USER_PW        
						, SEL_QUERY      
						, FILE_PATH      
						, FILE_NM        
						, FILE_ENCODE    
						, FILE_DELIMITER 
						, FILE_DAYS      
						, EXE_QUERY      
						, RETRY_CNT
						, HIDE_YN
						, CREATE_AGENT_ID
						, CREATE_DT      
 	           ) VALUES ( I_TENANT_ID
	                    , V_BATCH_WORK_ID
	                    , I_WORK_NM       
						, I_WORK_GUBUN    
						, I_SOURCE_TYP    
						, I_JDBC_DRIVER   
						, I_JDBC_URL      
						, I_USER_ID       
						, I_USER_PW       
						, I_SEL_QUERY     
						, I_FILE_PATH     
						, I_FILE_NM       
						, I_FILE_ENCODE   
						, I_FILE_DELIMITER
						, I_FILE_DAYS     
						, I_EXE_QUERY     
						, I_RETRY_CNT
						, '1'     
						, I_LOGIN_ID
						, SYSTIMESTAMP
	          		    ) ;	    
	          		    
	    OPEN O_CUR_LIST FOR 
	    
	    SELECT V_BATCH_WORK_ID AS WORK_ID FROM DUAL;

	
	COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1020S01_02" (
	I_TENANT_ID  IN VARCHAR2
  , I_LOGIN_ID   IN VARCHAR2
  , I_SCHE_ID    IN VARCHAR2
  , I_WORK_ID    IN VARCHAR2
  , I_SCHE_NM    IN VARCHAR2
  , I_REP_CYCLE  IN VARCHAR2
  , I_STR_DT     IN VARCHAR2
  , I_STR_TM     IN VARCHAR2
  , I_END_DT     IN VARCHAR2
  , I_END_TM     IN VARCHAR2
) AS
/******************************************************************************
   NAME:       SP_MNG1020S01_02
   PURPOSE:    배치관리 - 배치 스케줄 등록/수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/10
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1020S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
	V_SCHE_ID TB_CM_BATCH_WORK_SCHE.SCHE_ID%TYPE ;
    
BEGIN

	 -- V_SCHE_ID 생성
	SELECT CASE WHEN LPAD(MAX(TO_NUMBER(SCHE_ID)) + 1, 10, 0) IS NULL THEN '0000000001' 
	            ELSE LPAD(MAX(TO_NUMBER(SCHE_ID)) + 1, 10, 0) END
      INTO V_SCHE_ID
      FROM TB_CM_BATCH_WORK_SCHE ;
      
      
	     MERGE INTO TB_CM_BATCH_WORK_SCHE T
	  	 USING (SELECT I_SCHE_ID  AS SCHE_ID
	                 , I_WORK_ID  AS WORK_ID
	              FROM DUAL ) S
	        ON ( T.WORK_ID = S.WORK_ID AND T.SCHE_ID = S.SCHE_ID )

			WHEN MATCHED THEN
			
				UPDATE SET TENANT_ID = I_TENANT_ID
				         , SCHE_NM   = I_SCHE_NM     
				         , REP_CYCLE = I_REP_CYCLE
				         , STR_DT    = I_STR_DT
				         , STR_TM    = I_STR_TM
				         , END_DT    = I_END_DT
				         , END_TM    = I_END_TM
					     , MODIFY_AGENT_ID = I_LOGIN_ID
					     , MODIFY_DT       = SYSTIMESTAMP             
					
			WHEN NOT MATCHED THEN
			
				 INSERT ( TENANT_ID
				        , SCHE_ID
				        , SCHE_NM
				        , WORK_ID
				        , REP_CYCLE
				        , STR_DT
				        , STR_TM
				        , END_DT
				        , END_TM
				        , HIDE_YN
						, CREATE_AGENT_ID
						, CREATE_DT      
 	           ) VALUES ( I_TENANT_ID
	                    , V_SCHE_ID
						, I_SCHE_NM
						, I_WORK_ID
						, I_REP_CYCLE
						, I_STR_DT
						, I_STR_TM
						, I_END_DT
						, I_END_TM
						, '1'     
						, I_LOGIN_ID
						, SYSTIMESTAMP
	          		    ) ;	    


	COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

create or replace PROCEDURE SP_MNG1030M01_01 (
	I_FRM_DT		IN	VARCHAR2
	,I_END_DT		IN	VARCHAR2
	,I_TENANT_ID    IN  VARCHAR2
	,I_WORK_RESULT  IN  VARCHAR2
	,O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG1030M01_01
   PURPOSE:    배치 결과 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/27  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_MNG1030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	SELECT 
		(SELECT T.TENANT_ID || ' (' || T.TENANT_NAME || ')' FROM TB_CM_TENANT_INFO T WHERE T.TENANT_ID = A.TENANT_ID) AS TENANT_ID
		,TO_CHAR(A.WORK_DATE_STR, 'YYYY-MM-DD hh24:mi:ss') AS WORK_DATE_STR_DT
		,TO_CHAR(A.WORK_DATE_END, 'YYYY-MM-DD hh24:mi:ss') AS WORK_DATE_END_DT
		,FN_CM_GET_TIME_FORMAT(FN_CM_GET_TIME_DIFF_TO_SECOND(TO_CHAR(A.WORK_DATE_STR, 'YYYYMMDDhh24miss'), TO_CHAR(A.WORK_DATE_END, 'YYYYMMDDhh24miss'))) AS WORK_TM
		,B.WORK_NM
		,CASE WHEN A.WORK_RESULT='S' THEN '성공' ELSE '실패' END AS WORK_RESULT
		,A.BIGO
		,A.SCH_ID
	FROM TB_CM_BATCH_WORK_LOG A 
	INNER JOIN TB_CM_BATCH_WORK B ON A.TENANT_ID = B.TENANT_ID AND A.WORK_ID = B.WORK_ID
	WHERE A.WORK_DATE BETWEEN I_FRM_DT AND I_END_DT
	  AND (( I_TENANT_ID   IS NULL AND 1 = 1) OR I_TENANT_ID   IS NOT NULL AND A.TENANT_ID = I_TENANT_ID )
	  AND (( I_WORK_RESULT IS NULL AND 1 = 1) OR I_WORK_RESULT IS NOT NULL AND A.WORK_RESULT = I_WORK_RESULT) 
	ORDER BY A.WORK_DATE_STR DESC
	;
    
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1040M01_01" (
    I_MODULE_GUBUN  IN VARCHAR2  
  , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG1040M01_01
   PURPOSE:    테이블 관리 - 테이블 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/12
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG1040M01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
			
		SELECT A.SEGMENT_NAME     AS TABLE_NM
		     , A.BYTES/1024/1024  AS TABLE_SIZE
		     , B.NUM_ROWS 		  AS TABLE_ROWS
		  FROM DBA_SEGMENTS A INNER JOIN DBA_TABLES B
		    ON A.OWNER = B.OWNER
		   AND A.SEGMENT_NAME = B.TABLE_NAME
		   AND A.TABLESPACE_NAME = B.TABLESPACE_NAME
		 WHERE A.SEGMENT_TYPE = 'TABLE'
		   AND A.SEGMENT_NAME LIKE I_MODULE_GUBUN || '%' 
		 ORDER BY A.SEGMENT_NAME ASC;
		
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1040M01_02" (
    I_TABLE_NM    IN VARCHAR2  
  , O_CUR_LIST    OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG1040M01_02
   PURPOSE:    테이블 관리 - 컬럼 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/12
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG1040M01_02';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
			
		SELECT A.COLUMN_NAME 	 AS COLUMN_NM
		     , A.DATA_TYPE       AS COL_DATA_TYPE
		     , C.COMMENTS        AS COL_COMMENT
   		     , ( CASE B.CONSTRAINT_TYPE WHEN 'P' THEN '1' ELSE '0' END ) 	   AS TABLE_PK
		     , ( CASE A.CHAR_LENGTH WHEN 0 THEN NULL ELSE A.CHAR_LENGTH END) AS COL_SIZE
		  FROM USER_TAB_COLUMNS A
	      LEFT OUTER JOIN 
	      ( SELECT T1.OWNER
	             , T1.TABLE_NAME
	             , T1.COLUMN_NAME
	             , T2.CONSTRAINT_TYPE
	          FROM USER_CONS_COLUMNS T1 INNER JOIN USER_CONSTRAINTS T2
				ON T1.CONSTRAINT_NAME = T2.CONSTRAINT_NAME
	 		   AND T1.TABLE_NAME = T2.TABLE_NAME
	 		   AND T1.CONSTRAINT_NAME = T2.CONSTRAINT_NAME
			 WHERE T2.CONSTRAINT_TYPE = 'P') B
			    ON A.TABLE_NAME = B.TABLE_NAME
			   AND A.COLUMN_NAME = B.COLUMN_NAME
		 INNER JOIN USER_COL_COMMENTS C
		    ON A.TABLE_NAME  = C.TABLE_NAME
		   AND A.COLUMN_NAME = C.COLUMN_NAME
		 WHERE A.TABLE_NAME  = I_TABLE_NM
		 ORDER BY COLUMN_ID	;
		
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1040M01_03" (
    O_CUR_LIST    OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG1040M01_03
   PURPOSE:    테이블 관리 - 테이블 컬럼 데이터 보관 주기 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/13
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG1040M01_03';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
			
		SELECT PERIOD_ID
		     , TABLE_NM
		     , COLUMN_NM
		     , STORAGE_PERIOD
		     , EXE_QUERY
		  FROM TB_CM_DATA_STORAGE_PERIOD
		 WHERE 1 = 1 
		 ORDER BY TABLE_NM, COLUMN_NM ASC	;
		
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1040M01_04" (
	I_PERIOD_ID  IN VARCHAR2
) AS
/******************************************************************************
   NAME:       SP_MNG1040M01_04
   PURPOSE:    테이블 관리 - 테이블 컬럼 데이터 보관 주기 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/13
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG1040M01_04';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
       
BEGIN

	DELETE 
	  FROM TB_CM_DATA_STORAGE_PERIOD
	 WHERE PERIOD_ID = I_PERIOD_ID	;


	COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG1040S01_01" (
    I_LOGIN_ID   IN VARCHAR2
  , I_PERIOD_ID  IN VARCHAR2
  , I_TABLE_NM   IN VARCHAR2
  , I_COLUMN_NM  IN VARCHAR2
  , I_STORE_DAYS IN VARCHAR2
  , I_EXE_QUERY  IN VARCHAR2
) AS
/******************************************************************************
   NAME:       SP_MNG1040S01_01
   PURPOSE:    테이블 관리 - 테이블 컬럼 데이터 보관 주기 등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/13
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG1040S01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
	V_PERIOD_ID TB_CM_DATA_STORAGE_PERIOD.PERIOD_ID%TYPE ;
    
BEGIN

	 -- V_PERIOD_ID 생성
	SELECT CASE WHEN LPAD(MAX(TO_NUMBER(PERIOD_ID)) + 1, 10, 0) IS NULL THEN '0000000001' 
	            ELSE LPAD(MAX(TO_NUMBER(PERIOD_ID)) + 1, 10, 0) END
      INTO V_PERIOD_ID
      FROM TB_CM_DATA_STORAGE_PERIOD	;
      
      
	     MERGE INTO TB_CM_DATA_STORAGE_PERIOD T
	  	 USING (SELECT I_PERIOD_ID  AS PERIOD_ID
	              FROM DUAL ) S
	        ON ( T.PERIOD_ID = S.PERIOD_ID )

			WHEN MATCHED THEN
			
				UPDATE SET TABLE_NM  = I_TABLE_NM
				         , COLUMN_NM = I_COLUMN_NM
				         , STORAGE_PERIOD  = I_STORE_DAYS
				         , EXE_QUERY       = I_EXE_QUERY
					     , MODIFY_AGENT_ID = I_LOGIN_ID
					     , MODIFY_DT       = SYSTIMESTAMP             
					
			WHEN NOT MATCHED THEN
			
				 INSERT ( PERIOD_ID
				        , TABLE_NM
				        , COLUMN_NM
				        , STORAGE_PERIOD
				        , EXE_QUERY
						, CREATE_AGENT_ID
						, CREATE_DT      
 	           ) VALUES ( V_PERIOD_ID
	                    , I_TABLE_NM
	                    , I_COLUMN_NM
	                    , I_STORE_DAYS
	                    , I_EXE_QUERY
						, I_LOGIN_ID
						, SYSTIMESTAMP
	          		    ) ;	    


	COMMIT; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG_DASHBOARD01_01" (
	O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG_DASHBOARD01_01
   PURPOSE:    관리자 메인 DASHBOARD - License Information 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/26
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG_DASHBOARD01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 

		SELECT TO_CHAR(TO_DATE(SNO,'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS INSERT_DT
		     , SNO
		     , LICENSE
		     , COMPANY_NM
		     , MAC_LIST
		     , MAC_LIST_ENC
		     , TENANT_CNT
		     , SERVICEABLE_YN
		     , VERSION
		  FROM TB_CM_LICENSE	;
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG_DASHBOARD01_02" (
	O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG_DASHBOARD01_02
   PURPOSE:    관리자 메인 DASHBOARD - License Information : TENANT 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/26
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG_DASHBOARD01_02';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 

		SELECT A.TENANT_ID
			 , A.TENANT_NAME AS TENANT_NM
			 , CASE A.LICENSE_TYPE WHEN 'Registered' THEN '정식'
			                       WHEN 'Trial' THEN '임시' END   AS LICENSE_TYPE
			 , FN_CM_STRING_FORMAT(A.USE_FRM_YMD, '@@@@-@@-@@') AS USE_FRM_YMD
			 , FN_CM_STRING_FORMAT(A.USE_END_YMD, '@@@@-@@-@@') AS USE_END_YMD
			 , NVL(B.CUR_USER_CNT,0) || ' / ' || A.USER_CNT || ' (' || ROUND(NVL(B.CUR_USER_CNT,0)*100/A.USER_CNT, 1) || '%)' AS USER_CNT
			 , A.ARGOCM_YN AS CM
			 , A.ARGOHR_YN AS HR
			 , A.ARGOEDU_YN AS EDU
			 , A.ARGOQA_YN AS QA
			 , A.ARGOKPI_YN AS KPI
		  FROM TB_CM_TENANT_INFO A
		  LEFT OUTER JOIN (	SELECT A.TENANT_ID, COUNT(A.AGENT_ID) AS CUR_USER_CNT 
							  FROM TB_CM_USER_MASTER A 
							 INNER JOIN TB_CM_DEPT_CD B ON A.TENANT_ID = B.TENANT_ID AND A.DEPT_CD = B.DEPT_CD
						     WHERE A.SABUN NOT LIKE '%_ADMIN' --자동생성계정 제외
						       AND A.JAEJIK_GUBUN = '10' --재직자만
						     GROUP BY A.TENANT_ID) B
		    ON A.TENANT_ID = B.TENANT_ID	;
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG_DASHBOARD02_01" (
	O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG_DASHBOARD02_01
   PURPOSE:    관리자 메인 DASHBOARD - Table Space 사용 현황

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/26
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG_DASHBOARD02_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 

		SELECT SUBSTR(A.TABLESPACE_NAME, 1, 30) "TABLESPACE_NAME"
  	         , ROUND(SUM(A.TOTAL)/1024/1024, 1) "TOTAL(MB)"
	         , ROUND(SUM(A.TOTAL)/1024/1024, 1)-ROUND(SUM(A.FREE_SPACE)/1024/1024, 1) "USED(MB)"
	         , ROUND(SUM(A.FREE_SPACE)/1024/1024, 1) "FREE(MB)"
	         , ROUND((ROUND(SUM(A.TOTAL)/1024/1024, 1)-ROUND(SUM(A.FREE_SPACE)/1024/1024, 1))/ROUND(SUM(A.TOTAL)/1024/1024, 1)*100, 1) "USED(%)"
		  FROM ( SELECT TABLESPACE_NAME
 		              , 0 TOTAL
		              , SUM(BYTES) FREE_SPACE
		           FROM DBA_FREE_SPACE
		          GROUP BY TABLESPACE_NAME
  
  			      UNION
			     
			     SELECT TABLESPACE_NAME
			          , SUM(BYTES) TOTAL
			          , 0
		           FROM DBA_DATA_FILES
			      GROUP BY TABLESPACE_NAME
			    ) A
		 GROUP BY A.TABLESPACE_NAME
		 ORDER BY TABLESPACE_NAME;
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG_DASHBOARD03_01" (
	O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG_DASHBOARD03_01
   PURPOSE:    관리자 메인 DASHBOARD - 배치오류목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/26
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG_DASHBOARD03_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
	SELECT 
		(SELECT T.TENANT_ID || ' (' || T.TENANT_NAME || ')' FROM TB_CM_TENANT_INFO T WHERE T.TENANT_ID = A.TENANT_ID) AS TENANT_ID
		,B.WORK_NM
		,A.SCH_ID
		,TO_CHAR(A.WORK_DATE_STR, 'YYYY-MM-DD hh24:mi:ss') AS WORK_DATE_STR_DT
		,TO_CHAR(A.WORK_DATE_END, 'YYYY-MM-DD hh24:mi:ss') AS WORK_DATE_END_DT
		,FN_CM_GET_TIME_FORMAT(FN_CM_GET_TIME_DIFF_TO_SECOND(TO_CHAR(A.WORK_DATE_STR, 'YYYYMMDDhh24miss'), TO_CHAR(A.WORK_DATE_END, 'YYYYMMDDhh24miss'))) AS WORK_TM
		,CASE WHEN A.WORK_RESULT='S' THEN '성공' ELSE '실패' END AS WORK_RESULT
		,A.BIGO
	FROM TB_CM_BATCH_WORK_LOG A 
	INNER JOIN TB_CM_BATCH_WORK B ON A.TENANT_ID = B.TENANT_ID AND A.WORK_ID = B.WORK_ID
	WHERE A.WORK_DATE BETWEEN SYSDATE - 30 AND SYSDATE
	  AND A.WORK_RESULT = 'F' --실패건만
	ORDER BY A.WORK_DATE_STR DESC
	;
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_MNG_DASHBOARD04_01" (
	O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_MNG_DASHBOARD04_01
   PURPOSE:    관리자 메인 DASHBOARD - 배치오류목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/26
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_MNG_DASHBOARD04_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
	SELECT 
		TO_CHAR(WORK_DATE_STR, 'YYYY-MM-DD hh24:mi:ss') AS WORK_DATE_STR
		,WORK_ID
		,BIGO
	  FROM TB_LOG_DB
	 WHERE WORK_DATE BETWEEN SYSDATE - 30 AND SYSDATE
	ORDER BY WORK_DATE_STR DESC;
         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1020M01_01 
(
    I_TENANT_ID  IN  VARCHAR2
  , I_SHEET_NM   IN  VARCHAR2
  , I_AGENT_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_QA1020M01_01
   PURPOSE:    평가표관리 - HEADER정보조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/03
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA1020M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
	OPEN O_CUR_LIST FOR 
		SELECT
			A.SHEET_ID
			, A.SHEET_NM
			, B.SCORE AS TOTAL_SCORE
			, FN_CM_GET_CODE_NM(I_TENANT_ID, 'QA_SHEET_TYPE', A.QA_SHEET_TYPE) AS SHEET_TYPE_NM
			, A.QA_SHEET_TYPE AS SHEET_TYPE
			, A.HIDE_YN
			, A.VALUE_YN
			, FN_CM_GET_AGENT_NM(I_TENANT_ID, A.CREATE_AGENT_ID) || ' (' || FN_CM_GET_AGENT_SABUN(I_TENANT_ID, A.CREATE_AGENT_ID) || ')' AS AGENT_NM
			, TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT
			, (SELECT COUNT(S.SHEETKEY) FROM TB_QA_VALUE_RESULT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID) AS VALUE_CNT
		FROM TB_QA_SHEET_HEADER A
		LEFT OUTER JOIN (
			SELECT
				TENANT_ID, SHEET_ID, SUM(SCORE) AS SCORE
			FROM TB_QA_SHEET_DETAIL
			WHERE PLUS_MINUS = 0
			AND QA_SEBU_CD = '0'
			GROUP BY TENANT_ID, SHEET_ID
		) B ON A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID
		WHERE 1=1
		AND A.TENANT_ID = I_TENANT_ID
		AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, A.CREATE_AGENT_ID) > 0))
		AND (( I_SHEET_NM IS NULL AND 1=1 ) OR (I_SHEET_NM IS NOT NULL AND INSTR(A.SHEET_NM, I_SHEET_NM) > 0))
		ORDER BY A.SHEET_ID DESC;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1020M01_02
(
    I_TENANT_ID  IN  VARCHAR2
  , I_SHEET_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_QA1020M01_02
   PURPOSE:    평가표내용

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/03
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA1020M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
      	SELECT 
		    A.MAJOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
			, A.MINOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
			, A.QA_SEBU_CD
			, FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_SEBU_CD', A.QA_SEBU_CD) AS QA_SEBU_NM 
			, A.SHEET_TEXT
			, A.SCORE
			, A.PLUS_MINUS
		FROM TB_QA_SHEET_DETAIL A
		WHERE 1=1
		AND A.TENANT_ID = I_TENANT_ID
		AND A.SHEET_ID = I_SHEET_ID;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE "SP_QA1020M01_03" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA1020M01_03
   PURPOSE:    평가표관리-복사

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/20
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1020M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    V_SHEET_ID TB_QA_SHEET_HEADER.SHEET_ID%TYPE ;

    
 BEGIN
 
-- ********************************************************************************
-- 0.KEY 생성
-- ******************************************************************************** 
 -- I_SHEET_ID 생성
     SELECT 
	    CASE WHEN CHK.SHEET_ID is null THEN TO_CHAR(sysdate, 'YYYYMM')||'0001'
	    ELSE TO_CHAR(sysdate, 'YYYYMM')||SUBSTR(CHK.SHEET_ID,7,4)
	    END INTO V_SHEET_ID
	 FROM
	   (SELECT 
	      MAX(SHEET_ID+1) AS SHEET_ID
	      FROM TB_QA_SHEET_HEADER WHERE 1=1 
		  and TO_CHAR(CREATE_DT, 'YYYYMM') = TO_CHAR(sysdate, 'YYYYMM')) CHK; 

-- ********************************************************************************
-- 1.  평가표  복사
-- ********************************************************************************            

		INSERT INTO TB_QA_SHEET_HEADER(
				   TENANT_ID
	              ,SHEET_ID
	              ,SHEET_NM
	              ,QA_SHEET_TYPE
	              ,HIDE_YN
	              ,VALUE_YN
	              ,CREATE_AGENT_ID
	              ,CREATE_DT
	              ,MODIFY_AGENT_ID
	              ,MODIFY_DT
	      ) SELECT TENANT_ID
	              , V_SHEET_ID AS SHEET_ID
	              , SHEET_NM||' - 복사본' AS SHEET_NM
	              , QA_SHEET_TYPE
	              , HIDE_YN
	              , '0'
	              , I_LOGIN_ID AS CREATE_AGENT_ID
	              , SYSTIMESTAMP AS CREATE_DT
	              , I_LOGIN_ID AS MODIFY_AGENT_ID
	              , SYSTIMESTAMP AS MODIFY_DT
			FROM TB_QA_SHEET_HEADER
			WHERE TENANT_ID = I_TENANT_ID 
	        AND SHEET_ID  = I_SHEET_ID;
	        	      
	    COMMIT; 
	    
-- ********************************************************************************
-- 2. 평가내용 복사
-- ********************************************************************************             
  		INSERT INTO TB_QA_SHEET_DETAIL(
				   TENANT_ID
	              , SHEET_ID
	              , MAJOR_CD
	              , MINOR_CD
	              , QA_SEBU_CD
	              , SHEET_TEXT
	              , SCORE
	              , PLUS_MINUS
	              , CREATE_AGENT_ID
	              , CREATE_DT
	              , MODIFY_AGENT_ID
	              , MODIFY_DT
  		)SELECT TENANT_ID
  			, V_SHEET_ID AS SHEET_ID
		    , MAJOR_CD
			, MINOR_CD
			, QA_SEBU_CD
			, SHEET_TEXT
			, SCORE
			, PLUS_MINUS
			, I_LOGIN_ID AS CREATE_AGENT_ID
	        , SYSTIMESTAMP AS CREATE_DT
	        , I_LOGIN_ID AS MODIFY_AGENT_ID
	        , SYSTIMESTAMP AS MODIFY_DT
		FROM TB_QA_SHEET_DETAIL 
		WHERE 1=1
		AND TENANT_ID = I_TENANT_ID 
		AND SHEET_ID = I_SHEET_ID;
		
	 COMMIT;



EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA1020M01_04" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SHEET_ID	      IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA1020M01_04
   PURPOSE:    평가표관리-평가표 삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1020M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.등록/수정/삭제
-- ******************************************************************************** 
	  
	DELETE FROM TB_QA_SHEET_HEADER
	WHERE TENANT_ID = I_TENANT_ID
		AND SHEET_ID = I_SHEET_ID;
	
	DELETE FROM TB_QA_SHEET_DETAIL
	WHERE TENANT_ID = I_TENANT_ID
		AND SHEET_ID = I_SHEET_ID;
  
-- ********************************************************************************
-- 1. 관리소속  삭제
-- ********************************************************************************             
	DELETE FROM TB_CM_ACCESS_SCOPE 
	WHERE TENANT_ID = I_TENANT_ID
		AND SCOPE_GUBUN ='40'
		AND ITEM_ID = I_SHEET_ID;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA1020S02_01" (
	 I_TENANT_ID      IN VARCHAR2
	,I_GUBUN      	  IN VARCHAR2
    ,I_MAJOR_CD	      IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_QA1020S02_01
   PURPOSE:    평가항목편집 콤보박스

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/09
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1020S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 	
	  IF I_GUBUN ='A' THEN
	  OPEN O_CUR_LIST FOR    
		SELECT 
			MAJOR_CD AS CODE
			, ITEM_NM AS CODE_NM
		FROM TB_QA_SHEET_ITEM
		WHERE TENANT_ID = I_TENANT_ID
		AND MINOR_CD = '00000'
		AND HIDE_YN = 0
		ORDER BY SORT_SEQ;
	          
	  ELSIF I_GUBUN ='B' THEN
	  OPEN O_CUR_LIST FOR
	  	SELECT 
			MINOR_CD AS CODE
			, ITEM_NM AS CODE_NM
		FROM TB_QA_SHEET_ITEM
		WHERE TENANT_ID = I_TENANT_ID
		AND MAJOR_CD = I_MAJOR_CD
		AND MINOR_CD <> '00000'
		AND HIDE_YN = 0
		ORDER BY SORT_SEQ;
	          
	  END IF;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA1020S02_02" (
	 I_TENANT_ID      IN VARCHAR2
	,I_SHEET_ID    	  IN VARCHAR2
    ,I_MAJOR_CD	      IN VARCHAR2
    ,I_MINOR_CD	      IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA1020S02_02
   PURPOSE:    평가항목

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/09
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1020S02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
	  OPEN O_CUR_LIST FOR    
		SELECT 
			  A.QA_SEBU_CD
			, A.SHEET_TEXT
			, A.SCORE
			, A.PLUS_MINUS
		FROM TB_QA_SHEET_DETAIL A
		WHERE 1=1
		AND A.TENANT_ID = I_TENANT_ID
		AND A.SHEET_ID = I_SHEET_ID
		AND A.MAJOR_CD = I_MAJOR_CD
		AND A.MINOR_CD = I_MINOR_CD;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA1020S02_03" (
	  I_TENANT_ID   IN VARCHAR2
	, I_AGENT_ID    IN VARCHAR2
	, I_CUD_GUBUN   IN VARCHAR2  /* C/U/D  */
    , I_SHEET_ID	IN VARCHAR2
    , I_SHEET_TEXT	IN VARCHAR2
    , I_MAJOR_CD 	IN VARCHAR2
    , I_MINOR_CD 	IN VARCHAR2
    , I_QA_SEBU_CD 	IN VARCHAR2
    , I_SCORE	    IN VARCHAR2
    , I_PLUS_MINUS  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA1020S02_03
   PURPOSE:    평가표관리-평가내용 데이터 컨트롤

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1020S02_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

    
 BEGIN
 
-- ********************************************************************************
-- 0.등록/수정/삭제
-- ******************************************************************************** 
	  IF (I_CUD_GUBUN ='D') THEN
	        
	   DELETE FROM TB_QA_SHEET_DETAIL
	   WHERE TENANT_ID = I_TENANT_ID
	   AND SHEET_ID = I_SHEET_ID
	   AND MAJOR_CD = I_MAJOR_CD
	   AND MINOR_CD = I_MINOR_CD;
	          
	  ELSIF (I_CUD_GUBUN ='U') THEN
	  
	  	MERGE INTO TB_QA_SHEET_DETAIL T
	    USING (SELECT  I_TENANT_ID  AS TENANT_ID
	                  ,I_SHEET_ID   AS SHEET_ID
	                  ,I_SHEET_TEXT AS SHEET_TEXT
	                  ,I_MAJOR_CD   AS MAJOR_CD
	                  ,I_MINOR_CD   AS MINOR_CD
	                  ,I_QA_SEBU_CD AS QA_SEBU_CD
	                  ,I_SCORE      AS SCORE
	                  ,I_PLUS_MINUS AS PLUS_MINUS
	             FROM DUAL ) S
	    ON ( T.TENANT_ID = S.TENANT_ID 
	    	 AND T.SHEET_ID = S.SHEET_ID
	    	 AND T.MAJOR_CD = S.MAJOR_CD
	    	 AND T.MINOR_CD = S.MINOR_CD
	    	 AND T.QA_SEBU_CD = S.QA_SEBU_CD )
	    WHEN MATCHED THEN
	      UPDATE SET SHEET_TEXT      = S.SHEET_TEXT
	                ,SCORE 		     = S.SCORE
	                ,PLUS_MINUS 	 = S.PLUS_MINUS
	                ,MODIFY_AGENT_ID = I_AGENT_ID
	                ,MODIFY_DT       = SYSTIMESTAMP
	    WHEN NOT MATCHED THEN
	      INSERT( TENANT_ID
			      ,SHEET_ID
			      ,MAJOR_CD
			      ,MINOR_CD
			      ,QA_SEBU_CD
			      ,SHEET_TEXT,SCORE
			      ,PLUS_MINUS 
			      ,CREATE_AGENT_ID
			      ,CREATE_DT
	      ) VALUES (S.TENANT_ID
			      ,S.SHEET_ID
			      ,S.MAJOR_CD
			      ,S.MINOR_CD
			      ,S.QA_SEBU_CD
			      ,S.SHEET_TEXT
			      ,S.SCORE
			      ,S.PLUS_MINUS 
	              ,I_AGENT_ID
	              ,SYSTIMESTAMP
	     );
	  
	  END IF;
	         
	  COMMIT; 


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA1020S04_01" (
	 I_TENANT_ID      IN VARCHAR2
	,I_GUBUN      	  IN VARCHAR2
    ,I_MAJOR_CD	      IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_QA1020S04_01
   PURPOSE:    평가표관리-평가항목관리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1020S04_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 	
	  IF I_GUBUN ='A' THEN
	  OPEN O_CUR_LIST FOR    
		SELECT 
			MAJOR_CD
			, MINOR_CD
			, ITEM_NM
			, HIDE_YN
		FROM TB_QA_SHEET_ITEM
		WHERE TENANT_ID = I_TENANT_ID
		AND MINOR_CD = '00000'
		ORDER BY SORT_SEQ;
	          
	  ELSIF I_GUBUN ='B' THEN
	  OPEN O_CUR_LIST FOR
	  	SELECT 
			A.MAJOR_CD
			, A.MINOR_CD
			, A.ITEM_NM
			, A.HIDE_YN
			, CASE WHEN NVL(B.CNT,0) > 0 THEN '1' ELSE '0' END AS VALUE_YN
		FROM TB_QA_SHEET_ITEM A
		LEFT OUTER JOIN (
			SELECT TENANT_ID, MAJOR_CD, MINOR_CD, COUNT(MINOR_CD) AS CNT
			FROM TB_QA_VALUE_RESULT_DETAIL
			GROUP BY TENANT_ID, MAJOR_CD, MINOR_CD
		) B ON A.TENANT_ID = B.TENANT_ID AND A.MAJOR_CD = B.MAJOR_CD AND A.MINOR_CD = B.MINOR_CD
		WHERE A.TENANT_ID = I_TENANT_ID
		AND A.MAJOR_CD = I_MAJOR_CD
		AND A.MINOR_CD <> '00000'
		ORDER BY A.SORT_SEQ;
	          
	  END IF;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1020S04_02 
(
  I_TENANT_ID       IN  VARCHAR2,
  I_GBN    			IN  VARCHAR2,
  I_CUD_GUBUN    	IN  VARCHAR2,
  I_MAJOR_CD        IN  VARCHAR2,
  I_MINOR_CD        IN  VARCHAR2,
  I_ITEM_NM         IN  VARCHAR2,
  I_HIDE_YN			IN  VARCHAR2,
  I_AGENT_ID        IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA1020S04_02
   PURPOSE:    평가항목관리 데이터 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/03/10
*******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1020S04_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
	
	V_MAJOR_CD TB_QA_SHEET_ITEM.MAJOR_CD%TYPE := I_MAJOR_CD;
	V_MINOR_CD TB_QA_SHEET_ITEM.MINOR_CD%TYPE := I_MINOR_CD;
	V_HIDE_YN TB_QA_SHEET_ITEM.HIDE_YN%TYPE := I_HIDE_YN;
	V_SORT_SEQ TB_QA_SHEET_ITEM.SORT_SEQ%TYPE := '';
	
BEGIN
    SELECT NVL(I_HIDE_YN, 1) INTO V_HIDE_YN FROM DUAL;
    
	IF I_GBN = 'A' THEN

		SELECT LPAD(NVL(MAX(MAJOR_CD),0)+1 ,5, '0') INTO V_MAJOR_CD
		FROM TB_QA_SHEET_ITEM 
		WHERE TENANT_ID = I_TENANT_ID;
		
		SELECT NVL(MAX(SORT_SEQ),0)+1 INTO V_SORT_SEQ
		FROM TB_QA_SHEET_ITEM 
		WHERE TENANT_ID = I_TENANT_ID
		AND MINOR_CD = '00000';

	ELSIF I_GBN = 'B' THEN
		
		SELECT LPAD(NVL(MAX(MINOR_CD),0)+1 ,5, '0') INTO V_MINOR_CD
		FROM TB_QA_SHEET_ITEM 
		WHERE TENANT_ID = I_TENANT_ID
		AND MAJOR_CD = I_MAJOR_CD;
		
		SELECT NVL(MAX(SORT_SEQ),0)+1 INTO V_SORT_SEQ
		FROM TB_QA_SHEET_ITEM 
		WHERE TENANT_ID = I_TENANT_ID
		AND MAJOR_CD = I_MAJOR_CD
		AND MINOR_CD <> '00000';
		
	END IF;
	
    IF I_CUD_GUBUN = 'C' THEN
    
      INSERT INTO TB_QA_SHEET_ITEM 
        (TENANT_ID, MAJOR_CD, MINOR_CD, ITEM_NM, SORT_SEQ, HIDE_YN, CREATE_MEMB, CREATE_DT) 
      VALUES
        (I_TENANT_ID, V_MAJOR_CD, V_MINOR_CD, I_ITEM_NM, V_SORT_SEQ, V_HIDE_YN, I_AGENT_ID, sysdate);
            
    ELSIF I_CUD_GUBUN = 'U' THEN
      UPDATE TB_QA_SHEET_ITEM SET 
        ITEM_NM = I_ITEM_NM,
        HIDE_YN = V_HIDE_YN,
        MODIFY_MEMB = I_AGENT_ID,
        MODIFY_DT = sysdate
      WHERE TENANT_ID = I_TENANT_ID
      AND MAJOR_CD = I_MAJOR_CD
      AND MINOR_CD = I_MINOR_CD;
       
    ELSIF I_CUD_GUBUN = 'D' THEN
    	IF I_GBN = 'A' THEN
    		DELETE FROM TB_QA_SHEET_ITEM WHERE TENANT_ID = I_TENANT_ID AND MAJOR_CD = I_MAJOR_CD;
    	ELSIF I_GBN = 'B' THEN
    		DELETE FROM TB_QA_SHEET_ITEM WHERE TENANT_ID = I_TENANT_ID AND MAJOR_CD = I_MAJOR_CD AND MINOR_CD = I_MINOR_CD;
    	END IF;
    	
    END IF;
    
    COMMIT;
    
EXCEPTION
  WHEN OTHERS 
  THEN 
  BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1030M01_01 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_YEAR		  IN  VARCHAR2
  , I_DEPT_CD	  IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_QA1030M01_01
   PURPOSE:    평가계획 관리  (TREE)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/20
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA1030M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 

	WITH TEMP AS(
	SELECT SUBSTR(STD_YMD,0,6) AS TIMES_ID
			,SUBSTR(STD_YMD,0,4)||'년'||SUBSTR(STD_YMD,5,2)||'월' AS TIMES_NM
			,0
			,1
	FROM TB_CM_HOLIDAY
	WHERE SUBSTR(STD_YMD,0,4) = I_YEAR
	GROUP BY SUBSTR(STD_YMD,0,6) 
			,SUBSTR(STD_YMD,0,4)||'년'||SUBSTR(STD_YMD,5,2)||'월'
	)
	SELECT A.TIMES_ID
			,A.TIMES_NM
			,SUBSTR(A.TIMES_ID,0,6) AS PARENT_DEPT_CD
			,1 AS VALUE_CNT
			,2
	 FROM TB_QA_VALUE_TIMES A
 	 WHERE A.TENANT_ID = I_TENANT_ID
	 AND SUBSTR(A.TIMES_ID,0,4) = I_YEAR
	 AND I_DEPT_CD IN (SELECT S.DEPT_CD FROM TB_CM_ACCESS_SCOPE S 
	 					WHERE S.TENANT_ID = A.TENANT_ID 
						  AND S.ITEM_ID = A.TIMES_ID
	  	 				  AND S.SCOPE_GUBUN ='50')
		 
	 
	 UNION ALL
	 
	 
	 SELECT A.TIMES_ID AS TIMES_ID
	 		,A.TIMES_NM AS TIMES_NM
	 		,SUBSTR(A.TIMES_ID,0,4) AS PARENT_DEPT_CD
	 		,COUNT(B.TIMES_ID) AS VALUE_CNT
	 		,1
	 FROM TEMP A
	 LEFT JOIN (SELECT T.TENANT_ID, T.TIMES_ID 
	 			FROM TB_QA_VALUE_TIMES T
	 			WHERE T.TENANT_ID = I_TENANT_ID
	 			  AND SUBSTR(T.TIMES_ID,0,4) = I_YEAR
	 			   AND I_DEPT_CD IN (SELECT S.DEPT_CD FROM TB_CM_ACCESS_SCOPE S 
	 				WHERE S.TENANT_ID = T.TENANT_ID 
	 				  AND S.ITEM_ID = T.TIMES_ID
	 				  AND S.SCOPE_GUBUN ='50')
	 				  ) B
	 ON A.TIMES_ID = SUBSTR(B.TIMES_ID,0,6)
	 GROUP BY A.TIMES_ID, A.TIMES_NM
	 
	 UNION ALL
	 
	 SELECT I_YEAR
	 		,I_YEAR AS TIMES_NM
	 		,'' AS PARENT_DEPT_CD
	 		,(SELECT COUNT(A.TIMES_ID) 
	 		  FROM TB_QA_VALUE_TIMES A 
	 		  WHERE A.TENANT_ID = I_TENANT_ID 
	 		  	AND SUBSTR(A.TIMES_ID,0,4) = I_YEAR
	 		  	AND I_DEPT_CD IN (SELECT S.DEPT_CD FROM TB_CM_ACCESS_SCOPE S 
	 				WHERE S.TENANT_ID = A.TENANT_ID 
	 				  AND S.ITEM_ID = A.TIMES_ID
  	 				  AND S.SCOPE_GUBUN ='50')
	 		  	) AS VALUE_CNT
	 		,0
	FROM DUAL
	ORDER BY TIMES_ID;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1030M01_02
(
    I_TENANT_ID   IN  VARCHAR2
  , I_TIMES_ID		  IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_QA1030M01_02
   PURPOSE:    평가계획 상세 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/20
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA1030M01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
--	SELECT A.TIMES_ID
--		,A.TIMES_NM
--		,A.KPI_YN
--		,A.QA_EVAL_TYPE
--		,TO_CHAR(TO_DATE(A.VALUE_FRM_DT,'yyyymmdd'),'YYYY-MM-DD') AS VALUE_FRM_DT
--		,TO_CHAR(TO_DATE(A.VALUE_END_DT,'yyyymmdd'),'YYYY-MM-DD') AS VALUE_END_DT
--		,TO_CHAR(TO_DATE(A.REC_FRM_DT,'yyyymmdd'),'YYYY-MM-DD') AS REC_FRM_DT
--		,TO_CHAR(TO_DATE(A.REC_END_DT,'yyyymmdd'),'YYYY-MM-DD') AS REC_END_DT
--		,SUBSTR(A.REC_FRM_TM,0,2)||':'||SUBSTR(A.REC_FRM_TM,3,2) AS REC_FRM_TM
--		,SUBSTR(A.REC_END_TM,0,2)||':'||SUBSTR(A.REC_END_TM,3,2) AS REC_end_TM
--		,SUBSTR(A.TALK_FRM_TM,0,2)||':'||SUBSTR(A.TALK_FRM_TM,3,2)||':'||SUBSTR(A.TALK_FRM_TM,5,2) AS TALK_FRM_TM
--		,SUBSTR(A.TALK_END_TM,0,2)||':'||SUBSTR(A.TALK_END_TM,3,2)||':'||SUBSTR(A.TALK_END_TM,5,2) AS TALK_END_TM
--		,A.SHEET_ID
--		,(SELECT SHEET_NM FROM TB_QA_SHEET_HEADER WHERE TENANT_ID = I_TENANT_ID AND SHEET_ID = A.SHEET_ID) AS SHEET_NM
--		,CASE WHEN A.VALUE_CNT < 10 THEN '0'||TO_CHAR(A.VALUE_CNT) ELSE TO_CHAR(A.VALUE_CNT) END AS VALUE_CNT
--		,A.VALUE_FOCUS
--		,(SELECT COUNT(S.QAA_ID) FROM TB_QA_VALUE_ALLOC_QAA S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS QAA_CNT
--		,(SELECT COUNT(S.AGENT_ID) FROM (SELECT T.AGENT_ID FROM TB_QA_VALUE_ALLOC_AGENT T WHERE T.TENANT_ID = A.TENANT_ID AND T.TIMES_ID = A.TIMES_ID GROUP BY T.AGENT_ID) S) AS AGENT_CNT
--		,(SELECT AGGR_CONCAT(S.DEPT_CD,',') FROM TB_CM_ACCESS_SCOPE S WHERE S.TENANT_ID = A.TENANT_ID AND S.ITEM_ID = A.TIMES_ID AND SCOPE_GUBUN = '50') AS DEPT1_ID
--		,(SELECT COUNT(S.SHEETKEY) FROM TB_QA_VALUE_RESULT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS AGENT_VALUE_CNT
--		,A.HIDE_YN
--		,FN_CM_GET_CODE_NM(A.TENANT_ID,'TIMES_VALUE_STATUS',A.TIMES_VALUE_STATUS) AS TIMES_VALUE_STATUS
--	FROM TB_QA_VALUE_TIMES A
--	WHERE TENANT_ID = I_TENANT_ID
--	AND TIMES_ID = I_TIMES_ID;

	SELECT A.TIMES_NM
			,A.TIMES_ID
			,A.KPI_YN
			,A.QA_EVAL_TYPE
			,FN_CM_STRING_FORMAT(A.VALUE_FRM_DT, '@@@@-@@-@@') AS VALUE_FRM_DT
			,FN_CM_STRING_FORMAT(A.VALUE_END_DT, '@@@@-@@-@@') AS VALUE_END_DT
			,FN_CM_STRING_FORMAT(A.REC_FRM_DT, '@@@@-@@-@@') AS REC_FRM_DT
			,FN_CM_STRING_FORMAT(A.REC_END_DT, '@@@@-@@-@@') AS REC_END_DT
			,FN_CM_STRING_FORMAT(A.REC_FRM_TM, '@@:@@') AS REC_FRM_TM
			,FN_CM_STRING_FORMAT(A.REC_END_TM, '@@:@@') AS REC_END_TM
			,FN_CM_STRING_FORMAT(A.TALK_FRM_TM, '@@:@@:@@') AS TALK_FRM_TM
			,FN_CM_STRING_FORMAT(A.TALK_END_TM, '@@:@@:@@') AS TALK_END_TM
			,A.SHEET_ID
			,B.SHEET_NM
			,A.VALUE_CNT
			,A.HIDE_YN
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'TIMES_VALUE_STATUS',A.TIMES_VALUE_STATUS) AS TIMES_VALUE_STATUS
			,A.VALUE_FOCUS
			,B.QAA_CNT
			,B.AGENT_CNT
			,B.TIMES_VALUE_CNT
			,B.DEPT_CD AS DEPT1_ID
	FROM TB_QA_VALUE_TIMES A
	INNER JOIN (
				SELECT A.TIMES_ID
						,A.TENANT_ID
						,COUNT(distinct D.QAA_ID) AS QAA_CNT
						,COUNT(distinct E.AGENT_ID) AS AGENT_CNT
						,COUNT(distinct F.SHEETKEY) AS TIMES_VALUE_CNT
						,WM_CONCAT(C.DEPT_CD) AS DEPT_CD
						,B.SHEET_NM
				FROM TB_QA_VALUE_TIMES A
				INNER JOIN TB_QA_SHEET_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
				INNER JOIN TB_CM_ACCESS_SCOPE C ON (A.TENANT_ID = C.TENANT_ID AND A.TIMES_ID = C.ITEM_ID)
				LEFT JOIN TB_QA_VALUE_ALLOC_QAA D ON (A.TENANT_ID = D.TENANT_ID AND A.TIMES_ID = D.TIMES_ID)
				LEFT JOIN TB_QA_VALUE_ALLOC_AGENT E ON (A.TENANT_ID = E.TENANT_ID AND A.TIMES_ID = E.TIMES_ID AND D.QAA_ID = E.QAA_ID)
				LEFT JOIN TB_QA_VALUE_RESULT_HEADER F ON (A.TENANT_ID = F.TENANT_ID AND A.TIMES_ID = F.TIMES_ID AND F.VALUE_MEMB = D.QAA_ID AND F.AGENT_ID = E.AGENT_ID)
				WHERE A.TENANT_ID = I_TENANT_ID
					AND A.TIMES_ID = I_TIMES_ID
					AND C.SCOPE_GUBUN = '50'
					AND F.REVALUE_SHEETKEY IS NULL
				GROUP BY A.TENANT_ID, A.TIMES_ID, B.SHEET_NM
		) B
	ON A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID
	;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1030M01_04
(
	  I_TENANT_ID		IN  VARCHAR2
	, I_GBN				IN	VARCHAR2
	, I_TIMES_ID		IN  VARCHAR2
	, I_TIEMS_NM		IN	VARCHAR2
	, I_KPI_YN			IN	VARCHAR2
	, I_QA_EVAL_TYPE	IN	VARCHAR2
	, I_VALUE_FRM_DT	IN	VARCHAR2
	, I_VALUE_END_DT	IN	VARCHAR2
	, I_REC_FRM_DT		IN	VARCHAR2
	, I_REC_END_DT		IN	VARCHAR2
	, I_REC_FRM_TM		IN	VARCHAR2
	, I_REC_END_TM		IN	VARCHAR2
	, I_TALK_FRM_TM		IN	VARCHAR2
	, I_TALK_END_TM		IN	VARCHAR2             
	, I_SHEET_ID		IN	VARCHAR2
	, I_VALUE_CNT		IN	NUMBER
	, I_VALUE_FOCUS		IN	VARCHAR2
	, I_AGENT_ID		IN	VARCHAR2
	, I_DEPT_CD			IN	VARCHAR2
	, I_HIDE_YN			IN	VARCHAR2
	
) AS 
/******************************************************************************
   NAME:       SP_QA1030M01_04
   PURPOSE:    평가계획 등록

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/20
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA1030M01_04';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
	V_TIMES_ID		VARCHAR2(10)		:='';
	V_SHEET_CNT     NUMBER          :=0;
    
BEGIN
   
  -- 수정 등록
    IF I_GBN = 'U' THEN

      SELECT 
	    CASE WHEN CHK.TIMES_ID is null THEN TO_CHAR(TO_DATE(I_VALUE_FRM_DT, 'yyyymmdd'),'YYYYMM')||'0001'
	    ELSE TO_CHAR(TO_DATE(I_VALUE_FRM_DT, 'yyyymmdd'),'YYYYMM')||SUBSTR(CHK.TIMES_ID,7,4)
	    END INTO V_TIMES_ID
	 FROM
	   (SELECT 
	      MAX(TIMES_ID+1) AS TIMES_ID
	      FROM TB_QA_VALUE_TIMES WHERE 1=1 
	      AND TENANT_ID = I_TENANT_ID
		  and TO_CHAR(TO_DATE(I_VALUE_FRM_DT, 'yyyymmdd'),'YYYYMM') = SUBSTR(TIMES_ID,0,6)) CHK; 
		  

    
      MERGE INTO TB_QA_VALUE_TIMES T
      USING (SELECT   I_TENANT_ID AS TENANT_ID
                    , I_TIMES_ID AS TIMES_ID
               FROM DUAL ) S
      ON (T.TENANT_ID = S.TENANT_ID AND T.TIMES_ID = S.TIMES_ID)
     WHEN MATCHED THEN
       UPDATE SET  TIMES_NM = I_TIEMS_NM
        			, KPI_YN = I_KPI_YN
        			, QA_EVAL_TYPE = I_QA_EVAL_TYPE
					, VALUE_FRM_DT = I_VALUE_FRM_DT
					, VALUE_END_DT = I_VALUE_END_DT
					, REC_FRM_DT = I_REC_FRM_DT
					, REC_END_DT = I_REC_END_DT
					, REC_FRM_TM = I_REC_FRM_TM
					, REC_END_TM = I_REC_END_TM
					, TALK_FRM_TM = I_TALK_FRM_TM
					, TALK_END_TM = I_TALK_END_TM
					, SHEET_ID = I_SHEET_ID
					, VALUE_CNT = I_VALUE_CNT
					, VALUE_FOCUS = I_VALUE_FOCUS
                    , MODIFY_AGENT_ID = I_AGENT_ID
                    , HIDE_YN = I_HIDE_YN
                    , MODIFY_DT = sysdate
	 WHEN NOT MATCHED THEN
        INSERT
        (TENANT_ID, TIMES_ID, TIMES_NM, KPI_YN, QA_EVAL_TYPE, VALUE_FRM_DT, VALUE_END_DT, REC_FRM_DT, REC_END_DT, REC_FRM_TM, REC_END_TM, TALK_FRM_TM, TALK_END_TM, SHEET_ID, VALUE_CNT, VALUE_FOCUS, CREATE_AGENT_ID, CREATE_DT, HIDE_YN, TIMES_VALUE_STATUS) 
        VALUES 
        (I_TENANT_ID, V_TIMES_ID, I_TIEMS_NM, I_KPI_YN, I_QA_EVAL_TYPE, I_VALUE_FRM_DT, I_VALUE_END_DT, I_REC_FRM_DT, I_REC_END_DT, I_REC_FRM_TM, I_REC_END_TM, I_TALK_FRM_TM, I_TALK_END_TM, I_SHEET_ID, I_VALUE_CNT, I_VALUE_FOCUS, I_AGENT_ID,sysdate, I_HIDE_YN, '10')
        ;
    
    IF LENGTH(I_TIMES_ID)=10 THEN
    	V_TIMES_ID := I_TIMES_ID;
	END IF;
	
	DELETE FROM TB_CM_ACCESS_SCOPE
	WHERE TENANT_ID = I_TENANT_ID
	AND SCOPE_GUBUN = '50'
	AND ITEM_ID = I_TIMES_ID;
	
	IF I_DEPT_CD IS NOT NULL THEN
		INSERT INTO TB_CM_ACCESS_SCOPE
		SELECT  I_TENANT_ID, '50', V_TIMES_ID , DEPT_CD FROM (
		SELECT distinct regexp_substr(A.DEPT_CD, '[^,]+', 1, LEVEL) DEPT_CD
		   FROM (SELECT I_DEPT_CD AS DEPT_CD FROM dual) A
		CONNECT BY LEVEL <= length(regexp_replace(A.DEPT_CD, '[^,]+',''))+1);
	END IF;
        
    --소속 삭제
    ELSIF I_GBN = 'D' THEN
    	DELETE FROM TB_QA_VALUE_TIMES
	    WHERE TENANT_ID = I_TENANT_ID
    	AND TIMES_ID = I_TIMES_ID;
	
		DELETE FROM TB_CM_ACCESS_SCOPE
		WHERE TENANT_ID = I_TENANT_ID
		AND SCOPE_GUBUN = '50'
		AND ITEM_ID = I_TIMES_ID;
		
		SELECT COUNT(SHEET_ID)
		INTO V_SHEET_CNT
		FROM TB_QA_VALUE_TIMES
		WHERE TENANT_ID = I_TENANT_ID
			AND SHEET_ID = I_SHEET_ID;
		
	IF(V_SHEET_CNT=0) THEN 
		 UPDATE TB_QA_SHEET_HEADER SET VALUE_YN = 1 
		  WHERE TENANT_ID = I_TENANT_ID
		  AND SHEET_ID = I_SHEET_ID;
	  END IF;
		
		
		
		
	END IF;
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1030M02_01
(
	  I_TENANT_ID		IN  VARCHAR2
	, I_TIMES_ID		IN  VARCHAR2
	 ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
	
) AS 
/******************************************************************************
   NAME:       SP_QA1030M02_01
   PURPOSE:    QAA 배정(평가계획 상세 조회)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/20
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA1030M02_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
	V_TIMES_ID		VARCHAR2(10)		:='';
    
BEGIN
   
 	  OPEN O_CUR_LIST FOR    
-- 	  SELECT A.TIMES_NM
--		,FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_EVAL_TYPE',A.QA_EVAL_TYPE) AS QA_EVAL_TYPE_NM
--		,SUBSTR(TIMES_ID,0,4)||'년'||SUBSTR(TIMES_ID,5,2)||'월' AS STD_YM
--		,TO_CHAR(TO_DATE(VALUE_FRM_DT,'yyyymmdd'),'YYYY-MM-DD')||' ~ '||TO_CHAR(TO_DATE(VALUE_END_DT,'yyyymmdd'),'YYYY-MM-DD') AS STD_VALUE
----		,CASE WHEN VALUE_END_DT < TO_CHAR(SYSDATE,'yyyymmdd') THEN '완료'
----		 	  WHEN VALUE_FRM_DT >TO_CHAR(SYSDATE,'yyyymmdd') THEN '준비'
----		 	  ELSE '진행'
----	 	  END AS STATUS
--		,(SELECT SHEET_NM FROM TB_QA_SHEET_HEADER WHERE TENANT_ID = I_TENANT_ID AND SHEET_ID = A.SHEET_ID) AS SHEET_NM
--		,(SELECT COUNT(S.QAA_ID) FROM TB_QA_VALUE_ALLOC_QAA S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS QAA_CNT
--		,(SELECT COUNT(COUNT(S.AGENT_ID)) FROM TB_QA_VALUE_ALLOC_AGENT S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID GROUP BY AGENT_ID) AS TARGET_CNT
--		,(SELECT COUNT(S.SHEETKEY) FROM TB_QA_VALUE_RESULT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS VALUE_CNT
--		,FN_CM_GET_CODE_NM(A.TENANT_ID, 'TIMES_VALUE_STATUS', A.TIMES_VALUE_STATUS) AS STATUS
--		,TIMES_VALUE_STATUS
--	FROM TB_QA_VALUE_TIMES A
--	WHERE A.TENANT_ID = I_TENANT_ID
--	AND A.TIMES_ID = I_TIMES_ID


	SELECT A.TIMES_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID, 'TIMES_VALUE_STATUS', A.TIMES_VALUE_STATUS) AS TIMES_VALUE_STATUS
			,FN_CM_GET_CODE_NM(A.TENANT_ID, 'QA_EVAL_TYPE', A.QA_EVAL_TYPE) AS QA_EVAL_TYPE
			,FN_CM_STRING_FORMAT(A.VALUE_FRM_DT, '@@@@-@@-@@') AS VALUE_FRM_DT
			,FN_CM_STRING_FORMAT(A.VALUE_END_DT, '@@@@-@@-@@') AS VALUE_END_DT
			,B.SHEET_NM
			,COUNT(distinct C.QAA_ID) AS QAA_CNT
			,COUNT(distinct D.AGENT_ID) AS TARGET_CNT
			,COUNT(E.SHEETKEY) AS VALUE_CNT
			,A.TIMES_ID
	FROM TB_QA_VALUE_TIMES A
	INNER JOIN TB_QA_SHEET_HEADER B 
	ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
	LEFT JOIN TB_QA_VALUE_ALLOC_QAA C  
	ON (A.TENANT_ID = C.TENANT_ID AND A.TIMES_ID = C.TIMES_ID)
	LEFT JOIN TB_QA_VALUE_ALLOC_AGENT D 
	ON (A.TENANT_ID = D.TENANT_ID AND A.TIMES_ID = D.TIMES_ID AND C.QAA_ID = D.QAA_ID)
	LEFT JOIN TB_QA_VALUE_RESULT_HEADER E 
	ON (A.TENANT_ID = E.TENANT_ID AND A.TIMES_ID = E.TIMES_ID AND C.QAA_ID = E.VALUE_MEMB AND D.AGENT_ID = E.AGENT_ID)
	WHERE A.TENANT_ID = I_TENANT_ID
		AND A.TIMES_ID = I_TIMES_ID
		AND E.REVALUE_SHEETKEY IS NULL
	GROUP BY A.TENANT_ID, A.TIMES_ID, A.TIMES_NM, A.TIMES_VALUE_STATUS, A.QA_EVAL_TYPE, A.VALUE_FRM_DT, A.VALUE_END_DT, B.SHEET_NM



 ;
 
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1030M02_03
(
	  I_TENANT_ID		IN  VARCHAR2
  	 ,I_GBN				IN	VARCHAR2
  	 ,I_TIMES_ID		IN  VARCHAR2
	 ,I_QAA_ID			IN	VARCHAR2
	
) AS 
/******************************************************************************
   NAME:       SP_QA1030M02_03
   PURPOSE:    QAA 배정 데이터 컨트롤

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/20
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA1030M02_03';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
	V_TIMES_ID		VARCHAR2(10)		:='';
    
BEGIN
   
	IF I_GBN = 'C' THEN
   	
  	 MERGE INTO TB_QA_VALUE_ALLOC_QAA T
      USING (SELECT   I_TENANT_ID AS TENANT_ID
                    , I_TIMES_ID AS TIMES_ID
                    , I_QAA_ID AS QAA_ID
               FROM DUAL ) S
      ON (T.TIMES_ID = S.TIMES_ID AND T.QAA_ID = S.QAA_ID)
     WHEN NOT MATCHED THEN
        INSERT
        (TENANT_ID, TIMES_ID, QAA_ID, TARGET_SCORE) 
        VALUES 
        (I_TENANT_ID, I_TIMES_ID, I_QAA_ID, 0) 
        ;

   	
	ELSIF I_GBN ='D' THEN
 	
 	DELETE FROM TB_QA_VALUE_ALLOC_QAA A
 	WHERE A.TENANT_ID = I_TENANT_ID
 	AND A.TIMES_ID = I_TIMES_ID
 	AND A.QAA_ID = I_QAA_ID;
	
	DELETE FROM TB_QA_VALUE_ALLOC_AGENT A
 	WHERE A.TENANT_ID = I_TENANT_ID
 	AND A.TIMES_ID = I_TIMES_ID
 	AND A.QAA_ID = I_QAA_ID;
	
	END IF;
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_QA1030M03_02 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID	  IN VARCHAR2
 , I_QAA_ID       IN VARCHAR2
 , I_AGENT_ID	  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA1030M03_02
   PURPOSE:    평가계획관리 - 평가대상자관리 - 대상자삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/23  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1030M03_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
 DELETE FROM TB_QA_VALUE_ALLOC_AGENT A 
 WHERE A.TENANT_ID = I_TENANT_ID
 AND A.TIMES_ID = I_TIMES_ID  
 AND A.QAA_ID = I_QAA_ID 
 AND A.AGENT_ID = CASE WHEN I_AGENT_ID IS NULL THEN A.AGENT_ID ELSE I_AGENT_ID END
 ;
 COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA1030S01_03 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID	  IN VARCHAR2
 , I_QAA_ID       IN VARCHAR2
-- , I_AGENT_ID	  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA1030S01_03
   PURPOSE:    평가계획관리 - 평가대상자관리 - 대상자삭제

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/23  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1030S01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
 DELETE FROM TB_QA_VALUE_ALLOC_AGENT A
 WHERE A.TENANT_ID = I_TENANT_ID
 AND A.TIMES_ID = I_TIMES_ID  
-- AND QAA_ID = I_QAA_ID 
-- AND AGENT_ID = CASE WHEN I_AGENT_ID IS NULL THEN AGENT_ID ELSE I_AGENT_ID END
 ;
 COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA1030S01_04 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID	  IN VARCHAR2
 , I_QAA_ID		  IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , I_LOGIN_ID     IN VARCHAR2  /* 로그인사용자ID */
) AS 
/******************************************************************************
   NAME:       SP_QA1030S01_04
   PURPOSE:    평가계획관리 - 평가대상자관리 - 대상자등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1030S01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    

	MERGE INTO TB_QA_VALUE_ALLOC_AGENT A
    USING (
		SELECT
			I_TENANT_ID     AS I_TENANT_ID,
			I_TIMES_ID   	AS I_TIMES_ID,
			I_QAA_ID   		AS I_QAA_ID,
			I_AGENT_ID      AS I_AGENT_ID,
			I_LOGIN_ID    	AS I_LOGIN_ID
		FROM DUAL 
    ) T
    ON (A.TENANT_ID = I_TENANT_ID 
    	 AND A.TIMES_ID = I_TIMES_ID
    	AND A.QAA_ID = I_QAA_ID AND A.AGENT_ID = I_AGENT_ID)
--    WHEN MATCHED THEN
--		UPDATE SET 
--			QA_SEBU_CD  	= T.I_QA_SEBU_CD,
--			SCORE       	= T.I_SCORE,
--			VALUE_TEXT      = T.I_VALUE_TEXT
    WHEN NOT MATCHED THEN
		INSERT
			  (TENANT_ID
			    ,TIMES_ID
				,QAA_ID
				,AGENT_ID
				,WORK_MEMB
				,WORK_TIME
				,MODIFY_MEMB
				,MODIFY_DT
			  )
	  VALUES
			  (T.I_TENANT_ID
			    ,T.I_TIMES_ID
				,T.I_QAA_ID
				,T.I_AGENT_ID
				,NULL
				,NULL
				,T.I_LOGIN_ID
				,SYSDATE
			  );




-- INSERT INTO TB_QA_VALUE_ALLOC_AGENT (
--					TIMES_ID
--					,QAA_ID
--					,AGENT_ID
--					,WORK_MEMB
--					,WORK_TIME
--					,MODIFY_MEMB
--					,MODIFY_DT
--					)
--			VALUES (
--					I_TIMES_ID
--					,I_QAA_ID
--					,I_AGENT_ID
--					,NULL
--					,NULL
--					,I_LOGIN_ID
--					,SYSDATE
--					);
       COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
         RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
  
    END;
END ;
/

;

create or replace PROCEDURE SP_QA1030S02_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID	  IN VARCHAR2
 , I_QAA_ID		  IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , I_LOGIN_ID     IN VARCHAR2  /* 로그인사용자ID */
) AS 
/******************************************************************************
   NAME:       SP_QA1030S02_01
   PURPOSE:    평가계획 관리 - 자동 배정(기존 배정 삭제)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/24  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1030S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 삭제
-- ********************************************************************************    
	DELETE FROM TB_QA_VALUE_ALLOC_AGENT A
	WHERE A.TENANT_ID = I_TENANT_ID 
	  AND A.TIMES_ID = I_TIMES_ID
	  AND A.QAA_ID = I_QAA_ID;
	-- 평가 진행은 제외 하기 추후 추가

       COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
         RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
  
    END;
END ;
/

;

create or replace PROCEDURE SP_QA2010M02_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID     IN VARCHAR2
 , I_AGENT_ID  	  IN VARCHAR2
 , I_LOGIN_ID	  IN VARCHAR2
 , I_REC_FRM_DT	  IN VARCHAR2
 , I_REC_END_DT	  IN VARCHAR2
 , I_REC_FRM_TM	  IN VARCHAR2
 , I_REC_END_TM	  IN VARCHAR2
 , I_TALK_FRM_TM  IN VARCHAR2
 , I_TALK_END_TM  IN VARCHAR2
 , I_VALUE_YN	  IN VARCHAR2
 , I_USER_DATA1	  IN VARCHAR2
 , I_USER_DATA2	  IN VARCHAR2
 , I_USER_DATA3	  IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2010M02_01
   PURPOSE:    통화품질평가(녹음파일 조회) 건수
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2010M02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************  \
	OPEN O_CUR_LIST FOR 
    SELECT COUNT(RECORD_ID) AS CNT
	  FROM TB_QA_AUDIO_LOG A
	 WHERE TENANT_ID = I_TENANT_ID
	   AND A.REC_YMD BETWEEN I_REC_FRM_DT AND I_REC_END_DT
	   AND A.AGENT_ID =I_AGENT_ID
	   AND TO_CHAR(STARTTIME, 'HH24MISS') >= I_REC_FRM_TM||'00' 
	   AND TO_CHAR(ENDTIME, 'HH24MISS') <= I_REC_END_TM||'59'
	   AND TALK_TM <= FN_CM_GET_TIME_DIFF_TO_SECOND(I_TALK_FRM_TM, I_TALK_END_TM)
	   AND ((I_USER_DATA1 IS NULL AND 1=1) OR ( I_USER_DATA1 IS NOT NULL AND A.USER_DATA1 = I_USER_DATA1)) 
	   AND ((I_USER_DATA2 IS NULL AND 1=1) OR ( I_USER_DATA2 IS NOT NULL AND A.USER_DATA2 = I_USER_DATA2))
	   AND ((I_USER_DATA3 IS NULL AND 1=1) OR ( I_USER_DATA3 IS NOT NULL AND A.USER_DATA3 = I_USER_DATA3))
	   AND ((I_VALUE_YN != 1 AND 1=1) OR (
				I_VALUE_YN = 1 AND NOT EXISTS (SELECT 1 FROM TB_QA_VALUE_RESULT_HEADER S
												WHERE S.TENANT_ID = A.TENANT_ID 
												AND S.RECORD_ID = A.RECORD_ID
												AND S.TIMES_ID = I_TIMES_ID)) )
	;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA2010M02_03 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID     IN VARCHAR2
 , I_AGENT_ID  	  IN VARCHAR2
 , I_LOGIN_ID	  IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2010M02_03
   PURPOSE:    통화품질평가(녹음파일조회) - 평가 횟수 체크
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2010M02_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************  

	OPEN O_CUR_LIST FOR 
	SELECT CASE WHEN CNT = CNT2 THEN 'N' ELSE 'Y' END AS VALUE_YN
	FROM (
		SELECT A.CNT
				,(SELECT S.VALUE_CNT 
				FROM TB_QA_VALUE_TIMES S 
				WHERE S.TENANT_ID = A.TENANT_ID
					AND S.TIMES_ID = A.TIMES_ID) AS CNT2
		FROM (
			SELECT A.TENANT_ID
					,A.TIMES_ID
					,COUNT(A.SHEETKEY) AS CNT 
			  FROM TB_QA_VALUE_RESULT_HEADER A
			 WHERE A.TENANT_ID = I_TENANT_ID
			   AND A.TIMES_ID = I_TIMES_ID
			   AND A.AGENT_ID = I_AGENT_ID
			   AND A.VALUE_MEMB = I_LOGIN_ID
			   AND A.REVALUE_SHEETKEY IS NULL
		   GROUP BY A.TENANT_ID, A.TIMES_ID
		   ) A
   );
 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_QA2010M03_02
(
    I_TENANT_ID  IN  VARCHAR2
  , I_SHEETKEY	 IN	 VARCHAR2
  , I_SHEET_ID   IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_QA2010M03_02
   PURPOSE:    통화품질평가 - 평가요약점수 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/03
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA2010M03_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   
     V_SHEET_ID		VARCHAR2(10)    := I_SHEET_ID;
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
 
	IF I_SHEET_ID IS NULL THEN
	 	SELECT SHEET_ID
		INTO V_SHEET_ID
		FROM TB_QA_VALUE_RESULT_HEADER A
		WHERE A.TENANT_ID = I_TENANT_ID
		AND A.SHEETKEY = I_SHEETKEY;
 	END IF;
 	
    OPEN O_CUR_LIST FOR 
    SELECT 
		B.ITEM_NM
		,NVL(C.SCORE, 0) AS SCORE
		,A.MAJOR_CD
		,A.MINOR_CD
    FROM TB_QA_SHEET_DETAIL A
    INNER JOIN TB_QA_SHEET_ITEM B 
    	ON A.TENANT_ID = B.TENANT_ID AND A.MAJOR_CD = B.MAJOR_CD AND A.MINOR_CD = B.MINOR_CD
    LEFT OUTER JOIN TB_QA_VALUE_RESULT_DETAIL C 
    	ON A.TENANT_ID = C.TENANT_ID AND A.MAJOR_CD = C.MAJOR_CD AND A.MINOR_CD = C.MINOR_CD AND C.SHEETKEY = I_SHEETKEY
    WHERE A.TENANT_ID = I_TENANT_ID
      AND A.SHEET_ID = V_SHEET_ID
      AND A.QA_SEBU_CD = '0' --설명라인만 발췌
    ;
    
/*
 	WITH INFO1 AS(
		SELECT A.MAJOR_CD
				, A.MINOR_CD
				, B.ITEM_NM 
		FROM (
				SELECT A.MAJOR_CD
						, A.MINOR_CD
						, A.TENANT_ID
				FROM TB_QA_SHEET_DETAIL A
				WHERE A.TENANT_ID = I_TENANT_ID
				AND A.SHEET_ID = V_SHEET_ID
				GROUP BY A.TENANT_ID, A.MAJOR_CD, A.MINOR_CD 
			) A
				INNER JOIN TB_QA_SHEET_ITEM B 
				ON A.TENANT_ID = B.TENANT_ID
				AND A.MAJOR_CD = B.MAJOR_CD
				AND A.MINOR_CD = B.MINOR_CD
		),
		INFO2 AS (
		SELECT MAJOR_CD, MINOR_CD, SCORE
		FROM TB_QA_VALUE_RESULT_DETAIL
		WHERE TENANT_ID = I_TENANT_ID
		AND SHEETKEY = I_SHEETKEY
		)
		
		
		SELECT A.ITEM_NM
				, NVL(B.SCORE,0) AS SCORE
				,A.MAJOR_CD
				,A.MINOR_CD
		FROM INFO1 A 
		LEFT JOIN INFO2 B
		ON A.MAJOR_CD = B.MAJOR_CD
		AND A.MINOR_CD = B.MINOR_CD;
*/

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA2010M03_03
(
    I_TENANT_ID  IN  VARCHAR2
  , I_SHEETKEY	 IN	 VARCHAR2
  , I_SHEET_ID	 IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_QA2010M03_03
   PURPOSE:    평가표내용

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/03
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA2010M03_03';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   

BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
--	IF I_SHEET_ID IS NULL THEN
--		SELECT SHEET_ID
--		  INTO I_SHEET_ID
--		  FROM TB_QA_VALUE_RESULT_HEADER A
--		 WHERE A.TENANT_ID = I_TENANT_ID
--		   AND A.SHEETKEY = I_SHEETKEY;
--	END IF;

	IF I_SHEETKEY IS NULL THEN
		OPEN O_CUR_LIST FOR 
      	SELECT 
		    A.MAJOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
			, A.MINOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
			, A.QA_SEBU_CD
			, FN_CM_GET_CODE_NM(A.TENANT_ID,'QA_SEBU_CD', A.QA_SEBU_CD) AS QA_SEBU_NM 
			, REPLACE(NVL(A.SHEET_TEXT,' '), CHR(10), '<br>') AS SHEET_TEXT
			, A.SCORE
			, A.PLUS_MINUS
			, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.QA_SEBU_CD ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.SHEET_ID = I_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD
			, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.SCORE ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.SHEET_ID = I_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD_SCORE
			, '' AS SEL_SEBU_CD
			, ' ' AS VALUE_TEXT
			, ' ' AS SEL_SCORE
		FROM TB_QA_SHEET_DETAIL A
		WHERE 1=1
		AND A.TENANT_ID = I_TENANT_ID
		AND A.SHEET_ID = I_SHEET_ID
		
		UNION ALL
		
		SELECT 
		    A.MAJOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
			, A.MINOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
			, '1' AS QA_SEBU_CD
			, '평가' AS QA_SEBU_NM
			, ' ' AS SHEET_TEXT
			, 0 AS SCORE
			, 0 AS PLUS_MINUS
			, '' AS MAX_CD
			, '' AS SEBU_CD_SCORE
			, '' AS SEL_SEBU_CD
			, ' ' AS VALUE_TEXT
			, ' ' AS SEL_SCORE
		FROM TB_QA_SHEET_DETAIL A
		WHERE A.TENANT_ID = I_TENANT_ID
		AND A.SHEET_ID = I_SHEET_ID
		GROUP BY A.TENANT_ID, A.MAJOR_CD, A.MINOR_CD
		ORDER BY MAJOR_CD, MINOR_CD, QA_SEBU_CD
		;
		
	ELSIF I_SHEETKEY IS NOT NULL THEN 
		OPEN O_CUR_LIST FOR 
		SELECT MAIN.*
				,SUB.QA_SEBU_CD AS SEL_SEBU_CD
				,NVL(SUB.VALUE_TEXT,' ') AS VALUE_TEXT
				,NVL(SUB.SCORE, 0) AS SEL_SCORE
		FROM(
			SELECT
			    A.MAJOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
				, A.MINOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
				, A.QA_SEBU_CD
				, FN_CM_GET_CODE_NM(A.TENANT_ID,'QA_SEBU_CD', A.QA_SEBU_CD) AS QA_SEBU_NM 
				, REPLACE(NVL(A.SHEET_TEXT, ' '), CHR(10), '<br>') AS SHEET_TEXT
				, A.SCORE
				, A.PLUS_MINUS
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.QA_SEBU_CD ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.SHEET_ID = I_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.SCORE ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.SHEET_ID = I_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD_SCORE
			FROM TB_QA_SHEET_DETAIL A
			WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEET_ID = I_SHEET_ID
			
			UNION ALL
			
			SELECT 
				A.MAJOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
				, A.MINOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
				, '1' AS QA_SEBU_CD
				, '평가' AS QA_SEBU_NM
				, ' ' AS SHEET_TEXT
				, 0 AS SCORE
				, 0 AS PLUS_MINUS
				, '' AS MAX_CD
				, '' AS SEBU_CD_SCORE
			FROM TB_QA_SHEET_DETAIL A
			WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEET_ID = I_SHEET_ID
			GROUP BY A.TENANT_ID, A.MAJOR_CD, A.MINOR_CD
			ORDER BY MAJOR_CD, MINOR_CD, QA_SEBU_CD
		) MAIN 
		LEFT JOIN (
			SELECT MAJOR_CD, MINOR_CD, QA_SEBU_CD, VALUE_TEXT, SCORE
			FROM TB_QA_VALUE_RESULT_DETAIL 
			WHERE TENANT_ID = I_TENANT_ID 
			AND SHEETKEY = I_SHEETKEY
		) SUB ON MAIN.MAJOR_CD = SUB.MAJOR_CD  AND MAIN.MINOR_CD = SUB.MINOR_CD
		;
		
		END IF;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA2010M03_03_BAK
(
    I_TENANT_ID  IN  VARCHAR2
  , I_SHEETKEY	 IN	 VARCHAR2
  , I_SHEET_ID	 IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_QA2010M03_03
   PURPOSE:    평가표내용

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/03
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA2010M03_03';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   
   V_SHEET_ID		VARCHAR2(10)    := I_SHEET_ID;
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
	IF I_SHEET_ID IS NULL THEN
		SELECT SHEET_ID
		INTO V_SHEET_ID
		FROM TB_QA_VALUE_RESULT_HEADER A
		WHERE A.TENANT_ID = I_TENANT_ID
		AND A.SHEETKEY = I_SHEETKEY;
	END IF;

	IF I_SHEETKEY IS NULL THEN
		OPEN O_CUR_LIST FOR 
      	SELECT 
		    A.MAJOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
			, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT COUNT(MAJOR_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD )+
			(SELECT COUNT(*) FROM (SELECT MAJOR_CD, MINOR_CD FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = '2017030001'
				GROUP BY B.MAJOR_CD,B.MINOR_CD) C WHERE C.MAJOR_CD = A.MAJOR_CD)
			 ELSE 0 END AS MAJOR_CNT
			, A.MINOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
			, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT COUNT(*) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD)+1 ELSE 0 END AS MINOR_CNT
			, A.QA_SEBU_CD
			, FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_SEBU_CD', A.QA_SEBU_CD) AS QA_SEBU_NM 
			, A.SHEET_TEXT
			, A.SCORE
			, A.PLUS_MINUS
			, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.QA_SEBU_CD ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD
			, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.SCORE ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD_SCORE
			, '' AS SEL_SEBU_CD
			, ' ' AS VALUE_TEXT
			, ' ' AS SEL_SCORE
		FROM TB_QA_SHEET_DETAIL A
		WHERE 1=1
		AND A.TENANT_ID = I_TENANT_ID
		AND A.SHEET_ID = V_SHEET_ID
		
		UNION ALL
		
		SELECT 
		    A.MAJOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
			, 0
			, A.MINOR_CD
			, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
			, 0
			, '1' AS QA_SEBU_CD
			, '평가' AS QA_SEBU_NM
			, ' ' AS SHEET_TEXT
			, 0 AS SCORE
			, 0 AS PLUS_MINUS
			, '' AS MAX_CD
			, '' AS SEBU_CD_SCORE
			, '' AS SEL_SEBU_CD
			, ' ' AS VALUE_TEXT
			, ' ' AS SEL_SCORE
		FROM TB_QA_SHEET_DETAIL A
		WHERE 1=1
		AND A.TENANT_ID = I_TENANT_ID
		AND A.SHEET_ID = V_SHEET_ID
		GROUP BY MAJOR_CD, MINOR_CD
		ORDER BY MAJOR_CD, MINOR_CD, QA_SEBU_CD
		;
		
	ELSIF I_SHEETKEY IS NOT NULL THEN 
		OPEN O_CUR_LIST FOR 
		SELECT MAIN.*
				,SUB.QA_SEBU_CD AS SEL_SEBU_CD
				,NVL(SUB.VALUE_TEXT,' ') AS VALUE_TEXT
				,NVL(SUB.SCORE, 0) AS SEL_SCORE
		FROM(
			SELECT
			    A.MAJOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT COUNT(MAJOR_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD )+
				(SELECT COUNT(*) FROM (SELECT MAJOR_CD, MINOR_CD FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = '2017030001'
					GROUP BY B.MAJOR_CD,B.MINOR_CD) C WHERE C.MAJOR_CD = A.MAJOR_CD)
				 ELSE 0 END AS MAJOR_CNT
				, A.MINOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT COUNT(*) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD)+1 ELSE 0 END AS MINOR_CNT
				, A.QA_SEBU_CD
				, FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_SEBU_CD', A.QA_SEBU_CD) AS QA_SEBU_NM 
				, A.SHEET_TEXT
				, A.SCORE
				, A.PLUS_MINUS
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.QA_SEBU_CD ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.SCORE ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD_SCORE
			FROM TB_QA_SHEET_DETAIL A
			WHERE 1=1
			AND A.TENANT_ID = I_TENANT_ID
			AND A.SHEET_ID = V_SHEET_ID
			
			UNION ALL
			
			SELECT 
				A.MAJOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
				, 0
				, A.MINOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = I_TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
				, 0
				, '1' AS QA_SEBU_CD
				, '평가' AS QA_SEBU_NM
				, ' ' AS SHEET_TEXT
				, 0 AS SCORE
				, 0 AS PLUS_MINUS
				, '' AS MAX_CD
				, '' AS SEBU_CD_SCORE
			FROM TB_QA_SHEET_DETAIL A
			WHERE 1=1
			AND A.TENANT_ID = I_TENANT_ID
			AND A.SHEET_ID = V_SHEET_ID
			GROUP BY MAJOR_CD, MINOR_CD
			ORDER BY MAJOR_CD, MINOR_CD, QA_SEBU_CD
		) MAIN 
		LEFT JOIN (
			SELECT MAJOR_CD, MINOR_CD, QA_SEBU_CD, VALUE_TEXT, SCORE
			FROM TB_QA_VALUE_RESULT_DETAIL 
			WHERE TENANT_ID = I_TENANT_ID 
			AND SHEETKEY = I_SHEETKEY
		) SUB ON MAIN.MAJOR_CD = SUB.MAJOR_CD  AND MAIN.MINOR_CD = SUB.MINOR_CD
		;
		
		END IF;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA2010M03_04
(
     I_TENANT_ID  	IN VARCHAR2
  	,I_TIMES_ID		IN VARCHAR2
  	,I_AGENT_ID		IN VARCHAR2
	,O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_QA2010M03_04
   PURPOSE:    통화품질평가 - 과거평가이력 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/03
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA2010M03_04';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
	OPEN O_CUR_LIST FOR 
--	WITH TEMP_LIST AS(
--		SELECT 
--			B.TIMES_NM
--			,AVG(A.CONVERT_SCORE) AS SCORE
--			,A.TIMES_ID
--		FROM TB_QA_VALUE_RESULT_HEADER A 
--		INNER JOIN TB_QA_VALUE_TIMES B ON A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID
--		WHERE A.TENANT_ID = I_TENANT_ID
--		AND SUBSTR(A.TIMES_ID,0,6) < SUBSTR(I_TIMES_ID,0,6)
--		AND A.AGENT_ID = I_AGENT_ID
--		GROUP BY A.TIMES_ID, B.TIMES_NM, A.AGENT_ID
--		ORDER BY A.TIMES_ID DESC
--	)
	
	SELECT 
		A.TIMES_NM
		,A.SCORE AS AVG_SCORE
	FROM (SELECT 
				B.TIMES_NM
				,AVG(A.CONVERT_SCORE) AS SCORE
				,A.TIMES_ID
			FROM TB_QA_VALUE_RESULT_HEADER A 
			INNER JOIN TB_QA_VALUE_TIMES B ON A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID
			WHERE A.TENANT_ID = I_TENANT_ID
			  AND SUBSTR(A.TIMES_ID,0,6) < SUBSTR(I_TIMES_ID,0,6)
			  AND A.AGENT_ID = I_AGENT_ID
			GROUP BY A.TIMES_ID, B.TIMES_NM, A.AGENT_ID
			ORDER BY A.TIMES_ID DESC) A
	WHERE ROWNUM < 10;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_QA2010M03_05 (
   I_TENANT_ID    		IN VARCHAR2
 , I_SHEETKEY	  		IN VARCHAR2
 , I_TIMES_ID	  		IN VARCHAR2
 , I_RECORD_ID	  		IN VARCHAR2
 , I_SHEET_ID			IN VARCHAR2
 , I_QA_VALUE_STATUS	IN VARCHAR2
 , I_LOGIN_ID     		IN VARCHAR2
 , I_AGENT_ID	  		IN VARCHAR2
 , I_QA_TM_KIND         IN VARCHAR2
 , I_GBN				IN VARCHAR2
 , I_TOTAL_COMMENT		IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2010M03_05
   PURPOSE:    통화품질 등록 및 수정(HEADER)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/23  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2010M03_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
   V_SHEET_KEY		VARCHAR2(12)		:='';
 
 BEGIN
 
-- ********************************************************************************
-- 0. 등록
-- ********************************************************************************    

	IF I_GBN ='C' THEN 
	
		SELECT 
			CASE WHEN CHK.SHEETKEY IS NULL THEN TO_CHAR(sysdate, 'YYYYMMDD')||'0001'
			ELSE TO_CHAR(sysdate, 'YYYYMMDD')||SUBSTR(CHK.SHEETKEY,9,4)
			END INTO V_SHEET_KEY
		  FROM
			(SELECT 
				MAX(SHEETKEY+1) AS SHEETKEY
			   FROM TB_QA_VALUE_RESULT_HEADER 
			  WHERE TENANT_ID = I_TENANT_ID
			    AND TO_CHAR(SYSDATE, 'YYYYMMDD') = SUBSTR(SHEETKEY,0,8)) CHK; 
	
		INSERT INTO TB_QA_VALUE_RESULT_HEADER(
			TENANT_ID,
			SHEETKEY,
			RECORD_ID,
			SHEET_ID,
			TIMES_ID,
			VALUE_YMD,
			VALUE_MEMB,
			AGENT_ID,
			QA_TM_KIND,
			TOTAL_COMMENT,
			QA_VALUE_STATUS,
			STATUS_TIME,
			NOTI_YN,
			CONFIRM_YN,
			REVALUE_YN
		) VALUES (
			I_TENANT_ID,
			V_SHEET_KEY,
			I_RECORD_ID,
			I_SHEET_ID,
			I_TIMES_ID,
			TO_CHAR(SYSDATE,'YYYYMMDD'),
			I_LOGIN_ID,
			I_AGENT_ID,
			I_QA_TM_KIND,
			I_TOTAL_COMMENT,
			I_QA_VALUE_STATUS,
			TO_CHAR(SYSDATE,'YYYYMMDD'),
			'0',
			'0',
			'0'
		);
	  
	  
		
		UPDATE TB_QA_VALUE_TIMES SET 
			TIMES_VALUE_STATUS = '20' -- 준비 중 -> 진행 중 UPDATE
		WHERE TENANT_ID = I_TENANT_ID 
		AND TIMES_ID = I_TIMES_ID 
		AND TIMES_VALUE_STATUS = '10';
		  
		UPDATE TB_QA_SHEET_HEADER SET 
			VALUE_YN = 1  -- 평가여부 UPDATE
		WHERE TENANT_ID = I_TENANT_ID
		AND SHEET_ID = I_SHEET_ID
		AND VALUE_YN = 0 
		;
		
		OPEN O_CUR_LIST FOR
		SELECT V_SHEET_KEY AS SHEET_KEY FROM DUAL;

	ELSIF I_GBN = 'U' THEN  
		
		UPDATE TB_QA_VALUE_RESULT_HEADER
		SET SHEET_ID = I_SHEET_ID
--			,TIMES_ID = I_TIMES_ID
			,VALUE_MEMB = I_LOGIN_ID
			,TOTAL_COMMENT = I_TOTAL_COMMENT
			,QA_VALUE_STATUS = I_QA_VALUE_STATUS	
--			,QA_TM_KIND = I_QA_TM_KIND
			,STATUS_TIME = SYSDATE
		WHERE SHEETKEY = I_SHEETKEY;
	
		OPEN O_CUR_LIST FOR
		SELECT I_SHEETKEY AS SHEET_KEY FROM DUAL;
			
	END IF;
	
	COMMIT; 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_QA2010M03_06
(
     I_TENANT_ID  	IN VARCHAR2
  	,I_SHEETKEY		IN VARCHAR2
	,I_MAJOR_CD		IN VARCHAR2
	,I_MINOR_CD		IN VARCHAR2
	,I_QA_SEBU_CD	IN VARCHAR2	
	,I_SCORE		IN VARCHAR2
	,I_VALUE_TEXT	IN VARCHAR2
	,I_SHEET_ID		IN VARCHAR2
	--,I_LAST_CHK		IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA2010M03_06
   PURPOSE:    평가표 DETAIL 등록

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/03
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA2010M03_06';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
--   DELETE FROM TB_QA_VALUE_RESULT_DETAIL
--   WHERE TENANT_ID = I_TENANT_ID 
--   AND SHEETKEY = I_SHEETKEY;
--   
--   INSERT INTO TB_QA_VALUE_RESULT_DETAIL
--			  (
--			    TENANT_ID,
--			    SHEETKEY,
--			    MAJOR_CD,
--			    MINOR_CD,
--			    QA_SEBU_CD,
--			    SCORE,
--			    VALUE_TEXT
--			  )
--	  VALUES
--			  (
--			    I_TENANT_ID,
--			    I_SHEETKEY,
--			    I_MAJOR_CD,
--			    I_MINOR_CD,
--			    I_QA_SEBU_CD,
--			    I_SCORE,
--			    I_VALUE_TEXT
--			  );
   
	MERGE INTO TB_QA_VALUE_RESULT_DETAIL A
    USING (
		SELECT
			I_TENANT_ID     AS I_TENANT_ID,
			I_SHEETKEY   	AS I_SHEETKEY,
			I_MAJOR_CD   	AS I_MAJOR_CD,
			I_MINOR_CD      AS I_MINOR_CD,
			I_QA_SEBU_CD    AS I_QA_SEBU_CD,
			I_SCORE			AS I_SCORE,
			I_VALUE_TEXT	AS I_VALUE_TEXT
		FROM DUAL
    ) T
    ON (A.TENANT_ID = TENANT_ID AND A.SHEETKEY = I_SHEETKEY
    	AND A.MAJOR_CD = I_MAJOR_CD AND A.MINOR_CD = I_MINOR_CD)
    WHEN MATCHED THEN
		UPDATE SET 
			QA_SEBU_CD  	= T.I_QA_SEBU_CD,
			SCORE       	= T.I_SCORE,
			VALUE_TEXT      = T.I_VALUE_TEXT
    WHEN NOT MATCHED THEN
		INSERT
			  (
			    TENANT_ID,
			    SHEETKEY,
			    MAJOR_CD,
			    MINOR_CD,
			    QA_SEBU_CD,
			    SCORE,
			    VALUE_TEXT
			  )
	  VALUES
			  (
			    T.I_TENANT_ID,
			    T.I_SHEETKEY,
			    T.I_MAJOR_CD,
			    T.I_MINOR_CD,
			    T.I_QA_SEBU_CD,
			    T.I_SCORE,
			    T.I_VALUE_TEXT
			  );
	  
	  COMMIT;
		
	--IF I_LAST_CHK = '1' THEN 
	--	SP_QA2010M03_07(I_TENANT_ID, I_SHEETKEY, I_SHEET_ID);
	--	END IF;	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA2010M03_07
(
     I_TENANT_ID  	IN VARCHAR2
  	,I_SHEETKEY		IN VARCHAR2
  	,I_SHEET_ID		IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA2010M03_07
   PURPOSE:    평가표 총점 및 100점 환상 점수 UPDATE

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/25
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA2010M03_06';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    V_TOTAL_SCORE NUMBER(3) := 0;
    V_SHEET_SCORE NUMBER(3) := 0;
    V_CONVERT_SCORE NUMBER(5,2) := 0;
BEGIN
   
   	/*TOTAL_SCORE 구하기*/
   	SELECT SUM(S.SCORE) AS SCORE
   	INTO V_TOTAL_SCORE
   	FROM TB_QA_VALUE_RESULT_DETAIL S 
   	WHERE S.TENANT_ID = I_TENANT_ID 
   		AND S.SHEETKEY = I_SHEETKEY;

	DBMS_OUTPUT.PUT_LINE('V_TOTAL_SCORE : ' || V_TOTAL_SCORE);
	

   	/*평가표 총점 구하기*/
	SELECT SUM(S.SCORE) 
	INTO V_SHEET_SCORE 
	FROM TB_QA_SHEET_DETAIL S
	WHERE S.TENANT_ID = I_TENANT_ID 
		AND S.SHEET_ID = I_SHEET_ID 
		AND S.QA_SEBU_CD = '0';
   	
		DBMS_OUTPUT.PUT_LINE('V_SHEET_SCORE : ' || V_SHEET_SCORE);
   	
   	IF(V_TOTAL_SCORE != 0) THEN
   		V_CONVERT_SCORE := TO_NUMBER(TO_CHAR(ROUND(V_TOTAL_SCORE/V_SHEET_SCORE * 100,2),'FM990.00'));
   	END IF;
   	
   		DBMS_OUTPUT.PUT_LINE('V_CONVERT_SCORE : ' || V_CONVERT_SCORE);
   	
   	UPDATE TB_QA_VALUE_RESULT_HEADER
   		SET TOTAL_SCORE = V_TOTAL_SCORE
   			,CONVERT_SCORE = V_CONVERT_SCORE
	WHERE TENANT_ID = I_TENANT_ID
	AND SHEETKEY = I_SHEETKEY
	;
	  
	COMMIT;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_QA2020M01_02 (
   I_TENANT_ID    		IN VARCHAR2
 , I_SHEETKEY			IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA2020M01_02
   PURPOSE:    평가이력 조회 - 평가건삭제
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/10  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
 DELETE FROM TB_QA_VALUE_RESULT_DETAIL WHERE TENANT_ID = I_TENANT_ID AND SHEETKEY = I_SHEETKEY;
 DELETE FROM TB_QA_VALUE_RESULT_HEADER WHERE TENANT_ID = I_TENANT_ID AND SHEETKEY = I_SHEETKEY;

 COMMIT;

				      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_QA2020S01_01
(
     I_TENANT_ID  		IN VARCHAR2
    ,I_SHEETKEY			IN VARCHAR2
  	,I_AGENT_ID			IN VARCHAR2
  	,I_SANGSIN_COMMENT	IN VARCHAR2
  	,I_MANAGER_ID		IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA2020S01_01
   PURPOSE:    평가이력조회 - 상신

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/09
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA2020S01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################

BEGIN
	MERGE INTO TB_QA_VALUE_RESULT_PROC IL
	USING (SELECT I_TENANT_ID as I_TENANT_ID, I_SHEETKEY as I_SHEETKEY, I_AGENT_ID as I_AGENT_ID, I_SANGSIN_COMMENT as I_SANGSIN_COMMENT, I_MANAGER_ID as I_MANAGER_ID FROM DUAL) T
	ON (IL.TENANT_ID = T.I_TENANT_ID AND IL.SHEETKEY = T.I_SHEETKEY)
    WHEN MATCHED THEN
		UPDATE SET 
			SANGSIN_ID = T.I_AGENT_ID,
			SANGSIN_DT = SYSDATE,
			SANGSIN_COMMENT = T.I_SANGSIN_COMMENT,
			MANAGER_ID = T.I_MANAGER_ID
    WHEN NOT MATCHED THEN
		INSERT(
			TENANT_ID, SHEETKEY, SANGSIN_ID, SANGSIN_DT, SANGSIN_COMMENT, MANAGER_ID
		) VALUES (
			I_TENANT_ID, I_SHEETKEY, I_AGENT_ID, SYSDATE, I_SANGSIN_COMMENT, I_MANAGER_ID
		);

	UPDATE TB_QA_VALUE_RESULT_HEADER SET 
		QA_VALUE_STATUS = '30' -- 상신상태로 업데이트
	WHERE TENANT_ID = I_TENANT_ID
	  AND SHEETKEY = I_SHEETKEY
	  AND QA_VALUE_STATUS = '20'; --완료건만
	
	COMMIT;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA2020S01_02
(
     I_TENANT_ID  		IN VARCHAR2
    ,I_SHEETKEY			IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA2020S01_02
   PURPOSE:    평가이력조회 - 상신취소

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/09
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA2020S01_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################

BEGIN

	DELETE FROM TB_QA_VALUE_RESULT_PROC WHERE TENANT_ID = I_TENANT_ID AND SHEETKEY = I_SHEETKEY;
	
	UPDATE TB_QA_VALUE_RESULT_HEADER SET 
		QA_VALUE_STATUS = '20' --완료건으로 업데이트
	WHERE TENANT_ID = I_TENANT_ID
	  AND SHEETKEY = I_SHEETKEY
	  AND QA_VALUE_STATUS = '30'; -- 상신건만
	
	COMMIT;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_QA3010M01_01 (
   I_TENANT_ID    		IN VARCHAR2
 , I_LOGIN_DEPT_CD		IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_VALUE_FRM_YM  		IN VARCHAR2  
 , I_VALUE_END_YM  		IN VARCHAR2  
 , I_QA_EVAL_TYPE	 	IN VARCHAR2
 , I_QAA_ID		   		IN VARCHAR2
 , I_AGENT_ID      		IN VARCHAR2
 , O_CUR_LIST     		 OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA3010M01_01
   PURPOSE:    평가진행현황 - 상단 평가계획조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/02  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    WITH TEMP_LIST AS (
		SELECT A.TIMES_NM
				,B.SHEET_NM
				,FN_CM_STRING_FORMAT(A.VALUE_FRM_DT, '@@@@-@@-@@') AS VALUE_FRM_DT
				,FN_CM_STRING_FORMAT(A.VALUE_END_DT, '@@@@-@@-@@') AS VALUE_END_DT
				,A.VALUE_CNT
				,A.TIMES_ID
		FROM TB_QA_VALUE_TIMES A 
		INNER JOIN TB_QA_SHEET_HEADER B
		  ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
		WHERE A.TENANT_ID = I_TENANT_ID
--		  AND A.TIMES_ID = I_TIMES_ID
		  AND SUBSTR(A.TIMES_ID,0,6) BETWEEN I_VALUE_FRM_YM AND I_VALUE_END_YM
		  AND A.QA_EVAL_TYPE = CASE WHEN I_QA_EVAL_TYPE IS NULL THEN A.QA_EVAL_TYPE ELSE I_QA_EVAL_TYPE END
		  AND EXISTS (SELECT 1
						FROM TB_CM_ACCESS_SCOPE S
						WHERE S.TENANT_ID = A.TENANT_ID
						  AND S.SCOPE_GUBUN = 50		-- 평가계획 관련 ITEM
						  AND S.ITEM_ID = A.TIMES_ID
						  AND S.DEPT_CD     = I_LOGIN_DEPT_CD
						)       
		
		), SCORE_LIST AS (
		SELECT A.TIMES_ID
				,COUNT(DISTINCT B.QAA_ID) AS QAA_CNT
				,COUNT(DISTINCT C.AGENT_ID) AS AGENT_CNT
				,COUNT(D.SHEETKEY) AS VALUE_CNT
				,NVL(MAX(D.TOTAL_SCORE),0) AS MAX_SCORE
				,NVL(MIN(D.TOTAL_SCORE),0) AS MIN_SCORE
				,TO_CHAR(ROUND(NVL(AVG(D.TOTAL_SCORE),0),2), 'FM990.00') AS AVG_SCORE
				,TO_CHAR(ROUND(NVL(STDDEV_POP(D.TOTAL_SCORE),0),2),'FM990.00') AS STD_SCORE
				,SUM(CASE WHEN D.QA_VALUE_STATUS = '10' THEN 1 ELSE 0 END) AS TYPE2
				,SUM(CASE WHEN D.QA_VALUE_STATUS = '20' THEN 1 ELSE 0 END) AS TYPE3
				,SUM(CASE WHEN D.QA_VALUE_STATUS = '30' THEN 1 ELSE 0 END) AS TYPE4
				,SUM(CASE WHEN D.QA_VALUE_STATUS = '40' THEN 1 ELSE 0 END) AS TYPE5
				,(SELECT COUNT(S.AGENT_ID) FROM TB_QA_VALUE_ALLOC_AGENT S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS AGENT_CNT2
				,(SELECT SUM(S.SCORE) FROM TB_QA_SHEET_DETAIL S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID AND S.QA_SEBU_CD = '0') AS SHEET_SCORE
		FROM TB_QA_VALUE_TIMES A 
		INNER JOIN TB_QA_VALUE_ALLOC_QAA B
		  ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID)
		INNER JOIN TB_QA_VALUE_ALLOC_AGENT C
		  ON (A.TENANT_ID = C.TENANT_ID AND A.TIMES_ID = C.TIMES_ID AND B.QAA_ID = C.QAA_ID)
		LEFT JOIN TB_QA_VALUE_RESULT_HEADER D
		  ON (A.TENANT_ID = D.TENANT_ID AND A.TIMES_ID = D.TIMES_ID AND B.QAA_ID = D.VALUE_MEMB AND C.AGENT_ID = D.AGENT_ID)
		WHERE A.TENANT_ID = I_TENANT_ID
--		  AND A.TIMES_ID = I_TIMES_ID
--		  AND D.REVALUE_SHEETKEY IS NULL
		  AND SUBSTR(A.TIMES_ID,0,6) BETWEEN I_VALUE_FRM_YM AND I_VALUE_END_YM
		  AND A.QA_EVAL_TYPE = CASE WHEN I_QA_EVAL_TYPE IS NULL THEN A.QA_EVAL_TYPE ELSE I_QA_EVAL_TYPE END
--		  AND (( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, B.QAA_ID) > 0))
--		  AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, B.QAA_ID) > 0))
		  AND EXISTS (SELECT 1
						FROM TB_CM_ACCESS_SCOPE S
						WHERE S.TENANT_ID = A.TENANT_ID
							AND S.SCOPE_GUBUN = 50		-- 평가계획 관련 ITEM
							AND S.ITEM_ID = A.TIMES_ID
						    AND S.DEPT_CD     = I_LOGIN_DEPT_CD
						)
		  AND EXISTS (SELECT 1
					    FROM TB_QA_VALUE_ALLOC_QAA S
					   WHERE S.TENANT_ID = A.TENANT_ID
						 AND S.TIMES_ID = A.TIMES_ID
						 AND (( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, S.QAA_ID) > 0)))
		  AND EXISTS (SELECT 1
					    FROM TB_QA_VALUE_ALLOC_AGENT S
					   WHERE S.TENANT_ID = A.TENANT_ID
						 AND S.TIMES_ID = A.TIMES_ID
						 AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, S.AGENT_ID) > 0)))	                    
		GROUP BY A.TENANT_ID, A.TIMES_ID, A.SHEET_ID 
		)
		
		SELECT A.TIMES_ID
				,A.TIMES_NM
				,A.SHEET_NM
				,A.VALUE_FRM_DT || '~' || A.VALUE_END_DT AS VALUE_DT
				,B.QAA_CNT
				,B.AGENT_CNT
				,B.VALUE_CNT		-- 실제 평가 건수
				,TO_CHAR(ROUND(B.VALUE_CNT/(A.VALUE_CNT*B.AGENT_CNT2),2) * 100, 'FM990.00') AS VALUE_PERCENT
				,B.SHEET_SCORE
				,B.AVG_SCORE
				,B.MAX_SCORE || '/' || B.MIN_SCORE AS MIN_MAX
				,B.STD_SCORE
				,(A.VALUE_CNT*B.AGENT_CNT2)-(B.TYPE2+B.TYPE3+B.TYPE4+B.TYPE5) AS TYPE1
				,B.TYPE2
				,B.TYPE3
				,B.TYPE4
				,B.TYPE5
		FROM TEMP_LIST A
		INNER JOIN SCORE_LIST B
		  ON A.TIMES_ID = B.TIMES_ID
		;
    
    
    
    
    
    
    
--	SELECT 
--		MAIN.TIMES_NM
--		,MAIN.SHEET_NM
--		,FN_CM_STRING_FORMAT(MAIN.VALUE_FRM_DT,'@@@@-@@-@@')||'~'||FN_CM_STRING_FORMAT(MAIN.VALUE_END_DT,'@@@@-@@-@@') AS VALUE_DT
--		,MAIN.QAA_CNT
--		,MAIN.AGENT_CNT
--		,MAIN.SHEET_SCORE
--		,CASE WHEN MAIN.MIN_SCORE IS NOT NULL THEN MAIN.MAX_SCORE||'/'||MAIN.MIN_SCORE ELSE '' END AS MIN_MAX
--		,TO_CHAR(MAIN.AVG_SCORE, 'FM990.00') AS AVG_SCORE
--		,MAIN.TYPE2
--		,MAIN.TYPE3
--		,MAIN.TYPE4
--		,MAIN.TYPE5
--		,MAIN.VALUE_CNT
--		,MAIN.STD_SCORE
--		,MAIN.TIMES_ID
--    	,CASE WHEN MAIN.VALUE_CNT = 0 OR MAIN.AGENT_CNT = 0 THEN '0'
--     		ELSE TO_CHAR(ROUND(MAIN.VALUE_CNT/(MAIN.AGENT_CNT*MAIN.TIMES_VALUE_CNT)*100,2),'FM990.00') END AS VALUE_PERCENT
--		,(MAIN.AGENT_CNT*MAIN.TIMES_VALUE_CNT)-(TYPE2+TYPE3+TYPE4+TYPE5) AS TYPE1
--	FROM (       
--		SELECT 
--			SUB.TIMES_NM
--			,SUB.SHEET_NM
--			,SUB.VALUE_FRM_DT
--			,SUB.VALUE_END_DT
--			,SUB.QAA_CNT
--			,SUB.AGENT_CNT
--			,SUB.SHEET_SCORE
--			,SUB.TIMES_VALUE_CNT
--			,SUB.TIMES_ID
--			,COUNT(SUB.SHEETKEY) AS VALUE_CNT
--			,MAX(SUB.TOTAL_SCORE) AS MAX_SCORE
--			,MIN(SUB.TOTAL_SCORE) AS MIN_SCORE
--			,AVG(SUB.TOTAL_SCORE) AS AVG_SCORE
--			,TO_CHAR(ROUND(STDDEV_POP(SUB.TOTAL_SCORE),2),'FM990.00') AS STD_SCORE
--			,SUM(SUB.TYPE2) AS TYPE2
--			,SUM(SUB.TYPE3) AS TYPE3
--			,SUM(SUB.TYPE4) AS TYPE4
--			,SUM(SUB.TYPE5) AS TYPE5
--		FROM (
--			SELECT 
--				A.TIMES_NM
--				,(SELECT S.SHEET_NM FROM TB_QA_SHEET_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID) AS SHEET_NM
--				,A.VALUE_FRM_DT
--				,A.VALUE_END_DT
--				,A.TIMES_ID
--				,(SELECT COUNT(S.QAA_ID) FROM TB_QA_VALUE_ALLOC_QAA S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS QAA_CNT
--				,(SELECT COUNT(S.AGENT_ID) FROM TB_QA_VALUE_ALLOC_AGENT S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS AGENT_CNT
--				,A.VALUE_CNT AS TIMES_VALUE_CNT
--				,(SELECT SUM(S.SCORE) FROM TB_QA_SHEET_DETAIL S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID AND S.QA_SEBU_CD = '0' AND S.PLUS_MINUS = 0) AS SHEET_SCORE
--				,B.TOTAL_SCORE
--				,A.SHEET_ID
--				,CASE WHEN B.QA_VALUE_STATUS = '10' THEN 1 ELSE 0 END AS TYPE2
--				,CASE WHEN B.QA_VALUE_STATUS = '20' THEN 1 ELSE 0 END AS TYPE3
--				,CASE WHEN B.QA_VALUE_STATUS = '30' THEN 1 ELSE 0 END AS TYPE4
--				,CASE WHEN B.QA_VALUE_STATUS = '40' THEN 1 ELSE 0 END AS TYPE5
--				,B.SHEETKEY
--			FROM TB_QA_VALUE_TIMES A 
--			LEFT JOIN TB_QA_VALUE_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID AND A.SHEET_ID = B.SHEET_ID)
--			WHERE A.TENANT_ID = I_TENANT_ID
--			AND SUBSTR(A.TIMES_ID,0,6) BETWEEN I_VALUE_FRM_YM AND I_VALUE_END_YM
--			AND A.QA_EVAL_TYPE = CASE WHEN I_QA_EVAL_TYPE IS NULL THEN A.QA_EVAL_TYPE ELSE I_QA_EVAL_TYPE END
--			AND EXISTS (SELECT 1
--						FROM TB_QA_VALUE_ALLOC_QAA S
--						WHERE S.TENANT_ID = A.TENANT_ID
--						AND S.TIMES_ID = A.TIMES_ID
--						AND (( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, S.QAA_ID) > 0)))
--			AND EXISTS (SELECT 1
--						FROM TB_QA_VALUE_ALLOC_AGENT S
--						WHERE S.TENANT_ID = A.TENANT_ID
--						AND S.TIMES_ID = A.TIMES_ID
--						AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, S.AGENT_ID) > 0)))	      
--			AND EXISTS (SELECT 1
--						FROM TB_CM_ACCESS_SCOPE S
--						WHERE S.TENANT_ID = A.TENANT_ID
--							AND S.SCOPE_GUBUN = 50		-- 평가계획 관련 ITEM
--							AND S.ITEM_ID = A.TIMES_ID
--						    AND S.DEPT_CD     = I_LOGIN_DEPT_CD
--						)                        
--		) SUB 
--		GROUP BY SUB.TIMES_NM
--				,SUB.SHEET_NM
--				,SUB.VALUE_FRM_DT
--				,SUB.VALUE_END_DT
--				,SUB.QAA_CNT
--				,SUB.AGENT_CNT
--				,SUB.SHEET_SCORE
--				,SUB.TIMES_VALUE_CNT
--				,SUB.TIMES_ID
--		ORDER BY SUB.TIMES_ID
--	) MAIN;
				      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA3010M01_03 (
   I_TENANT_ID      IN VARCHAR2
 , I_TIMES_ID       IN VARCHAR2  
 , I_QAA_ID			IN VARCHAR2
 , I_AGENT_ID		IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA3030M01_03
   PURPOSE:    평가항목별보고서 - 개인별/소속별/업무그룹별/근속기간별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/29  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3030M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	SELECT A.TENANT_ID
			,A.SHEETKEY AS CODE
			,A.MAJOR_CD||A.MINOR_CD AS COLUMN_ID
			,A.SCORE
		FROM TB_QA_VALUE_RESULT_DETAIL A
		WHERE A.TENANT_ID = 'BT'
		AND	A.SHEETKEY IN (SELECT S.SHEETKEY FROM TB_QA_VALUE_RESULT_HEADER S
							WHERE S.TENANT_ID = A.TENANT_ID
								AND S.TIMES_ID = I_TIMES_ID
							AND EXISTS (SELECT 1
			                          FROM TB_QA_VALUE_ALLOC_QAA S
			                          WHERE S.TENANT_ID = A.TENANT_ID
			                          AND S.TIMES_ID = I_TIMES_ID
			                          AND (( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, S.QAA_ID) > 0)))
			              AND EXISTS (SELECT 1
			                          FROM TB_QA_VALUE_ALLOC_AGENT S
			                          WHERE S.TENANT_ID = A.TENANT_ID
			                          AND S.TIMES_ID = I_TIMES_ID
			                          AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, S.AGENT_ID) > 0)))
						);
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA3020M01_02 (
   I_TENANT_ID       IN VARCHAR2
 , I_SHEETKEY		 IN VARCHAR2
 , I_COMMENT		 IN VARCHAR2
 , I_LOGIN_ID		 IN VARCHAR2
 , I_GBN			 IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA3020M01_02
   PURPOSE:    평가 승인 관리 (승인, 반려, 공지, 공지취소) 처리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/09	JIN 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
	IF I_GBN = 'SI' THEN -- 승인
		UPDATE TB_QA_VALUE_RESULT_HEADER A
			SET A.QA_VALUE_STATUS = '40'
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY
		;
		
		UPDATE TB_QA_VALUE_RESULT_PROC A
			SET A.SEUNGIN_DT = SYSDATE
				,A.SEUNGIN_COMMENT = I_COMMENT
				,A.MODIFY_AGENT_ID = I_LOGIN_ID
				,A.MODIFY_DT = SYSDATE
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY
		;
	
	ELSIF I_GBN = 'BR' THEN -- 반려
		UPDATE TB_QA_VALUE_RESULT_HEADER A
			SET A.QA_VALUE_STATUS = '90'
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY
		;
			
		UPDATE TB_QA_VALUE_RESULT_PROC A
			SET A.BANRYU_DT = SYSDATE
				,A.BANRYU_COMMENT = I_COMMENT
				,A.MODIFY_AGENT_ID = I_LOGIN_ID
				,A.MODIFY_DT = SYSDATE
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY
		;	
			
	ELSIF I_GBN = 'NY' THEN -- 공지
		UPDATE TB_QA_VALUE_RESULT_HEADER A
			SET A.NOTI_YN = 1
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY
		;	
		
		UPDATE TB_QA_VALUE_RESULT_PROC A
			SET A.NOTI_DT = SYSDATE
				,A.NOTI_COMMENT = I_COMMENT
				,A.MODIFY_AGENT_ID = I_LOGIN_ID
				,A.MODIFY_DT = SYSDATE
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY
			;
			
    ELSIF I_GBN = 'NC' THEN -- 공지 취소
		UPDATE TB_QA_VALUE_RESULT_HEADER A
			SET A.NOTI_YN = 0
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY
		;
		
		UPDATE TB_QA_VALUE_RESULT_PROC A
			SET A.NOTI_DT = SYSDATE
				,A.NOTI_COMMENT = NULL
				,A.MODIFY_AGENT_ID = I_LOGIN_ID
				,A.MODIFY_DT = SYSDATE
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY
			;
    
    
    END IF;
    
    COMMIT;
    
    
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA3020S01_01" (
   I_TENANT_ID     IN VARCHAR2
 , I_SHEETKEY      IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA3020S01_01
   PURPOSE:    QA 재평가요청 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/24  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	V_SHEET_ID		VARCHAR2(12) := '';
 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    

	SELECT SHEET_ID
	  INTO V_SHEET_ID
	FROM TB_QA_VALUE_RESULT_HEADER A
	WHERE A.TENANT_ID = I_TENANT_ID
	   AND A.SHEETKEY = I_SHEETKEY;

    OPEN O_CUR_LIST FOR 
	SELECT MAIN.*
				,SUB.QA_SEBU_CD AS SEL_SEBU_CD
				,NVL(SUB.VALUE_TEXT,' ') AS VALUE_TEXT
				,NVL(SUB.SCORE, 0) AS SEL_SCORE
		FROM(
			SELECT
			    A.MAJOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
				, A.MINOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
				, A.QA_SEBU_CD
				, FN_CM_GET_CODE_NM(A.TENANT_ID,'QA_SEBU_CD', A.QA_SEBU_CD) AS QA_SEBU_NM 
				, NVL(REPLACE(A.SHEET_TEXT, CHR(10), '<br>'),' ') AS SHEET_TEXT
				, A.SCORE
				, A.PLUS_MINUS
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.QA_SEBU_CD ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.SCORE ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD_SCORE
			FROM TB_QA_SHEET_DETAIL A
			WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEET_ID = V_SHEET_ID
			
			UNION ALL
			
			SELECT 
				A.MAJOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
				, A.MINOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
				, '1' AS QA_SEBU_CD
				, '평가' AS QA_SEBU_NM
				, ' ' AS SHEET_TEXT
				, 0 AS SCORE
				, 0 AS PLUS_MINUS
				, '' AS SEBU_CD
				, '' AS SEBU_CD_SCORE
			FROM TB_QA_SHEET_DETAIL A
			WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEET_ID = V_SHEET_ID
			GROUP BY A.TENANT_ID, A.MAJOR_CD, A.MINOR_CD
			
			UNION ALL
			
			SELECT 
				A.MAJOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
				, A.MINOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
				, '2' AS QA_SEBU_CD
				, '요청' AS QA_SEBU_NM
				, NVL(A.VALUE_TEXT, ' ') AS SHEET_TEXT
				, A.SCORE
				, 0 AS PLUS_MINUS
				, '' AS SEBU_CD
				, '' AS SEBU_CD_SCORE
			FROM TB_QA_REVALUE_DETAIL A
			WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY

			ORDER BY MAJOR_CD, MINOR_CD, QA_SEBU_CD
		) MAIN 
		LEFT JOIN (
			SELECT MAJOR_CD, MINOR_CD, QA_SEBU_CD, VALUE_TEXT, SCORE
			FROM TB_QA_VALUE_RESULT_DETAIL 
			WHERE TENANT_ID = I_TENANT_ID 
			AND SHEETKEY = I_SHEETKEY
		) SUB ON MAIN.MAJOR_CD = SUB.MAJOR_CD AND MAIN.MINOR_CD = SUB.MINOR_CD
		;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA3020S01_02 (
   I_TENANT_ID    		IN VARCHAR2
 , I_SHEETKEY	  		IN VARCHAR2
 , I_QA_VALUE_STATUS	IN VARCHAR2
 , I_TOTAL_COMMENT		IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA3020S01_02
   PURPOSE:    통화품질 등록 및 수정(HEADER)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/16  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3020S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
   V_SHEETKEY		VARCHAR2(12)		:='';
 
 BEGIN
 
-- ********************************************************************************
-- 0. 등록
-- ********************************************************************************    

	
	
		SELECT 
			CASE WHEN CHK.SHEETKEY IS NULL THEN TO_CHAR(sysdate, 'YYYYMMDD')||'0001'
			ELSE TO_CHAR(sysdate, 'YYYYMMDD')||SUBSTR(CHK.SHEETKEY,9,4)
			END INTO V_SHEETKEY
		  FROM
			(SELECT 
				MAX(SHEETKEY+1) AS SHEETKEY
			   FROM TB_QA_VALUE_RESULT_HEADER 
			  WHERE TENANT_ID = I_TENANT_ID
			    AND TO_CHAR(SYSDATE, 'YYYYMMDD') = SUBSTR(SHEETKEY,0,8)) CHK; 
	
		INSERT INTO TB_QA_VALUE_RESULT_HEADER(
			TENANT_ID,
			SHEETKEY,
			RECORD_ID,
			SHEET_ID,
			TIMES_ID,
			VALUE_YMD,
			VALUE_MEMB,
			AGENT_ID,
			QA_TM_KIND,
			TOTAL_COMMENT,
			QA_VALUE_STATUS,
			STATUS_TIME,
			NOTI_YN,
			CONFIRM_YN,
			REVALUE_YN
		) SELECT A.TENANT_ID
				,V_SHEETKEY
				,A.RECORD_ID
				,A.SHEET_ID
				,A.TIMES_ID
				,TO_CHAR(SYSDATE,'YYYYMMDD')
				,A.VALUE_MEMB
				,A.AGENT_ID
				,A.QA_TM_KIND
				,I_TOTAL_COMMENT
				,I_QA_VALUE_STATUS
				,TO_CHAR(SYSDATE,'YYYYMMDD')
				,0
				,0
				,0
		FROM TB_QA_VALUE_RESULT_HEADER A
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEETKEY = I_SHEETKEY
		;
	  
		UPDATE TB_QA_VALUE_RESULT_HEADER SET REVALUE_YN = 1
									,REVALUE_SHEETKEY = V_SHEETKEY
		WHERE TENANT_ID = I_TENANT_ID 
			AND SHEETKEY = I_SHEETKEY
		;
		
		
		OPEN O_CUR_LIST FOR
		SELECT V_SHEETKEY AS SHEET_KEY FROM DUAL;
      
	     COMMIT;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA3030S02_01" (
   I_TENANT_ID     IN VARCHAR2
 , I_SHEETKEY	   IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA3030S02_01
   PURPOSE:    재평가 요청 점수 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/11  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3030S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT (SELECT S.ITEM_NM FROM TB_QA_SHEET_ITEM S WHERE S.TENANT_ID = B.TENANT_ID AND S.MAJOR_CD = B.MAJOR_CD AND S.MINOR_CD = '00000') AS MAJOR_NM
		,C.ITEM_NM AS MINOR_NM
		,B.MAJOR_CD
		,B.MINOR_CD
		,B.SCORE
		,B.VALUE_TEXT
		,(SELECT WM_CONCAT(S.SCORE) FROM TB_QA_SHEET_DETAIL S WHERE S.TENANT_ID = A.TENANT_ID AND S.MAJOR_CD = B.MAJOR_CD AND S.MINOR_CD = B.MINOR_CD AND S.SHEET_ID = A.SHEET_ID AND QA_SEBU_CD != '0') AS SHEET_SCORE
	FROM TB_QA_VALUE_RESULT_HEADER A
	INNER JOIN TB_QA_VALUE_RESULT_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEETKEY = B.SHEETKEY)
	INNER JOIN TB_QA_SHEET_ITEM C ON (A.TENANT_ID = C.TENANT_ID AND B.MAJOR_CD = C.MAJOR_CD AND B.MINOR_CD = C.MINOR_CD)
	WHERE A.TENANT_ID = I_TENANT_ID
		AND A.SHEETKEY = I_SHEETKEY
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA3030S02_02 (
   I_TENANT_ID		IN VARCHAR2
 , I_SHEETKEY		IN VARCHAR2
 , I_LOGIN_ID		IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA3030S02_02
   PURPOSE:    재평가요청 상세정보

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/14  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3030S02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
	UPDATE TB_QA_VALUE_RESULT_PROC SET REQ_REVALUE_YN = 1
								,REQ_REVALUE_DT = SYSDATE
								,MODIFY_AGENT_ID = I_LOGIN_ID
								,MODIFY_DT = SYSDATE
	WHERE TENANT_ID = I_TENANT_ID
		AND SHEETKEY = I_SHEETKEY;
	
	COMMIT;
			
 

					
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA3030S02_03 (
   I_TENANT_ID		IN VARCHAR2
 , I_SHEETKEY		IN VARCHAR2
 , I_MAJOR_CD		IN VARCHAR2
 , I_MINOR_CD		IN VARCHAR2
 , I_SCORE			IN NUMBER
 , I_SHEET_TEXT		IN VARCHAR2
 , I_LOGIN_ID		IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA3030S02_03
   PURPOSE:    재평가요청 상세정보

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/14  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3030S02_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
	INSERT INTO TB_QA_REVALUE_DETAIL (TENANT_ID
 									,SHEETKEY
 									,MAJOR_CD
 									,MINOR_CD
 									,SCORE
 									,VALUE_TEXT
 									,CREATE_AGENT_ID
 									,CREATE_DT
 									)
	VALUES (I_TENANT_ID
			,I_SHEETKEY
			,I_MAJOR_CD
			,I_MINOR_CD
			,I_SCORE
			,I_SHEET_TEXT
			,I_LOGIN_ID
			,SYSDATE
			);
	
	COMMIT;
			
 

					
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA4010M01_01" (
   I_TENANT_ID     IN VARCHAR2
 , I_DEPT_CD       IN VARCHAR2
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_QA_EVAL_TYPE  IN VARCHAR2
 , I_TIMES_ID	   IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA4010M01_01
   PURPOSE:    종합평가결과 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/24  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA4010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 

	SELECT MAIN.*
		 ,VALUE_CNT||'/'||TARGET_CNT AS INFO
		 ,CASE WHEN TARGET_CNT = 0 THEN ''
				WHEN VALUE_CNT = 0 THEN ''
				ELSE TO_CHAR(ROUND(VALUE_CNT/TARGET_CNT*100,2), 'FM990.00')||'%' END  AS STARE_RATIO /* 응시율 */
		  ,TO_CHAR(ROUND((TOTAL_SCORE/(CASE VALUE_CNT WHEN 0 THEN 1 ELSE VALUE_CNT END)),2), 'FM990.00') AS AVG_SCORE
	FROM (
			SELECT SUBSTR(A.TIMES_ID,0,4)||'-'||SUBSTR(A.TIMES_ID,5,2) AS STD_MONTH
					,A.TIMES_NM
					,A.TIMES_ID
					,FN_CM_GET_CODE_NM(A.TENANT_ID,'QA_EVAL_TYPE',A.QA_EVAL_TYPE) AS QA_EVAL_TYPE
					,A.KPI_YN
					,(SELECT S.SHEET_NM FROM TB_QA_SHEET_HEADER S WHERE S.TENANT_ID=A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID) AS SHEET_NM
					,A.SHEET_ID
					,(SELECT COUNT(S.SHEETKEY) FROM TB_QA_VALUE_RESULT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID AND S.REVALUE_SHEETKEY IS NULL) AS VALUE_CNT
					,(SELECT COUNT(S.AGENT_ID) FROM TB_QA_VALUE_ALLOC_AGENT S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID)*A.VALUE_CNT AS TARGET_CNT
					,(SELECT SUM(S.TOTAL_SCORE) FROM TB_QA_VALUE_RESULT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID AND S.REVALUE_SHEETKEY IS NULL) AS TOTAL_SCORE
			FROM TB_QA_VALUE_TIMES A 
			WHERE A.TENANT_ID = I_TENANT_ID
			AND SUBSTR(A.TIMES_ID,0,6) BETWEEN I_DT_FROM AND I_DT_TO
			AND A.QA_EVAL_TYPE = CASE WHEN I_QA_EVAL_TYPE IS NULL THEN A.QA_EVAL_TYPE ELSE I_QA_EVAL_TYPE END
		    AND (( I_TIMES_ID IS NULL AND 1=1 ) OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
		    AND I_DEPT_CD IN (SELECT S.DEPT_CD FROM TB_CM_ACCESS_SCOPE S 
			 				WHERE S.TENANT_ID = A.TENANT_ID 
			 				  AND S.ITEM_ID = A.TIMES_ID
		  	 				  AND S.SCOPE_GUBUN ='50')
		) MAIN

    ;
    
    
    
    
    
    
    
--    WITH TEMP_LIST AS (
--	SELECT SUBSTR(A.TIMES_ID,0,4)||'-'||SUBSTR(A.TIMES_ID,5,2) AS STD_MONTH
--			,A.TIMES_NM
--			,A.TIMES_ID
--			,FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_EVAL_TYPE',A.QA_EVAL_TYPE) AS QA_EVAL_TYPE
----			,CASE WHEN A.KPI_YN = 0 THEN 'O' ELSE 'X' END AS KPI_YN
--			,A.KPI_YN
--			,(SELECT SHEET_NM FROM TB_QA_SHEET_HEADER X WHERE X.TENANT_ID=A.TENANT_ID AND X.SHEET_ID = A.SHEET_ID) AS SHEET_NM
--			,A.SHEET_ID
--			,(SELECT COUNT(S.SHEETKEY) FROM TB_QA_VALUE_RESULT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS VALUE_CNT
--			,(SELECT COUNT(S.AGENT_ID) FROM TB_QA_VALUE_ALLOC_AGENT S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID)*A.VALUE_CNT AS TARGET_CNT
--			--,(SELECT SUM(SCORE) FROM TB_QA_VALUE_RESULT_DETAIL WHERE TENANT_ID = A.TENANT_ID AND SHEETKEY IN (SELECT SHEETKEY FROM TB_QA_VALUE_RESULT_HEADER WHERE TIMES_ID = A.TIMES_ID)) AS TOTAL_SCORE
--			,(SELECT SUM(S.TOTAL_SCORE) FROM TB_QA_VALUE_RESULT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS TOTAL_SCORE
--	FROM TB_QA_VALUE_TIMES A 
--	WHERE A.TENANT_ID = I_TENANT_ID
--	AND SUBSTR(A.TIMES_ID,0,6) BETWEEN I_DT_FROM AND I_DT_TO
--	AND A.QA_EVAL_TYPE = CASE WHEN I_QA_EVAL_TYPE IS NULL THEN A.QA_EVAL_TYPE ELSE I_QA_EVAL_TYPE END
--    AND (( I_TIMES_NM IS NULL AND 1=1 ) OR (I_TIMES_NM IS NOT NULL AND INSTR(A.TIMES_NM, I_TIMES_NM) > 0))
--    AND I_DEPT_CD IN (SELECT S.DEPT_CD FROM TB_CM_ACCESS_SCOPE S 
--	 				WHERE S.TENANT_ID = A.TENANT_ID 
--	 				  AND S.ITEM_ID = A.TIMES_ID
--  	 				  AND S.SCOPE_GUBUN ='50')
--	)
--	SELECT A.*
--		  ,VALUE_CNT||'/'||TARGET_CNT AS INFO
--		  ,CASE WHEN TARGET_CNT = 0 THEN ''
--		  		WHEN VALUE_CNT = 0 THEN ''
--		  		 ELSE TO_CHAR(ROUND(VALUE_CNT/TARGET_CNT*100,2), 'FM990.00')||'%' END  AS STARE_RATIO /* 응시율 */
--		  ,TO_CHAR(ROUND((TOTAL_SCORE/(CASE VALUE_CNT WHEN 0 THEN 1 ELSE VALUE_CNT END)),2), 'FM990.00') AS AVG_SCORE
--	FROM TEMP_LIST A
--    ;
--      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA4010M01_02" (
   I_TENANT_ID     IN VARCHAR2
 , I_TIMES_ID	   IN VARCHAR2
 , I_TIMES_NM	   IN VARCHAR2
 , I_SHEET_NM	   IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA4010M01_02
   PURPOSE:    종합평가결과 - 개인별

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/11  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA4010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT FN_CM_GET_AGENT_NM(I_TENANT_ID,A.QAA_ID) AS QAA_INFO
			,FN_CM_STRING_FORMAT(B.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
--			,(SELECT SUM(SCORE) FROM TB_QA_VALUE_RESULT_DETAIL WHERE TENANT_ID = I_TENANT_ID AND SHEETKEY = B.SHEETKEY) AS SCORE
			,B.TOTAL_SCORE AS SCORE
			,FN_CM_GET_DEPT_NM(C.TENANT_ID,'center', C.DEPT_CD) AS CENTER
	        ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'part', C.DEPT_CD) AS PART
	        ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'team', C.DEPT_CD) AS TEAM
	        ,FN_CM_GET_DEPT_NM(C.TENANT_ID,'jo', C.DEPT_CD) AS JO
			,FN_CM_GET_CODE_NM(C.TENANT_ID,'TM_KIND',C.TM_KIND) AS TM_KIND_NM
	        ,C.SABUN
	        ,C.AGENT_NM
	        ,C.AGENT_JIKGUP
	        ,FN_CM_GET_CODE_NM(C.TENANT_ID,'AGENT_JIKGUP', C.AGENT_JIKGUP) AS AGENT_JIKGUP_NM    
	        ,C.AGENT_JIKCHK
	        ,FN_CM_GET_CODE_NM(C.TENANT_ID,'AGENT_JIKCHK', C.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
	        ,I_TIMES_NM AS TIMES_NM
	        ,I_SHEET_NM AS SHEET_NM
	FROM TB_QA_VALUE_ALLOC_AGENT A
	LEFT JOIN TB_QA_VALUE_RESULT_HEADER B
	ON A.TENANT_ID = B.TENANT_ID 
	AND A.TIMES_ID = B.TIMES_ID 
	AND A.AGENT_ID = B.AGENT_ID
	AND A.QAA_ID = B.VALUE_MEMB
	INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID )
	WHERE A.TENANT_ID = I_TENANT_ID 
		AND A.TIMES_ID = I_TIMES_ID
		AND B.REVALUE_SHEETKEY IS NULL;
    
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA4010M01_03 (
   I_TENANT_ID     IN VARCHAR2
 , I_TIMES_ID       IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA4010M01_03
   PURPOSE:    종합평가결과 - 직급별/직책별/업무그룹별/근속기간별 - 데이터목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/1  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA4010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN

 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS(
		SELECT  B.DEPT_CD
		       ,A.AGENT_ID
        	   ,B.TENANT_ID
				,A.TOTAL_SCORE 
		FROM TB_QA_VALUE_RESULT_HEADER A
		INNER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID )
		WHERE A.TENANT_ID  = I_TENANT_ID
			AND A.TIMES_ID   = I_TIMES_ID
			AND A.REVALUE_SHEETKEY IS NULL
	),TEMP_LIST2 AS(
		SELECT FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.DEPT_CD) AS CENTER
	       ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD) AS PART
    	   ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD) AS TEAM
	       ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS JO
    	   ,A.DEPT_CD
	       ,COUNT(A.AGENT_ID) AS TOTAL_CNT
		   ,SUM(TOTAL_SCORE) AS TOTAL_SCORE
	FROM TEMP_LIST A
	GROUP BY A.TENANT_ID, A.DEPT_CD
	)
   
   SELECT A.CENTER
	        ,A.PART
	        ,A.TEAM
	        ,A.JO
	        ,A.DEPT_CD
         	,A.TOTAL_SCORE
	        ,A.TOTAL_CNT
	        ,TO_CHAR(ROUND((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)),1), 'FM990.0') AS TOTAL_AVG
    FROM TEMP_LIST2 A
	ORDER BY 1,2,3,4
	    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA4010M01_04 (
   I_TENANT_ID     IN VARCHAR2
 , I_TIMES_ID       IN VARCHAR2
 , I_COLUMN_ID     IN VARCHAR2 /* 구분 - 1(직급별)/2(직책별)/3(업무그룹별)/4(근속기간별) */
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA4010M01_04
   PURPOSE:    종합평가결과 - 직급별/직책별/업무그룹별/근속기간별 - 데이터목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/1  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA4010M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS(
	SELECT A.TENANT_ID
			,A.AGENT_ID
			,B.DEPT_CD
			,(CASE I_COLUMN_ID WHEN '1' THEN B.AGENT_JIKGUP
					WHEN '2' THEN B.AGENT_JIKCHK
					WHEN '3' THEN B.TM_KIND
					WHEN '4' THEN (SELECT S.CODE
								FROM TB_CM_CODE S 
								WHERE S.TENANT_ID = B.TENANT_ID 
								AND S.SORT_CD   = 'WORK_PERIOD'
								AND B.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
								AND ROWNUM = 1 )  END) AS COLUMN_ID
--			,(SELECT SUM(SCORE) FROM TB_QA_VALUE_RESULT_DETAIL C WHERE C.TENANT_ID =A.TENANT_ID AND C.SHEETKEY = A.SHEETKEY) AS SCORE
			,A.TOTAL_SCORE AS SCORE
	FROM TB_QA_VALUE_RESULT_HEADER A
	INNER JOIN TB_CM_USER_MASTER B ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID)
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.TIMES_ID = I_TIMES_ID
		AND A.REVALUE_SHEETKEY IS NULL
	), TEMP_CD AS(
		SELECT CODE
		FROM TB_CM_CODE S
		WHERE S.TENANT_ID = I_TENANT_ID
		AND S.SORT_CD =  (CASE I_COLUMN_ID WHEN '1' THEN 'AGENT_JIKGUP'
			     					 WHEN '2' THEN 'AGENT_JIKCHK'
			     					 WHEN '3' THEN 'TM_KIND'
			     					 WHEN '4' THEN 'WORK_PERIOD' END)
		 		),

	TEMP_LIST2 AS (  
   		SELECT A.DEPT_CD
	          /* 값이없거나 공통코드에 없는 값는 별도 컬럼으로  계산하기 위해 */
	        , CASE WHEN A.COLUMN_ID IS NULL OR B.CODE IS NULL THEN 'NOITEM' ELSE A.COLUMN_ID END AS COLUMN_ID 
		    , COUNT(A.AGENT_ID)  AS TOTAL_CNT
			, SUM(A.SCORE) AS TOTAL_SCORE
	     FROM TEMP_LIST A
	     LEFT OUTER JOIN TEMP_CD B ON ( A.COLUMN_ID = B.CODE )
	     GROUP BY A.TENANT_ID, A.DEPT_CD, A.COLUMN_ID, B.CODE
    )

	SELECT A.DEPT_CD
            ,A.COLUMN_ID
            ,A.TOTAL_SCORE
		     -- 응시인원(평균점수)    
			,TO_CHAR(TOTAL_CNT,'FM990')
			 ||'('||TO_CHAR(ROUND((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)),1), 'FM990.0') ||')' AS TOTAL_INFO
			 ,A.TOTAL_CNT
			 ,TO_CHAR(ROUND((TOTAL_SCORE/(CASE TOTAL_CNT WHEN 0 THEN 1 ELSE TOTAL_CNT END)),1), 'FM990.0') AS TOTAL_AVG
		FROM  TEMP_LIST2 A

		;  
			      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA4030M01_03" (
   I_TENANT_ID     IN VARCHAR2
 , I_TIMES_ID      IN VARCHAR2  
 , I_GBN		   IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA4030M01_03
   PURPOSE:    평가항목별보고서 - 문항별 컬럼 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/12  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA4030M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	V_SHEET_ID VARCHAR2(12) := '';
 BEGIN
	
	SELECT SHEET_ID
	INTO V_SHEET_ID
	FROM TB_QA_VALUE_TIMES
	WHERE TENANT_ID = I_TENANT_ID
	AND TIMES_ID = I_TIMES_ID;
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
	IF I_GBN = 'MAJOR_CD' THEN
    OPEN O_CUR_LIST FOR 
		SELECT A.MAJOR_CD AS CODE
				,A.ITEM_NM||'('||(SELECT SUM(T.SCORE) FROM TB_QA_SHEET_DETAIL T WHERE TENANT_ID = I_TENANT_ID AND T.SHEET_ID = V_SHEET_ID AND T.QA_SEBU_CD = '0' AND T.MAJOR_CD= A.MAJOR_CD)||')' AS CODE_NM
				,A.MAJOR_CD AS PARENT_CODE
				,A.SORT_SEQ AS SORT
		FROM TB_QA_SHEET_ITEM A
		WHERE A.TENANT_ID = I_TENANT_ID
		AND A.MAJOR_CD IN (SELECT T.MAJOR_CD FROM TB_QA_SHEET_DETAIL T WHERE T.TENANT_ID = I_TENANT_ID AND T.SHEET_ID = V_SHEET_ID GROUP BY T.MAJOR_CD)
		AND A.MINOR_CD = '00000'
		ORDER BY SORT
	;
	
	ELSIF I_GBN ='MINOR_CD' THEN
	OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS (
		SELECT A.MAJOR_CD
					,A.MINOR_CD
					,C.SCORE
					,A.TENANT_ID
		FROM TB_QA_SHEET_ITEM A
		INNER JOIN TB_QA_SHEET_HEADER B ON ( A.TENANT_ID = B.TENANT_ID)
		INNER JOIN TB_QA_SHEET_DETAIL C ON ( B.TENANT_ID = C.TENANT_ID AND B.SHEET_ID = C.SHEET_ID AND A.MAJOR_CD = C.MAJOR_CD AND A.MINOR_CD = C.MINOR_CD)
		WHERE A.TENANT_ID = I_TENANT_ID
		AND B.SHEET_ID = V_SHEET_ID
		AND C.QA_SEBU_CD = '0'
	)
		SELECT A.MAJOR_CD||A.MINOR_CD AS CODE
				,A.ITEM_NM||'('||B.SCORE||')' AS CODE_NM
				,A.MAJOR_CD AS PARENT_CODE
				,A.SORT_SEQ AS SORT
		FROM TB_QA_SHEET_ITEM A
		INNER JOIN TEMP_LIST B ON (A.TENANT_ID = B.TENANT_ID AND A.MAJOR_CD = B.MAJOR_CD AND A.MINOR_CD = B.MINOR_CD)
		WHERE A.TENANT_ID = I_TENANT_ID
	;
	
	END IF;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA5010S01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2 
 , I_AGENT_ID      IN VARCHAR2 
 , I_TIMES_ID	   IN VARCHAR2 
 , I_MONTH_FROM    IN VARCHAR2 
 , I_MONTH_TO      IN VARCHAR2 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5010S01_01
   PURPOSE:    코칭 대상자 - 컬럼 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5010S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT DISTINCT A.AGENT_ID||(ROW_NUMBER() OVER(PARTITION BY A.STD_MONTH ORDER BY A.SHEETKEY)) AS COLUMN_ID
			,A.AGENT_NM AS COLUMN_NM
			 
	FROM (
			SELECT A.TENANT_ID
				,A.AGENT_ID 
				,FN_CM_GET_AGENT_NM(A.TENANT_ID , A.AGENT_ID) AS AGENT_NM
				,SUBSTR(A.VALUE_YMD,0,6) AS STD_MONTH 
				,A.SHEETKEY 
			FROM TB_QA_VALUE_RESULT_HEADER A 
			WHERE A.TENANT_ID = I_TENANT_ID
		    AND A.AGENT_ID = I_AGENT_ID
			AND (( I_TIMES_ID IS NULL AND 1=1 ) OR (I_TIMES_ID IS NOT NULL AND INSTR(A.TIMES_ID, I_TIMES_ID) > 0)) 
			AND A.VALUE_YMD BETWEEN I_MONTH_FROM||'01' AND I_MONTH_TO||'31' 
			AND EXISTS (SELECT 1 
		 			   FROM TB_CM_ACCESS_SCOPE S 
			 			  WHERE S.TENANT_ID   = A.TENANT_ID 
			 			    AND S.SCOPE_GUBUN = '50' 
		 				    AND S.ITEM_ID     = A.TIMES_ID 
		 				    AND S.DEPT_CD     = I_LOGIN_DEPT_CD ) 
		    AND A.REVALUE_SHEETKEY IS NULL
		) A

	/*TEAM*/
	UNION ALL
	SELECT 'DEPT' AS COLUMN_ID
			,'팀평균' AS COLUMN_NM
	FROM DUAL

	/*TM_KIND*/	
	UNION ALL
	SELECT 'TM_KIND' AS COLUMN_ID
		,'업무평균' AS COLUMN_NM
	FROM DUAL
	
	ORDER BY COLUMN_ID 
	
   ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA5010S01_02 ( 
   I_TENANT_ID     IN VARCHAR2 
 , I_LOGIN_DEPT_CD IN VARCHAR2 
 , I_AGENT_ID      IN VARCHAR2 
 , I_TIMES_ID	   IN VARCHAR2 
 , I_MONTH_FROM    IN VARCHAR2 
 , I_MONTH_TO      IN VARCHAR2 
 , O_CUR_LIST      OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_QA5010S01_02
   PURPOSE:    인원현황 - 인원추이 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/  JIN
******************************************************************************/ 
 
   /* ########## LOG DB START ########################*/ 
    v_work_date     DATE := SYSDATE; 
    v_work_date_str TIMESTAMP := SYSTIMESTAMP; 
    v_work_date_end TIMESTAMP := SYSTIMESTAMP; 
    v_work_id       VARCHAR2(30) := 'SP_QA5010S01_02'; 
    v_work_result   VARCHAR2(1) := 'F'; 
    v_work_count    NUMBER := 0; 
    v_work_bigo     VARCHAR2(4000) := ''; 
   /* ########## LOG DB END  ########################*/ 
 
 BEGIN 
 
/* *********************************************************************************/ 
/* 0.목록조회*/ 
/* *********************************************************************************/ 
    OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS( 
	SELECT A.CONVERT_SCORE 
			,B.DEPT_CD 
			,B.TM_KIND 
			,SUBSTR(A.VALUE_YMD,0,6) AS STD_MONTH 
			,A.AGENT_ID 
			,A.TENANT_ID 
			,A.SHEETKEY 
	FROM TB_QA_VALUE_RESULT_HEADER A 
	INNER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID ) 
	WHERE A.TENANT_ID = I_TENANT_ID 
 	AND (( I_TIMES_ID IS NULL AND 1=1 ) OR (I_TIMES_ID IS NOT NULL AND INSTR(A.TIMES_ID, I_TIMES_ID) > 0)) 
	AND A.VALUE_YMD BETWEEN I_MONTH_FROM||'01' AND I_MONTH_TO||'31' 
	AND EXISTS (SELECT 1 
	 			   FROM TB_CM_ACCESS_SCOPE S 
	 			  WHERE S.TENANT_ID   = A.TENANT_ID 
	 			    AND S.SCOPE_GUBUN = '50' 
	 			    AND S.ITEM_ID     = A.TIMES_ID 
	 			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD ) 
	AND A.REVALUE_SHEETKEY IS NULL
	) 
 
	SELECT A.STD_MONTH 
			,A.AGENT_ID||(ROW_NUMBER() OVER(PARTITION BY A.STD_MONTH ORDER BY A.SHEETKEY)) AS COLUMN_ID 
			,TO_CHAR(A.CONVERT_SCORE,'FM990.00') AS AVG_SCORE 
			,'AGENT' AS TYPE 
	FROM TEMP_LIST A 
	WHERE A.AGENT_ID = I_AGENT_ID 

 
	UNION ALL 
	
	SELECT A.STD_MONTH 
		,A.AGENT_ID||'#' AS COLUMN_ID 
		,TO_CHAR(ROUND(AVG(A.CONVERT_SCORE),2),'FM990.00') AS AVG_SCORE 
		,'AGENT' AS TYPE 
	FROM TEMP_LIST A 
	WHERE A.AGENT_ID = I_AGENT_ID 
	GROUP BY A.STD_MONTH, A.AGENT_ID
 
	UNION ALL 
 
	SELECT A.STD_MONTH 
			,'DEPT' AS COLUMN_ID 
			,TO_CHAR(ROUND(AVG(A.CONVERT_SCORE),2),'FM990.00') AS AVG_SCORE 
			,'DEPT' AS TYPE 
	FROM TEMP_LIST A 
	WHERE A.DEPT_CD = (SELECT S.DEPT_CD FROM TB_CM_USER_MASTER S WHERE S.TENANT_ID = A.TENANT_ID AND S.AGENT_ID = I_AGENT_ID) 
	GROUP BY A.STD_MONTH, A.DEPT_CD 
 
	UNION ALL 
 
	SELECT A.STD_MONTH 
		,'TM_KIND' AS COLUMN_ID 
		,TO_CHAR(ROUND(AVG(A.CONVERT_SCORE),2), 'FM990.00') AS AVG_SCORE 
		,'TM_KIND' AS TYPE 
	FROM TEMP_LIST A 
	WHERE A.TM_KIND = (SELECT S.TM_KIND FROM TB_CM_USER_MASTER S WHERE S.TENANT_ID = A.TENANT_ID AND S.AGENT_ID = I_AGENT_ID) 
	GROUP BY A.STD_MONTH, A.TM_KIND 
 
	ORDER BY 1,2,3 
; 
 
EXCEPTION 
 
    WHEN OTHERS 
    THEN 
    BEGIN 
 
/* *********************************************************************************/ 
/* X. LOG INFO SET >> FAIL*/ 
/* *********************************************************************************/ 
        v_work_date_end := SYSTIMESTAMP; 
        v_work_result := 'F'; 
        v_work_bigo := SQLERRM; 
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo); 
    END; 
END ;
/

;

create or replace PROCEDURE SP_QA5010S01_04 (
   I_TENANT_ID     IN VARCHAR2
 , I_SHEETKEY 	   IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5010S01_04
   PURPOSE:    코칭 대상자 조회 - 상세보기 (Grid1)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5010S01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
		SELECT A.TENANT_ID
				,A.AGENT_ID AS CODE
				,B.MAJOR_CD||B.MINOR_CD AS COLUMN_ID
				,B.SCORE AS TOTAL_SCORE
		FROM TB_QA_VALUE_RESULT_HEADER A
		INNER JOIN TB_QA_VALUE_RESULT_DETAIL B
		 ON A.TENANT_ID = B.TENANT_ID
		AND A.SHEETKEY = B.SHEETKEY
		WHERE A.TENANT_ID = I_TENANT_ID
		  AND A.SHEETKEY = I_SHEETKEY;
	
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA5010S02_03 (
	 I_TENANT_ID     	IN VARCHAR2
	,I_COACHING_ID		IN VARCHAR2
	,I_GBN				IN VARCHAR2
	,I_COACHING_YMD		IN VARCHAR2
	,I_COACHING_MEMB	IN VARCHAR2
	,I_TARGET_MEMB		IN VARCHAR2
	,I_COACHING_GUBUN	IN VARCHAR2
	,I_COACHING_REASON	IN VARCHAR2
	,I_COACHING_TYPE	IN VARCHAR2
	,I_START_TM			IN VARCHAR2
	,I_END_TM			IN VARCHAR2
	,I_GONGMU_YN		IN NUMBER
	,I_COACHING_TEXT	IN VARCHAR2
	,I_LOGIN_AGENT_ID	IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_QA5010S02_02
   PURPOSE:    코칭 등록 - 코칭 CRUD

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5010S02_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 	V_COACHING_ID	VARCHAR2(14) := '';
 BEGIN


		DBMS_OUTPUT.put_line('1==> '||1);  

	IF I_GBN = 'C' THEN 
	
	SELECT CASE WHEN CHK.COACHING_ID IS NULL THEN TO_CHAR(SYSDATE,'YYYYMMDD')||'000001'
	ELSE TO_CHAR(SYSDATE,'YYYYMMDD')||SUBSTR(CHK.COACHING_ID,9,6)
	END INTO V_COACHING_ID
	FROM (SELECT MAX(COACHING_ID+1) AS COACHING_ID
			FROM TB_QA_COACHING 
			WHERE TENANT_ID = I_TENANT_ID
			AND TO_CHAR(CREATE_DT, 'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')) CHK;
	
	INSERT INTO TB_QA_COACHING(TENANT_ID
							,COACHING_ID
							,COACHING_YMD
							,COACHING_MEMB
							,TARGET_MEMB
							,COACHING_GUBUN
							,COACHING_REASON
							,COACHING_TYPE
							,START_TM
							,END_TM
							,GONGMU_YN
							,COACHING_TEXT
							,CREATE_AGENT_ID
							,CREATE_DT
			)
	VALUES (I_TENANT_ID
			,V_COACHING_ID
			,I_COACHING_YMD
			,I_COACHING_MEMB
			,I_TARGET_MEMB
			,I_COACHING_GUBUN
			,I_COACHING_REASON
			,I_COACHING_TYPE
			,I_START_TM
			,I_END_TM
			,I_GONGMU_YN
			,I_COACHING_TEXT
			,I_LOGIN_AGENT_ID
			,SYSDATE
			);
	DBMS_OUTPUT.put_line('V_COACHING_ID==> '||V_COACHING_ID);  
	ELSIF I_GBN = 'U' THEN
	
	UPDATE TB_QA_COACHING SET COACHING_MEMB = I_COACHING_MEMB
								,COACHING_REASON = I_COACHING_REASON
								,COACHING_TYPE = I_COACHING_TYPE
								,COACHING_YMD = I_COACHING_YMD
								,START_TM = I_START_TM
								,END_TM = I_END_TM
								,GONGMU_YN = I_GONGMU_YN
								,COACHING_TEXT = I_COACHING_TEXT
								,MODIFY_AGENT_ID = I_LOGIN_AGENT_ID
								,MODIFY_DT = SYSDATE
	WHERE TENANT_ID = I_TENANT_ID
	AND COACHING_ID = I_COACHING_ID;
	
	ELSIF I_GBN = 'D' THEN 
	DELETE FROM TB_QA_COACHING
	WHERE TENANT_ID = I_TENANT_ID
	AND COACHING_ID = I_COACHING_ID;
	
	
	END IF; 
	
	COMMIT;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_TEST2 (
  I_TEST      IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_EXCEL_TEST
   PURPOSE:    로그인 사용자에게 허용된 메뉴목록 조회 ==> EXCEL IMPORT SAMPLE을 위한 쿼리임

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/07/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_EXCEL_TEST';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  OPEN O_CUR_LIST FOR 
    SELECT I_TEST AS RESULT FROM DUAL
         ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

create or replace PROCEDURE "SP_TEST_JOB" 
 AS 
/******************************************************************************
   NAME:       SP_EDU1030M01_04
   PURPOSE:    평가계획관리-진행상태 변경

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_TEST_JOB';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
   V_STR_DATE DATE ;
   V_END_DATE DATE ;
   JOBNO   NUMBER;
 BEGIN
 

/*
DBMS_JOB.SUBMIT(
        JOBNO
		,'UPDATE TB_EDU_EXAM_SCHE 
		    SET SCHE_STATUS     = ''30''
		       ,MODIFY_AGENT_ID = ''||I_LOGIN_ID||''
		       ,MODIFY_DT  		= SYSTIMESTAMP
		  WHERE TENANT_ID = ''||I_TENANT_ID||''
		    AND SCHE_ID   = ''||I_SCHE_ID||'';'
, SYSDATE,SYSDATE,false);
--COMMIT;

DBMS_JOB.SUBMIT( 1,'UPDATE TB_EDU_EXAM_SCHE SET SCHE_STATUS  = ''30'' WHERE TENANT_ID = ''BT'' AND SCHE_ID = ''0000000005'';'
, SYSDATE,'SYSDATE + 1');

-- DBMS_JOB.SUBMIT( 1,' SELECT 1 FROM DUAL;', SYSDATE,'SYSDATE + 1');

DBMS_JOB.SUBMIT( JOBNO,'UPDATE TB_EDU_EXAM_SCHE SET SCHE_STATUS  = ''30'' WHERE TENANT_ID = ''BT'' AND SCHE_ID = ''0000000005'';'
, SYSDATE,'SYSDATE + 1');
*/
--dbms_job.submit(JOBNO, 'dbms_output.put_line(''ok'');', sysdate, 'sysdate + 1',false);

V_STR_DATE := TO_DATE('20170404104000', 'YYYYMMDDHH24MISS');

DBMS_JOB.SUBMIT( JOBNO,' dbms_output.put_line('''||JOBNO||''');', V_STR_DATE ,'sysdate + 1',false);

dbms_output.put_line(JOBNO);



EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_CHK_MENU_LIST (
	I_TENANT_ID	IN	VARCHAR2
	,O_CUR_LIST   OUT SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_CHK_MENU_LIST
   PURPOSE:    메뉴 사용여부 조회 및 체크(암호화랑 비교)

   REVISIONS:
   Ver         Date        Author          Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/17 YAKIM 

******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_CHK_MENU_LIST';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
  
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
	SELECT A.ARGOCM_YN AS CM
			,A.ARGOHR_YN AS HR
			,A.ARGOEDU_YN AS EDU
			,A.ARGOKPI_YN AS KPI
			,A.ARGOQA_YN AS QA
			,A.MODULE_USE_ENC AS ENC
	FROM TB_CM_TENANT_INFO A
	WHERE A.TENANT_ID = I_TENANT_ID
 ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_AGENT_DEPT 
(
    I_AGENT_ID  IN  VARCHAR2
  , I_CTRL_ID   IN  VARCHAR2
  , O_CUR_LIST  OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_DEPT
   PURPOSE:    사용자ID에 대한 사용자명 조직정보 조회 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/10/04 JHMO 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_GET_AGENT_DEPT';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  ########################
   
   
   
BEGIN
  
  
  
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
  OPEN O_CUR_LIST FOR 
    SELECT
      A.AGENT_ID
      ,A.AGENT_NM
      ,A.DEPT_CD
      ,B.DEPT_NM
      ,I_CTRL_ID AS CTRL_ID
    FROM 
      TB_CM_USER_MASTER A INNER JOIN TB_CM_DEPT_CD B
      ON A.DEPT_CD = B.DEPT_CD
    WHERE 
      AGENT_ID = I_AGENT_ID ;
  
  

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
    
    -- ********************************************************************************
    -- 99. 결과 리턴
    -- ********************************************************************************      
    BEGIN
      OPEN O_CUR_LIST FOR 
        SELECT v_work_result AS RESULT
        FROM DUAL ;
    END;  
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_AGENT_HISTORY 
(
  I_BASE_DT     IN VARCHAR2         -- 기준년월 6자리
, I_DEPT_CD     IN VARCHAR2 
, I_HIDE_YN     IN VARCHAR2
, I_RETIRE_YN   IN VARCHAR2
, I_AGENT_INFO  IN VARCHAR2        -- 이름 혹은 사번 
, O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_AGENT_HISTORY
   PURPOSE:    과거 유저 조회 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/11 JHMO 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_GET_AGENT_HISTORY';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  ########################
   
   v_query          VARCHAR2(4000)  := '';
   vs_emp           VARCHAR2(1000)  := '%' || I_AGENT_INFO || '%';
   
BEGIN

  -- ********************************************************************************
  -- 0. 조회
  -- ********************************************************************************    
  v_query := v_query || 'SELECT                 ' || CHR(13);
  v_query := v_query || '    C.DEPT_NM          ' || CHR(13);
  v_query := v_query || '    ,C.DEPT_CD         ' || CHR(13);
  v_query := v_query || '    ,A.AGENT_ID        ' || CHR(13);
  v_query := v_query || '    ,A.AGENT_NM        ' || CHR(13);
  v_query := v_query || '    ,A.HIDE_YN         ' || CHR(13);
  v_query := v_query || '    ,A.RETIRE_GUBUN    ' || CHR(13);
  v_query := v_query || 'FROM                   ' || CHR(13);
  v_query := v_query || '   TB_CM_USER_MASTER_HISTORY A                                                         ' || CHR(13);
  v_query := v_query || '   INNER JOIN TB_CM_USER_DETAIL_HISTORY B ON A.AGENT_ID = B.AGENT_ID                   ' || CHR(13);
  v_query := v_query || '   INNER JOIN table(fn_cm_get_tb_dept_history(:I_DEPT_CD)) C ON A.DEPT_CD = C.DEPT_CD  ' || CHR(13);
  v_query := v_query || 'WHERE 1=1              ' || CHR(13);
  
  if I_HIDE_YN = 'Y' then
      v_query := v_query || '   AND ( 1=1 )                                 ' || CHR(13);     -- 숨김 포함
  else 
      v_query := v_query || '   AND ( A.HIDE_YN = 0 )                       ' || CHR(13);     -- 숨김 불포함
  end if;
  
  if I_RETIRE_YN = 'Y' then
      v_query := v_query || '   AND ( 1=1 )                                 ' || CHR(13);     -- 퇴사자 포함
  else 
      v_query := v_query || '   AND ( A.RETIRE_GUBUN IS NULL )              ' || CHR(13);     -- 퇴사자 불포함
  end if;
  
  if I_AGENT_INFO is not null and length(I_AGENT_INFO) > 0 then
      v_query := v_query || '   AND A.AGENT_NM like ' || '''' || vs_emp || '''' || CHR(13);
  end if;
  

-- ********************************************************************************
-- 1. 결과 리턴
-- ********************************************************************************
  BEGIN
    OPEN O_CUR_LIST FOR v_query
        USING I_DEPT_CD;
  END;  



EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

create or replace PROCEDURE "SP_UC_GET_AUDIO_INFO" (
	I_TENANT_ID		IN VARCHAR2
	,I_RECORD_ID	IN VARCHAR2
	,O_CUR_LIST   	OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_AUDIO_INFO
   PURPOSE:    RECORD_ID에 따른 RECORD 정보 조회(청취에 필요한 데이터 조회)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/31  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_AUDIO_INFO';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- *******************************************************
--	0.조회
-- *******************************************************
	OPEN O_CUR_LIST FOR
	SELECT A.SERVER_IP
			,A.SERVER_PORT
			,A.CIDX AS CALL_ID
			,A.AGENT_ID
			,A.TENANT_ID
			,A.RECORD_ID
	FROM TB_QA_AUDIO_LOG A
	WHERE A.TENANT_ID = I_TENANT_ID
		AND A.RECORD_ID = I_RECORD_ID
;
	
	
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_CMCODE_01 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_SORT_CD        IN     VARCHAR2
 ,I_USER_DATA1     IN     VARCHAR2 
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_CMCODE_01
   PURPOSE:    공통코드 목록 조회

   REVISIONS:
   Ver         Date        Author          Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/02/01 YAKIM 
    1.1         2017/02/23 YAKIM           USER_DATA1 조건 추가 (상위분류에 따라 필터링)
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_CMCODE_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  OPEN O_CUR_LIST FOR 
      SELECT CODE, CODE_NM
           ,USER_DATA1,USER_DATA2
       FROM TB_CM_CODE A
       WHERE A.TENANT_ID = I_TENANT_ID
       AND A.SORT_CD = I_SORT_CD
       AND A.HIDE_YN = 0
       AND (( I_USER_DATA1 IS NULL AND 1=1 )
           OR (I_USER_DATA1 IS NOT NULL AND A.USER_DATA1 =  I_USER_DATA1 ))  
       ORDER BY SORT   ;   
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

create or replace PROCEDURE "SP_UC_GET_EDU_EXAM" (
   I_TENANT_ID      IN VARCHAR2
 , I_LOGIN_DEPT_CD  IN VARCHAR2  /* 로그인사용자 DEPT_CD */     
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_EDU_EXAM
   PURPOSE:    (공통)업무평가계획 선택 팝업

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/13  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_EDU_EXAM';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT   A.TENANT_ID
    		,A.SCHE_ID
            ,A.SCHE_NM
            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@') AS STD_MONTH 
            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@-@@')
             ||' '||FN_CM_STRING_FORMAT(SUBSTR(A.STR_TM,1,4),'@@:@@')
             ||'('||LPAD(FLOOR(FN_CM_GET_TIME_DIFF_TO_SECOND(A.STR_TM,A.END_TM)/60), 2, 0)||'분)' 
             AS EXAM__PERIOD
            ,A.EDU_EVAL_TYPE
            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EVAL_TYPE',A.EDU_EVAL_TYPE) AS EDU_EVAL_TYPE_NM
            ,A.EDU_EXAM_TYPE
            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EXAM_TYPE',A.EDU_EXAM_TYPE) AS EDU_EXAM_TYPE_NM
            ,A.SCHE_STATUS
            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'SCHE_STATUS',A.SCHE_STATUS) AS SCHE_STATUS_NM
            ,NVL(A.KPI_YN,0) AS KPI_YN
     FROM TB_EDU_EXAM_SCHE A
    WHERE A.EVAL_YMD BETWEEN I_DT_FROM||'01' AND I_DT_TO||'31'
     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
     AND EXISTS (SELECT 1 
     			   FROM TB_CM_ACCESS_SCOPE S 
     			  WHERE S.TENANT_ID   = A.TENANT_ID
     			    AND S.SCOPE_GUBUN = '30'
     			    AND S.ITEM_ID     = A.SCHE_ID
     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )      
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_UC_GET_EDU_SCHE" (
	  I_TENANT_ID  IN VARCHAR2
  	, I_DEPT_CD    IN VARCHAR2
	, I_STD_MONTH  IN VARCHAR2
	, O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_EDU_SCHE
   PURPOSE:    EDU 평가계획 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/03
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_UC_GET_EDU_SCHE';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR
	SELECT 
		A.TENANT_ID
		, A.SCHE_ID
		, A.SCHE_NM
		, TO_CHAR(TO_DATE(A.START_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') || '~' || TO_CHAR(TO_DATE(A.END_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')
		       || ' (' || (TO_DATE(A.END_YMD, 'YYYYMMDD') - TO_DATE(A.START_YMD, 'YYYYMMDD') + 1) || '일)' AS EDU_PERIOD
		, A.EDU_KIND
		, FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_KIND', A.EDU_KIND) AS EDU_KIND_NM
		, A.EDU_TARGET
		, FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_TARGET', A.EDU_TARGET) AS EDU_TARGET_NM
		, A.START_YMD
		, A.END_YMD
		, A.EDU_STATUS
		, FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_STATUS', A.EDU_STATUS) AS EDU_STATUS_NM
		, A.NOTICE_YN
	FROM TB_EDU_SCHE A
	WHERE A.TENANT_ID = I_TENANT_ID
	AND STD_MONTH = I_STD_MONTH
	AND EXISTS ( SELECT 1
					FROM TB_CM_ACCESS_SCOPE S
					WHERE S.TENANT_ID = I_TENANT_ID
					AND S.ITEM_ID   = A.SCHE_ID
					AND S.SCOPE_GUBUN = '80'
					AND DEPT_CD = I_DEPT_CD ) ;
		

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_UC_GET_EDU_SHEET" (
   I_TENANT_ID      IN VARCHAR2
 , I_LOGIN_DEPT_CD  IN VARCHAR2  /* 로그인사용자 DEPT_CD */     
 , I_STD_MONTH_FROM IN VARCHAR2
 , I_STD_MONTH_TO   IN VARCHAR2
 , I_EDU_SHEET_TYPE IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_EDU_SHEET
   PURPOSE:    (공통)시험지선택 팝업

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/13  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_EDU_SHEET';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR 
	SELECT
		A.TENANT_ID
		,A.SHEET_ID
		,A.SHEET_NM
		,A.EDU_SHEET_TYPE
		,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_SHEET_TYPE',A.EDU_SHEET_TYPE) AS EDU_SHEET_TYPE_NM
		,NVL(A.HIDE_YN,0)  AS HIDE_YN
		,TO_CHAR(A.MODIFY_DT,'YYYY-MM-DD') AS MODIFY_DT
		,NVL((SELECT SUM(S.SCORE) FROM TB_EDU_SHEET_DETAIL S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID),0) AS SCORE_SUM
		,(SELECT COUNT(S.QUESTION_ID) FROM TB_EDU_SHEET_DETAIL S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID) AS QUESTION_CNT
	FROM TB_EDU_SHEET_HEADER A
	WHERE TO_CHAR(A.MODIFY_DT,'YYYYMM') BETWEEN I_STD_MONTH_FROM AND I_STD_MONTH_TO
	AND A.EDU_SHEET_TYPE = CASE WHEN I_EDU_SHEET_TYPE IS NULL THEN A.EDU_SHEET_TYPE ELSE I_EDU_SHEET_TYPE END
	AND A.HIDE_YN = 0
	/* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
	AND EXISTS (SELECT 1 
				FROM TB_CM_ACCESS_SCOPE S 
				WHERE S.TENANT_ID   = A.TENANT_ID
				AND S.SCOPE_GUBUN = '20'
				AND S.ITEM_ID     = A.SHEET_ID
				AND S.DEPT_CD     = I_LOGIN_DEPT_CD )           
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_EXCEL_TEST (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,I_SYSTEM_KIND    IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_EXCEL_TEST
   PURPOSE:    로그인 사용자에게 허용된 메뉴목록 조회 ==> EXCEL IMPORT SAMPLE을 위한 쿼리임

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/07/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_EXCEL_TEST';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  OPEN O_CUR_LIST FOR 
       SELECT  FN_CM_GET_CODE_NM(A.TENANT_ID,'SYSTEM_GUBUN', A.SYSTEM_KIND) AS A
              ,A.GROUP_NM    AS B
              ,A.PGM_ID      AS C
              ,A.PGM_PATH    AS D
              ,A.PGM_NM      AS E
          FROM TB_CM_ARGOWFM_PGM A
          INNER JOIN (
                              SELECT A.TENANT_ID
                                   , A.AGENT_ID
                                   , A.GRANT_ID
                                   , B.PGM_ID
                                   , B.EDIT_GRANT
                                   , B.SCOPE_KIND
                                   , NVL(B.EXCEL_YN,0) AS EXCEL_YN
                              FROM TB_CM_USER_MASTER  A 
                              INNER JOIN TB_CM_GRANT_MENU B ON (    A.TENANT_ID =B.TENANT_ID 
                                                               AND  A.GRANT_ID = B.GRANT_ID 
                                                               AND NVL(B.EDIT_GRANT,'N') != 'N' /* 권한없음이 아닌 건*/
                                                               ) 
                               WHERE A.TENANT_ID = I_TENANT_ID
                                 AND A.AGENT_ID  = I_AGENT_ID 
          ) B ON (A.PGM_ID = B.PGM_ID )
          WHERE  A.TENANT_ID = I_TENANT_ID
             AND A.SYSTEM_KIND = CASE WHEN I_SYSTEM_KIND IS NULL THEN A.SYSTEM_KIND ELSE I_SYSTEM_KIND END 
             AND A.HIDE_YN = 0
         ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_UC_GET_HR_SCHE" (
	  I_TENANT_ID     IN VARCHAR2
	, I_STD_MONTH     IN VARCHAR2
	, I_GRANT_DEPT_CD IN VARCHAR2
	, O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_HR_SCHE
   PURPOSE:    HR 평가계획 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/08  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_UC_GET_HR_SCHE';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR
	
		SELECT A.SCHE_ID
		     , A.SCHE_NM
		     , B.SHEET_NM
		  FROM TB_HR_EVAL_SCHE A
		 INNER JOIN TB_HR_SHEET_HEADER B
		    ON A.TENANT_ID = B.TENANT_ID
		   AND A.SHEET_ID  = B.SHEET_ID
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND A.HIDE_YN   = 0
		   AND SUBSTR(SCHE_ID, 0, 6) = I_STD_MONTH
		   AND EXISTS ( SELECT 1
		   				  FROM TB_CM_ACCESS_SCOPE S
		   				 WHERE S.TENANT_ID = I_TENANT_ID
		   				   AND S.ITEM_ID   = A.SCHE_ID
		   				   AND S.SCOPE_GUBUN = '70'
		   				   AND DEPT_CD = I_GRANT_DEPT_CD ) ;
		

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_MAC_LIST (
 O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_MAC_LIST
   PURPOSE:    사용 가능한 MAC 리스트 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/07/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_MAC_LIST';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  OPEN O_CUR_LIST FOR 
     SELECT MAC_LIST
     		,MAC_LIST_ENC 
     FROM TB_CM_LICENSE;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_MENU_01 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,I_SYSTEM_KIND    IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_MENU_01
   PURPOSE:    로그인 사용자에게 허용된 메뉴목록 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/07/19 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_MENU_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  OPEN O_CUR_LIST FOR 
       SELECT  A.SYSTEM_KIND
              ,A.GROUP_NM
              ,A.PGM_ID
              ,A.PGM_PATH
              ,A.PGM_NM
              ,NVL(B.EDIT_GRANT,'R' ) AS EDIT_GRANT
              ,ROW_NUMBER () OVER (PARTITION BY A.SYSTEM_KIND,A.GROUP_NM ORDER BY A.PGM_ID ASC) IDX
              ,FN_CM_GET_CODE_NM(A.TENANT_ID,'SYSTEM_GUBUN', A.SYSTEM_KIND) AS SYSTEM_KIND_NM
			  ,B.SCOPE_KIND /* 접근범위 */		
			  /* 메뉴별 접근범위가 [직접지정] 인 경우 해당 dept 정보를 조회 */
			  ,CASE WHEN B.SCOPE_KIND = '90' THEN (SELECT WM_CONCAT( S.DEPT_CD )  
													  FROM TB_CM_GRANT_SCOPE S
												    WHERE S.TENANT_ID = B.TENANT_ID 
												      AND S.GRANT_ID  = B.GRANT_ID
												      )	
			   ELSE NULL END  AS GRANT_DEPT_CD
			  ,CASE WHEN B.EXCEL_YN = 0 THEN 'N' ELSE 'Y' END AS EXCEL_GRANT 
          FROM TB_CM_ARGOWFM_PGM A
          INNER JOIN (
                              SELECT A.TENANT_ID
                                   , A.AGENT_ID
                                   , A.GRANT_ID
                                   , B.PGM_ID
                                   , B.EDIT_GRANT
                                   , B.SCOPE_KIND
                                   , NVL(B.EXCEL_YN,0) AS EXCEL_YN
                              FROM TB_CM_USER_MASTER  A 
                              INNER JOIN TB_CM_GRANT_MENU B ON (    A.TENANT_ID =B.TENANT_ID 
                                                               AND  A.GRANT_ID = B.GRANT_ID 
                                                               AND NVL(B.EDIT_GRANT,'N') != 'N' /* 권한없음이 아닌 건*/
                                                               ) 
                               WHERE A.TENANT_ID = I_TENANT_ID
                                 AND A.AGENT_ID  = I_AGENT_ID 
          ) B ON (A.PGM_ID = B.PGM_ID )
          WHERE  A.TENANT_ID = I_TENANT_ID
--             AND A.SYSTEM_KIND = CASE WHEN I_SYSTEM_KIND IS NULL THEN A.SYSTEM_KIND ELSE I_SYSTEM_KIND END 
             AND (( I_SYSTEM_KIND IS NULL AND 1=1 ) OR (I_SYSTEM_KIND IS NOT NULL AND INSTR(I_SYSTEM_KIND, A.SYSTEM_KIND) > 0))
             AND A.HIDE_YN = 0
          ORDER BY PGM_ID, SORT_SEQ   ; 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_PWD_VISIBLE (
	I_TENANT_ID		IN VARCHAR2,
	O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_PWD_VISIBLE
   PURPOSE:    초기 패스워드 저장 조회

   REVISIONS:
   Ver         Date        Author          Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/09 HUJ

******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_PWD_VISIBLE';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  OPEN O_CUR_LIST FOR 
    SELECT PW_MEMORY
    FROM TB_CM_ARGOWFM_CONFIG
	WHERE TENANT_ID = I_TENANT_ID
	AND ROWNUM = 1 
	ORDER BY SNO DESC;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_QA_TIMES
(
  I_TENANT_ID 		IN VARCHAR2       -- Y(연도별검색), YL(연도리스트만)
, I_STD_MONTH 		IN VARCHAR2 
, I_GRANT_DEPT_CD 	IN VARCHAR2
, O_CUR_LIST OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_GET_QA_SHEET
   PURPOSE:    QA평가계획 검색 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/19 JHMO 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_GET_QA_TIMES';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  ########################
   
BEGIN

  
    -- ********************************************************************************
    -- 1. 결과 리턴 
    -- ********************************************************************************      
    OPEN O_CUR_LIST FOR 
    SELECT A.TIMES_ID AS TIMES_ID
	    ,A.TIMES_NM AS TIMES_NM
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_EVAL_TYPE', A.QA_EVAL_TYPE) AS QA_EVAL_TYPE
		,B.SHEET_NM	AS SHEET_NM	
		,FN_CM_STRING_FORMAT(A.VALUE_FRM_DT,'@@@@-@@-@@') || ' ~ ' || FN_CM_STRING_FORMAT(A.VALUE_END_DT,'@@@@-@@-@@') AS VALUE_DT
	FROM TB_QA_VALUE_TIMES A
	LEFT JOIN TB_QA_SHEET_HEADER B
	ON A.TENANT_ID = B.TENANT_ID
	AND A.SHEET_ID = B.SHEET_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.HIDE_YN = '0'
	AND SUBSTR(TIMES_ID,0,6) = I_STD_MONTH
	AND EXISTS (SELECT 1 
				FROM TB_CM_ACCESS_SCOPE S
				WHERE S.TENANT_ID = A.TENANT_ID
				AND S.ITEM_ID = A.TIMES_ID
				AND SCOPE_GUBUN = '50'
				AND DEPT_CD = I_GRANT_DEPT_CD);
  

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_QA_VALUE_DETAIL
(
    I_TENANT_ID  IN  VARCHAR2
  , I_SHEETKEY	 IN	 VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_QA_VALUE_DETAIL
   PURPOSE:    평가표내용

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/03
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_GET_QA_VALUE_DETAIL';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   
   V_SHEET_ID		VARCHAR2(10)    := '';
BEGIN
   
  -- ********************************************************************************
  -- . SHEET_ID
  -- ********************************************************************************

	SELECT SHEET_ID
	  INTO V_SHEET_ID
	  FROM TB_QA_VALUE_RESULT_HEADER A
	 WHERE A.TENANT_ID = I_TENANT_ID
	   AND A.SHEETKEY = I_SHEETKEY;


	OPEN O_CUR_LIST FOR 
  		SELECT MAIN.*
				,SUB.QA_SEBU_CD AS SEL_SEBU_CD
				,NVL(SUB.VALUE_TEXT,' ') AS VALUE_TEXT
				,NVL(SUB.SCORE, 0) AS SEL_SCORE
		FROM(
			SELECT
			    A.MAJOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
				, A.MINOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
				, A.QA_SEBU_CD
				, FN_CM_GET_CODE_NM(A.TENANT_ID,'QA_SEBU_CD', A.QA_SEBU_CD) AS QA_SEBU_NM 
				, REPLACE(A.SHEET_TEXT, CHR(10), '<br>') AS SHEET_TEXT
				, A.SCORE
				, A.PLUS_MINUS
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.QA_SEBU_CD ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD
				, CASE WHEN A.QA_SEBU_CD = '0' THEN (SELECT WM_CONCAT(B.SCORE ORDER BY B.QA_SEBU_CD) FROM TB_QA_SHEET_DETAIL B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.SHEET_ID = V_SHEET_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD AND B.QA_SEBU_CD != '0') ELSE '' END AS SEBU_CD_SCORE
			FROM TB_QA_SHEET_DETAIL A
			WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEET_ID = V_SHEET_ID
			
			UNION ALL
			
			SELECT 
				A.MAJOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = '00000' ) AS MAJOR_NM
				, A.MINOR_CD
				, (SELECT B.ITEM_NM FROM TB_QA_SHEET_ITEM B WHERE 1=1 AND B.TENANT_ID = A.TENANT_ID AND B.MAJOR_CD = A.MAJOR_CD AND B.MINOR_CD = A.MINOR_CD ) AS MINOR_NM
				, '1' AS QA_SEBU_CD
				, '평가' AS QA_SEBU_NM
				, ' ' AS SHEET_TEXT
				, 0 AS SCORE
				, 0 AS PLUS_MINUS
				, '' AS MAX_CD
				, '' AS SEBU_CD_SCORE
			FROM TB_QA_SHEET_DETAIL A
			WHERE A.TENANT_ID = I_TENANT_ID
			AND A.SHEET_ID = V_SHEET_ID
			GROUP BY A.TENANT_ID, A.MAJOR_CD, A.MINOR_CD
			ORDER BY MAJOR_CD, MINOR_CD, QA_SEBU_CD
		) MAIN 
		LEFT JOIN (
			SELECT MAJOR_CD, MINOR_CD, QA_SEBU_CD, VALUE_TEXT, SCORE
			FROM TB_QA_VALUE_RESULT_DETAIL 
			WHERE TENANT_ID = I_TENANT_ID 
			AND SHEETKEY = I_SHEETKEY
		) SUB ON MAIN.MAJOR_CD = SUB.MAJOR_CD  AND MAIN.MINOR_CD = SUB.MINOR_CD
		;
	
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE "SP_UC_GET_QUEUE_GROUP" (
   I_TENANT_ID      IN VARCHAR2
 , I_GROUP_CD       IN VARCHAR2 
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_QUEUE_GROUP
   PURPOSE:    (공통)DASHBOARD(관리자)-큐그룹코드 관리 - 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/20  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_QUEUE_GROUP';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT  A.TENANT_ID 
		   ,A.GROUP_CD 
		   ,FN_CM_GET_CODE_NM(A.TENANT_ID,'QUEUE_GROUP_CD',A.GROUP_CD) AS GROUP_NM
		   ,A.CENTER_KIND 
		   ,FN_CM_GET_CODE_NM(A.TENANT_ID,'CENTER_KIND',A.CENTER_KIND) AS CENTER_NM
		   ,A.QUEUE_ID
		   ,B.QUEUE_NAME AS QUEUE_NM
		   ,A.HIDE_YN
     FROM TB_CM_QUEUE_GROUP A
     INNER JOIN TB_IF_CTI_QUEUE_MASTER B ON (A.TENANT_ID = B.TENANT_ID AND A.CENTER_KIND = B.CENTER_KIND AND A.QUEUE_ID = B.QUEUE_ID)
    WHERE A.GROUP_CD = I_GROUP_CD
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_SYSDATE (
O_CUR_LIST   OUT SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_SYSDATE
   PURPOSE:    서버 일시 조회

   REVISIONS:
   Ver         Date        Author          Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/17 YAKIM 

******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_SYSDATE';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
  
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
 SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') AS SERVER_DATE
   FROM DUAL ;
 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_TABLE (
	O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_TENANT
   PURPOSE:    TENANT_ID 목록 조회

   REVISIONS:
   Ver         Date        Author          Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/09 HUJ

******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_TABLE';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  OPEN O_CUR_LIST FOR 
    WITH TABLE_LIST AS 
    (
    SELECT 'TABLE' AS OBJECT_NM, 0 AS DEPT, 0 AS SORT, '#' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'CM' AS OBJECT_NM, 1 AS DEPT, 0 AS SORT, 'TABLE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'EDU' AS OBJECT_NM, 1 AS DEPT, 1 AS SORT, 'TABLE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'HR' AS OBJECT_NM, 1 AS DEPT, 2 AS SORT, 'TABLE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'IF' AS OBJECT_NM, 1 AS DEPT, 3 AS SORT, 'TABLE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'KPI' AS OBJECT_NM, 1 AS DEPT, 4 AS SORT, 'TABLE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'QA' AS OBJECT_NM, 1 AS DEPT, 5 AS SORT, 'TABLE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'LOG' AS OBJECT_NM, 1 AS DEPT, 6 AS SORT, 'TABLE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT TABLE_NAME AS OBJECT_NM
			,2 AS DEPT
			,ROWNUM AS SORT
			,RTRIM(SUBSTR(TABLE_NAME,4,3),'_') AS  PARENT_CD 
	FROM USER_TABLES
	WHERE TABLESPACE_NAME = 'ARGO01'
    ) ,
    TEMP_LIST AS (
    SELECT 'PROCEDURE' AS OBJECT_NM, 0 AS DEPT, 0 AS SORT, '#' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'P_CM' AS OBJECT_NM, 1 AS DEPT, 0 AS SORT, 'PROCEDURE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'P_EDU' AS OBJECT_NM, 1 AS DEPT, 1 AS SORT, 'PROCEDURE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'P_HR' AS OBJECT_NM, 1 AS DEPT, 2 AS SORT, 'PROCEDURE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'P_KPI' AS OBJECT_NM, 1 AS DEPT, 4 AS SORT, 'PROCEDURE' AS PARENT_CD FROM DUAL UNION ALL
	SELECT 'P_QA' AS OBJECT_NM, 1 AS DEPT, 5 AS SORT, 'PROCEDURE' AS PARENT_CD FROM DUAL UNION ALL 
	SELECT 'P_ETC' AS OBJECT_NM, 1 AS DEPT, 5 AS SORT, 'PROCEDURE' AS PARENT_CD FROM DUAL
	),
	PROCEDURE_LIST AS (
	SELECT A.OBJECT_NAME AS OBJECT_NM
			,2 AS DEPT
			,ROW_NUMBER() OVER(PARTITION BY B.OBJECT_NM ORDER BY A.OBJECT_NAME) AS SORT
			,NVL(B.OBJECT_NM,'P_ETC') AS PARENT_CD
	FROM USER_OBJECTS A 
	LEFT JOIN TEMP_LIST B
	ON INSTR(A.OBJECT_NAME, B.OBJECT_NM) >0
	WHERE OBJECT_TYPE = 'PROCEDURE'
    )
    SELECT * FROM TABLE_LIST
    UNION ALL
    SELECT * FROM TEMP_LIST
    UNION ALL
    SELECT * FROM PROCEDURE_LIST;
--      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_TENANT (
	O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_TENANT
   PURPOSE:    TENANT_ID 목록 조회

   REVISIONS:
   Ver         Date        Author          Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/09 HUJ

******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_TENANT';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  OPEN O_CUR_LIST FOR 
      SELECT TENANT_ID AS CODE
 			,TENANT_NAME AS CODE_NM
       FROM TB_CM_TENANT_INFO A
       ORDER BY TENANT_ID   ;  
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

create or replace PROCEDURE "SP_UC_GET_TERM" (
   I_GUBUN         IN VARCHAR2  /* 기간구분 ==> 월별(M)/분기별(Q)/반기별(H)/년도별(Y)  */     
 , I_DT_FROM       IN VARCHAR2  /* YYYYMMDD OR YYYYMM */
 , I_DT_TO         IN VARCHAR2  /* YYYYMMDD OR YYYYMM */
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_TERM
   PURPOSE:    (공통)기간구분별 시작 ~ 종료일자 간의 결과목록 리턴
                ==> 기간별 추이보고서(EDU3020M01)에서 사용

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_TERM';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	V_FROM VARCHAR2(8) :=I_DT_FROM;
	V_TO   VARCHAR2(8) :=I_DT_TO;
 BEGIN
 
 -- ********************************************************************************
-- 0. 길이체크 6자리이면  8자리로
-- ********************************************************************************    
   IF(LENGTH(V_FROM)=6) THEN V_FROM := V_FROM||'01' ; END IF;
   IF(LENGTH(V_TO)=6)   THEN V_TO   := V_TO||'01'   ; END IF;
 
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
        -- 1. 두 날짜간 개월수 차이 계산
		WITH TEMP_LIST AS (
		SELECT MONTHS_BETWEEN( TO_DATE(V_TO, 'YYYYMMDD'),TO_DATE(V_FROM, 'YYYYMMDD'))+1 AS MONTHS
		FROM DUAL
		)-- 2. 개월수 차이만큼 ROW 생성
		, TEMP_LIST2 AS (
		   SELECT ADD_MONTHS(TO_DATE(V_FROM,'YYYYMMDD'), LEVEL-1) AS STD_DATE
		   FROM DUAL 
		   CONNECT BY LEVEL < = (SELECT MONTHS FROM TEMP_LIST)
		) -- 3. 기간구분별 날짜 계산
		,TEMP_LIST3 AS (
		  SELECT TO_CHAR(STD_DATE, 'YYYY') AS STD_YEAR
		       ,CASE  I_GUBUN WHEN 'M' THEN TO_CHAR(STD_DATE,'MM')||'월'
		                      WHEN 'Q' THEN TO_CHAR(STD_DATE,'Q')||'분기'
		                      WHEN 'H' THEN (CASE WHEN TO_CHAR(STD_DATE,'Q') < 3 THEN '전반기' ELSE '후반기' END)
		                      WHEN 'Y' THEN '' END AS STD_MONTH
		       ,CASE  I_GUBUN WHEN 'M' THEN TO_CHAR(STD_DATE,'YYYYMM')
		                      WHEN 'Q' THEN TO_CHAR(STD_DATE,'YYYYQ')
		                      WHEN 'H' THEN (CASE WHEN TO_CHAR(STD_DATE,'Q') < 3 THEN TO_CHAR(STD_DATE,'YYYY')||'1' ELSE TO_CHAR(STD_DATE,'YYYY')||'3' END)
		                      WHEN 'Y' THEN TO_CHAR(STD_DATE,'YYYY') END AS CODE	                      
		    FROM TEMP_LIST2		    
		) SELECT DISTINCT 
		          CODE
		         ,STD_YEAR||'년 '|| STD_MONTH AS CODE_NM
		    FROM TEMP_LIST3
		   ORDER BY CODE
       ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_UC_SET_JOB" (
	 I_TENANT_ID      IN VARCHAR2
	,I_JOB_GUBUN      IN VARCHAR2 
    ,I_ITEM_ID	      IN VARCHAR2
    ,I_JOB_EXEC       IN VARCHAR2 /* 생성(I) /실행(E) /취소(D) */
    ,I_JOB_DATE       IN DATE
) AS 
/******************************************************************************
   NAME:       SP_UC_SET_JOB
   PURPOSE:    JOB 생성 및 JOB 실행 처리 

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/04  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_SET_JOB';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    V_JOBNO   NUMBER;
    V_DATE DATE := I_JOB_DATE;
 BEGIN
 
 IF V_DATE IS NULL THEN
    V_DATE := SYSDATE ;
 END IF;

-- ********************************************************************************
-- 0.JOB 생성
-- ********************************************************************************  
 IF I_JOB_EXEC = 'I' THEN
     -- 교육평가진행관리 업무
	 IF I_JOB_GUBUN = 'EDU2020M01_S' OR I_JOB_GUBUN = 'EDU2020M01_E' THEN 
	 		
	 		-- JOB 생성
	 		DBMS_JOB.SUBMIT(
			        V_JOBNO
					,'SP_UC_SET_JOB( '''||I_TENANT_ID||''' , '''||I_JOB_GUBUN||''','''||I_ITEM_ID||''',''E'', NULL);'
					, V_DATE,NULL,false);
		
			-- JOB 로그 생성
			MERGE INTO TB_CM_JOB T
			    USING (SELECT I_TENANT_ID AS TENANT_ID
			    		    , I_JOB_GUBUN AS JOB_GUBUN
			    		    , I_ITEM_ID   AS ITEM_ID
			    		    , V_JOBNO     AS JOB_NO
			    		 FROM DUAL ) S
			     ON (T.TENANT_ID = S.TENANT_ID AND T.JOB_GUBUN = S.JOB_GUBUN AND T.ITEM_ID = S.ITEM_ID)
			WHEN MATCHED THEN 
			UPDATE SET T.JOB_NO = S.JOB_NO
			          ,T.JOB_RESULT = NULL
  		   WHEN NOT MATCHED THEN
			 INSERT (TENANT_ID, JOB_GUBUN, ITEM_ID,JOB_NO ) 
			 VALUES (S.TENANT_ID, S.JOB_GUBUN, S.ITEM_ID,S.JOB_NO )   	;	    

			COMMIT;
	END IF;

-- ********************************************************************************
-- 1.JOB 삭제
-- ********************************************************************************  
 ELSIF I_JOB_EXEC = 'D' THEN

-- 1.1 JOB 조회
	BEGIN
    SELECT JOB_NO INTO V_JOBNO
      FROM TB_CM_JOB
     WHERE TENANT_ID =  I_TENANT_ID
	   AND JOB_GUBUN = I_JOB_GUBUN
	   AND ITEM_ID   = I_ITEM_ID ;  
	EXCEPTION
	    WHEN NO_DATA_FOUND THEN
	        V_JOBNO := NULL;
	 END;	   

-- 1.1 JOB / JOB로그 삭제	   
	IF V_JOBNO IS NOT NULL THEN
	    BEGIN
			DBMS_JOB.REMOVE(V_JOBNO);
			COMMIT;
		   		
		EXCEPTION
	    WHEN NO_DATA_FOUND THEN
	       dbms_output.put_line('JOB NOT EXISTS : ' || SQLERRM);
	   END;	  
	   
		DELETE FROM TB_CM_JOB
	     WHERE TENANT_ID =  I_TENANT_ID
		   AND JOB_GUBUN = I_JOB_GUBUN
		   AND ITEM_ID   = I_ITEM_ID ;  
		COMMIT;
			    
	END IF;

-- ********************************************************************************
-- 2.JOB 실행 
-- ********************************************************************************  
 ELSIF I_JOB_EXEC = 'E' THEN

-- 2.1업무별 처리 >> 교육평가계획 진행상태 수정
	IF I_JOB_GUBUN = 'EDU2020M01_S' OR I_JOB_GUBUN = 'EDU2020M01_E' THEN 
	  UPDATE TB_EDU_EXAM_SCHE 
	    SET SCHE_STATUS     = CASE I_JOB_GUBUN WHEN 'EDU2020M01_S' THEN '30' ELSE '40' END
	       ,MODIFY_AGENT_ID = 'JOBUSER'
	       ,MODIFY_DT  		= SYSTIMESTAMP
	  WHERE TENANT_ID = I_TENANT_ID
	    AND SCHE_ID   = I_ITEM_ID  ;
	  COMMIT;
    END IF;
    

-- 2.2 JOB 테이블 경과 처리
	UPDATE TB_CM_JOB
	   SET JOB_RESULT = '성공'
	 WHERE TENANT_ID =  I_TENANT_ID
	   AND JOB_GUBUN = I_JOB_GUBUN
	   AND ITEM_ID   = I_ITEM_ID ;
	 COMMIT;
END IF;
   

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
      
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result :=  'F';
        v_work_bigo   := I_JOB_GUBUN||' '||I_ITEM_ID||' ' ||SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_SET_LOGIN_HISTORY_01 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_LOGIN_ID       IN     VARCHAR2
 ,I_LOGIN_IP       IN     VARCHAR2
 ,I_SEQ            IN OUT NUMBER
)AS 
/******************************************************************************
   NAME:       SP_UC_SET_LOGIN_HISTORY_01
   PURPOSE:    LOG_LOGIN_HISTORY INSERT/UPDATE

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/24 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_SET_LOGIN_HISTORY_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
   V_AGENT_ID	        TB_CM_USER_MASTER.AGENT_ID%TYPE         :='';
   V_SEQ              NUMBER(3)     :=0 ;   
   V_CUD_CNT          NUMBER(3)     :=0 ;
 
 BEGIN 
-- ********************************************************************************
-- 0.로그인 이력 처리
-- ********************************************************************************    
   -- 로그인이력 ISSERT    
  

 -- IF I_SEQ = 0 THEN
           -- 로그인 SEQ 조회
           SELECT NVL(MAX(LOGIN_NO),0)+1 INTO V_SEQ FROM TB_CM_LOGIN_HISTORY WHERE LOGIN_YMD = TO_CHAR( SYSDATE,'YYYYMMDD') AND AGENT_ID = I_LOGIN_ID ;
           I_SEQ := V_SEQ ; --생성한 SEQ를 넘겨주기 위해
           
           INSERT INTO TB_CM_LOGIN_HISTORY (
                  LOGIN_YMD
                  ,AGENT_ID
                  ,LOGIN_NO
                  ,TENANT_ID
                  ,LOGIN_DT
                  ,LOGIN_IP
           )
           SELECT TO_CHAR( SYSDATE,'YYYYMMDD') AS LOGIN_YMD
                  ,I_LOGIN_ID AS AGENT_ID
                  ,V_SEQ AS LOGIN_NO
                  ,I_TENANT_ID AS TENANT_ID
                  ,SYSTIMESTAMP AS LOGIN_DT
                  ,I_LOGIN_IP AS IP_ADDRESS
             FROM DUAL ;
             COMMIT;
             
  /* ELSE
       -- 비밀번호 누적오류횟수 UPDATE >>
       UPDATE TB_LOG_LOGIN_HISTORY SET  LOGOUT_DT = SYSTIMESTAMP
       WHERE LOGIN_YMD = TO_CHAR( SYSDATE,'YYYYMMDD')
         AND AGENT_ID  = I_LOGIN_ID
         AND SEQ       = I_SEQ;
         
         V_CUD_CNT :=SQL%ROWCOUNT;
       COMMIT;    
       
       -- UPDATE 건이 없는 경우, 즉 전일 로그인 하여 당일 걸친 경우
       IF V_CUD_CNT = 0 THEN
           UPDATE TB_LOG_LOGIN_HISTORY SET  LOGOUT_DT = SYSTIMESTAMP
           WHERE LOGIN_YMD = TO_CHAR( SYSDATE-1,'YYYYMMDD')
             AND AGENT_ID  = I_LOGIN_ID
             AND SEQ       = I_SEQ;
           COMMIT;  
       END IF;
   END IF;
   */
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_SET_MENU_HISTORY_01 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_LOGIN_ID       IN     VARCHAR2
 ,I_LOGIN_IP       IN     VARCHAR2
 ,I_PGM_ID         IN     VARCHAR2
 ,I_PGM_FILE       IN     VARCHAR2 /* 물리적 파일명 */
 ,I_ACTION_TYPE    IN     VARCHAR2
 ,I_ACTION_DESC    IN     VARCHAR2 
)AS 
/******************************************************************************
   NAME:       SP_UC_SET_MENU_HISTORY_01
   PURPOSE:    USER MENU_HISTORY INSERT/UPDATE

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/01/24 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_SET_MENU_HISTORY_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN 
-- ********************************************************************************
-- 0.메뉴 이력 처리
-- ********************************************************************************    
           INSERT INTO TB_CM_MENU_HISTORY (
                  PGM_ID
                  ,AGENT_ID
                  ,LOG_DT
                  ,TENANT_ID
                  ,IP_ADDR
                  ,ACTION_TYPE
                  ,ACTION_DESC
                  ,FILE_ID
           )
           SELECT  I_PGM_ID AS PGM_ID
                  ,I_LOGIN_ID AS AGENT_ID
                  ,SYSTIMESTAMP AS LOGIN_DT
                  ,I_TENANT_ID AS TENANT_ID
                  ,I_LOGIN_IP AS IP_ADDR
                  ,I_ACTION_TYPE AS ACTION_TYPE
                  ,I_ACTION_DESC AS ACTION_DESC
                  ,I_PGM_FILE AS FILE_ID
             FROM DUAL ;
             COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

create or replace PROCEDURE "SP_UC_SET_QUEUE_GROUP" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2
    ,I_CUD_GUBUN      IN VARCHAR2	 
    ,I_GROUP_CD       IN VARCHAR2 
    ,I_CENTER_KIND    IN VARCHAR2
    ,I_QUEUE_ID       IN VARCHAR2
    ,I_HIDE_YN 		  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_UC_SET_QUEUE_GROUP
   PURPOSE:    (공통)DASHBOARD(관리자)-큐그룹코드 관리 - 등록/수정/삭제
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/20  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_SET_QUEUE_GROUP';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 1. 등록
-- ********************************************************************************    
IF (I_CUD_GUBUN = 'I') THEN
    INSERT INTO TB_CM_QUEUE_GROUP ( TENANT_ID, GROUP_CD,CENTER_KIND,QUEUE_ID, HIDE_YN
                  ,CREATE_AGENT_ID,CREATE_DT,MODIFY_AGENT_ID,MODIFY_DT)
     VALUES (I_TENANT_ID, I_GROUP_CD,I_CENTER_KIND,I_QUEUE_ID, NVL(I_HIDE_YN,0)
             ,I_LOGIN_ID, SYSDATE , I_LOGIN_ID, SYSDATE) ;
    COMMIT;
-- ********************************************************************************
-- 2. 수정
-- ********************************************************************************      
ELSIF(I_CUD_GUBUN = 'U') THEN  

    UPDATE TB_CM_QUEUE_GROUP 
       SET HIDE_YN = NVL(I_HIDE_YN,0) 
          ,MODIFY_AGENT_ID = I_LOGIN_ID
          ,MODIFY_DT   = SYSDATE
     WHERE TENANT_ID   = I_TENANT_ID 
       AND GROUP_CD    = I_GROUP_CD 
       AND CENTER_KIND = I_CENTER_KIND
       AND QUEUE_ID    = I_QUEUE_ID ;
       
     COMMIT;  

-- ********************************************************************************
-- 3. 삭제
-- ********************************************************************************      
      
ELSIF(I_CUD_GUBUN = 'D') THEN     
     DELETE FROM TB_CM_QUEUE_GROUP 
     WHERE TENANT_ID = I_TENANT_ID 
       AND GROUP_CD = I_GROUP_CD 
       AND CENTER_KIND = I_CENTER_KIND
       AND QUEUE_ID    = I_QUEUE_ID ;
       
       COMMIT;
       
END IF;
      
	

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.

    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_SET_SERVICE 
( I_SERVICEABLE_YN   IN NUMBER
) AS 
/******************************************************************************
   NAME:       SP_UC_SET_SERVICE
   PURPOSE:    서비스 사용여부 업데이트(유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/07/24  JIN 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_SET_SERVICE';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  ########################
   


BEGIN

	UPDATE TB_CM_LICENSE 
	SET SERVICEABLE_YN = I_SERVICEABLE_YN;
	
	COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

create or replace function FN_CM_GET_TB_DEPT
( I_TENANT_ID IN VARCHAR2
 ,ps_dept_cd  in varchar2
)
RETURN PK_DEPT.NT_DEPT PIPELINED AS V_RETURN    PK_DEPT.OB_DEPT;

/*
소속정보를 가져온다.
select * from table(fn_cm_get_tb_dept('BT',''));                 --전체 소속정보를 가져온다.
select * from table(fn_cm_get_tb_dept('BT','0002,0003,0004'));   --dept_cd 가 0002,0003,0004 인 소속정보를 가져온다.
*/

  CURSOR TMP_LIST IS
            SELECT 
            		TENANT_ID,
            		DEPT_CD ,
                    DEPT_NM ,
                    DEPT_DEPTH ,
                    PARENT_DEPT_CD ,
                    CENTER_KIND,
                    COM_KIND,
                    INOUT_KIND,
                    SORT_NO ,
                    HIDE_YN ,
                    CREATE_AGENT_ID ,
                    CREATE_DT ,
                    MODIFY_AGENT_ID ,
                    MODIFY_DT 
            FROM TB_CM_DEPT_CD
            WHERE TENANT_ID = I_TENANT_ID
              AND ((ps_dept_cd IS NULL AND 1=1 )
                    OR (ps_dept_cd IS NOT NULL 
                        AND  dept_cd in (select split_value from table(fn_cm_get_tb_split(ps_dept_cd, ',')))
                       )) 
              ;

   BEGIN  
   FOR CUR IN TMP_LIST LOOP
	        V_RETURN.TENANT_ID 		:= CUR.TENANT_ID; 
	        V_RETURN.DEPT_CD 		:= CUR.DEPT_CD; 
	        V_RETURN.DEPT_NM 		:= CUR.DEPT_NM; 
	        V_RETURN.DEPT_DEPTH     := CUR.DEPT_DEPTH; 
	        V_RETURN.PARENT_DEPT_CD := CUR.PARENT_DEPT_CD; 
	        V_RETURN.CENTER_KIND    := CUR.CENTER_KIND; 
	        V_RETURN.COM_KIND       := CUR.COM_KIND; 
	        V_RETURN.IN_OUT_KIND    := CUR.INOUT_KIND; 
	        V_RETURN.SORT    		:= CUR.SORT_NO; 
	        V_RETURN.HIDE_YN 		:= CUR.HIDE_YN; 
	        V_RETURN.CREATE_AGENT_ID:= CUR.CREATE_AGENT_ID; 
	        V_RETURN.CREATE_DT 		:= CUR.CREATE_DT; 
	        V_RETURN.MODIFY_AGENT_ID:= CUR.MODIFY_AGENT_ID; 
	        V_RETURN.MODIFY_DT 		:= CUR.MODIFY_DT; 
	
	        PIPE ROW(V_RETURN);                   

    END LOOP;
  
  exception when others then
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    --dbms_output.put_line(dbms_utility.format_error_backtrace);
    
end;
/

;

create or replace function FN_CM_GET_TB_DEPT_HISTORY
(
	I_TENANT_ID  IN VARCHAR2
	,I_STD_MONTH IN VARCHAR2
	,I_DEPT_CD   IN VARCHAR2
)
RETURN PK_DEPT_HISTORY.NT_DEPT_HISTORY PIPELINED AS V_RETURN    PK_DEPT_HISTORY.OB_DEPT_HISTORY;

/*
소속정보를 가져온다.
select * from table(fn_cm_get_tb_dept('BT',''));                 --전체 소속정보를 가져온다.
select * from table(fn_cm_get_tb_dept('BT','0002,0003,0004'));   --dept_cd 가 0002,0003,0004 인 소속정보를 가져온다.
*/

V_TODAY_MONTH VARCHAR2(6) := TO_CHAR(SYSDATE, 'YYYYMM');


  CURSOR TMP_LIST1 IS
	SELECT TENANT_ID,
	       STD_MONTH,
	       DEPT_CD ,
	       DEPT_NM ,
	       DEPT_DEPTH ,
	       PARENT_DEPT_CD ,
	       CENTER_KIND,
	       COM_KIND,
	       INOUT_KIND,
	       SORT_NO ,
	       HIDE_YN ,
	       CREATE_AGENT_ID ,
	       CREATE_DT ,
	       MODIFY_AGENT_ID ,
	       MODIFY_DT
	  FROM TB_CM_DEPT_CD_HISTORY
	 WHERE TENANT_ID = I_TENANT_ID
	   AND STD_MONTH = I_STD_MONTH
	   AND ((I_DEPT_CD IS NULL
	                   AND 1=1 )
	            OR (I_DEPT_CD IS NOT NULL
	                   AND DEPT_CD IN (SELECT SPLIT_VALUE
	                          FROM TABLE(FN_CM_GET_TB_SPLIT(I_DEPT_CD, ','))) )) ;
	                          
  CURSOR TMP_LIST2 IS
	SELECT TENANT_ID,
	       V_TODAY_MONTH AS STD_MONTH,
	       DEPT_CD ,
	       DEPT_NM ,
	       DEPT_DEPTH ,
	       PARENT_DEPT_CD ,
	       CENTER_KIND,
	       COM_KIND,
	       INOUT_KIND,
	       SORT_NO ,
	       HIDE_YN ,
	       CREATE_AGENT_ID ,
	       CREATE_DT ,
	       MODIFY_AGENT_ID ,
	       MODIFY_DT
	  FROM TB_CM_DEPT_CD
	 WHERE TENANT_ID = I_TENANT_ID
	   AND ((I_DEPT_CD IS NULL
	                   AND 1=1 )
	            OR (I_DEPT_CD IS NOT NULL
	                   AND DEPT_CD IN (SELECT SPLIT_VALUE
	                          FROM TABLE(FN_CM_GET_TB_SPLIT(I_DEPT_CD, ','))) )) ;

   BEGIN  
   
   IF (LENGTH(I_STD_MONTH) = 0 OR I_STD_MONTH IS NULL OR I_STD_MONTH >= V_TODAY_MONTH) THEN
   
	   FOR CUR IN TMP_LIST2 LOOP
   			V_RETURN.TENANT_ID      := CUR.TENANT_ID;
   			V_RETURN.STD_MONTH      := CUR.STD_MONTH;
	        V_RETURN.DEPT_CD 		:= CUR.DEPT_CD; 
	        V_RETURN.DEPT_NM 		:= CUR.DEPT_NM; 
	        V_RETURN.DEPT_DEPTH     := CUR.DEPT_DEPTH; 
	        V_RETURN.PARENT_DEPT_CD := CUR.PARENT_DEPT_CD; 
	        V_RETURN.CENTER_KIND    := CUR.CENTER_KIND; 
	        V_RETURN.COM_KIND       := CUR.COM_KIND; 
	        V_RETURN.IN_OUT_KIND    := CUR.INOUT_KIND; 
	        V_RETURN.SORT    		:= CUR.SORT_NO; 
	        V_RETURN.HIDE_YN 		:= CUR.HIDE_YN; 
	        V_RETURN.CREATE_AGENT_ID:= CUR.CREATE_AGENT_ID; 
	        V_RETURN.CREATE_DT 		:= CUR.CREATE_DT; 
	        V_RETURN.MODIFY_AGENT_ID:= CUR.MODIFY_AGENT_ID; 
	        V_RETURN.MODIFY_DT 		:= CUR.MODIFY_DT; 
	
	        PIPE ROW(V_RETURN);                   
		END LOOP;
	ELSE
	   FOR CUR IN TMP_LIST1 LOOP
   			V_RETURN.TENANT_ID      := CUR.TENANT_ID;
   			V_RETURN.STD_MONTH      := CUR.STD_MONTH;
	        V_RETURN.DEPT_CD 		:= CUR.DEPT_CD; 
	        V_RETURN.DEPT_NM 		:= CUR.DEPT_NM; 
	        V_RETURN.DEPT_DEPTH     := CUR.DEPT_DEPTH; 
	        V_RETURN.PARENT_DEPT_CD := CUR.PARENT_DEPT_CD; 
	        V_RETURN.CENTER_KIND    := CUR.CENTER_KIND; 
	        V_RETURN.COM_KIND       := CUR.COM_KIND; 
	        V_RETURN.IN_OUT_KIND    := CUR.INOUT_KIND; 
	        V_RETURN.SORT    		:= CUR.SORT_NO; 
	        V_RETURN.HIDE_YN 		:= CUR.HIDE_YN; 
	        V_RETURN.CREATE_AGENT_ID:= CUR.CREATE_AGENT_ID; 
	        V_RETURN.CREATE_DT 		:= CUR.CREATE_DT; 
	        V_RETURN.MODIFY_AGENT_ID:= CUR.MODIFY_AGENT_ID; 
	        V_RETURN.MODIFY_DT 		:= CUR.MODIFY_DT; 
	
	        PIPE ROW(V_RETURN);                   
		END LOOP;	
	ENd IF;
  
  exception when others then
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    --dbms_output.put_line(dbms_utility.format_error_backtrace);
    
end;
/

;

create or replace function FN_CM_GET_TB_USER
( 
	I_TENANT_ID IN VARCHAR2,
	I_AGENT_IDS IN VARCHAR2
	
)
RETURN PK_AGENT.NT_AGENT PIPELINED AS V_RETURN    PK_AGENT.OB_AGENT;

/******************************************************************************
   NAME:       FN_CM_GET_TB_USER_HISTORY
   PURPOSE:    기준년월 사용자정보 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/03/10  JYMOON           
   
   SELECT * FROM TABLE(FN_CM_GET_TB_USER('BT', '')); --전체
   SELECT * FROM TABLE(FN_CM_GET_TB_USER('BT', '2017030001,2017030002,2017030003')); --AGENT_ID가 2017030001,2017030002,2017030003 인 상담사정보 조회
******************************************************************************/

  CURSOR TMP_LIST IS
            SELECT 
				A.TENANT_ID
				,A.AGENT_ID
				,A.AGENT_NM
				,A.AGENT_PW
				,A.SABUN
				,A.DEPT_CD
				,A.TM_KIND
				,A.AGENT_JIKGUP
				,A.AGENT_JIKCHK
				,A.JIKJONG_KIND
				,A.DAYNIGHT_GUBUN
				,A.JAEJIK_GUBUN
				,A.GENDER_KIND
				,A.BIRTH_YMD
				,A.ENTER_YMD
				,A.RETIRE_YMD
				,A.RETIRE_GUBUN
				,A.RETIRE_RSN
				,A.WORK_MONTH_PERIOD
				,A.HIDE_YN
				,A.LOGIN_TRY_COUNT
				,A.TEL_NO
				,A.LOCK_YN
				,A.CONTRACT_FRM
				,A.CONTRACT_END
				,A.SCHE_TARGET_YN
				,A.EDU_TARGET_YN
				,A.QA_TARGET_YN
				,A.KPI_TARGET_YN
				,A.IMG_REAL_FILENAME
				,A.IMG_USER_FILENAME
				,A.IMG_PATH
				,A.GRANT_ID
				,A.WARNING_INFO
				,B.USER_DATA1
				,B.USER_DATA2
				,B.USER_DATA3
				,B.USER_DATA4
				,B.USER_DATA5
				,B.USER_DATA6
				,B.USER_DATA7
				,B.USER_DATA8
				,B.USER_DATA9
				,B.USER_DATA10
            FROM TB_CM_USER_MASTER A
            LEFT OUTER JOIN TB_CM_USER_DETAIL B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
            WHERE A.TENANT_ID = I_TENANT_ID
              AND ( 
              		(I_AGENT_IDS IS NULL  AND 1=1) OR
					(I_AGENT_IDS IS NOT NULL AND A.AGENT_ID IN (SELECT split_value FROM TABLE(FN_CM_GET_TB_SPLIT(I_AGENT_IDS, ','))))
              )
              AND NVL(A.HIDE_YN,0) = 0
			;

   BEGIN  
   FOR CUR IN TMP_LIST LOOP
			V_RETURN.TENANT_ID         := CUR.TENANT_ID;
			V_RETURN.AGENT_ID          := CUR.AGENT_ID;
			V_RETURN.AGENT_NM          := CUR.AGENT_NM;
			V_RETURN.AGENT_PW          := CUR.AGENT_PW;
			V_RETURN.SABUN             := CUR.SABUN;
			V_RETURN.DEPT_CD           := CUR.DEPT_CD;
			V_RETURN.TM_KIND           := CUR.TM_KIND;
			V_RETURN.AGENT_JIKGUP      := CUR.AGENT_JIKGUP;
			V_RETURN.AGENT_JIKCHK      := CUR.AGENT_JIKCHK;
			V_RETURN.JIKJONG_KIND      := CUR.JIKJONG_KIND;
			V_RETURN.DAYNIGHT_GUBUN    := CUR.DAYNIGHT_GUBUN;
			V_RETURN.JAEJIK_GUBUN      := CUR.JAEJIK_GUBUN;
			V_RETURN.GENDER_KIND       := CUR.GENDER_KIND;
			V_RETURN.BIRTH_YMD         := CUR.BIRTH_YMD;
			V_RETURN.ENTER_YMD         := CUR.ENTER_YMD;
			V_RETURN.RETIRE_YMD        := CUR.RETIRE_YMD;
			V_RETURN.RETIRE_GUBUN      := CUR.RETIRE_GUBUN;
			V_RETURN.RETIRE_RSN        := CUR.RETIRE_RSN;
			V_RETURN.WORK_MONTH_PERIOD := CUR.WORK_MONTH_PERIOD;
			V_RETURN.HIDE_YN           := CUR.HIDE_YN;
			V_RETURN.LOGIN_TRY_COUNT   := CUR.LOGIN_TRY_COUNT;
			V_RETURN.TEL_NO            := CUR.TEL_NO;
			V_RETURN.LOCK_YN           := CUR.LOCK_YN;
			V_RETURN.CONTRACT_FRM      := CUR.CONTRACT_FRM;
			V_RETURN.CONTRACT_END      := CUR.CONTRACT_END;
			V_RETURN.SCHE_TARGET_YN    := CUR.SCHE_TARGET_YN;
			V_RETURN.EDU_TARGET_YN     := CUR.EDU_TARGET_YN;
			V_RETURN.QA_TARGET_YN      := CUR.QA_TARGET_YN;
			V_RETURN.KPI_TARGET_YN     := CUR.KPI_TARGET_YN;
			V_RETURN.IMG_REAL_FILENAME := CUR.IMG_REAL_FILENAME;
			V_RETURN.IMG_USER_FILENAME := CUR.IMG_USER_FILENAME;
			V_RETURN.IMG_PATH          := CUR.IMG_PATH;
			V_RETURN.GRANT_ID          := CUR.GRANT_ID;
			V_RETURN.WARNING_INFO      := CUR.WARNING_INFO;			
			V_RETURN.USER_DATA1        := CUR.USER_DATA1;
			V_RETURN.USER_DATA2        := CUR.USER_DATA2;
			V_RETURN.USER_DATA3        := CUR.USER_DATA3;
			V_RETURN.USER_DATA4        := CUR.USER_DATA4;
			V_RETURN.USER_DATA5        := CUR.USER_DATA5;
			V_RETURN.USER_DATA6        := CUR.USER_DATA6;
			V_RETURN.USER_DATA7        := CUR.USER_DATA7;
			V_RETURN.USER_DATA8        := CUR.USER_DATA8;
			V_RETURN.USER_DATA9        := CUR.USER_DATA9;
			V_RETURN.USER_DATA10       := CUR.USER_DATA10;
	
	        PIPE ROW(V_RETURN);

    END LOOP;
  
  exception when others then
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    
END;
/

;

create or replace function FN_CM_GET_TB_USER_HISTORY
( 
	I_TENANT_ID IN VARCHAR2,
	I_STD_MONTH IN VARCHAR2,
	I_AGENT_IDS IN VARCHAR2
	
)
RETURN PK_AGENT_HISTORY.NT_AGENT_HISTORY PIPELINED AS V_RETURN    PK_AGENT_HISTORY.OB_AGENT_HISTORY;

/******************************************************************************
   NAME:       FN_CM_GET_TB_USER_HISTORY
   PURPOSE:    기준년월 사용자정보 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/03/10  JYMOON           
   
   SELECT * FROM TABLE(FN_CM_GET_TB_USER_HISTORY('BT', '201703', '')); --전체
   SELECT * FROM TABLE(FN_CM_GET_TB_USER_HISTORY('BT', '201703', '2017030001,2017030002,2017030003')); --AGENT_ID가 2017030001,2017030002,2017030003 인 상담사정보 조회
******************************************************************************/

V_TODAY_MONTH VARCHAR2(6) := TO_CHAR(SYSDATE, 'YYYYMM');

	CURSOR TMP_LIST1 IS
		SELECT A.TENANT_ID ,
		       A.STD_MONTH ,
		       A.AGENT_ID ,
		       A.AGENT_NM ,
		       A.AGENT_PW ,
		       A.SABUN ,
		       A.DEPT_CD ,
		       A.TM_KIND ,
		       A.AGENT_JIKGUP ,
		       A.AGENT_JIKCHK ,
		       A.JIKJONG_KIND ,
		       A.DAYNIGHT_GUBUN ,
		       A.JAEJIK_GUBUN ,
		       A.GENDER_KIND ,
		       A.BIRTH_YMD ,
		       A.ENTER_YMD ,
		       A.RETIRE_YMD ,
		       A.RETIRE_GUBUN ,
		       A.RETIRE_RSN ,
		       A.WORK_MONTH_PERIOD ,
		       A.HIDE_YN ,
		       A.LOGIN_TRY_COUNT ,
		       A.TEL_NO ,
		       A.LOCK_YN ,
		       A.CONTRACT_FRM ,
		       A.CONTRACT_END ,
		       A.SCHE_TARGET_YN ,
		       A.EDU_TARGET_YN ,
		       A.QA_TARGET_YN ,
		       A.KPI_TARGET_YN ,
		       A.IMG_REAL_FILENAME ,
		       A.IMG_USER_FILENAME ,
		       A.IMG_PATH ,
		       A.GRANT_ID ,
		       A.WARNING_INFO ,
		       A.USER_DATA1 ,
		       A.USER_DATA2 ,
		       A.USER_DATA3 ,
		       A.USER_DATA4 ,
		       A.USER_DATA5 ,
		       A.USER_DATA6 ,
		       A.USER_DATA7 ,
		       A.USER_DATA8 ,
		       A.USER_DATA9 ,
		       A.USER_DATA10
		  FROM TB_CM_USER_MASTER_HISTORY A
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND A.STD_MONTH = I_STD_MONTH
		   AND ( (I_AGENT_IDS IS NULL AND 1=1)
		            OR (I_AGENT_IDS IS NOT NULL AND AGENT_ID IN (
		            	SELECT split_value FROM TABLE(FN_CM_GET_TB_SPLIT(I_AGENT_IDS, ','))
					)
				)
			);
			

	CURSOR TMP_LIST2 IS
		SELECT A.TENANT_ID ,
		       V_TODAY_MONTH AS STD_MONTH,
		       A.AGENT_ID ,
		       A.AGENT_NM ,
		       A.AGENT_PW ,
		       A.SABUN ,
		       A.DEPT_CD ,
		       A.TM_KIND ,
		       A.AGENT_JIKGUP ,
		       A.AGENT_JIKCHK ,
		       A.JIKJONG_KIND ,
		       A.DAYNIGHT_GUBUN ,
		       A.JAEJIK_GUBUN ,
		       A.GENDER_KIND ,
		       A.BIRTH_YMD ,
		       A.ENTER_YMD ,
		       A.RETIRE_YMD ,
		       A.RETIRE_GUBUN ,
		       A.RETIRE_RSN ,
		       A.WORK_MONTH_PERIOD ,
		       A.HIDE_YN ,
		       A.LOGIN_TRY_COUNT ,
		       A.TEL_NO ,
		       A.LOCK_YN ,
		       A.CONTRACT_FRM ,
		       A.CONTRACT_END ,
		       A.SCHE_TARGET_YN ,
		       A.EDU_TARGET_YN ,
		       A.QA_TARGET_YN ,
		       A.KPI_TARGET_YN ,
		       A.IMG_REAL_FILENAME ,
		       A.IMG_USER_FILENAME ,
		       A.IMG_PATH ,
		       A.GRANT_ID ,
		       A.WARNING_INFO ,
		       B.USER_DATA1 ,
		       B.USER_DATA2 ,
		       B.USER_DATA3 ,
		       B.USER_DATA4 ,
		       B.USER_DATA5 ,
		       B.USER_DATA6 ,
		       B.USER_DATA7 ,
		       B.USER_DATA8 ,
		       B.USER_DATA9 ,
		       B.USER_DATA10
		  FROM TB_CM_USER_MASTER A
		LEFT OUTER JOIN TB_CM_USER_DETAIL B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND ( (I_AGENT_IDS IS NULL AND 1=1)
		            OR (I_AGENT_IDS IS NOT NULL AND A.AGENT_ID IN (
		            	SELECT split_value FROM TABLE(FN_CM_GET_TB_SPLIT(I_AGENT_IDS, ','))
					)
				)
			);


BEGIN
	
	IF (LENGTH(I_STD_MONTH) = 0 OR I_STD_MONTH IS NULL OR I_STD_MONTH >= V_TODAY_MONTH) THEN
		
		FOR CUR IN TMP_LIST2 LOOP
			V_RETURN.TENANT_ID         := CUR.TENANT_ID;
			V_RETURN.STD_MONTH         := CUR.STD_MONTH;
			V_RETURN.AGENT_ID          := CUR.AGENT_ID;
			V_RETURN.AGENT_NM          := CUR.AGENT_NM;
			V_RETURN.AGENT_PW          := CUR.AGENT_PW;
			V_RETURN.SABUN             := CUR.SABUN;
			V_RETURN.DEPT_CD           := CUR.DEPT_CD;
			V_RETURN.TM_KIND           := CUR.TM_KIND;
			V_RETURN.AGENT_JIKGUP      := CUR.AGENT_JIKGUP;
			V_RETURN.AGENT_JIKCHK      := CUR.AGENT_JIKCHK;
			V_RETURN.JIKJONG_KIND      := CUR.JIKJONG_KIND;
			V_RETURN.DAYNIGHT_GUBUN    := CUR.DAYNIGHT_GUBUN;
			V_RETURN.JAEJIK_GUBUN      := CUR.JAEJIK_GUBUN;
			V_RETURN.GENDER_KIND       := CUR.GENDER_KIND;
			V_RETURN.BIRTH_YMD         := CUR.BIRTH_YMD;
			V_RETURN.ENTER_YMD         := CUR.ENTER_YMD;
			V_RETURN.RETIRE_YMD        := CUR.RETIRE_YMD;
			V_RETURN.RETIRE_GUBUN      := CUR.RETIRE_GUBUN;
			V_RETURN.RETIRE_RSN        := CUR.RETIRE_RSN;
			V_RETURN.WORK_MONTH_PERIOD := CUR.WORK_MONTH_PERIOD;
			V_RETURN.HIDE_YN           := CUR.HIDE_YN;
			V_RETURN.LOGIN_TRY_COUNT   := CUR.LOGIN_TRY_COUNT;
			V_RETURN.TEL_NO            := CUR.TEL_NO;
			V_RETURN.LOCK_YN           := CUR.LOCK_YN;
			V_RETURN.CONTRACT_FRM      := CUR.CONTRACT_FRM;
			V_RETURN.CONTRACT_END      := CUR.CONTRACT_END;
			V_RETURN.SCHE_TARGET_YN    := CUR.SCHE_TARGET_YN;
			V_RETURN.EDU_TARGET_YN     := CUR.EDU_TARGET_YN;
			V_RETURN.QA_TARGET_YN      := CUR.QA_TARGET_YN;
			V_RETURN.KPI_TARGET_YN     := CUR.KPI_TARGET_YN;
			V_RETURN.IMG_REAL_FILENAME := CUR.IMG_REAL_FILENAME;
			V_RETURN.IMG_USER_FILENAME := CUR.IMG_USER_FILENAME;
			V_RETURN.IMG_PATH          := CUR.IMG_PATH;
			V_RETURN.GRANT_ID          := CUR.GRANT_ID;
			V_RETURN.WARNING_INFO      := CUR.WARNING_INFO;
			V_RETURN.USER_DATA1        := CUR.USER_DATA1;
			V_RETURN.USER_DATA2        := CUR.USER_DATA2;
			V_RETURN.USER_DATA3        := CUR.USER_DATA3;
			V_RETURN.USER_DATA4        := CUR.USER_DATA4;
			V_RETURN.USER_DATA5        := CUR.USER_DATA5;
			V_RETURN.USER_DATA6        := CUR.USER_DATA6;
			V_RETURN.USER_DATA7        := CUR.USER_DATA7;
			V_RETURN.USER_DATA8        := CUR.USER_DATA8;
			V_RETURN.USER_DATA9        := CUR.USER_DATA9;
			V_RETURN.USER_DATA10       := CUR.USER_DATA10;
	
	        PIPE ROW(V_RETURN);
		END LOOP;
	ELSE
		FOR CUR IN TMP_LIST1 LOOP
			V_RETURN.TENANT_ID         := CUR.TENANT_ID;
			V_RETURN.STD_MONTH         := CUR.STD_MONTH;
			V_RETURN.AGENT_ID          := CUR.AGENT_ID;
			V_RETURN.AGENT_NM          := CUR.AGENT_NM;
			V_RETURN.AGENT_PW          := CUR.AGENT_PW;
			V_RETURN.SABUN             := CUR.SABUN;
			V_RETURN.DEPT_CD           := CUR.DEPT_CD;
			V_RETURN.TM_KIND           := CUR.TM_KIND;
			V_RETURN.AGENT_JIKGUP      := CUR.AGENT_JIKGUP;
			V_RETURN.AGENT_JIKCHK      := CUR.AGENT_JIKCHK;
			V_RETURN.JIKJONG_KIND      := CUR.JIKJONG_KIND;
			V_RETURN.DAYNIGHT_GUBUN    := CUR.DAYNIGHT_GUBUN;
			V_RETURN.JAEJIK_GUBUN      := CUR.JAEJIK_GUBUN;
			V_RETURN.GENDER_KIND       := CUR.GENDER_KIND;
			V_RETURN.BIRTH_YMD         := CUR.BIRTH_YMD;
			V_RETURN.ENTER_YMD         := CUR.ENTER_YMD;
			V_RETURN.RETIRE_YMD        := CUR.RETIRE_YMD;
			V_RETURN.RETIRE_GUBUN      := CUR.RETIRE_GUBUN;
			V_RETURN.RETIRE_RSN        := CUR.RETIRE_RSN;
			V_RETURN.WORK_MONTH_PERIOD := CUR.WORK_MONTH_PERIOD;
			V_RETURN.HIDE_YN           := CUR.HIDE_YN;
			V_RETURN.LOGIN_TRY_COUNT   := CUR.LOGIN_TRY_COUNT;
			V_RETURN.TEL_NO            := CUR.TEL_NO;
			V_RETURN.LOCK_YN           := CUR.LOCK_YN;
			V_RETURN.CONTRACT_FRM      := CUR.CONTRACT_FRM;
			V_RETURN.CONTRACT_END      := CUR.CONTRACT_END;
			V_RETURN.SCHE_TARGET_YN    := CUR.SCHE_TARGET_YN;
			V_RETURN.EDU_TARGET_YN     := CUR.EDU_TARGET_YN;
			V_RETURN.QA_TARGET_YN      := CUR.QA_TARGET_YN;
			V_RETURN.KPI_TARGET_YN     := CUR.KPI_TARGET_YN;
			V_RETURN.IMG_REAL_FILENAME := CUR.IMG_REAL_FILENAME;
			V_RETURN.IMG_USER_FILENAME := CUR.IMG_USER_FILENAME;
			V_RETURN.IMG_PATH          := CUR.IMG_PATH;
			V_RETURN.GRANT_ID          := CUR.GRANT_ID;
			V_RETURN.WARNING_INFO      := CUR.WARNING_INFO;
			V_RETURN.USER_DATA1        := CUR.USER_DATA1;
			V_RETURN.USER_DATA2        := CUR.USER_DATA2;
			V_RETURN.USER_DATA3        := CUR.USER_DATA3;
			V_RETURN.USER_DATA4        := CUR.USER_DATA4;
			V_RETURN.USER_DATA5        := CUR.USER_DATA5;
			V_RETURN.USER_DATA6        := CUR.USER_DATA6;
			V_RETURN.USER_DATA7        := CUR.USER_DATA7;
			V_RETURN.USER_DATA8        := CUR.USER_DATA8;
			V_RETURN.USER_DATA9        := CUR.USER_DATA9;
			V_RETURN.USER_DATA10       := CUR.USER_DATA10;
	
	        PIPE ROW(V_RETURN);
		END LOOP;
	END IF;

  exception when others then
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    
END;
/

;

create or replace function FN_CM_GET_WORKDAYS_DIFF
( I_TENANT_ID IN VARCHAR2
 ,I_AGENT_ID  IN VARCHAR2
 ,I_TYPE      IN VARCHAR2 /* D(근무일수) T(근무시간-초) 구분 */ 
 ,I_FROM_DT   IN VARCHAR2 /* YYYYMMDD OR YYYYMMDDHH24MISS */
 ,I_TO_DT     IN VARCHAR2 /* YYYYMMDD OR YYYYMMDDHH24MISS */

)
RETURN VARCHAR2 IS
/******************************************************************************
   NAME:       FN_CM_GET_WORKDAYS_DIFF
   PURPOSE:    두 일자 간 차이를 근무캘린더를 체크하여 근무일자 또는 근무시간을 계산 하여 리턴
               YYYYMMDD 타입일 경우 근무일자 차이 계산
               YYYYMMDDHH24MISS 타입일 경우 근무시간 차이 계산
               e.g)
				SELECT FN_CM_GET_WORKDAYS_DIFF('BT','yakim', 'D', '20170222','20170223') AS AA FROM DUAL
				SELECT FN_CM_GET_WORKDAYS_DIFF('BT','yakim', 'D', '20170222140000','20170223180000') AS AA FROM DUAL
				
				SELECT TO_CHAR(FN_CM_GET_WORKDAYS_DIFF('BT','yakim', 'T', '20170222140000','20170222180000')) AS AA FROM DUAL
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/23  YAKIM
******************************************************************************/
	V_RETURN VARCHAR2(20) :='';
	V_FROM VARCHAR2(14) :=I_FROM_DT;
	V_TO   VARCHAR2(14) :=I_TO_DT;
	
	V_DAYS   NUMBER(3) := 0 ;
	V_HOUR   NUMBER(3) := 0 ;
	V_MIN    NUMBER(3) := 0 ;
	V_SECOND NUMBER(3) := 0 ;
	V_TOTAL_SECOND NUMBER(10) := 0 ;
	
	V_WORK_ID VARCHAR2(20) :='' ;
	V_WORK_HOUR  NUMBER(10) := 0;
	
BEGIN

-- ********************************************************************************
-- 0. 길이체크 8자리이면 000000
-- ********************************************************************************    
   IF(LENGTH(V_FROM)=12) THEN V_FROM := V_FROM||'00' ; END IF;
   IF(LENGTH(V_TO)=12)   THEN V_TO   := V_TO||'00'   ; END IF;
   
   IF(LENGTH(V_FROM)=8) THEN V_FROM := V_FROM||'000000' ; END IF;
   IF(LENGTH(V_TO)=8)   THEN V_TO   := V_TO||'000000'   ; END IF;   

-- ********************************************************************************
-- 1. 두 시간간 차이 계산
-- ******************************************************************************** 
   IF(V_FROM IS NOT NULL AND V_TO IS NOT NULL) THEN
	    SELECT  FLOOR(DIFF_SS/(60*60*24))  				AS DAY 
	           ,LPAD(FLOOR(DIFF_SS/(60*60)), 2, 0)  	AS HOUR
		       ,LPAD(FLOOR(MOD((DIFF_SS/60 ), 60)),2,0) AS MIN
		       ,LPAD(FLOOR(MOD(DIFF_SS ,60)), 2,0)      AS SECOND
			   ,DIFF_SS
		       INTO V_DAYS, V_HOUR,  V_MIN,V_SECOND ,V_TOTAL_SECOND
		 FROM (
		      SELECT FN_CM_GET_TIME_DIFF_TO_SECOND(V_FROM,V_TO) AS DIFF_SS FROM DUAL
		   ) ;	   

-- ********************************************************************************
-- 2. 상담사 근무유형에 따른 일 근무시간 조회
-- ******************************************************************************** 
	V_WORK_HOUR := FN_CM_GET_WORKTYPE_SECONDS(I_TENANT_ID ,I_AGENT_ID,SUBSTR(V_FROM,1,6 )) ;

-- ********************************************************************************
-- 3. 기간 내 근무일 수 계산
-- ******************************************************************************** 
      SELECT COUNT(STD_YMD) INTO V_DAYS
        FROM TB_CM_HOLIDAY A
       WHERE A.STD_YMD BETWEEN SUBSTR(V_FROM,1,8) AND SUBSTR(V_TO,1,8) 
         AND A.HOLI_YN = 0 ;	 

-- ********************************************************************************
-- 4.1 날짜간 일수 계산
-- ******************************************************************************** 	   
	   IF( I_TYPE = 'D') THEN 
	   
	       IF (SUBSTR(V_FROM,1,8) = SUBSTR(V_TO,1,8) AND SUBSTR(V_FROM,9,6) !=SUBSTR(V_TO,9,6)) THEN	       
		    -- 2.1 시간차이 계산 하여 날짜수로 리턴: 상담사의 근무유형 일근무시간으로 나누어 처리 
	       		V_RETURN    := TO_CHAR( ROUND( V_TOTAL_SECOND/( V_WORK_HOUR ) ,1) ,'FM9990.9') ;	       
	       ELSE
	     		V_RETURN := V_DAYS ; -- 일자수
	      END IF;	       
	      
-- ********************************************************************************
-- 4.2 기간 차이  초로 리턴
-- ******************************************************************************** 	       
	   ELSIF ( I_TYPE = 'T') THEN 	
	       IF (SUBSTR(V_FROM,1,8) = SUBSTR(V_TO,1,8) AND SUBSTR(V_FROM,9,6) !=SUBSTR(V_TO,9,6)) THEN
	          V_RETURN := V_TOTAL_SECOND ;   -- 당일 내 부분시간일 경우    
	       ELSE
	     	  V_RETURN := V_DAYS*V_WORK_HOUR ; -- 기간내 근무일수 * 근무유형별 1일 근무시간
	      END IF;		   
	   END IF;
         
   END IF;
   
  RETURN V_RETURN;
  
  EXCEPTION 
  WHEN NO_DATA_FOUND THEN
	     RETURN V_RETURN;
  WHEN OTHERS THEN 
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    RETURN V_RETURN;
END;
/

;

create or replace function FN_EDU_GET_ANSWER
(  I_QUESTION_KIND IN VARCHAR2
  ,I_ANSWER_VALUE IN VARCHAR2
  ,I_GUBUN        IN VARCHAR2 DEFAULT '1' 
)
RETURN VARCHAR2
IS
/******************************************************************************
   NAME:       FN_EDU_GET_ANSWER
   PURPOSE:    업무능력평가응시-시험문항조회 내 ANSWER_VALUE 파싱

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/14  YAKIM
    1.1       2017/05/24  YAKIM            업무평가이력에서 사용 (서술/주관형 포맷)
******************************************************************************/
V_RLT_VALUE    VARCHAR2(1000) :='';
V_ANSWER_ID    VARCHAR2(8)    :='';
V_ANSWER_VALUE VARCHAR2(1000) :='';
V_CUR_ANSWER   VARCHAR2(1000) :='';
BEGIN
  
  FOR CUR_LIST IN (
               SELECT IDX, SPLIT_VALUE
                 FROM TABLE(fn_cm_get_tb_split(I_ANSWER_VALUE , '^'))
                 )
  LOOP
   V_CUR_ANSWER   :='';
   V_ANSWER_ID    :=  TRIM(REGEXP_SUBSTR(CUR_LIST.SPLIT_VALUE, '[^==]+', 1, 1)) ;
   V_ANSWER_VALUE :=  TRIM(REGEXP_SUBSTR(CUR_LIST.SPLIT_VALUE, '[^==]+', 1, 2))          ;
  
       IF V_ANSWER_ID = '1' THEN
         V_ANSWER_ID := '①' ;
       ELSIF V_ANSWER_ID = '2' THEN
         V_ANSWER_ID := '②' ;
       ELSIF V_ANSWER_ID = '3' THEN
         V_ANSWER_ID := '③' ;
       ELSIF V_ANSWER_ID = '4' THEN
         V_ANSWER_ID := '④' ;
       ELSIF V_ANSWER_ID = '5' THEN
         V_ANSWER_ID := '⑤' ;
       END IF;  
           
	   IF I_QUESTION_KIND IN ('10','20','30','40') THEN
	      IF V_ANSWER_VALUE = '1' THEN                                          
	          V_CUR_ANSWER := V_ANSWER_ID ; 
	          -- 다답일 경우 콤마로 연결하기 위해
	           IF V_RLT_VALUE IS NOT NULL THEN 
			      V_RLT_VALUE := V_RLT_VALUE ||',' ;
			   END IF;   
	      END IF; 
	   ELSE
	   
	      IF I_GUBUN = '1' THEN -- 업무평가응시일 경우   
	   
		   	  IF V_ANSWER_VALUE IS NULL THEN
		   	     V_CUR_ANSWER := '<em class="non_aw">' || V_ANSWER_ID||'</em>'; 
		   	  	 
		   	  ELSE
		         --V_CUR_ANSWER := '<em>' || V_ANSWER_ID||' ' || V_ANSWER_VALUE || '</em>'; -- 답은 표기안하고 답항번호 색으로만 구분한다.
		         V_CUR_ANSWER := '<em>' || V_ANSWER_ID ||'</em>'; 
		      END IF; 
		       -- 다답일 경우 콤마로 연결하기 위해
			   IF V_RLT_VALUE IS NOT NULL  THEN 
			      V_RLT_VALUE := V_RLT_VALUE ||',' ;
			   END IF;  	   
		   ELSE 
		   	  IF V_ANSWER_VALUE IS NULL THEN
		   	     V_CUR_ANSWER := ''; 		   	  	 
		   	  ELSE
		         --V_CUR_ANSWER := '<em>' || V_ANSWER_ID||' ' || V_ANSWER_VALUE || '</em>'; -- 답은 표기안하고 답항번호 색으로만 구분한다.
		         V_CUR_ANSWER := V_ANSWER_ID || V_ANSWER_VALUE ;
		      END IF; 
		       -- 다답일 경우 콤마로 연결하기 위해
			   IF V_RLT_VALUE IS NOT NULL  THEN 
			      V_RLT_VALUE := V_RLT_VALUE ||',' ;
			   END IF;		
		
		END IF;  		   
		        
	   END IF;
	   
	     V_RLT_VALUE := V_RLT_VALUE || V_CUR_ANSWER ;
	  
  END LOOP;
  
   IF I_GUBUN = '1' THEN -- 업무평가응시일 경우   
	  IF I_QUESTION_KIND = '50' THEN 
	  	   V_RLT_VALUE := '<strong>주관형</strong>' || V_RLT_VALUE ;	  
	  ELSIF I_QUESTION_KIND = '60' THEN 
	       V_RLT_VALUE := '<strong>서D형</strong>' || V_RLT_VALUE ;
	  END IF ;
  END IF; 
  
  RETURN V_RLT_VALUE;
  
  exception when others then
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1030M01_02 (
      I_CUD_GUBUN      IN VARCHAR2  /* C/U/D  */
    , I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_NOTI_ID        IN VARCHAR2
    , I_NOTI_NO        IN NUMBER
    , I_NOTI_GUBUN     IN VARCHAR2
    , I_NOTI_GRADE     IN VARCHAR2
    , I_NOTI_TITLE     IN VARCHAR2
    , I_NOTI_CONTENTS  IN CLOB
    , I_NOTI_SCOPE     IN VARCHAR2 /*전체 OR 개인 */
    , I_FRM_DATE       IN VARCHAR2
    , I_END_DATE       IN VARCHAR2
    , I_NOTI_AGENT     IN VARCHAR2 /* 공지범위가 개인일때 AGENT_ID LIST */
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_CM1030M01_02
   PURPOSE:    공지사항관리-등록수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/02  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1030M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

     V_NOTI_ID  VARCHAR2(12) := I_NOTI_ID;
     V_NOTI_NO NUMBER := I_NOTI_NO;
 BEGIN
 
-- ********************************************************************************
-- 0.등록/수정
-- ********************************************************************************    
  IF (I_CUD_GUBUN ='I') THEN
       -- KEY 생성
         SELECT LPAD(NVL(MAX(NOTI_ID),0)+1 ,10, '0') 
               ,NVL(MAX(NOTI_NO),0) + 1
            INTO V_NOTI_ID ,V_NOTI_NO
         FROM TB_CM_NOTICE_HEADER WHERE  TENANT_ID = I_TENANT_ID;
 END IF;
    
    MERGE INTO TB_CM_NOTICE_HEADER T
    USING (SELECT   V_NOTI_ID AS NOTI_ID
                  , I_TENANT_ID AS TENANT_ID
                  , V_NOTI_NO AS NOTI_NO
                  , I_NOTI_GUBUN AS NOTI_GUBUN
                  , I_NOTI_GRADE AS NOTI_GRADE
                  , I_NOTI_TITLE AS NOTI_TITLE
               --   , I_NOTI_CONTENTS AS NOTI_CONTENTS  /* LONG TYPE이 여서 별도 처리함 */
                  , I_NOTI_SCOPE AS NOTI_SCOPE
                  , I_FRM_DATE AS FRM_DATE
                  , I_END_DATE AS END_DATE
             FROM DUAL ) S
    ON (  T.TENANT_ID = S.TENANT_ID 
      AND T.NOTI_ID   = S.NOTI_ID)
    WHEN MATCHED THEN
      UPDATE SET    NOTI_GUBUN = S.NOTI_GUBUN
                  , NOTI_GRADE = S.NOTI_GRADE
                  , NOTI_TITLE = S.NOTI_TITLE
                  , NOTI_CONTENTS = I_NOTI_CONTENTS
                  , NOTI_SCOPE = S.NOTI_SCOPE
                  , FRM_DATE = S.FRM_DATE
                  , END_DATE = S.END_DATE
                  , MODIFY_AGENT_ID = I_LOGIN_ID
                  , MODIFY_DT = SYSTIMESTAMP
    WHEN NOT MATCHED THEN
      INSERT(   TENANT_ID
              , NOTI_ID
              , NOTI_NO
              , NOTI_GUBUN
              , NOTI_GRADE
              , NOTI_TITLE
              , NOTI_CONTENTS
              , NOTI_SCOPE
              , FRM_DATE
              , END_DATE
              , READ_CNT
              , CREATE_AGENT_ID
              , CREATE_DT
              , MODIFY_AGENT_ID
              , MODIFY_DT

      ) VALUES ( S. TENANT_ID
               , S. NOTI_ID
                , S. NOTI_NO
                , S. NOTI_GUBUN
                , S. NOTI_GRADE
                , S. NOTI_TITLE
                , I_NOTI_CONTENTS
                , S. NOTI_SCOPE
                , S. FRM_DATE
                , S. END_DATE
                , 0
                , I_LOGIN_ID
                , SYSTIMESTAMP
                , I_LOGIN_ID
                , SYSTIMESTAMP
      )  ;
      
    COMMIT; 
 
 -- ********************************************************************************
-- 1.대상등록 전 개인 일때 선택 외 데이터는 삭제
-- ******************************************************************************** 
IF (I_NOTI_SCOPE='개인') THEN 
   DELETE FROM TB_CM_NOTICE_TARGET T
      WHERE 1=1
     AND TENANT_ID = I_TENANT_ID
      AND NOTI_ID = V_NOTI_ID 
      AND NOT EXISTS ( SELECT SPLIT_VALUE 
       FROM TABLE(fn_cm_get_tb_split(I_NOTI_AGENT, ',')) S
        WHERE T.TARGET_MEMB = S.SPLIT_VALUE
       );
       
      COMMIT;
      
     -- ********************************************************************************
    -- 1.중복이 아닌건만 등록 / 기존 건은 조회여부 등 유지하기 위해
    -- ******************************************************************************** 
     MERGE INTO TB_CM_NOTICE_TARGET T
        USING (SELECT   V_NOTI_ID AS NOTI_ID
                      , I_TENANT_ID AS TENANT_ID
                      , SPLIT_VALUE AS TARGET_MEMB
                  FROM TABLE(fn_cm_get_tb_split(I_NOTI_AGENT, ',')) 
                   WHERE SPLIT_VALUE  IS NOT NULL ) S
        ON (  T.TENANT_ID = S.TENANT_ID 
          AND  T.NOTI_ID   = S.NOTI_ID
          AND T.TARGET_MEMB = S.TARGET_MEMB )
        WHEN NOT MATCHED THEN
          INSERT(   TENANT_ID
                  , NOTI_ID
                  , TARGET_MEMB
                  , READ_YN
          ) VALUES (  S. TENANT_ID
                    , S. NOTI_ID
                    , S. TARGET_MEMB
                    , 0 
           )  ;
          
        COMMIT;       
END IF;


-- ********************************************************************************
-- 9.처리 결과 리턴
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
 SELECT V_NOTI_ID   AS KEY_ID
  FROM DUAL ; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2020S01_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2  
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM2020S01_01
   PURPOSE:    권한부여/조회 > 권한변경이력 팝업 - 상담사정보 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/20  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
     SELECT  
          FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.AGENT_ID) AS AGENT_INFO
         ,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
         ,A.SABUN
         ,A.AGENT_ID
         ,A.AGENT_NM
         ,A.AGENT_JIKGUP
         ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM    
         ,A.AGENT_JIKCHK
         ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
         ,JAEJIK_GUBUN
         ,FN_CM_GET_CODE_NM(I_TENANT_ID,'JAEJIK_GUBUN', A.JAEJIK_GUBUN) AS JAEJIK_GUBUN_NM
         ,FN_CM_STRING_FORMAT(A.ENTER_YMD, '@@@@-@@-@@') AS ENTER_YMD
         ,A.GRANT_ID
         ,B.GRANT_NM
   FROM TB_CM_USER_MASTER A
   INNER JOIN TB_CM_GRANT_HEADER B ON  A.TENANT_ID = B.TENANT_ID AND A.GRANT_ID = B.GRANT_ID
   INNER JOIN TB_CM_DEPT_CD  C ON  A.TENANT_ID = C.TENANT_ID AND A.DEPT_CD = C.DEPT_CD AND NVL(C.HIDE_YN,0) = 0
   WHERE NVL(A.HIDE_YN,0) = 0 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.AGENT_ID  = I_AGENT_ID
     ;    
 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD01_07 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_AGENT_ID       IN     VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD01_07
   PURPOSE:    dashboard 관리자용 - 상담그룹별콜처리현황

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/18 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD01_07';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
     OPEN O_CUR_LIST FOR 
         -------------------------------------------------------------
         -- KEYTABLE : TM_KIND 조회
         -------------------------------------------------------------
		WITH TEMP_STD AS (
		  SELECT A.TENANT_ID
		   	    ,A.CODE
		   	    ,A.CODE_NM 
		   	    ,A.SORT
		   	    ,ROWNUM AS IDX
		   FROM TB_CM_CODE A
		  WHERE A.TENANT_ID = I_TENANT_ID
		    AND A.SORT_CD   = 'TM_KIND'
		)   
         -------------------------------------------------------------
         -- 상담사별 당일 응대건수 조회
         -------------------------------------------------------------		
		,TEMP_DATA AS (
		SELECT A.TENANT_ID
			  ,A.AGENT_ID
			  ,SUM(A.IB_ANSWER_CNT) AS IB_ANSWER_CNT
			  ,(SELECT S.TM_KIND S FROM TB_CM_USER_MASTER S WHERE A.TENANT_ID = S.TENANT_ID AND A.AGENT_ID = S.AGENT_ID) AS TM_KIND
		  FROM TB_KPI_COSTVALUE_HH A
		 WHERE A.TENANT_ID =  I_TENANT_ID
		   AND A.CALL_DATE =  TO_CHAR(SYSDATE,'YYYYMMDD')
		   GROUP BY A.TENANT_ID , A.AGENT_ID   
		)
		SELECT MAX(A.SORT) AS SORT
		      ,MAX(A.CODE_NM) AS TITLE
		      ,SUM(NVL(B.IB_ANSWER_CNT,0)) AS TOTAL_CNT
		      ,MAX(C.SPLIT_VALUE) AS COLOR
     FROM TEMP_STD A
	 LEFT OUTER JOIN  TEMP_DATA B ON (A.TENANT_ID = B.TENANT_ID AND A.CODE = B.TM_KIND)
	 /* COLUMN COLOR */
	 INNER JOIN TABLE(FN_CM_GET_TB_SPLIT('#67b7dc,
				 					#eed44a,
									#d593b9,
									#92c96c,
									#F8FF01,
									#B0DE09,
									#04D215,
									#0D8ECF,
									#0D52D1,
									#2A0CD0,
									#8A0CCF,
									#CD0D74,
									#754DEB,
									#DDDDDD,
									#999999,
									#333333,
									#000000,
									#57032A,
									#CA9726,
									#990000,
									#4B0C25' ,',')) C ON (A.IDX = C.IDX)
	 GROUP BY A.CODE
	 ORDER BY 1 ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD02_02 (
  I_TENANT_ID      IN VARCHAR2
 ,I_AGENT_ID       IN VARCHAR2
 ,I_STD_MONTH      IN VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD02_02
   PURPOSE:    dashboard 상담사용 - 성과실적

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/25 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 1. AGENT_ID / AGENT소속 DEPT/TMKIND 의 성과실적
-- ********************************************************************************   
     OPEN O_CUR_LIST FOR 
			WITH TEMP_AGENT AS (
         -------------------------------------------------------------
         -- 해당 기간의 AGENT 정보 조회
         -------------------------------------------------------------			
				SELECT  A.TENANT_ID
				       ,A.AGENT_NM
				       ,A.AGENT_ID
				       ,A.DEPT_CD
				       ,A.TM_KIND
				       ,A.STD_MONTH
				 FROM TB_CM_USER_MASTER_HISTORY A
				WHERE A.TENANT_ID = I_TENANT_ID
				  AND A.STD_MONTH = I_STD_MONTH 
				  AND A.AGENT_ID  = I_AGENT_ID        
			) , TEMP_DATA AS (
         -------------------------------------------------------------
         -- 근태 = 100 - 근태감점점수 
         -------------------------------------------------------------
			SELECT '근태' AS TITLE
			      ,100-NVL((SELECT SUM(S.FAIR_SCORE+  S.UNFAIR_SCORE)
			          FROM TB_KPI_CONDUCT_SCORE S
			         WHERE A.TENANT_ID = S.TENANT_ID 
					  AND A.STD_MONTH = S.STD_MONTH 
					  AND A.AGENT_ID  = S.AGENT_ID ) ,0) AS VALUE1 /* 본인 */
			      ,100-NVL((SELECT SUM(S.FAIR_SCORE+  S.UNFAIR_SCORE)
			          FROM TB_KPI_CONDUCT_SCORE S
			          INNER JOIN TB_CM_USER_MASTER_HISTORY T 
			          ON (S.TENANT_ID = T.TENANT_ID 
			           AND S.STD_MONTH = T.STD_MONTH 
			           AND S.AGENT_ID  = T.AGENT_ID )
			         WHERE A.TENANT_ID = S.TENANT_ID 
					  AND A.STD_MONTH = S.STD_MONTH 
					  AND A.DEPT_CD  = T.DEPT_CD ) ,0) AS VALUE2  /* 팀(DEPT) */		
			      ,100-NVL((SELECT SUM(S.FAIR_SCORE+  S.UNFAIR_SCORE)
			          FROM TB_KPI_CONDUCT_SCORE S
			          INNER JOIN TB_CM_USER_MASTER_HISTORY T 
			          ON (S.TENANT_ID = T.TENANT_ID 
			           AND S.STD_MONTH = T.STD_MONTH 
			           AND S.AGENT_ID  = T.AGENT_ID )
			         WHERE A.TENANT_ID = S.TENANT_ID 
					  AND A.STD_MONTH = S.STD_MONTH 
					  AND A.TM_KIND  = T.TM_KIND ) ,0) AS VALUE3 /* 업무그룹(TMKIND) */			    
			  FROM TEMP_AGENT A 
			  UNION ALL
         -------------------------------------------------------------
         -- 업무평가 = 시험점수(100점 환산)의 평균
         -------------------------------------------------------------			  
			 SELECT '업무평가' AS TITLE
			  ,ROUND((  SELECT AVG(S2.CONVERT_SCORE) AS AA
				    FROM TB_EDU_EXAM_SCHE S1
				    INNER JOIN TB_EDU_EXAM_RESULT_HEADER S2
				    ON(S1.TENANT_ID = S2.TENANT_ID AND S1.SCHE_ID = S2.SCHE_ID )
				   WHERE A.TENANT_ID = S2.TENANT_ID 
				     AND A.STD_MONTH = SUBSTR(S1.EVAL_YMD ,1,6)
					 AND A.AGENT_ID  = S2.AGENT_ID
			    ),0) AS VALUE1
			  ,ROUND((  SELECT AVG(S2.CONVERT_SCORE) AS AA
				    FROM TB_EDU_EXAM_SCHE S1
				    INNER JOIN TB_EDU_EXAM_RESULT_HEADER S2 ON(S1.TENANT_ID = S2.TENANT_ID AND S1.SCHE_ID = S2.SCHE_ID )	    
				    INNER JOIN TB_CM_USER_MASTER_HISTORY T 
			          ON  (S2.TENANT_ID = T.TENANT_ID 
			           AND SUBSTR(S1.EVAL_YMD ,1,6)  = T.STD_MONTH 
			           AND S2.AGENT_ID  = T.AGENT_ID )
				   WHERE  A.TENANT_ID = S2.TENANT_ID 
				     AND A.STD_MONTH = SUBSTR(S1.EVAL_YMD ,1,6)
					 AND A.DEPT_CD  = T.DEPT_CD
			    ),0) AS VALUE2    
			  ,ROUND((  SELECT AVG(S2.CONVERT_SCORE) AS AA
				    FROM TB_EDU_EXAM_SCHE S1
				    INNER JOIN TB_EDU_EXAM_RESULT_HEADER S2 ON(S1.TENANT_ID = S2.TENANT_ID AND S1.SCHE_ID = S2.SCHE_ID )	    
				    INNER JOIN TB_CM_USER_MASTER_HISTORY T 
			          ON  (S2.TENANT_ID = T.TENANT_ID 
			           AND SUBSTR(S1.EVAL_YMD ,1,6)  = T.STD_MONTH 
			           AND S2.AGENT_ID  = T.AGENT_ID )
				   WHERE  A.TENANT_ID = S2.TENANT_ID 
				     AND A.STD_MONTH = SUBSTR(S1.EVAL_YMD ,1,6)
					 AND A.TM_KIND  = T.TM_KIND 
			    ),0) AS VALUE3       
			  FROM TEMP_AGENT A  
			  UNION ALL
         -------------------------------------------------------------
         -- QA = 종합평가결과 (100점 환산점수)의 평균
         -------------------------------------------------------------			  
			  SELECT 'QA' AS TITLE
			  ,ROUND((  SELECT AVG(S.CONVERT_SCORE) AS AA
				         FROM TB_QA_VALUE_RESULT_HEADER S
					   WHERE A.TENANT_ID = S.TENANT_ID 
					     AND A.STD_MONTH = SUBSTR(S.VALUE_YMD ,1,6)
						 AND A.AGENT_ID  = S.AGENT_ID
			    ),0) AS VALUE1
			  ,ROUND((  SELECT AVG(S.CONVERT_SCORE) AS AA
				    FROM TB_QA_VALUE_RESULT_HEADER S
				    INNER JOIN TB_CM_USER_MASTER_HISTORY T 
			          ON  (S.TENANT_ID = T.TENANT_ID 
			           AND SUBSTR(S.VALUE_YMD ,1,6)  = T.STD_MONTH 
			           AND S.AGENT_ID  = T.AGENT_ID )
				   WHERE A.TENANT_ID = S.TENANT_ID 
				     AND A.STD_MONTH = SUBSTR(S.VALUE_YMD ,1,6)
					 AND A.DEPT_CD  = T.DEPT_CD
			    ),0) AS VALUE2    
			  ,ROUND((  SELECT AVG(S.CONVERT_SCORE) AS AA
				    FROM TB_QA_VALUE_RESULT_HEADER S
				    INNER JOIN TB_CM_USER_MASTER_HISTORY T 
			          ON  (S.TENANT_ID = T.TENANT_ID 
			           AND SUBSTR(S.VALUE_YMD ,1,6)  = T.STD_MONTH 
			           AND S.AGENT_ID  = T.AGENT_ID )
				   WHERE A.TENANT_ID = S.TENANT_ID 
				     AND A.STD_MONTH = SUBSTR(S.VALUE_YMD ,1,6)
					 AND A.TM_KIND  = T.TM_KIND 
			    ),0) AS VALUE3       
			  FROM TEMP_AGENT A  
			  /*
			  UNION ALL
			  SELECT 'AHT' AS TITLE
			       ,50 AS VALUE1
			       ,75 AS VALUE2
			       ,65 AS VALUE3
			   FROM DUAL
			   UNION ALL
			  SELECT '생산성' AS TITLE
			       ,70 AS VALUE1
			       ,80 AS VALUE2
			       ,60 AS VALUE3
			   FROM DUAL   
			   */   
			) 
			SELECT A.TITLE
			     ,NVL(VALUE1,0) AS VALUE1
			     ,NVL(VALUE2,0) AS VALUE2
			     ,NVL(VALUE3,0) AS VALUE3 			
			 FROM (
					SELECT SPLIT_VALUE AS TITLE
				    FROM  TABLE(FN_CM_GET_TB_SPLIT('근태,업무평가,QA,AHT,생산성', ','))   
					WHERE SPLIT_VALUE  IS NOT NULL
			  ) A LEFT OUTER JOIN TEMP_DATA B ON (A.TITLE = B.TITLE) ;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_DASHBOARD02_04 (
  I_TENANT_ID      IN VARCHAR2
 ,I_AGENT_ID       IN VARCHAR2
 ,I_STD_MONTH      IN VARCHAR2
 ,O_CUR_LIST       OUT    SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_DASHBOARD02_04
   PURPOSE:    dashboard 상담사용 - 개인스케쥴 - 상담사근무유형

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/25 YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_DASHBOARD02_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 1. AGENT의 근무유형 조회
-- ********************************************************************************   
     OPEN O_CUR_LIST FOR 
	  SELECT FN_CM_GET_AGENT_WORKTYPE_INFO(I_TENANT_ID,I_AGENT_ID, I_STD_MONTH) AS WORKTYPE_INFO
	  FROM DUAL ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

create or replace PROCEDURE "SP_EDU1030M01_04" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SCHE_ID	      IN VARCHAR2
    ,I_SCHE_STATUS    IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU1030M01_04
   PURPOSE:    평가계획관리-진행상태 변경

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1030M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
   V_STR_DATE DATE ;
   V_END_DATE DATE ;

 BEGIN
 
-- ********************************************************************************
-- 0.평가계획관리 - 진행상태 수정
-- ******************************************************************************** 
  UPDATE TB_EDU_EXAM_SCHE 
    SET SCHE_STATUS     = I_SCHE_STATUS
       ,MODIFY_AGENT_ID = I_LOGIN_ID
       ,MODIFY_DT  		= SYSTIMESTAMP
  WHERE TENANT_ID = I_TENANT_ID
    AND SCHE_ID   = I_SCHE_ID  ;
  COMMIT;

-- ********************************************************************************
-- 1.[시작알림] 진행상태 처리를 위한 JOB 생성
-- ******************************************************************************** 
IF I_SCHE_STATUS = '20' THEN
		SELECT
		CASE WHEN SYSDATE > TO_DATE(EVAL_YMD||STR_TM||'00', 'YYYYMMDDHH24MISS') THEN SYSDATE ELSE  TO_DATE(EVAL_YMD||STR_TM, 'YYYYMMDDHH24MI') END 
		AS STR_DATE  /* 시작시간 이후 시작알림 처리 시 현재일시로  */
		, TO_DATE(EVAL_YMD||END_TM||'00', 'YYYYMMDDHH24MISS') AS END_DATE
		INTO V_STR_DATE, V_END_DATE
		FROM TB_EDU_EXAM_SCHE
		WHERE TENANT_ID = I_TENANT_ID
		 AND SCHE_ID   = I_SCHE_ID  ;

		-- ********************************************************************************
		-- 1.1  JOB 생성
		-- ******************************************************************************** 
		SP_UC_SET_JOB(I_TENANT_ID,'EDU1030M01_S',I_SCHE_ID,'I',V_STR_DATE ) ; --[진행중]상태로 처리
		SP_UC_SET_JOB(I_TENANT_ID,'EDU1030M01_E',I_SCHE_ID,'I',V_END_DATE ) ; --[완료]상태로 처리

-- ********************************************************************************
-- 2.[시작취소] 기존 생성 JOB 취소 처리
-- ******************************************************************************** 
ELSIF I_SCHE_STATUS = '10' THEN
	 SP_UC_SET_JOB(I_TENANT_ID,'EDU1030M01_S',I_SCHE_ID,'D',NULL ) ; --[진행중]상태로 처리 취소
	 SP_UC_SET_JOB(I_TENANT_ID,'EDU1030M01_E',I_SCHE_ID,'D',NULL ) ; --[완료]상태로 처리 취소

END IF;	  

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE SP_EDU1030S02_03 (
   I_TENANT_ID    IN VARCHAR2
 , I_LOGIN_ID     IN VARCHAR2  /* 로그인사용자ID */
 , I_SCHE_ID      IN VARCHAR2
 , I_AGENT_ID 	  IN VARCHAR2  /* 등록대상 AGENT_ID 리스트 */
 , O_CUR_LIST      OUT SYS_REFCURSOR      /* 중복여부 체크를 위해 */ 
) AS 
/******************************************************************************
   NAME:       SP_EDU1030S02_03
   PURPOSE:    평가계획관리 - 평가대상자관리 - 대상자등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
    1.1       2017/05/16  YAKIM            중복체크 및 일괄등록 방식으로 수정함
    
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1030S02_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 	 V_RESULT_CD        VARCHAR2(40)  :='SUCCESS'; /* 중복일 경우 구분하기 위해 */
	 V_RESULT_MSG       VARCHAR2(200) :='';
	 V_DUP_CNT          NUMBER(3)     :=0 ;
	 
    V_EVAL_YMD VARCHAR2(8) :='';
    V_STR_TM   VARCHAR2(6) :='';
    V_END_TM   VARCHAR2(6) :='';	 
	 
 BEGIN
 
 IF I_AGENT_ID IS NOT NULL THEN /* 등록대상자가 있을 경우 중복체크 */
 
	-- ********************************************************************************
	-- 0.중복대상자  체크하기 위해 현 평가계획의 평가일자, 시간 조회
	-- ******************************************************************************** 
	    SELECT A.EVAL_YMD, A.STR_TM, A.END_TM
	      INTO V_EVAL_YMD, V_STR_TM, V_END_TM
	      FROM TB_EDU_EXAM_SCHE A
	     WHERE A.TENANT_ID = I_TENANT_ID
	       AND A.SCHE_ID   = I_SCHE_ID ; 
	 
	-- ********************************************************************************
	-- 1.중복체크
	-- ********************************************************************************  
	 SELECT COUNT(DISTINCT B.AGENT_ID) INTO V_DUP_CNT
	     FROM TB_EDU_EXAM_SCHE A
	    	INNER JOIN TB_EDU_EXAM_TARGET B ON A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID
	    	INNER JOIN ( SELECT SPLIT_VALUE AS AGENT_ID
						   FROM  TABLE(FN_CM_GET_TB_SPLIT(I_AGENT_ID, ','))   
		 				  WHERE SPLIT_VALUE  IS NOT NULL ) C ON (B.AGENT_ID = C.AGENT_ID)
	    WHERE 1=1 
	      AND B.TENANT_ID  = I_TENANT_ID
	      AND B.SCHE_ID   != I_SCHE_ID /* 현재 평가계획은 제외하고 비교*/
	       AND ( A.EVAL_YMD = V_EVAL_YMD
		   AND (   ( V_STR_TM  >=A.STR_TM AND V_STR_TM < A.END_TM )
		         OR( V_END_TM > A.STR_TM  AND V_END_TM <=A.END_TM ) 
		         OR( V_STR_TM <= A.STR_TM AND V_END_TM >=A.END_TM ) 
		        )
		        ) ;

END IF;
	        
 IF V_DUP_CNT > 0 THEN
    V_RESULT_CD := 'FAIL' ;
    V_RESULT_MSG:= '중복대상자가 존재합니다.(' ||V_DUP_CNT ||'건)' ;
    
 ELSE /* 중복건이 없으면 처리 */	        

	-- ********************************************************************************
	-- 3. 삭제
	-- ********************************************************************************    
	 DELETE FROM TB_EDU_EXAM_TARGET  WHERE TENANT_ID = I_TENANT_ID  AND SCHE_ID   = I_SCHE_ID ;
	 COMMIT;
 
	-- ********************************************************************************
	-- 5. 등록
	-- ********************************************************************************    
	 INSERT INTO TB_EDU_EXAM_TARGET (
				   TENANT_ID
	              ,SCHE_ID
	              ,AGENT_ID
	              ,EXAM_STATUS
	              ,EXAM_TAKE_DT
	              ,EXAM_STR_DT
	              ,CREATE_AGENT_ID
	              ,CREATE_DT
	              ,MODIFY_AGENT_ID
	              ,MODIFY_DT
	       ) 
	       SELECT I_TENANT_ID   AS I_TENANT_ID
	              ,I_SCHE_ID    AS SCHE_ID
	              ,A.AGENT_ID
	              ,'10'         AS EXAM_STATUS
	              ,NULL         AS EXAM_TAKE_DT
	              ,NULL         AS EXAM_STR_DT
	              ,I_LOGIN_ID   AS CREATE_AGENT_ID
	              ,SYSTIMESTAMP AS CREATE_DT
	              ,I_LOGIN_ID   AS MODIFY_AGENT_ID
	              ,SYSTIMESTAMP AS MODIFY_DT
     FROM ( SELECT SPLIT_VALUE  AS AGENT_ID
			 FROM  TABLE(FN_CM_GET_TB_SPLIT(I_AGENT_ID, ','))   
			 WHERE SPLIT_VALUE  IS NOT NULL 
	   ) A	   ;
	 
	 COMMIT; 

END IF;

-- ********************************************************************************
-- X.처리결과 리턴
-- ******************************************************************************** 	 
    OPEN O_CUR_LIST FOR 
    SELECT V_RESULT_CD   AS RESULT_CD
         , V_RESULT_MSG  AS RESULT_MSG
     FROM DUAL ; 	
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2010M01_01" (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_ID	   IN VARCHAR2  /* 로그인사용자 ID */   
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU2010M01_01
   PURPOSE:    업무평가응시 - 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/14  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
    V_SCHE_ID  VARCHAR2(10) :='' ;
    V_SHEET_ID VARCHAR2(10) :='' ;
    V_SHEETKEY VARCHAR2(14) :='';
 
 BEGIN
 
-- ********************************************************************************
-- 0.응시대상 평가계획조회
-- ******************************************************************************** 
	BEGIN
	SELECT A.SCHE_ID, A.SHEET_ID INTO V_SCHE_ID ,V_SHEET_ID
	  FROM TB_EDU_EXAM_SCHE A
	INNER JOIN TB_EDU_EXAM_TARGET B   ON ( A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID )
    WHERE A.TENANT_ID = I_TENANT_ID
      AND A.EVAL_YMD  = TO_CHAR(SYSDATE,'YYYYMMDD')
      AND A.END_TM    > TO_CHAR(SYSDATE, 'HH24MI') /* 종료시간 전 */
      AND A.SCHE_STATUS IN ('20' ,'30') /* 시작알림/진행중 인 건만  */
      AND B.AGENT_ID  = I_LOGIN_ID 
      AND B.EXAM_STATUS != '40' /* 완료가 아닌건  */
      AND ROWNUM = 1 ;
	
	EXCEPTION
	    WHEN NO_DATA_FOUND THEN
	        V_SCHE_ID := NULL;
	END;
-- ********************************************************************************
-- 1.평가계획조회
-- ********************************************************************************   
     /* 평가대상계획이 없을 경우 */
     IF V_SCHE_ID IS NULL THEN 
	       OPEN O_CUR_LIST FOR 
	        SELECT 
	        	I_TENANT_ID AS TENANT_ID
	    		,'NODATA' AS SCHE_ID
	            ,'' AS SCHE_NM
	            ,0 AS KPI_YN
	            ,'' AS EDU_EVAL_TYPE
	            ,'' AS EDU_EVAL_TYPE_NM
	            ,'' AS EDU_EXAM_TYPE
	            ,'' AS EDU_EXAM_TYPE_NM
	            ,'' AS SCHE_STATUS
	            ,'' AS SCHE_STATUS_NM   
	            ,'' AS EVAL_YMD
	            ,'' AS STR_TM
	            ,'' AS  END_TM
	            ,'' AS  STD_MONTH
	            ,'' AS EXAM_PERIOD
	            ,'' AS REMAINING_TIME
	            ,'' AS PASS_SCORE
	            ,'' AS INFO_TEXT   
	            ,0  AS RANDOM_YN             
		        ,'' AS SHEET_ID
		        ,'' AS SHEET_NM 
		        ,'' AS  AGENT_INFO
		        ,'' AS DEPT_INFO
		        ,'' AS SHEETKEY
	         FROM DUAL ;
     ELSE 
-- ********************************************************************************
-- 1.1평가응시여부 확인 및 SHEETKEY 생성
-- ********************************************************************************  
		BEGIN
		     SELECT SHEETKEY INTO V_SHEETKEY
		       FROM TB_EDU_EXAM_RESULT_HEADER A
		       WHERE A.TENANT_ID = I_TENANT_ID
				 AND A.SCHE_ID   = V_SCHE_ID
				 AND A.SHEET_ID  = V_SHEET_ID  
				 AND A.AGENT_ID  = I_LOGIN_ID  ;
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
		        V_SHEETKEY := NULL;
		END;		 
		 IF V_SHEETKEY IS NULL THEN  /* SHEETKEY 생성 => 평가계획ID + 일련번호 */
			 SELECT V_SCHE_ID || LPAD(SUBSTR(NVL(MAX(SHEETKEY),'0000'),-4)+1 ,4, '0')    
			   INTO V_SHEETKEY
		      FROM TB_EDU_EXAM_RESULT_HEADER 
		     WHERE TENANT_ID = I_TENANT_ID 
		       AND SCHE_ID   = V_SCHE_ID 
		       AND SHEET_ID  = V_SHEET_ID ;	 
		       
			 INSERT INTO TB_EDU_EXAM_RESULT_HEADER (
					  TENANT_ID, SHEETKEY,SCHE_ID, SHEET_ID, AGENT_ID
					 ,TOTAL_SCORE, CONVERT_SCORE, TYPE_SCORE1,TYPE_SCORE2,TYPE_SCORE3,TYPE_SCORE4,TYPE_SCORE5,TYPE_SCORE6
					 ,SUBMIT_YN,  SUBMIT_DT )
			 VALUES( I_TENANT_ID ,V_SHEETKEY,V_SCHE_ID,V_SHEET_ID ,I_LOGIN_ID
			 		,0,0,0,0,0,0,0,0
					,0,NULL ) ;
			 COMMIT;	
			 
-- ********************************************************************************
-- 1.2 응시상태로 수정
-- ******************************************************************************** 			 	
	     SP_EDU2010M01_04(I_TENANT_ID, V_SCHE_ID, I_LOGIN_ID, '20', I_LOGIN_ID) ;
	      
	 END IF;	
		 
-- ********************************************************************************
-- 1.3 업무평가 응시 조회
-- ********************************************************************************	 
	    OPEN O_CUR_LIST FOR 
	    SELECT   A.TENANT_ID
	    		,A.SCHE_ID
	            ,A.SCHE_NM
	            ,NVL(A.KPI_YN,0) AS KPI_YN
	            ,A.EDU_EVAL_TYPE
	            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EVAL_TYPE',A.EDU_EVAL_TYPE) AS EDU_EVAL_TYPE_NM
	            ,A.EDU_EXAM_TYPE
	            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'EDU_EXAM_TYPE',A.EDU_EXAM_TYPE) AS EDU_EXAM_TYPE_NM
	            ,A.SCHE_STATUS
	            ,FN_CM_GET_CODE_NM(A.TENANT_ID, 'SCHE_STATUS',A.SCHE_STATUS) AS SCHE_STATUS_NM   
	            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@-@@') AS EVAL_YMD
	            ,FN_CM_STRING_FORMAT(A.STR_TM,'@@:@@') AS STR_TM
	            ,FN_CM_STRING_FORMAT(A.END_TM,'@@:@@') AS END_TM
	            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@') AS STD_MONTH
	            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@-@@-@@')
	             ||' '||FN_CM_STRING_FORMAT(SUBSTR(A.STR_TM,1,4),'@@:@@')
	             ||' ('||FLOOR(FN_CM_GET_TIME_DIFF_TO_SECOND(A.STR_TM,A.END_TM)/60)||'분)' 
	             AS EXAM_PERIOD
--	            ,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@/@@/@@') || ' ' || FN_CM_STRING_FORMAT(A.END_TM, '@@:@@')||':00' AS END_DATE_TIME /* -포맷이면 IE date.parse에서 오류남*/
--				,FN_CM_STRING_FORMAT(A.EVAL_YMD, '@@@@/@@/@@') || ' ' || FN_CM_GET_TIME_DIFF_TO_FORMAT(TO_CHAR(SYSDATE,'HH24MISS') , A.END_TM) AS REMAINING_TIME /* -포맷이면 IE date.parse에서 오류남*/
				,FN_CM_GET_TIME_DIFF_TO_SECOND(TO_CHAR(SYSDATE,'HH24MISS') , A.STR_TM) AS REMAINING_TIME
	            ,A.PASS_SCORE
	            ,A.INFO_TEXT   
	            ,NVL(A.RANDOM_YN,0)  AS RANDOM_YN             
		        ,B.SHEET_ID
		        ,B.SHEET_NM 
		        ,FN_CM_GET_AGENT_INFO(C.TENANT_ID, C.AGENT_ID) AS AGENT_INFO
		        ,FN_CM_GET_DEPT_INFO(D.TENANT_ID, D.DEPT_CD) AS DEPT_INFO
		        ,C.SHEETKEY
	     FROM TB_EDU_EXAM_SCHE A
		     INNER JOIN TB_EDU_SHEET_HEADER B ON ( A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID )
		     INNER JOIN TB_EDU_EXAM_RESULT_HEADER C ON (A.TENANT_ID = C.TENANT_ID AND C.SHEETKEY  = V_SHEETKEY )
--		     INNER JOIN TB_EDU_EXAM_TARGET C  ON ( A.TENANT_ID = C.TENANT_ID AND A.SCHE_ID  = C.SCHE_ID  )
		     INNER JOIN TB_CM_USER_MASTER D   ON ( C.TENANT_ID = D.TENANT_ID AND C.AGENT_ID = D.AGENT_ID )		    
	    WHERE A.TENANT_ID = I_TENANT_ID
	      AND A.SCHE_ID   = V_SCHE_ID
	      AND A.SHEET_ID  = V_SHEET_ID ;	      
     
     END IF;
            

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2010M01_03" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID	      IN VARCHAR2  /* 로그인사용자 ID */	 
    ,I_SHEETKEY       IN VARCHAR2
    ,I_SHEET_ID       IN VARCHAR2
    ,I_QUESTION_ID    IN VARCHAR2    
    ,O_CUR_LIST       OUT    SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_EDU2010M01_03
   PURPOSE:    업무평가응시 - 답항조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/14  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ******************************************************************************** 
OPEN O_CUR_LIST FOR 
         --// AGENT가 작성한 답 데이터 조회 
          WITH TEMP_ANSWER AS (
          SELECT SPLIT_VALUE 
            FROM TABLE(fn_cm_get_tb_split(
                        (SELECT A.ANSWER_VALUE  /* e.g ) '1==1^2==0^3==0^4==0^5==1  OR 1==정답입니다 */
                          FROM TB_EDU_EXAM_RESULT_DETAIL A
                          WHERE A.TENANT_ID    = I_TENANT_ID 
                            AND A.SHEETKEY     = I_SHEETKEY
                            AND A.QUESTION_ID  = I_QUESTION_ID 
                         )  
                        , '^'))
          ) , TEMP_ANSWER2 AS (
           SELECT TRIM(REGEXP_SUBSTR(SPLIT_VALUE, '[^==]+', 1, 1)) AS ANSWER_ID
                 ,TRIM(REGEXP_SUBSTR(SPLIT_VALUE, '[^==]+', 1, 2)) AS ANSWER_VALUE 
          FROM TEMP_ANSWER
          ) 
             SELECT    A.SHEET_ID
                      ,A.QUESTION_ID
                      ,A.ANSWER_ID
                      ,A.ANSWER
                      ,A.CORRECT_YN
                      ,NVL(B.ANSWER_VALUE,'') AS ANSWER_YN
               FROM TB_EDU_SHEET_ANSWER A 
               LEFT OUTER JOIN TEMP_ANSWER2 B ON ( A.ANSWER_ID = B.ANSWER_ID )
               WHERE A.TENANT_ID = I_TENANT_ID
                 AND A.SHEET_ID  = I_SHEET_ID
                 AND A.QUESTION_ID   = I_QUESTION_ID
              ORDER BY A.QUESTION_ID, A.ANSWER_ID
              ;
    

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2010M01_05" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEETKEY       IN VARCHAR2    
    ,I_SCHE_ID	      IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR    
) AS 
/******************************************************************************
   NAME:       SP_EDU2010M01_05
   PURPOSE:    업무평가응시-평가시작

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/15  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2010M01_05';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
     
 BEGIN

-- ********************************************************************************
-- 0 진행 상태로 수정
-- ******************************************************************************** 			 	
	SP_EDU2010M01_04(I_TENANT_ID, I_SCHE_ID, I_LOGIN_ID, '30', I_LOGIN_ID) ;

 
-- ********************************************************************************
-- 1.업무평가 종료시간 조회
-- ********************************************************************************	 
    OPEN O_CUR_LIST FOR 
    SELECT  FN_CM_GET_TIME_DIFF_TO_SECOND(TO_CHAR(SYSDATE,'HH24MISS') , A.END_TM) AS REMAINING_TIME
     FROM TB_EDU_EXAM_SCHE A
    WHERE A.TENANT_ID = I_TENANT_ID
      AND A.SCHE_ID   = I_SCHE_ID
      ;	   

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2010M01_07" (
   I_TENANT_ID     IN VARCHAR2
  ,I_LOGIN_ID	   IN VARCHAR2  /* 로그인사용자 ID */   
  ,I_SCHE_ID 	   IN VARCHAR2
  ,I_SHEETKEY      IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU2010M01_07
   PURPOSE:    업무평가응시 - 답안제출

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/16  YAKIM
    1.1       2017/05/17  YAKIM            선다형(다답OR) 일때 하나라도 맞추면 정답처리
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2010M01_07';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    V_WRONG_CNT NUMBER := 0;
    V_TOTAL_SCORE NUMBER :=0 ;
    
 BEGIN
 
-- ********************************************************************************
-- 0.답안제출 >> 채점처리와 함께 하자
-- ******************************************************************************** 
/*	UPDATE TB_EDU_EXAM_RESULT_HEADER 
	   SET SUBMIT_YN = 1
	      ,SUBMIT_DT = SYSDATE
	 WHERE TENANT_ID = I_TENANT_ID
	   AND SHEETKEY  = I_SHEETKEY    ;
	   
	 COMMIT;	
*/			 
-- ********************************************************************************
-- 1 완료 상태로 수정
-- ******************************************************************************** 			 	
	SP_EDU2010M01_04(I_TENANT_ID, I_SCHE_ID, I_LOGIN_ID, '40', I_LOGIN_ID) ;

-- ********************************************************************************
-- 2. 자동채점 여부인 건 대상 채점처리
-- ********************************************************************************	 
	FOR CUR_LIST IN (
		SELECT
			A.TENANT_ID
			,A.SHEET_ID
			,A.SHEETKEY
			,B.QUESTION_ID
			,C.QUESTION_TYPE
			,C.SCORE
			,C.AUTO_MARKING_YN 
			,B.ANSWER_VALUE
		FROM TB_EDU_EXAM_RESULT_HEADER A
		INNER JOIN TB_EDU_EXAM_RESULT_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEETKEY = B.SHEETKEY )
		INNER JOIN TB_EDU_SHEET_DETAIL C ON (A.TENANT_ID = C.TENANT_ID AND A.SHEET_ID = C.SHEET_ID AND B.QUESTION_ID = C.QUESTION_ID)
		WHERE A.TENANT_ID = I_TENANT_ID
		AND A.SHEETKEY  = I_SHEETKEY
		AND C.AUTO_MARKING_YN = 1  /* 자동채점여부 */
	)
	LOOP
-- ********************************************************************************
-- 2.1 답항별 채점
-- ********************************************************************************  
	SELECT SUM(A.WRONG_CNT) INTO V_WRONG_CNT
	FROM (
		SELECT 
			--A.ANSWER_ID, A.ANSWER, A.CORRECT_YN, B.ANSWER_VALUE
			-- 주관/서술일 경우 답항과 비교 그 외는 CORRECT_YN 와 비교
			CASE
				WHEN CUR_LIST.QUESTION_TYPE ='50' OR CUR_LIST.QUESTION_TYPE ='60' 
					THEN (CASE WHEN A.ANSWER = ANSWER_VALUE THEN 0 ELSE 1 END)
				WHEN CUR_LIST.QUESTION_TYPE ='40' /* 선다형(다답OR) 이면 하나라도 맞추면 정답처리 */
					THEN (CASE WHEN A.CORRECT_YN = 1 AND A.CORRECT_YN = TO_NUMBER(ANSWER_VALUE) THEN 1 ELSE 0 END)			      
				ELSE (CASE WHEN A.CORRECT_YN = TO_NUMBER(ANSWER_VALUE) THEN 0 ELSE 1 END)
			END AS WRONG_CNT
		FROM TB_EDU_SHEET_ANSWER A
		INNER JOIN (
			SELECT
				IDX, SPLIT_VALUE, 
				TRIM(REGEXP_SUBSTR(SPLIT_VALUE, '[^==]+', 1, 1)) AS ANSWER_ID,
				TRIM(REGEXP_SUBSTR(SPLIT_VALUE, '[^==]+', 1, 2)) AS ANSWER_VALUE
			FROM TABLE(fn_cm_get_tb_split(CUR_LIST.ANSWER_VALUE , '^'))
		) B ON ( A.ANSWER_ID = B.ANSWER_ID)
		WHERE A.TENANT_ID   = CUR_LIST.TENANT_ID
		AND A.SHEET_ID    = CUR_LIST.SHEET_ID 
		AND A.QUESTION_ID = CUR_LIST.QUESTION_ID
	) A
	;
	
	
/*
QUESTION_TYPE(문제유형)
10	진위형
20	선다형(정답)
30	선다형(다답AND)
40	선다형(다답OR)
50	주관형
60	서술형
*/
	IF ((CUR_LIST.QUESTION_TYPE ='40' AND V_WRONG_CNT > 0 ) OR (CUR_LIST.QUESTION_TYPE !='40' AND V_WRONG_CNT = 0)) THEN -- 정답이면
		UPDATE TB_EDU_EXAM_RESULT_DETAIL A
		   SET SCORE      = CUR_LIST.SCORE
			,RESULT_SCORE = CUR_LIST.SCORE
			,WORK_MEMB    = I_LOGIN_ID
			,WORK_DATE    = SYSDATE
		WHERE A.TENANT_ID = CUR_LIST.TENANT_ID
		AND A.SHEETKEY    = CUR_LIST.SHEETKEY 
		AND A.QUESTION_ID = CUR_LIST.QUESTION_ID ;
	COMMIT;
		  
	END IF;
	  
  END LOOP;

-- ********************************************************************************
-- 2.2 총점 처리 / 답안제출
-- ********************************************************************************  
	MERGE INTO TB_EDU_EXAM_RESULT_HEADER T
	USING (
		SELECT
			A.TENANT_ID, A.SHEETKEY 
			,SUM(B.SCORE) AS TOTAL_SCORE
			,SUM(CASE C.QUESTION_TYPE WHEN '10' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE1
			,SUM(CASE C.QUESTION_TYPE WHEN '20' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE2
			,SUM(CASE C.QUESTION_TYPE WHEN '30' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE3
			,SUM(CASE C.QUESTION_TYPE WHEN '40' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE4
			,SUM(CASE C.QUESTION_TYPE WHEN '50' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE5
			,SUM(CASE C.QUESTION_TYPE WHEN '60' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE6    
			,MAX((SELECT SUM(S.SCORE) 
					FROM TB_EDU_SHEET_DETAIL S
					WHERE S.TENANT_ID = A.TENANT_ID
					AND S.SHEET_ID  = A.SHEET_ID
					GROUP BY S.TENANT_ID, S.SHEET_ID)) AS SUM_SCORE    /* 시험지총점- 100점 환산하기 위해 */					                                            
		FROM TB_EDU_EXAM_RESULT_HEADER A
		INNER JOIN TB_EDU_EXAM_RESULT_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEETKEY = B.SHEETKEY )
		INNER JOIN TB_EDU_SHEET_DETAIL C ON (A.TENANT_ID = C.TENANT_ID AND A.SHEET_ID = C.SHEET_ID AND B.QUESTION_ID = C.QUESTION_ID)
		WHERE A.TENANT_ID = I_TENANT_ID
		  AND A.SHEETKEY  = I_SHEETKEY
		GROUP BY A.TENANT_ID, A.SHEETKEY 	  
	 ) S ON (T.TENANT_ID = S.TENANT_ID AND T.SHEETKEY = S.SHEETKEY )
	WHEN MATCHED THEN
	UPDATE SET
		SUBMIT_YN    = 1
		,SUBMIT_DT   = SYSDATE
		,TOTAL_SCORE = S.TOTAL_SCORE
		,CONVERT_SCORE = ROUND((S.TOTAL_SCORE*100)/S.SUM_SCORE,2) /* 100점 환산점수 계산 */
		,TYPE_SCORE1 = S.TYPE_SCORE1
		,TYPE_SCORE2 = S.TYPE_SCORE2
		,TYPE_SCORE3 = S.TYPE_SCORE3
		,TYPE_SCORE4 = S.TYPE_SCORE4
		,TYPE_SCORE5 = S.TYPE_SCORE5
		,TYPE_SCORE6 = S.TYPE_SCORE6  ;
	COMMIT;
     
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
         RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2020M01_03" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SCHE_ID	      IN VARCHAR2
    ,I_SCHE_STATUS    IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU2020M01_03
   PURPOSE:    평가진행관리-진행상태 변경 (시작/시작취소)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/04  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2020M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
   V_STR_DATE DATE ;
   V_END_DATE DATE ;

 BEGIN
 
-- ********************************************************************************
-- 0.평가계획관리 - 진행상태 수정
-- ******************************************************************************** 
	  UPDATE TB_EDU_EXAM_SCHE 
	    SET SCHE_STATUS     = I_SCHE_STATUS
	       ,MODIFY_AGENT_ID = I_LOGIN_ID
	       ,MODIFY_DT  		= SYSTIMESTAMP
	  WHERE TENANT_ID = I_TENANT_ID
	    AND SCHE_ID   = I_SCHE_ID  ;
	  COMMIT;

-- ********************************************************************************
-- 1.[시작알림] 진행상태 처리를 위한 JOB 생성
-- ******************************************************************************** 
	IF I_SCHE_STATUS = '20' THEN
			SELECT
			CASE WHEN SYSDATE > TO_DATE(EVAL_YMD||STR_TM||'00', 'YYYYMMDDHH24MISS') THEN SYSDATE ELSE  TO_DATE(EVAL_YMD||STR_TM, 'YYYYMMDDHH24MI') END 
			AS STR_DATE  /* 시작시간 이후 시작알림 처리 시 현재일시로  */
			, TO_DATE(EVAL_YMD||END_TM||'00', 'YYYYMMDDHH24MISS') AS END_DATE
			INTO V_STR_DATE, V_END_DATE
			FROM TB_EDU_EXAM_SCHE
			WHERE TENANT_ID = I_TENANT_ID
			 AND SCHE_ID   = I_SCHE_ID  ;
	
			-- ********************************************************************************
			-- 1.1  JOB 생성
			-- ******************************************************************************** 
			SP_UC_SET_JOB(I_TENANT_ID,'EDU2020M01_S',I_SCHE_ID,'I',V_STR_DATE ) ; --[진행중]상태로 처리
			SP_UC_SET_JOB(I_TENANT_ID,'EDU2020M01_E',I_SCHE_ID,'I',V_END_DATE ) ; --[완료]상태로 처리
	
	-- ********************************************************************************
	-- 2.[시작취소] 기존 생성 JOB 취소 처리
	-- ******************************************************************************** 
	ELSIF I_SCHE_STATUS = '10' THEN
			 SP_UC_SET_JOB(I_TENANT_ID,'EDU2020M01_S',I_SCHE_ID,'D',NULL ) ; --[진행중]상태로 처리 취소
			 SP_UC_SET_JOB(I_TENANT_ID,'EDU2020M01_E',I_SCHE_ID,'D',NULL ) ; --[완료]상태로 처리 취소
	
	END IF;	  

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
 
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2030S01_02" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SHEETKEY       IN VARCHAR2
    ,I_SHEET_ID       IN VARCHAR2
    ,I_QUESTION_ID    IN VARCHAR2    
    ,O_CUR_LIST       OUT    SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_EDU2030S01_02
   PURPOSE:    평가이력조회 - 평가채점 팝업 - 답항조회
               SP_EDU2010M01_03 과 동일함.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/21  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2030S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ******************************************************************************** 
OPEN O_CUR_LIST FOR 
         --// AGENT가 작성한 답 데이터 조회 
          WITH TEMP_ANSWER AS (
          SELECT SPLIT_VALUE 
            FROM TABLE(fn_cm_get_tb_split(
                        (SELECT A.ANSWER_VALUE  /* e.g ) '1==1^2==0^3==0^4==0^5==1  OR 1==정답입니다 */
                          FROM TB_EDU_EXAM_RESULT_DETAIL A
                          WHERE A.TENANT_ID    = I_TENANT_ID 
                            AND A.SHEETKEY     = I_SHEETKEY
                            AND A.QUESTION_ID  = I_QUESTION_ID 
                         )  
                        , '^'))
          ) , TEMP_ANSWER2 AS (
           SELECT TRIM(REGEXP_SUBSTR(SPLIT_VALUE, '[^==]+', 1, 1)) AS ANSWER_ID
                 ,TRIM(REGEXP_SUBSTR(SPLIT_VALUE, '[^==]+', 1, 2)) AS ANSWER_VALUE 
          FROM TEMP_ANSWER
          ) 
             SELECT    A.SHEET_ID
                      ,A.QUESTION_ID
                      ,A.ANSWER_ID
                      ,A.ANSWER
                      ,A.CORRECT_YN
                      ,NVL(B.ANSWER_VALUE,'') AS ANSWER_YN
               FROM TB_EDU_SHEET_ANSWER A 
               LEFT OUTER JOIN TEMP_ANSWER2 B ON ( A.ANSWER_ID = B.ANSWER_ID )
               WHERE A.TENANT_ID = I_TENANT_ID
                 AND A.SHEET_ID  = I_SHEET_ID
                 AND A.QUESTION_ID   = I_QUESTION_ID
              ORDER BY A.QUESTION_ID, A.ANSWER_ID
              ;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2030S01_03" (
   I_TENANT_ID     IN VARCHAR2
  ,I_LOGIN_ID	   IN VARCHAR2  /* 로그인사용자 ID */ 
  ,I_SCHE_ID       IN VARCHAR2    
  ,I_SHEET_ID	   IN VARCHAR2    
  ,I_SHEETKEY      IN VARCHAR2
  ,I_AGENT_ID      IN VARCHAR2 
  ,I_QUESTION_ID   IN VARCHAR2      
  ,I_SCORE         IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_EDU2030S01_03
   PURPOSE:    평가이력조회 - 평가채점 팝업 - 정답인정/정답취소/부분점수 처리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/21  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2030S01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
   
    V_SHEETKEY VARCHAR2(14) := I_SHEETKEY ;
    
	BEGIN
-- ********************************************************************************
-- 1.미응시자인 경우  
--   TB_EDU_EXAM_RESULT_HEADER 생성
-- ********************************************************************************  
	IF V_SHEETKEY IS NULL THEN 
	BEGIN
		SELECT SHEETKEY INTO V_SHEETKEY
		  FROM TB_EDU_EXAM_RESULT_HEADER A
		 WHERE A.TENANT_ID = I_TENANT_ID
		  AND A.SCHE_ID    = I_SCHE_ID
		  AND A.SHEET_ID   = I_SHEET_ID  
		  AND A.AGENT_ID   = I_AGENT_ID  ;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_SHEETKEY := NULL;
	END;	
	 	 
	IF V_SHEETKEY IS NULL THEN  /* SHEETKEY 생성 => 평가계획ID + 일련번호 */
		SELECT I_SCHE_ID || LPAD(SUBSTR(NVL(MAX(SHEETKEY),'0000'),-4)+1 ,4, '0')
		  INTO V_SHEETKEY
		  FROM TB_EDU_EXAM_RESULT_HEADER 
		 WHERE TENANT_ID = I_TENANT_ID 
		   AND SCHE_ID   = I_SCHE_ID 
		   AND SHEET_ID  = I_SHEET_ID ;	 
		   
		INSERT INTO TB_EDU_EXAM_RESULT_HEADER (
			TENANT_ID, SHEETKEY, SCHE_ID, SHEET_ID, AGENT_ID
			,TOTAL_SCORE, CONVERT_SCORE, TYPE_SCORE1, TYPE_SCORE2, TYPE_SCORE3
			,TYPE_SCORE4, TYPE_SCORE5, TYPE_SCORE6, SUBMIT_YN, SUBMIT_DT 
		)VALUES(
			I_TENANT_ID, V_SHEETKEY, I_SCHE_ID, I_SHEET_ID, I_AGENT_ID
			,0,0,0,0,0
			,0,0,0,0,NULL ) ;
		COMMIT;
		
		SP_EDU2010M01_04(I_TENANT_ID, I_SCHE_ID, I_AGENT_ID, '50', I_LOGIN_ID) ; --진행상태 '수동' 으로 변경
	END IF;	 	
END IF ;
 
-- ********************************************************************************
-- 2. 채점 (정답인정/정답취소/부분점수)
-- ********************************************************************************  
	MERGE INTO TB_EDU_EXAM_RESULT_DETAIL T 
	USING (SELECT I_TENANT_ID   AS TENANT_ID
				 ,V_SHEETKEY    AS SHEETKEY
				 ,I_QUESTION_ID AS QUESTION_ID
				 ,I_SCORE       AS SCORE
			 FROM DUAL ) S
	ON (T.TENANT_ID = S.TENANT_ID AND T.SHEETKEY = S.SHEETKEY AND T.QUESTION_ID = S.QUESTION_ID)
	WHEN MATCHED THEN
	  UPDATE SET MOD_SCORE = S.SCORE
		  	    ,RESULT_SCORE = S.SCORE
	            ,WORK_DATE  = SYSDATE
	            ,WORK_MEMB  = I_LOGIN_ID
	WHEN NOT MATCHED THEN
	INSERT ( TENANT_ID
			,SHEETKEY
			,QUESTION_ID
			,ANSWER_VALUE
			,SCORE
			,MOD_SCORE
			,RESULT_SCORE
			,WORK_MEMB
			,WORK_DATE)
	VALUES ( S.TENANT_ID
			,S.SHEETKEY
			,S.QUESTION_ID
			,NULL
			,0
			,S.SCORE
			,S.SCORE
			,I_LOGIN_ID
			,SYSDATE) ;		  
   COMMIT;

-- ********************************************************************************
-- 3 총점 처리 
-- ********************************************************************************  
	MERGE INTO TB_EDU_EXAM_RESULT_HEADER T
	USING (
		SELECT
			A.TENANT_ID, A.SHEETKEY 
			,SUM(B.RESULT_SCORE) AS TOTAL_SCORE
			,SUM(CASE C.QUESTION_TYPE WHEN '10' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE1
			,SUM(CASE C.QUESTION_TYPE WHEN '20' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE2
			,SUM(CASE C.QUESTION_TYPE WHEN '30' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE3
			,SUM(CASE C.QUESTION_TYPE WHEN '40' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE4
			,SUM(CASE C.QUESTION_TYPE WHEN '50' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE5
			,SUM(CASE C.QUESTION_TYPE WHEN '60' THEN B.RESULT_SCORE ELSE 0 END) AS TYPE_SCORE6     
			,MAX((SELECT SUM(S.SCORE) 
					FROM TB_EDU_SHEET_DETAIL S
					WHERE S.TENANT_ID = A.TENANT_ID
					AND S.SHEET_ID  = A.SHEET_ID
					GROUP BY S.TENANT_ID, S.SHEET_ID)) AS SUM_SCORE    /* 시험지총점- 100점 환산하기 위해 */				                                           
		FROM TB_EDU_EXAM_RESULT_HEADER A
		INNER JOIN TB_EDU_EXAM_RESULT_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEETKEY = B.SHEETKEY )
		INNER JOIN TB_EDU_SHEET_DETAIL C ON (A.TENANT_ID = C.TENANT_ID AND A.SHEET_ID = C.SHEET_ID AND B.QUESTION_ID = C.QUESTION_ID)
		WHERE A.TENANT_ID = I_TENANT_ID
		  AND A.SHEETKEY  = V_SHEETKEY
		GROUP BY A.TENANT_ID, A.SHEETKEY 	  
	) S ON (T.TENANT_ID = S.TENANT_ID AND T.SHEETKEY = S.SHEETKEY )
	WHEN MATCHED THEN
	UPDATE SET  
		TOTAL_SCORE = S.TOTAL_SCORE
		,CONVERT_SCORE = ROUND((S.TOTAL_SCORE*100)/S.SUM_SCORE,2) /* 100점 환산점수 계산 */
		,TYPE_SCORE1 = S.TYPE_SCORE1
		,TYPE_SCORE2 = S.TYPE_SCORE2
		,TYPE_SCORE3 = S.TYPE_SCORE3
		,TYPE_SCORE4 = S.TYPE_SCORE4
		,TYPE_SCORE5 = S.TYPE_SCORE5
		,TYPE_SCORE6 = S.TYPE_SCORE6  ;
     COMMIT;
     
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
         RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4010S04_02" (
   I_TENANT_ID    IN VARCHAR2
 , I_SCHE_ID      IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4010S04_02
   PURPOSE:    평가계획관리 - 평가대상자관리 - 대상자조회(선택)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/26
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4010S04_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
         , A.DEPT_CD
  		 , A.SABUN
  		 , A.AGENT_ID
  		 , A.AGENT_NM
         , A.TM_KIND
	     , FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
	     , FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
     FROM TB_CM_USER_MASTER A
    INNER JOIN TB_EDU_TARGET B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
    WHERE 1 = 1 
      AND B.TENANT_ID = I_TENANT_ID
      AND B.SCHE_ID   = I_SCHE_ID
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4010S04_03" (
   I_TENANT_ID    IN VARCHAR2
 , I_LOGIN_ID     IN VARCHAR2  /* 로그인사용자ID */
 , I_SCHE_ID      IN VARCHAR2
 , I_AGENT_ID 	  IN VARCHAR2  /* 등록대상 AGENT_ID 리스트 */
-- , I_COMPLETE_YN  IN VARCHAR2
-- , I_COMMENT_TEXT IN VARCHAR2
-- , I_GONGMU_YN    IN VARCHAR2
-- , I_GONGMU_TM    IN VARCHAR2
-- , I_USERDATA1    IN VARCHAR2
-- , I_USERDATA2    IN VARCHAR2
-- , I_USERDATA3    IN VARCHAR2
-- , I_USERDATA4    IN VARCHAR2
-- , I_USERDATA5    IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR      /* 중복여부 체크를 위해 */ 
) AS 
/******************************************************************************
   NAME:       SP_EDU4010S04_03
   PURPOSE:    평가계획관리 - 평가대상자관리 - 대상자등록

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/26
    
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4010S04_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 	 V_RESULT_CD        VARCHAR2(40)  :='SUCCESS'; /* 중복일 경우 구분하기 위해 */
	 V_RESULT_MSG       VARCHAR2(200) :='';
	 V_DUP_CNT          NUMBER(3)     :=0 ;
	 
    V_START_YMD   VARCHAR2(8) :='';
    V_END_YMD     VARCHAR2(8) :='';	 
	 
 BEGIN
 
 IF I_AGENT_ID IS NOT NULL THEN /* 등록대상자가 있을 경우 중복체크 */
 
	-- ********************************************************************************
	-- 0.중복대상자  체크하기 위해 현 평가계획의 평가일자, 시간 조회
	-- ******************************************************************************** 
	    SELECT A.START_YMD, A.END_YMD
	      INTO V_START_YMD, V_END_YMD
	      FROM TB_EDU_SCHE A
	     WHERE A.TENANT_ID = I_TENANT_ID
	       AND A.SCHE_ID   = I_SCHE_ID ; 
	 
	-- ********************************************************************************
	-- 1.중복체크
	-- ********************************************************************************  
	 SELECT COUNT(DISTINCT B.AGENT_ID) INTO V_DUP_CNT
       FROM TB_EDU_SCHE A
	  INNER JOIN TB_EDU_TARGET B ON A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID
	  INNER JOIN ( SELECT SPLIT_VALUE AS AGENT_ID
				     FROM TABLE(FN_CM_GET_TB_SPLIT(I_AGENT_ID, ','))   
		 		    WHERE SPLIT_VALUE  IS NOT NULL ) C ON (B.AGENT_ID = C.AGENT_ID)
      WHERE 1=1 
	    AND B.TENANT_ID  = I_TENANT_ID
	    AND B.SCHE_ID   != I_SCHE_ID /* 현재 평가계획은 제외하고 비교*/
	    AND ( ( V_START_YMD >= A.START_YMD AND V_START_YMD < A.END_YMD )
		    OR( V_END_YMD   >  A.START_YMD AND V_END_YMD <= A.END_YMD ) 
		    OR( V_START_YMD <= A.START_YMD AND V_END_YMD >= A.END_YMD ) 
		        );

END IF;
	        
 IF V_DUP_CNT > 0 THEN
    V_RESULT_CD := 'FAIL' ;
    V_RESULT_MSG:= '중복대상자가 존재합니다.(' ||V_DUP_CNT ||'건)' ;
    
 ELSE /* 중복건이 없으면 처리 */	        

	-- ********************************************************************************
	-- 3. 삭제
	-- ********************************************************************************    
	 DELETE FROM TB_EDU_TARGET  WHERE TENANT_ID = I_TENANT_ID  AND SCHE_ID   = I_SCHE_ID ;
	 COMMIT;
 
	-- ********************************************************************************
	-- 5. 등록
	-- ********************************************************************************    
	 INSERT INTO TB_EDU_TARGET ( TENANT_ID
				               , SCHE_ID
				               , AGENT_ID
				               , COMPLETE_YN
				               , COMMENT_TEXT
				               , GONGMU_YN
				               , GONGMU_TM
--				               , USERDATA1
--				               , USERDATA2
--				               , USERDATA3
--				               , USERDATA4
--				               , USERDATA5
				               , CREATE_AGENT_ID
				               , CREATE_DT
						       ) 
				          SELECT I_TENANT_ID  AS I_TENANT_ID
				               , I_SCHE_ID    AS SCHE_ID
				               , A.AGENT_ID
				               , '0'  AS COMPLETE_YN
				               , ''   AS COMMENT_TEXT
				               , '0'  AS GONGMU_YN
				               , 0    AS GONGMU_TM
--				               , I_USERDATA1    AS USERDATA1
--				               , I_USERDATA2    AS USERDATA2
--				               , I_USERDATA3    AS USERDATA3
--				               , I_USERDATA4    AS USERDATA4
--				               , I_USERDATA5    AS USERDATA5
				               , I_LOGIN_ID     AS CREATE_AGENT_ID
				               , SYSTIMESTAMP   AS CREATE_DT
					        FROM ( SELECT SPLIT_VALUE  AS AGENT_ID
									 FROM TABLE(FN_CM_GET_TB_SPLIT(I_AGENT_ID, ','))   
									WHERE SPLIT_VALUE  IS NOT NULL 
 		         		         ) A ;
	 
	 COMMIT; 

END IF;

-- ********************************************************************************
-- X.처리결과 리턴
-- ******************************************************************************** 	 
    OPEN O_CUR_LIST FOR 
    SELECT V_RESULT_CD   AS RESULT_CD
         , V_RESULT_MSG  AS RESULT_MSG
     FROM DUAL ; 	
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU4020S01_01" (
	I_TENANT_ID  IN VARCHAR2
  , I_SCHE_ID    IN VARCHAR2
  , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4020S01_01
   PURPOSE:    교육진행관리 - 출석부(팝업) - 명단 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/29
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 
	SELECT 
		A.TENANT_ID
		, A.SCHE_ID
		, A.AGENT_ID
		, A.COMPLETE_YN
		, A.COMMENT_TEXT
		, A.GONGMU_YN
		, A.GONGMU_TM
		, A.USERDATA1
		, A.USERDATA2
		, A.USERDATA3
		, A.USERDATA4
		, A.USERDATA5
		, FN_CM_GET_DEPT_INFO(I_TENANT_ID, B.DEPT_CD) AS TEAM_NM
		, B.SABUN AS SABUN
		, B.AGENT_NM AS AGENT_NM
	FROM TB_EDU_TARGET A
	INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.SCHE_ID   = I_SCHE_ID
	ORDER BY B.AGENT_NM
	;
		
		 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4040M01_01" (
	I_TENANT_ID    IN VARCHAR2
  , I_START_MONTH  IN VARCHAR2
  , I_END_MONTH    IN VARCHAR2
  , I_SCHE_ID      IN VARCHAR2
  , I_TEACHER_ID   IN VARCHAR2
  , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4040M01_01
   PURPOSE:    강의이력 조회 - 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/04
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4040M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 

	WITH TEMP_LIST AS (

		SELECT 
			( CASE WHEN FN_CM_GET_DEPT_INFO(I_TENANT_ID, B.DEPT_CD) IS NULL THEN '외부강사'
					ELSE FN_CM_GET_DEPT_INFO(I_TENANT_ID, B.DEPT_CD) END ) AS TEAM_NM
			, A.TEACHER_ID
			, CASE WHEN A.TEACHER_ID IS NULL THEN A.TEACHER_NM
					ELSE A.TEACHER_NM || '(' || B.SABUN || ')' END AS TEACHER_NM
			, A.SCHE_ID
			, C.SCHE_NM
			, A.SUBJECT_ID
			, A.SUBJECT_NM
			, TO_CHAR(TO_DATE(A.EDU_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || TO_CHAR(TO_DATE(A.EDU_START_TM, 'HH24MI'), 'HH24:MI') AS EDU_DT
			, TO_CHAR(TO_DATE(A.EDU_END_TM, 'HH24MI'), 'HH24:MI') AS EDU_END_TM
			, (CASE WHEN TRUNC((TO_DATE(A.EDU_END_TM, 'HH24MI') - TO_DATE(A.EDU_START_TM, 'HH24MI')) * 24 * 60) != 0
						THEN TRUNC((TO_DATE(A.EDU_END_TM, 'HH24MI') - TO_DATE(A.EDU_START_TM, 'HH24MI')) * 24 * 60) || '분'
					ELSE NULL END) AS EDU_TM
			, D.TARGET_CNT
			, E.SCORE5
			, E.SCORE4
			, E.SCORE3
			, E.SCORE2
			, E.SCORE1
			, E.SATIS_COMMENT
		FROM TB_EDU_SUBJECT A 
		LEFT OUTER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID  = B.TENANT_ID AND A.TEACHER_ID = B.AGENT_ID
		INNER JOIN TB_EDU_SCHE C ON A.TENANT_ID  = C.TENANT_ID AND A.SCHE_ID = C.SCHE_ID
		INNER JOIN (
			SELECT TENANT_ID, SCHE_ID, COUNT(AGENT_ID) TARGET_CNT
			FROM TB_EDU_TARGET
			GROUP BY TENANT_ID, SCHE_ID
		) D ON A.TENANT_ID = D.TENANT_ID AND A.SCHE_ID = D.SCHE_ID
		LEFT OUTER JOIN (
			SELECT
				TENANT_ID,
				SCHE_ID,
				SUBJECT_ID,
				SUM(CASE WHEN SATISFACTION_SCORE=5 THEN 1 ELSE 0 END) SCORE5,
				SUM(CASE WHEN SATISFACTION_SCORE=4 THEN 1 ELSE 0 END) SCORE4,
				SUM(CASE WHEN SATISFACTION_SCORE=3 THEN 1 ELSE 0 END) SCORE3,
				SUM(CASE WHEN SATISFACTION_SCORE=2 THEN 1 ELSE 0 END) SCORE2,
				SUM(CASE WHEN SATISFACTION_SCORE=1 THEN 1 ELSE 0 END) SCORE1,
				SUM(CASE WHEN SATISFACTION_SCORE=0 THEN 1 ELSE 0 END) SCORE0,
				SUM(CASE WHEN SATISFACTION_COMMENT IS NOT NULL THEN 1 ELSE 0 END) SATIS_COMMENT
			FROM TB_EDU_ATTENDANCE
			GROUP BY TENANT_ID, SCHE_ID, SUBJECT_ID
		) E ON A.TENANT_ID = E.TENANT_ID AND A.SCHE_ID = E.SCHE_ID AND A.SUBJECT_ID = E.SUBJECT_ID
		WHERE A.TENANT_ID  = I_TENANT_ID
		AND I_START_MONTH <= C.STD_MONTH
		AND I_END_MONTH   >= C.STD_MONTH
		AND (( I_SCHE_ID    IS NULL AND 1=1 ) OR (I_SCHE_ID    IS NOT NULL AND INSTR( I_SCHE_ID, A.SCHE_ID) > 0))
		AND (( I_TEACHER_ID IS NULL AND 1=1 ) OR (I_TEACHER_ID IS NOT NULL AND INSTR( I_TEACHER_ID, A.TEACHER_ID) > 0))
	)
	  
	SELECT 
		A.TEAM_NM
		, A.TEACHER_ID
		, A.TEACHER_NM
		, A.SCHE_ID
		, A.SCHE_NM
		, A.SUBJECT_ID
		, A.SUBJECT_NM
		, A.EDU_DT
		, A.EDU_END_TM
		, A.EDU_TM
		, A.TARGET_CNT
		, A.SCORE5
		, A.SCORE4
		, A.SCORE3
		, A.SCORE2
		, A.SCORE1
		, A.SATIS_COMMENT
		, A.TARGET_CNT - (A.SCORE5 + A.SCORE4 + A.SCORE3 + A.SCORE2 + A.SCORE1) AS SCORE0
	FROM TEMP_LIST A
	ORDER BY A.TEAM_NM, A.TEACHER_NM, A.SCHE_ID;

         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1010M01_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1010M01_01
   PURPOSE:    상담사정보관리 - 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/08  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 상담사 정보 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT A.AGENT_ID
        ,A.AGENT_NM
        ,A.AGENT_PW
        ,A.SABUN
        ,A.DEPT_CD
        ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.DEPT_CD) AS CENTER
        ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD) AS PART
        ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD) AS TEAM
        ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS JO
        ,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
        ,A.TM_KIND
        ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
        ,A.AGENT_JIKGUP
        ,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM 
        ,A.AGENT_JIKCHK
        ,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM 
        ,A.JIKJONG_KIND
        ,A.DAYNIGHT_GUBUN
        ,A.JAEJIK_GUBUN
        ,FN_CM_GET_CODE_NM(A.TENANT_ID,'JAEJIK_GUBUN',A.JAEJIK_GUBUN) AS JAEJIK_GUBUN_NM         
        ,A.GENDER_KIND
        ,FN_CM_STRING_FORMAT(A.BIRTH_YMD, '@@@@-@@-@@') AS BIRTH_YMD
        ,FN_CM_STRING_FORMAT(A.ENTER_YMD, '@@@@-@@-@@') AS ENTER_YMD
        ,FN_CM_STRING_FORMAT(A.RETIRE_YMD, '@@@@-@@-@@') AS RETIRE_YMD
        ,A.RETIRE_GUBUN
        ,FN_CM_GET_CODE_NM(A.TENANT_ID,'RETIRE_GUBUN',A.RETIRE_GUBUN) AS RETIRE_GUBUN_NM         
        ,A.RETIRE_RSN
        ,FN_CM_GET_WORKPERIOD('M',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
        ,A.HIDE_YN
        ,A.LOGIN_TRY_COUNT
   --     ,A.LOGIN_IP
        ,(SELECT TO_CHAR(MAX(S.LOGIN_DT),'YYYY-MM-DD HH24:MI:SS') 
            FROM TB_CM_LOGIN_HISTORY S 
            WHERE S.TENANT_ID = A.TENANT_ID AND S.AGENT_ID = A.AGENT_ID ) AS LOGIN_DT        
        ,FN_CM_STRING_FORMAT(A.CONTRACT_FRM, '@@@@-@@-@@') AS CONTRACT_FRM
        ,FN_CM_STRING_FORMAT(A.CONTRACT_END, '@@@@-@@-@@') AS CONTRACT_END
        ,A.SCHE_TARGET_YN
        ,A.EDU_TARGET_YN
        ,A.QA_TARGET_YN
        ,A.KPI_TARGET_YN
        ,A.IMG_REAL_FILENAME
        ,A.IMG_USER_FILENAME
        ,A.IMG_PATH
        ,TO_CHAR(A.CREATE_DT,'YYYY-MM-DD HH24:MI:SS') AS CREATE_DT
        ,A.CREATE_AGENT_ID
        ,TO_CHAR(A.MODIFY_DT,'YYYY-MM-DD HH24:MI:SS') AS MODIFY_DT        
        ,A.MODIFY_AGENT_ID
        ,A.TEL_NO
        ,A.LOCK_YN
        ,B.USER_DATA1
        ,B.USER_DATA2
        ,B.USER_DATA3
        ,B.USER_DATA4
        ,B.USER_DATA5
        ,B.USER_DATA6
        ,B.USER_DATA7
        ,B.USER_DATA8
        ,B.USER_DATA9
        ,B.USER_DATA10
        ,(SELECT S.GRANT_NM FROM TB_CM_GRANT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.GRANT_ID = A.GRANT_ID) AS GRANT_NM
    FROM TB_CM_USER_MASTER A
    LEFT OUTER JOIN TB_CM_USER_DETAIL B ON A.AGENT_ID = B.AGENT_ID
    WHERE A.TENANT_ID =I_TENANT_ID
      AND A.AGENT_ID = I_AGENT_ID;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1020S01_01 (
     I_TENANT_ID         IN VARCHAR2
    ,I_LOGIN_ID          IN VARCHAR2
    ,I_OFFICIAL_ORDER_YMD IN VARCHAR2
    ,I_ENTER_YMD         IN VARCHAR2
    ,I_AGENT_NM          IN VARCHAR2
    ,I_SABUN             IN VARCHAR2
    ,I_BIRTH_YMD    	 IN VARCHAR2
    ,I_GENDER_KIND  	 IN VARCHAR2
	,I_TEL_NO            IN VARCHAR2
    ,I_TM_KIND           IN VARCHAR2
    ,I_AGENT_JIKGUP	     IN VARCHAR2
    ,I_AGENT_JIKCHK      IN VARCHAR2
    ,I_JIKJONG_KIND      IN VARCHAR2
    ,I_DAYNIGHT_GUBUN    IN VARCHAR2
    ,I_AGENT_PW          IN VARCHAR2
    ,I_DEPT_CD           IN VARCHAR2
    ,I_SCHE_TARGET_YN    IN NUMBER
    ,I_EDU_TARGET_YN     IN NUMBER
    ,I_QA_TARGET_YN      IN NUMBER
    ,I_KPI_TARGET_YN     IN NUMBER
	,I_CONTRACT_FRM      IN VARCHAR2
	,I_CONTRACT_END      IN VARCHAR2
	,I_IMG_PATH          IN VARCHAR2
	,I_IMG_REAL_FILENAME  IN VARCHAR2
	,I_IMG_USER_FILENAME  IN VARCHAR2	    
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 ID정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_HR1020S01_01
   PURPOSE:    상담사발령 - 신규발령처리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/13  YAKIM
    1.1       2017/05/23  YAKIM            기본권한 설정
******************************************************************************/
   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
    V_AGENT_ID TB_CM_USER_MASTER.AGENT_ID%TYPE := '';
    VS_SEQ TB_HR_OFFICIAL_ORDER.SNO%TYPE;
    V_DUP_CNT NUMBER := 0; /* 사번 중복체크 건수*/
 
 BEGIN
 
-- ********************************************************************************
-- 0. 사번 중복 체크
-- ********************************************************************************    
SELECT COUNT(AGENT_ID) INTO V_DUP_CNT
  FROM TB_CM_USER_MASTER WHERE TENANT_ID = I_TENANT_ID AND SABUN = I_SABUN ;
  
 IF V_DUP_CNT > 0 THEN 
     V_AGENT_ID := 'DUP' ;
 ELSE  
 
-- ********************************************************************************
-- 0. 신규 ID 채번
-- ********************************************************************************    
  SELECT TO_CHAR(SYSDATE, 'YYYYMM') || LPAD( SUBSTR(NVL(MAX(AGENT_ID),'0000'),-4) + 1, 4, '0')
    INTO V_AGENT_ID
    FROM TB_CM_USER_MASTER
    WHERE TENANT_ID = I_TENANT_ID AND LENGTH(AGENT_ID) = 10
    AND SUBSTR(AGENT_ID, 1,6) = TO_CHAR(SYSDATE, 'YYYYMM');
    
-- ********************************************************************************
-- 1. 계정정보 신규 등록
-- ********************************************************************************    
    INSERT INTO TB_CM_USER_MASTER(
         TENANT_ID
        ,AGENT_ID
        ,AGENT_NM
        ,AGENT_PW
        ,SABUN
        ,DEPT_CD
        ,TM_KIND
        ,AGENT_JIKGUP
        ,AGENT_JIKCHK
        ,JIKJONG_KIND
        ,DAYNIGHT_GUBUN
        ,JAEJIK_GUBUN
        ,GENDER_KIND
        ,TEL_NO
        ,BIRTH_YMD
        ,ENTER_YMD
        ,WORK_MONTH_PERIOD
        ,HIDE_YN
        ,LOGIN_TRY_COUNT
        ,CONTRACT_FRM
        ,CONTRACT_END
        ,SCHE_TARGET_YN
        ,EDU_TARGET_YN
        ,QA_TARGET_YN
        ,KPI_TARGET_YN
        ,IMG_PATH
        ,IMG_REAL_FILENAME
        ,IMG_USER_FILENAME
        ,GRANT_ID
        ,CREATE_DT
        ,CREATE_AGENT_ID
        ,MODIFY_DT
        ,MODIFY_AGENT_ID
    ) VALUES (
         I_TENANT_ID
        ,V_AGENT_ID
        ,I_AGENT_NM
        ,I_AGENT_PW
        ,I_SABUN
        ,I_DEPT_CD
        ,I_TM_KIND
        ,I_AGENT_JIKGUP
        ,I_AGENT_JIKCHK
        ,I_JIKJONG_KIND
        ,I_DAYNIGHT_GUBUN
        ,'10'
        ,I_GENDER_KIND
        ,I_TEL_NO
        ,I_BIRTH_YMD
        ,I_ENTER_YMD
        ,0
        ,0
        ,0
        ,I_CONTRACT_FRM
        ,I_CONTRACT_END
        ,NVL(I_SCHE_TARGET_YN,0)
        ,NVL(I_EDU_TARGET_YN,0)
        ,NVL(I_QA_TARGET_YN,0)
        ,NVL(I_KPI_TARGET_YN,0)
        ,I_IMG_PATH
        ,I_IMG_REAL_FILENAME
        ,I_IMG_USER_FILENAME    
        ,(SELECT S.GRANT_ID 
			FROM TB_CM_GRANT_HEADER S
			WHERE S.TENANT_ID = I_TENANT_ID
			  AND S.JIKCHK_DEFAULT =I_AGENT_JIKCHK
			  AND S.HIDE_YN = 0
			  AND ROWNUM = 1
        )    /* 직책별 기본권한 */
        ,SYSDATE
        ,I_LOGIN_ID
        ,SYSDATE
        ,I_LOGIN_ID
    );
    
    INSERT INTO TB_CM_USER_DETAIL(
        TENANT_ID, AGENT_ID   
        ,USER_DATA1 
        ,USER_DATA2 
        ,USER_DATA3 
        ,USER_DATA4 
        ,USER_DATA5 
        ,USER_DATA6 
        ,USER_DATA7 
        ,USER_DATA8 
        ,USER_DATA9 
        ,USER_DATA10
    ) VALUES (
        I_TENANT_ID, V_AGENT_ID
        ,''
        ,''
        ,''
        ,''
        ,''
        ,''
        ,''
        ,''
        ,''
        ,''
    );
      
    COMMIT;     

-- ********************************************************************************
-- 2. 상담사 발령이력 추가
-- ********************************************************************************    
        SELECT NVL(MAX(SNO) + 1,0) AS SNO
        INTO VS_SEQ 
        FROM TB_HR_OFFICIAL_ORDER 
        WHERE TENANT_ID = I_TENANT_ID AND  AGENT_ID = V_AGENT_ID;

        INSERT INTO TB_HR_OFFICIAL_ORDER (
		        TENANT_ID
				,AGENT_ID
				,SNO
				,APPOINT_KIND
				,OFFICIAL_ORDER_MEMB
				,OFFICIAL_ORDER_YMD
				,BF_DEPT_CD
				,BF_TMKIND_CD
				,BF_JIKGUP_CD
				,BF_JIKCHK_CD
				,BF_DEPT_NM
				,BF_TMKIND_NM
				,BF_JIKGUP_NM
				,BF_JIKCHK_NM
				,AF_DEPT_CD
				,AF_TMKIND_CD
				,AF_JIKGUP_CD
				,AF_JIKCHK_CD
				,AF_DEPT_NM
				,AF_TMKIND_NM
				,AF_JIKGUP_NM
				,AF_JIKCHK_NM
				,OFFICIAL_ORDER_RSN
				,EXECUTE_YN
				,RETIRE_GUBUN
				,RETIRE_RSN
				,WORK_MEMB
				,WORK_YMD)         
        SELECT 
           I_TENANT_ID           AS TENANT_ID
          ,V_AGENT_ID            AS AGENT_ID
          ,VS_SEQ                AS SNO
          ,'00'                  AS APPOINT_KIND  --신규발령
          ,I_LOGIN_ID            AS OFFICIAL_ORDER_MEMB
          ,I_OFFICIAL_ORDER_YMD  AS OFFICIAL_ORDER_YMD
          ,''                    AS BF_DEPT_CD
          ,''                    AS BF_TMKIND_CD
          ,''                    AS BF_JIKGUP_CD
          ,''                    AS BF_JIKCHK_CD
          ,''                    AS BF_DEPT_NM
          ,''                    AS BF_TMKIND_NM
          ,''                    AS BF_JIKGUP_NM
          ,''                    AS BF_JIKCHK_NM
          ,I_DEPT_CD             AS AF_DEPT_CD
          ,I_TM_KIND             AS AF_TMKIND_CD
          ,I_AGENT_JIKGUP        AS AF_JIKGUP_CD
          ,I_AGENT_JIKCHK        AS AF_JIKCHK_CD
          ,FN_CM_GET_DEPT_INFO(I_TENANT_ID, I_DEPT_CD) AS AF_DEPT_NM
          ,FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND', I_TM_KIND) AS AF_TMKIND_NM
          ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', I_AGENT_JIKGUP) AS AF_JIKGUP_NM
          ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', I_AGENT_JIKCHK) AS AF_JIKCHK_NM
          ,'[신규발령] 처리자 : '||FN_CM_GET_AGENT_NM(I_TENANT_ID,I_LOGIN_ID) AS OFFICIAL_ORDER_RSN
          ,'1'                   AS EXECUTE_YN
          ,''                    AS RETIRE_GUBUN
          ,''					 AS RETIRE_RSN
          ,I_LOGIN_ID            AS WORK_MEMB
          ,SYSDATE               AS WORK_YMD
        FROM DUAL ;
        COMMIT;
END IF;
 
-- ********************************************************************************
-- 2.처리 결과 리턴
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
 SELECT V_AGENT_ID   AS KEY_ID
  FROM DUAL ; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  -- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
 
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1020S02_02 (
   I_TENANT_ID           IN VARCHAR2
  ,I_LOGIN_ID            IN VARCHAR2
  ,I_AGENT_ID            IN VARCHAR2
  ,I_APPOINT_KIND        IN VARCHAR2
  ,I_OFFICIAL_ORDER_YMD  IN VARCHAR2
  ,I_BF_DEPT_CD          IN VARCHAR2
  ,I_BF_DEPT_NM          IN VARCHAR2
  ,I_BF_TMKIND_CD        IN VARCHAR2
  ,I_BF_TMKIND_NM        IN VARCHAR2  
  ,I_BF_JIKGUP_CD        IN VARCHAR2
  ,I_BF_JIKGUP_NM        IN VARCHAR2  
  ,I_BF_JIKCHK_CD        IN VARCHAR2
  ,I_BF_JIKCHK_NM        IN VARCHAR2
  ,I_AF_DEPT_CD          IN VARCHAR2
  ,I_AF_DEPT_NM          IN VARCHAR2  
  ,I_AF_TMKIND_CD        IN VARCHAR2
  ,I_AF_TMKIND_NM        IN VARCHAR2  
  ,I_AF_JIKGUP_CD        IN VARCHAR2
  ,I_AF_JIKGUP_NM        IN VARCHAR2  
  ,I_AF_JIKCHK_CD        IN VARCHAR2
  ,I_AF_JIKCHK_NM        IN VARCHAR2
  ,I_OFFICIAL_ORDER_RSN  IN VARCHAR2
  ,I_RETIRE_GUBUN        IN VARCHAR2 /* 퇴직발령구분 */
  ,I_RETIRE_RSN          IN VARCHAR2 /* 퇴직사유 */
)AS 
/******************************************************************************
   NAME:       SP_HR1020S02_02
   PURPOSE:    상담사 발령 - 이동발령/퇴직발령
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/13  YAKIM 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1020S02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
    VS_SEQ TB_HR_OFFICIAL_ORDER.SNO%TYPE;

 BEGIN 
 
 
-- ********************************************************************************
-- 0. 상담사 발령이력 추가
-- ********************************************************************************    
        SELECT NVL(MAX(SNO) + 1,0) AS SNO
        INTO VS_SEQ 
        FROM TB_HR_OFFICIAL_ORDER 
        WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID;

        INSERT INTO TB_HR_OFFICIAL_ORDER(
		        TENANT_ID
				,AGENT_ID
				,SNO
				,APPOINT_KIND
				,OFFICIAL_ORDER_MEMB
				,OFFICIAL_ORDER_YMD
				,BF_DEPT_CD
				,BF_TMKIND_CD
				,BF_JIKGUP_CD
				,BF_JIKCHK_CD
				,BF_DEPT_NM
				,BF_TMKIND_NM
				,BF_JIKGUP_NM
				,BF_JIKCHK_NM
				,AF_DEPT_CD
				,AF_TMKIND_CD
				,AF_JIKGUP_CD
				,AF_JIKCHK_CD
				,AF_DEPT_NM
				,AF_TMKIND_NM
				,AF_JIKGUP_NM
				,AF_JIKCHK_NM
				,OFFICIAL_ORDER_RSN
				,EXECUTE_YN
				,RETIRE_GUBUN
				,RETIRE_RSN
				,WORK_MEMB
				,WORK_YMD) 
        SELECT 
          I_TENANT_ID            AS TENANT_ID
          ,I_AGENT_ID            AS AGENT_ID
          ,VS_SEQ                AS SNO
          ,I_APPOINT_KIND        AS APPOINT_KIND
          ,I_LOGIN_ID            AS OFFICIAL_ORDER_MEMB
          ,I_OFFICIAL_ORDER_YMD  AS OFFICIAL_ORDER_YMD
          ,I_BF_DEPT_CD          AS BF_DEPT_CD
          ,I_BF_TMKIND_CD        AS BF_TMKIND_CD
          ,I_BF_JIKGUP_CD        AS BF_JIKGUP_CD
          ,I_BF_JIKCHK_CD        AS BF_JIKCHK_CD
          ,FN_CM_GET_DEPT_INFO(I_TENANT_ID, I_BF_DEPT_CD) AS BF_DEPT_NM
          ,I_BF_TMKIND_NM        AS BF_TMKIND_NM
          ,I_BF_JIKGUP_NM        AS BF_JIKGUP_NM
          ,I_BF_JIKCHK_NM        AS BF_JIKCHK_NM
          /* 퇴직발령인 경우 공백처리 - 그외 발령구분에 따라 기존값 그대로 유지*/
          ,(CASE WHEN I_APPOINT_KIND='99' THEN '' ELSE NVL(I_AF_DEPT_CD  ,I_BF_DEPT_CD) END) AS AF_DEPT_CD
          ,(CASE WHEN I_APPOINT_KIND='99' THEN '' ELSE NVL(I_AF_TMKIND_CD,I_BF_TMKIND_CD) END) AS AF_TMKIND_CD
          ,(CASE WHEN I_APPOINT_KIND='99' THEN '' ELSE NVL(I_AF_JIKGUP_CD,I_BF_JIKGUP_CD) END) AS AF_JIKGUP_CD
          ,(CASE WHEN I_APPOINT_KIND='99' THEN '' ELSE NVL(I_AF_JIKCHK_CD,I_BF_JIKCHK_CD) END) AS AF_JIKCHK_CD
          ,(CASE WHEN I_APPOINT_KIND='99' THEN '' ELSE FN_CM_GET_DEPT_INFO(I_TENANT_ID, NVL(I_AF_DEPT_CD,I_BF_DEPT_CD)) END) AS AF_DEPT_NM
          ,(CASE WHEN I_APPOINT_KIND='99' THEN '' ELSE NVL(I_AF_TMKIND_NM,I_BF_TMKIND_NM) END) AS AF_TMKIND_NM
          ,(CASE WHEN I_APPOINT_KIND='99' THEN '' ELSE NVL(I_AF_JIKGUP_NM,I_BF_JIKGUP_NM) END) AS AF_JIKGUP_NM
          ,(CASE WHEN I_APPOINT_KIND='99' THEN '' ELSE NVL(I_AF_JIKCHK_NM ,I_BF_JIKCHK_NM) END)AS AF_JIKCHK_NM          
          ,(CASE WHEN I_APPOINT_KIND='99' THEN '[퇴직발령] 처리자 : '||FN_CM_GET_AGENT_NM(I_TENANT_ID,I_LOGIN_ID)
            ELSE I_OFFICIAL_ORDER_RSN END ) AS OFFICIAL_ORDER_RSN
          ,CASE WHEN I_OFFICIAL_ORDER_YMD < SYSDATE THEN 1 ELSE 0 END  AS EXECUTE_YN /* 발령일자가 오늘이전이면 시행*/
          ,I_RETIRE_GUBUN        AS RETIRE_GUBUN
          ,I_RETIRE_RSN 		 AS RETIRE_RSN          
          ,I_LOGIN_ID            AS WORK_MEMB
          ,SYSDATE               AS WORK_YMD
        FROM DUAL ;
        COMMIT;
        
        IF I_OFFICIAL_ORDER_YMD < SYSDATE THEN --즉시실행
        
            IF I_APPOINT_KIND = '10' THEN --전체변경
                UPDATE TB_CM_USER_MASTER SET
                   DEPT_CD = I_AF_DEPT_CD
                  ,TM_KIND = I_AF_TMKIND_CD
                  ,AGENT_JIKGUP = I_AF_JIKGUP_CD
                  ,AGENT_JIKCHK = I_AF_JIKCHK_CD
                  ,MODIFY_AGENT_ID = I_LOGIN_ID
                  ,MODIFY_DT = SYSDATE
                WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
                COMMIT;
            ELSIF I_APPOINT_KIND = '20' THEN --소속변경
                UPDATE TB_CM_USER_MASTER SET
                   DEPT_CD = I_AF_DEPT_CD
                  ,MODIFY_AGENT_ID = I_LOGIN_ID
                  ,MODIFY_DT = SYSDATE
                WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
                COMMIT;
            ELSIF I_APPOINT_KIND = '30' THEN --업무그룹변경
                UPDATE TB_CM_USER_MASTER SET
                   TM_KIND = I_AF_TMKIND_CD
                  ,MODIFY_AGENT_ID = I_LOGIN_ID
                  ,MODIFY_DT = SYSDATE
                WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
                COMMIT;
            ELSIF I_APPOINT_KIND = '40' THEN --직급변경
                UPDATE TB_CM_USER_MASTER SET
                   AGENT_JIKGUP = I_AF_JIKGUP_CD
                  ,MODIFY_AGENT_ID = I_LOGIN_ID
                  ,MODIFY_DT = SYSDATE
                WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
                COMMIT;
            ELSIF I_APPOINT_KIND = '50' THEN --직책변경
                UPDATE TB_CM_USER_MASTER SET
                   AGENT_JIKCHK = I_AF_JIKCHK_CD
                  ,MODIFY_AGENT_ID = I_LOGIN_ID
                  ,MODIFY_DT = SYSDATE
                WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
                COMMIT;
             ELSIF I_APPOINT_KIND = '99' THEN --퇴직발령               
                  UPDATE TB_CM_USER_MASTER SET
	                 JAEJIK_GUBUN  = I_APPOINT_KIND
	                ,RETIRE_YMD   = I_OFFICIAL_ORDER_YMD
	                ,RETIRE_GUBUN = I_RETIRE_GUBUN
	                ,RETIRE_RSN   = I_RETIRE_RSN
                    ,MODIFY_AGENT_ID = I_LOGIN_ID
                    ,MODIFY_DT = SYSDATE	                
            WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID    = I_AGENT_ID;
             COMMIT;
             
            END IF;            
            
        END IF;
        
        
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2030S01_02 (
      I_CUD_GUBUN      IN VARCHAR2  /* C/U/D  */
    , I_TENANT_ID      IN VARCHAR2     
    , I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    , I_CONSULT_ID     IN VARCHAR2
    , I_APPROVAL_ID    IN VARCHAR2    
    , I_AGENT_ID       IN VARCHAR2   
    , I_CONDUCT_KIND   IN VARCHAR2
    , I_CONDUCT_CODE   IN VARCHAR2
    , I_FRM_YMD        IN VARCHAR2
    , I_END_YMD        IN VARCHAR2
    , I_FRM_TM         IN VARCHAR2
    , I_END_TM         IN VARCHAR2            
    , I_CONDUCT_RSN    IN VARCHAR2
    , I_APPROVAL_AGENT IN VARCHAR2 /* 결재라인  AGENT_ID LIST */
    , I_APPROVAL_STATUS  IN VARCHAR2
    , I_APPROVAL_CONSULT IN VARCHAR2 /* 수신참조  AGENT_ID LIST */   
    , O_CUR_LIST      OUT SYS_REFCURSOR      /* 근태 중복여부 체크를 위해 */
) AS 
/******************************************************************************
   NAME:       SP_HR2030S01_02
   PURPOSE:    근태신청/처리 - 근태신청 등록수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/27  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2030S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

     V_CONSULT_ID  VARCHAR2(20) := I_CONSULT_ID;
     V_APPROVAL_ID VARCHAR2(20) := I_APPROVAL_ID;
     V_SUBJECT     VARCHAR2(100):=''; 

	 V_RESULT_CD        VARCHAR2(40)  :='SUCCESS'; /* 근태중복 일 경우 구분하기 위해 */
	 V_RESULT_MSG       VARCHAR2(200) :='';
	 V_DUP_CNT          NUMBER(3)     :=0 ;
 BEGIN
 
-- ********************************************************************************
-- 0.근태중복 체크
-- ********************************************************************************    
	SELECT COUNT(A.CONSULT_ID) INTO V_DUP_CNT
	FROM TB_HR_CONDUCT A
	INNER JOIN TB_CM_CODE B 
		ON (A.TENANT_ID = B.TENANT_ID AND B.SORT_CD = 'CONDUCT_CODE'
		AND A.CONDUCT_KIND = B.USER_DATA1 AND A.CONDUCT_CODE = B.CODE)
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.AGENT_ID  = I_AGENT_ID
	AND (A.FRM_YMD BETWEEN I_FRM_YMD AND NVL(I_END_YMD,I_FRM_YMD)
		OR A.END_YMD BETWEEN I_FRM_YMD AND NVL(I_END_YMD,I_FRM_YMD))
	AND (
		(B.USER_DATA2 = '일자' AND 1=1 ) OR
		(B.USER_DATA2 = '시간' AND I_FRM_TM = I_END_TM  AND 1=1 )	OR 
		(B.USER_DATA2 = '시간' AND I_FRM_TM != I_END_TM AND (
															( I_FRM_TM  >=A.FRM_TM AND I_FRM_TM < A.END_TM ) OR
															( I_END_TM > A.FRM_TM AND I_END_TM <=A.END_TM ) OR
															( I_FRM_TM <= A.FRM_TM AND I_END_TM >=A.END_TM ) 
														)
		)
	) 
	AND ((I_CUD_GUBUN ='I' AND 1=1)
		OR (I_CUD_GUBUN !='I' AND A.CONSULT_ID != I_CONSULT_ID )) /* 현재 등록건은 빼고 체크 */
	; 
 
 IF V_DUP_CNT > 0 THEN
    V_RESULT_CD := 'FAIL' ;
    V_RESULT_MSG:= '동일기간 내 신청건이 존재합니다.' ;
    
 ELSE
 
-- ********************************************************************************
-- 0.근태신청 등록/수정
-- ********************************************************************************    
  IF (I_CUD_GUBUN ='I') THEN
       --CONSULT_ID 생성 >> YYYY-MM-결재종류-순번
	 SELECT TO_CHAR(SYSDATE,'YYYYMM')||'-10-' ||  LPAD(NVL(MAX(SUBSTR(CONSULT_ID, 11)),0)+1 ,9, '0') 
	   INTO V_CONSULT_ID
	   FROM TB_HR_CONDUCT A
	 WHERE  A.TENANT_ID = I_TENANT_ID 
	   AND  A.CONSULT_ID LIKE TO_CHAR(SYSDATE,'YYYYMM')||'-10-%';
          
       --V_APPROVAL_ID 생성 >> YYYY-MM-결재종류-순번
	 SELECT TO_CHAR(SYSDATE,'YYYYMM')||'-10-' ||  LPAD(NVL(MAX(SUBSTR(APPROVAL_ID, 11)),0)+1 ,9, '0') 
	   INTO V_APPROVAL_ID
	   FROM TB_CM_APPROVAL_HEADER A
	 WHERE  A.TENANT_ID = I_TENANT_ID 
	   AND  A.APPROVAL_ID LIKE TO_CHAR(SYSDATE,'YYYYMM')||'-10-%';

  END IF;

    MERGE INTO TB_HR_CONDUCT T
    USING (SELECT  I_TENANT_ID     AS TENANT_ID
                  , V_CONSULT_ID   AS CONSULT_ID
                  , V_APPROVAL_ID  AS APPROVAL_ID
                  , I_AGENT_ID     AS AGENT_ID
                  , I_CONDUCT_KIND AS CONDUCT_KIND
                  , I_CONDUCT_CODE AS CONDUCT_CODE
                  , I_FRM_YMD 	   AS FRM_YMD
                  , NVL(I_END_YMD,I_FRM_YMD)  AS END_YMD
                  , I_FRM_TM 	   AS FRM_TM
                  , I_END_TM 	   AS END_TM
                  , I_CONDUCT_RSN AS CONDUCT_RSN
             FROM DUAL ) S
    ON (  T.TENANT_ID = S.TENANT_ID AND T.CONSULT_ID   = S.CONSULT_ID)
    WHEN MATCHED THEN
      UPDATE SET    AGENT_ID = S.AGENT_ID
                  , CONDUCT_KIND = S.CONDUCT_KIND
                  , CONDUCT_CODE = S.CONDUCT_CODE
                  , FRM_YMD = s.FRM_YMD
                  , END_YMD = S.END_YMD
                  , FRM_TM = S.FRM_TM
                  , END_TM = S.END_TM
                  , CONDUCT_RSN = S.CONDUCT_RSN
                  , MODIFY_AGENT_ID = I_LOGIN_ID
                  , MODIFY_DT = SYSTIMESTAMP
    WHEN NOT MATCHED THEN
      INSERT(   TENANT_ID
              , CONSULT_ID
              , APPROVAL_ID
              , AGENT_ID
              , CONDUCT_KIND
              , CONDUCT_CODE
              , FRM_YMD
              , END_YMD
              , FRM_TM
              , END_TM
              , CONDUCT_RSN
              , CREATE_AGENT_ID
              , CREATE_DT
              , MODIFY_AGENT_ID
              , MODIFY_DT

      ) VALUES ( S. TENANT_ID
               , S. CONSULT_ID
                , S. APPROVAL_ID
                , S. AGENT_ID
                , S. CONDUCT_KIND
                , S. CONDUCT_CODE
                , S.FRM_YMD
                , S. END_YMD
                , S. FRM_TM
                , S. END_TM
                , S.CONDUCT_RSN
                , I_LOGIN_ID
                , SYSTIMESTAMP
                , I_LOGIN_ID
                , SYSTIMESTAMP
      )  ;
      
    COMMIT; 
 
-- ********************************************************************************
-- 1.1결재 제목 생성  >> ex) 개발6팀/문재영(2012012) 인정휴가 결재요청
-- ******************************************************************************** 
 SELECT  FN_CM_GET_DEPT_NM(A.TENANT_ID, 'team', A.DEPT_CD)
       ||'/'||FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.AGENT_ID)
       ||FN_CM_GET_CODE_NM(A.TENANT_ID,'CONDUCT_CODE', I_CONDUCT_CODE)
       ||' 결재요청' 
    INTO V_SUBJECT
   FROM TB_CM_USER_MASTER A
  WHERE A.TENANT_ID = I_TENANT_ID
    AND A.AGENT_ID  = I_AGENT_ID  ;
    
    
-- ********************************************************************************
-- 1.2.결재 등록/수정
-- ********************************************************************************
  MERGE INTO TB_CM_APPROVAL_HEADER T
   USING ( SELECT I_TENANT_ID   AS TENANT_ID
			    , V_APPROVAL_ID AS APPROVAL_ID
			    , '10'          AS APPROVAL_KIND  /* 근태  */
			    , V_SUBJECT     AS SUBJECT
			    , I_AGENT_ID    AS APPLY_AGENT_ID
			    , SYSDATE       AS APPLY_DT
			    , I_APPROVAL_STATUS AS APPROVAL_STATUS
			    , I_LOGIN_ID        AS CREATE_AGENT_ID
			    ,SYSTIMESTAMP       AS CREATE_DT 
			    FROM DUAL  ) S
   ON  (T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_ID = S.APPROVAL_ID )
   WHEN NOT MATCHED THEN
   INSERT (TENANT_ID
	    , APPROVAL_ID
	    , APPROVAL_KIND
	    , SUBJECT
	    , APPLY_AGENT_ID
	    , APPLY_DT
	    , APPROVAL_STATUS
	    , CREATE_AGENT_ID
	    ,CREATE_DT )
	 VALUES (S.TENANT_ID
		    , S.APPROVAL_ID
		    , S.APPROVAL_KIND
		    , S.SUBJECT
		    , S.APPLY_AGENT_ID
		    , S.APPLY_DT
		    , S.APPROVAL_STATUS
		    , S.CREATE_AGENT_ID
		    , S.CREATE_DT )
	WHEN MATCHED THEN
	UPDATE SET T.SUBJECT = S.SUBJECT
	          ,T.APPROVAL_STATUS = S.APPROVAL_STATUS
	    ;
    COMMIT; 
 
-- ********************************************************************************
-- 1.3.결재라인 등록
-- ********************************************************************************             
 IF (I_CUD_GUBUN ='I') THEN
	  DELETE FROM TB_CM_APPROVAL_DETAIL WHERE TENANT_ID = I_TENANT_ID AND APPROVAL_ID = V_APPROVAL_ID ;
	  COMMIT;
	  
	  INSERT INTO TB_CM_APPROVAL_DETAIL (
	  	TENANT_ID , APPROVAL_ID, SNO, APPROVAL_AGENT_ID, APPROVAL_DT, APPROVAL_COMMENT, APPROVAL_CODE
	  )
	  SELECT   I_TENANT_ID    AS TENANT_ID
		      , V_APPROVAL_ID AS APPROVAL_ID
		      , ROWNUM        AS SNO
	          , SPLIT_VALUE   AS APPROVAL_AGENT_ID
	          , SYSDATE       AS APPROVAL_DT
	          , '' 			  AS APPROVAL_COMMENT
	          , '' 			  AS APPROVAL_CODE          
		 FROM  TABLE(FN_CM_GET_TB_SPLIT(I_APPROVAL_AGENT, ','))   
	 WHERE SPLIT_VALUE  IS NOT NULL ;
	 COMMIT;
 
 END IF;
 
-- ********************************************************************************
-- 1.4.수신참조 등록
-- ********************************************************************************             
	DELETE FROM TB_CM_APPROVAL_CONSULT WHERE TENANT_ID = I_TENANT_ID AND APPROVAL_ID = V_APPROVAL_ID ;
	COMMIT;
	  
	INSERT INTO TB_CM_APPROVAL_CONSULT (
		TENANT_ID , APPROVAL_ID, AGENT_ID, NOTI_YN, NOTI_ID
	)
	SELECT
		I_TENANT_ID    AS TENANT_ID
		, V_APPROVAL_ID AS APPROVAL_ID
		, SPLIT_VALUE   AS AGENT_ID
		, 0	          AS NOTI_YN
		, '' 			  AS NOTI_ID
	FROM  TABLE(FN_CM_GET_TB_SPLIT(I_APPROVAL_CONSULT, ','))   
	WHERE SPLIT_VALUE  IS NOT NULL ;
	 COMMIT;

END IF;


-- ********************************************************************************
-- X.처리결과 리턴
-- ******************************************************************************** 	 
    OPEN O_CUR_LIST FOR 
    SELECT V_RESULT_CD   AS RESULT_CD
         , V_RESULT_MSG  AS RESULT_MSG
     FROM DUAL ; 	 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M02_01"
(
	  I_TENANT_ID	 IN VARCHAR2
	, I_SCHE_ID		 IN VARCHAR2
	, I_ALL_YN       IN VARCHAR2
	, I_VALUE_MEMB   IN VARCHAR2
	, I_TARGET_GUBUN IN VARCHAR2	
	, O_CUR_LIST    OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3020M02_01
   PURPOSE:    평가대상자 배정 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/05/30
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)     := 'SP_HR3020M02_01';
    v_work_result   VARCHAR2(1)      := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)   := '';
   -- ########## LOG DB END  #########################
	V_SCHE_ID		VARCHAR2(10)		:='';
    
BEGIN
	
	IF I_ALL_YN = 'A' THEN
	
		OPEN O_CUR_LIST FOR    
		 		 
			SELECT A.TARGET_MEMB AS AGENT_ID
				 , B.SABUN       AS SABUN
				 , B.AGENT_NM    AS AGENT_NM
			     , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'center' , B.DEPT_CD) AS CENTER_NM
			 	 , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'part'   , B.DEPT_CD) AS PART_NM
				 , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'team'   , B.DEPT_CD) AS TEAM_NM_2	     
				 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND', B.TM_KIND) AS TM_KIND
			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
				 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
			     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, B.DEPT_CD) AS TEAM_NM
				 , FN_CM_GET_WORKPERIOD('D', B.ENTER_YMD,'') AS WORK_PERIOD
				 , ( SELECT COUNT(T.SHEETKEY) 
				       FROM TB_HR_EVAL_RESULT_HEADER T 
				      WHERE T.TENANT_ID   = A.TENANT_ID 
				        AND T.SCHE_ID     = A.SCHE_ID 
				        AND T.TARGET_MEMB = A.TARGET_MEMB) AS EVAL_CNT
			  FROM TB_HR_EVAL_TARGET A
			 INNER JOIN TB_CM_USER_MASTER B
			    ON A.TENANT_ID   = I_TENANT_ID 
			   AND A.SCHE_ID     = I_SCHE_ID		   
			   AND A.TENANT_ID   = B.TENANT_ID
			   AND A.TARGET_MEMB = B.AGENT_ID
			 WHERE A.TENANT_ID   = I_TENANT_ID
			   AND B.TENANT_ID   = I_TENANT_ID
			   AND A.SCHE_ID     = I_SCHE_ID   ;
			   
	ELSIF I_ALL_YN = 'T' THEN
	
	
		OPEN O_CUR_LIST FOR    
			
			WITH TEMP_LIST1 AS (
		
			SELECT A.TENANT_ID
			     , ( CASE I_TARGET_GUBUN WHEN '10' THEN A.TENANT_ID
			 		                     WHEN '20' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'center', A.DEPT_CD)
			        		             WHEN '30' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'part', A.DEPT_CD)
			                		     WHEN '40' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'team', A.DEPT_CD)
			    	              	     WHEN '50' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'jo', A.DEPT_CD)
					                     WHEN '90' THEN NULL END ) AS CODE
			  FROM TB_CM_USER_MASTER A
			 WHERE A.TENANT_ID  = I_TENANT_ID
			   AND A.AGENT_ID = I_VALUE_MEMB

		
		) , TEMP_LIST2 AS (
		
			SELECT B.TENANT_ID
				 , ( CASE I_TARGET_GUBUN WHEN '10' THEN A.TENANT_ID
					                     WHEN '20' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'center', A.DEPT_CD)
					                     WHEN '30' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'part', A.DEPT_CD)
					                     WHEN '40' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'team', A.DEPT_CD)
					                     WHEN '50' THEN FN_CM_GET_DEPT_CD(I_TENANT_ID, 'jo', A.DEPT_CD)
					                     WHEN '90' THEN NULL END ) AS CODE
			     , B.TARGET_MEMB AS AGENT_ID
			     , A.SABUN 		 AS SABUN
			     , A.AGENT_NM    AS AGENT_NM
			     , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'center' , A.DEPT_CD) AS CENTER_NM
			 	 , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'part'   , A.DEPT_CD) AS PART_NM
				 , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'team'   , A.DEPT_CD) AS TEAM_NM_2	     
				 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND', A.TM_KIND) AS TM_KIND
			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
				 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
--				 , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'part', A.DEPT_CD) || '/' || FN_CM_GET_DEPT_NM(I_TENANT_ID, 'team', A.DEPT_CD) AS TEAM_NM
			     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, A.DEPT_CD) AS TEAM_NM
				 , FN_CM_GET_WORKPERIOD('D', A.ENTER_YMD,'') AS WORK_PERIOD
 				 , ( SELECT COUNT(T.SHEETKEY) 
				       FROM TB_HR_EVAL_RESULT_HEADER T 
				      WHERE T.TENANT_ID   = B.TENANT_ID 
				        AND T.SCHE_ID     = B.SCHE_ID 
				        AND T.TARGET_MEMB = B.TARGET_MEMB) AS EVAL_CNT
			  FROM TB_CM_USER_MASTER A
		     INNER JOIN TB_HR_EVAL_TARGET B
		        ON A.TENANT_ID = B.TENANT_ID
		       AND A.AGENT_ID  = B.TARGET_MEMB       	  
			 WHERE B.TENANT_ID = I_TENANT_ID
			   AND B.SCHE_ID   = I_SCHE_ID
				
		)  
			
		SELECT A.CODE
		     , B.TENANT_ID
		     , B.AGENT_ID
		     , B.SABUN
		     , B.AGENT_NM
		     , B.CENTER_NM
		     , B.PART_NM
		     , B.TEAM_NM_2
		     , B.TM_KIND
		     , B.AGENT_JIKGUP_NM
		     , B.AGENT_JIKCHK_NM
		     , B.TEAM_NM
		     , B.WORK_PERIOD
		     , B.EVAL_CNT		     
		  FROM TEMP_LIST1 A LEFT OUTER JOIN TEMP_LIST2 B
		    ON A.TENANT_ID = B.TENANT_ID
		   AND A.CODE = B.CODE ;	
	
	END IF;


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M03_01"
(
	  I_TENANT_ID	IN  VARCHAR2
	, I_SCHE_ID		IN  VARCHAR2
	, O_CUR_LIST    OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3020M03_01
   PURPOSE:    인사고과 평가 - 평가계획 관리 - 평가자 선택 - 평가자 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/05/31
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)     := 'SP_HR3020M03_01';
    v_work_result   VARCHAR2(1)      := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)   := '';
   -- ########## LOG DB END  #########################
    
BEGIN
	
	OPEN O_CUR_LIST FOR    
	 		 
		SELECT A.VALUE_MEMB AS AGENT_ID
			 , B.SABUN
			 , B.AGENT_NM
		     , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'center' , B.DEPT_CD) AS CENTER_NM
		 	 , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'part'   , B.DEPT_CD) AS PART_NM
			 , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'team'   , B.DEPT_CD) AS TEAM_NM_2	     
			 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND', B.TM_KIND) AS TM_KIND_NM
		     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
			 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
		     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, B.DEPT_CD) AS TEAM_NM			   
			 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'HR_TARGET_GUBUN', A.HR_TARGET_GUBUN) AS TARGET_GUBUN
			 , A.HR_TARGET_GUBUN AS TARGET_GUBUN_CD
 			 , ( SELECT COUNT(*)
			       FROM TB_HR_EVAL_MAPPING
			      WHERE TENANT_ID = I_TENANT_ID
			        AND SCHE_ID   = I_SCHE_ID
			        AND VALUE_MEMB = A.VALUE_MEMB ) AS TARGET_CNT
			 , ( SELECT COUNT(T.SHEETKEY) 
			       FROM TB_HR_EVAL_RESULT_HEADER T 
			      WHERE T.TENANT_ID  = A.TENANT_ID 
			        AND T.SCHE_ID    = A.SCHE_ID 
			        AND T.VALUE_MEMB = A.VALUE_MEMB) AS EVAL_CNT
		  FROM TB_HR_EVAL_VALUE A
		 INNER JOIN TB_CM_USER_MASTER B
		    ON A.TENANT_ID  = I_TENANT_ID
		   AND A.TENANT_ID  = B.TENANT_ID
		   AND A.VALUE_MEMB = B.AGENT_ID
		 WHERE A.TENANT_ID  = I_TENANT_ID
		   AND A.TENANT_ID  = B.TENANT_ID
		   AND A.VALUE_MEMB = B.AGENT_ID
		   AND A.SCHE_ID    = I_SCHE_ID;


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020M04_01" (
	  I_TENANT_ID    IN VARCHAR2
	, I_SCHE_ID	     IN VARCHAR2
	, I_VALUE_MEMB 	 IN VARCHAR2
	, O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3020M04_01
   PURPOSE:    인사고과평가 - 평가계획 관리 - 개별조정 - 평가대상자 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/02  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3020M04_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR    

		SELECT A.TARGET_MEMB AS AGENT_ID
			 , B.SABUN 		 AS SABUN
		     , B.AGENT_NM    AS AGENT_NM
		     , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'center' , B.DEPT_CD) AS CENTER_NM
		 	 , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'part'   , B.DEPT_CD) AS PART_NM
			 , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'team'   , B.DEPT_CD) AS TEAM_NM_2	     
			 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND', B.TM_KIND) AS TM_KIND
		     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
			 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
		     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, B.DEPT_CD) AS TEAM_NM
			 , FN_CM_GET_WORKPERIOD('D', B.ENTER_YMD,'') AS WORK_PERIOD
 			 , ( SELECT COUNT(T.SHEETKEY) 
			       FROM TB_HR_EVAL_RESULT_HEADER T 
			      WHERE T.TENANT_ID   = A.TENANT_ID 
			        AND T.SCHE_ID     = A.SCHE_ID
			        AND T.VALUE_MEMB  = A.VALUE_MEMB 
			        AND T.TARGET_MEMB = A.TARGET_MEMB) AS EVAL_CNT	
		  FROM TB_HR_EVAL_MAPPING A
		 INNER JOIN TB_CM_USER_MASTER B
		    ON A.TENANT_ID   = I_TENANT_ID
		   AND A.TENANT_ID   = B.TENANT_ID
		   AND A.TARGET_MEMB = B.AGENT_ID
		 WHERE A.TENANT_ID   = I_TENANT_ID
		   AND A.TENANT_ID   = B.TENANT_ID
		   AND A.TARGET_MEMB = B.AGENT_ID
		   AND A.SCHE_ID     = I_SCHE_ID
		   AND A.VALUE_MEMB  = I_VALUE_MEMB ;
     

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020S01_02" (
   	  I_TENANT_ID   IN VARCHAR2
	, I_SCHE_ID     IN VARCHAR2
	, I_GBN         IN VARCHAR2
	, I_VALUE_MEMB  IN VARCHAR2
	, O_CUR_LIST    OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3020S01_02
   PURPOSE:    인사고과평가(평가계획 관리) - 평가자  or 평가대상자 조회(선택)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/30  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3020S01_02';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	-- 평가대상자 선택
	IF I_GBN = 'T' THEN
	
		OPEN O_CUR_LIST FOR 
		
			SELECT FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
	               ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
	               ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
	             , A.DEPT_CD
	  		     , A.SABUN
		  		 , A.AGENT_ID
		  		 , A.AGENT_NM
		         , A.TM_KIND
			     , FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
			     , FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
			     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, A.DEPT_CD) AS TEAM_NM
			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
  			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
	          FROM TB_CM_USER_MASTER A
	         INNER JOIN TB_HR_EVAL_TARGET B 
	            ON A.TENANT_ID = I_TENANT_ID
	           AND A.TENANT_ID = B.TENANT_ID
	           AND A.AGENT_ID  = B.TARGET_MEMB
	         WHERE 1 = 1 
	           AND A.TENANT_ID = I_TENANT_ID
	           AND A.TENANT_ID = B.TENANT_ID
	           AND B.SCHE_ID   = I_SCHE_ID ;
	           
	
	-- 평가자 선택	           
	ELSIF I_GBN = 'V' THEN

		OPEN O_CUR_LIST FOR 
		
			SELECT FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
	               ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
	               ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
	             , A.DEPT_CD
	  		     , A.SABUN
		  		 , A.AGENT_ID
		  		 , A.AGENT_NM
		         , A.TM_KIND
			     , FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
			     , FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
			     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, A.DEPT_CD) AS TEAM_NM
			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
  			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
	          FROM TB_CM_USER_MASTER A
	         INNER JOIN TB_HR_EVAL_VALUE B 
	            ON A.TENANT_ID = I_TENANT_ID
	           AND A.TENANT_ID = B.TENANT_ID
	           AND A.AGENT_ID  = B.VALUE_MEMB
	         WHERE 1 = 1 
	           AND A.TENANT_ID = I_TENANT_ID
	           AND A.TENANT_ID = B.TENANT_ID
	           AND B.SCHE_ID   = I_SCHE_ID ;
	           
	-- 개별조정
	ELSIF I_GBN = 'I' THEN

		OPEN O_CUR_LIST FOR 
					   
		    SELECT FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
	               ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
	               ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
	             , A.DEPT_CD
	  		     , A.SABUN
		  		 , A.AGENT_ID
		  		 , A.AGENT_NM
		         , A.TM_KIND
			     , FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
			     , FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
			     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, A.DEPT_CD) AS TEAM_NM
			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
  			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
	          FROM TB_CM_USER_MASTER A
	         INNER JOIN TB_HR_EVAL_MAPPING B 
	            ON A.TENANT_ID = I_TENANT_ID
	           AND A.TENANT_ID = B.TENANT_ID
	           AND A.AGENT_ID  = B.TARGET_MEMB
	         WHERE 1 = 1 
	           AND A.TENANT_ID  = I_TENANT_ID
	           AND A.TENANT_ID  = B.TENANT_ID
	           AND B.SCHE_ID    = I_SCHE_ID
	           AND B.VALUE_MEMB = I_VALUE_MEMB;
		
	END IF;
    
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3040M01_01" (
	  I_TENANT_ID  IN VARCHAR2
	, I_START_DT   IN VARCHAR2
	, I_END_DT     IN VARCHAR2
	, I_SCHE_ID    IN VARCHAR2
	, I_AGENT_ID   IN VARCHAR2
	, I_STATUS_GBN IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3040M01_01
   PURPOSE:    인사고과평가 - 본인평가 - 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/13
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3040M01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR
	
		WITH TEMP_LIST1 AS (
			
			SELECT A.TENANT_ID
			     , A.SCHE_ID
			     , A.SCHE_NM
			     , A.SHEET_ID
		   	     , B.SHEET_NM
			     , A.START_DT
			     , A.END_DT
			     , A.SELF_YN
			  FROM TB_HR_EVAL_SCHE A
			 INNER JOIN TB_HR_SHEET_HEADER B
			    ON A.TENANT_ID = I_TENANT_ID
			   AND A.TENANT_ID = B.TENANT_ID
			   AND A.SHEET_ID  = B.SHEET_ID
			 WHERE A.TENANT_ID = I_TENANT_ID
			   AND A.SELF_YN   = '1'
			
		 ) , TEMP_LIST2 AS (
		 			 	
			SELECT A.TENANT_ID
				 , B.SCHE_ID		 						                                       
			     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, ( SELECT DEPT_CD 
						                                      FROM TB_CM_USER_MASTER 
					 									     WHERE TENANT_ID = I_TENANT_ID
						                                       AND AGENT_ID  = B.TARGET_MEMB)) AS TARGET_TEAM_NM						                                       
			 	 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND', ( SELECT TM_KIND 
							                                     FROM TB_CM_USER_MASTER 
					 									        WHERE TENANT_ID = I_TENANT_ID
							                                      AND AGENT_ID  = B.TARGET_MEMB)) AS TARGET_TM_KIND
				 , FN_CM_GET_AGENT_SABUN(I_TENANT_ID, B.TARGET_MEMB) AS TARGET_SABUN
				 , B.TARGET_MEMB
				 , FN_CM_GET_AGENT_NM(I_TENANT_ID, B.TARGET_MEMB) AS TARGET_NM
				 , CASE WHEN ( SELECT TO_CHAR(T.TOTAL_SCORE, 'FM990.00')
							     FROM TB_HR_EVAL_RESULT_HEADER T
							    WHERE T.TENANT_ID   = I_TENANT_ID
							      AND T.SCHE_ID     = B.SCHE_ID
							      AND T.VALUE_MEMB  = B.TARGET_MEMB
							      AND T.TARGET_MEMB = B.TARGET_MEMB
							      AND T.SELF_YN = 1) IS NULL THEN '0.00'
						ELSE ( SELECT TO_CHAR(T.TOTAL_SCORE, 'FM990.00')
							     FROM TB_HR_EVAL_RESULT_HEADER T
							    WHERE T.TENANT_ID   = I_TENANT_ID
							      AND T.SCHE_ID     = B.SCHE_ID
							      AND T.VALUE_MEMB  = B.TARGET_MEMB
							      AND T.TARGET_MEMB = B.TARGET_MEMB
							      AND T.SELF_YN = 1) END AS SELF_SCORE			
				 , CASE WHEN ( SELECT COUNT(T.SHEETKEY)
				                 FROM TB_HR_EVAL_RESULT_HEADER T
				                WHERE T.TENANT_ID = I_TENANT_ID
							      AND T.SCHE_ID     = B.SCHE_ID
							      AND T.VALUE_MEMB  = B.TARGET_MEMB
							      AND T.TARGET_MEMB = B.TARGET_MEMB
							      AND T.SELF_YN = 1 ) > 0 THEN '완료' ELSE '미평가' END AS STATUS_NM
				 , CASE WHEN ( SELECT COUNT(T.SHEETKEY)
				                 FROM TB_HR_EVAL_RESULT_HEADER T
				                WHERE T.TENANT_ID = I_TENANT_ID
							      AND T.SCHE_ID     = B.SCHE_ID
							      AND T.VALUE_MEMB  = B.TARGET_MEMB
							      AND T.TARGET_MEMB = B.TARGET_MEMB
							      AND T.SELF_YN = 1 ) > 0 THEN '20' ELSE '10' END AS STATUS_CD
			 FROM TB_CM_USER_MASTER A
			INNER JOIN TB_HR_EVAL_MAPPING B
			   ON A.TENANT_ID = I_TENANT_ID
			  AND A.TENANT_ID = B.TENANT_ID
			  AND A.AGENT_ID  = B.TARGET_MEMB
		    WHERE A.TENANT_ID = I_TENANT_ID
		      AND A.TENANT_ID = B.TENANT_ID
			  AND ( ( I_SCHE_ID  IS NULL AND 1 = 1 ) OR I_SCHE_ID  IS NOT NULL AND INSTR( I_SCHE_ID,  B.SCHE_ID ) > 0)
		      AND ( ( I_AGENT_ID IS NULL AND 1 = 1)  OR I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID, B.TARGET_MEMB) > 0)
		 	 
		 )
		
	
	
		SELECT DISTINCT B.TARGET_MEMB
		     , A.TENANT_ID
			 , A.SCHE_ID
			 , A.SCHE_NM
			 , A.SHEET_ID
		   	 , A.SHEET_NM
			 , TO_CHAR(TO_DATE(A.START_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS START_DT
			 , TO_CHAR(TO_DATE(A.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD')   AS END_DT			 
			 , A.SELF_YN
		     , B.TARGET_TEAM_NM
		     , B.TARGET_TM_KIND
		     , B.TARGET_SABUN		     
		     , B.TARGET_NM
		     , B.SELF_SCORE
		     , B.STATUS_NM
		     , B.STATUS_CD
		  FROM TEMP_LIST1 A INNER JOIN TEMP_LIST2 B
		    ON A.TENANT_ID = I_TENANT_ID
		   AND A.TENANT_ID = B.TENANT_ID
		   AND A.SCHE_ID   = B.SCHE_ID		  
		 WHERE A.TENANT_ID = I_TENANT_ID		   
	       AND ( ( I_SCHE_ID  IS NULL AND 1 = 1 )  OR I_SCHE_ID    IS NOT NULL AND INSTR( I_SCHE_ID,  A.SCHE_ID ) > 0)
		   AND ( ( I_AGENT_ID IS NULL AND 1 = 1 )  OR I_AGENT_ID   IS NOT NULL AND INSTR( I_AGENT_ID, B.TARGET_MEMB ) > 0)
		   AND ( ( I_STATUS_GBN IS NULL AND 1 = 1) OR I_STATUS_GBN IS NOT NULL AND INSTR( I_STATUS_GBN, B.STATUS_CD) > 0)
		   AND A.START_DT >= I_START_DT
		   AND A.END_DT   <= I_END_DT   ;
	 
	


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3050M01_02" (
	  I_TENANT_ID IN VARCHAR2
	, I_SCHE_ID   IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3050M01_02
   PURPOSE:    인사고과평가 - 고가평가결과 - 탭 조회(개인별)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/14  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3050M01_02';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR    
	
		WITH TEMP_LIST AS (
			
			SELECT A.TENANT_ID
			     , B.SCHE_ID
				 , FN_CM_GET_DEPT_INFO(I_TENANT_ID, A.DEPT_CD) AS VALUE_TEAM_NM				   
				 , A.SABUN AS VALUE_SABUN
				 , B.VALUE_MEMB
				 , FN_CM_GET_AGENT_NM(I_TENANT_ID, B.VALUE_MEMB) AS VALUE_NM		 						                                       
				 , FN_CM_GET_DEPT_INFO(I_TENANT_ID, ( SELECT DEPT_CD 
					 									      FROM TB_CM_USER_MASTER
					 									     WHERE TENANT_ID = I_TENANT_ID
					 									       AND AGENT_ID  = B.TARGET_MEMB)) AS TARGET_TEAM_NM
			 	 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND', ( SELECT TM_KIND 
							                                     FROM TB_CM_USER_MASTER 
					 									        WHERE TENANT_ID = I_TENANT_ID
							                                      AND AGENT_ID  = B.TARGET_MEMB)) AS TARGET_TM_KIND
				 , FN_CM_GET_AGENT_SABUN(I_TENANT_ID, B.TARGET_MEMB) AS TARGET_SABUN
				 , B.TARGET_MEMB
				 , FN_CM_GET_AGENT_NM(I_TENANT_ID, B.TARGET_MEMB) AS TARGET_NM
				 , CASE WHEN ( SELECT TO_CHAR(T.TOTAL_SCORE, 'FM990.00')
							     FROM TB_HR_EVAL_RESULT_HEADER T
							    WHERE T.TENANT_ID   = I_TENANT_ID
							      AND T.SCHE_ID     = B.SCHE_ID
							      AND T.VALUE_MEMB  = B.TARGET_MEMB
							      AND T.TARGET_MEMB = B.TARGET_MEMB
							      AND T.SELF_YN = 1) IS NULL THEN '0.00'
						ELSE ( SELECT TO_CHAR(T.TOTAL_SCORE, 'FM990.00')
							     FROM TB_HR_EVAL_RESULT_HEADER T
							    WHERE T.TENANT_ID   = I_TENANT_ID
							      AND T.SCHE_ID     = B.SCHE_ID
							      AND T.VALUE_MEMB  = B.TARGET_MEMB
							      AND T.TARGET_MEMB = B.TARGET_MEMB
							      AND T.SELF_YN = 1) END 			AS SELF_SCORE						      
				 , CASE WHEN ( SELECT TO_CHAR(T.TOTAL_SCORE, 'FM990.00')
							     FROM TB_HR_EVAL_RESULT_HEADER T
							    WHERE T.TENANT_ID   = I_TENANT_ID
							      AND T.SCHE_ID     = B.SCHE_ID
							      AND T.VALUE_MEMB  = B.VALUE_MEMB
							      AND T.TARGET_MEMB = B.TARGET_MEMB
							      AND T.SELF_YN = 0) IS NULL THEN '0.00'
						ELSE ( SELECT TO_CHAR(T.TOTAL_SCORE, 'FM990.00')
							     FROM TB_HR_EVAL_RESULT_HEADER T
							    WHERE T.TENANT_ID   = I_TENANT_ID
							      AND T.SCHE_ID     = B.SCHE_ID
							      AND T.VALUE_MEMB  = B.VALUE_MEMB
							      AND T.TARGET_MEMB = B.TARGET_MEMB
							      AND T.SELF_YN = 0) END AS EVAL_SCORE
				 , ( SELECT SUM(T.SCORE)
					       FROM TB_HR_SHEET_DETAIL T
					      WHERE T.TENANT_ID = I_TENANT_ID
					        AND T.SHEET_ID  = C.SHEET_ID) AS TOTAL_SCORE
				 , (SELECT COUNT(T.SHEETKEY)
			          FROM TB_HR_EVAL_RESULT_HEADER T
			         WHERE T.TENANT_ID   = I_TENANT_ID
			           AND T.SCHE_ID     = B.SCHE_ID
			           AND T.VALUE_MEMB  = B.VALUE_MEMB
			           AND T.TARGET_MEMB = B.TARGET_MEMB
			           AND T.SELF_YN = 0) AS RESULT_CNT
			  FROM TB_CM_USER_MASTER A
			 INNER JOIN TB_HR_EVAL_MAPPING B
			    ON A.TENANT_ID = I_TENANT_ID
			   AND A.TENANT_ID = B.TENANT_ID
			   AND A.AGENT_ID  = B.VALUE_MEMB
		     INNER JOIN TB_HR_EVAL_SCHE C
			    ON B.TENANT_ID = C.TENANT_ID
			   AND B.SCHE_ID   = C.SCHE_ID
		     WHERE A.TENANT_ID = I_TENANT_ID
			   AND INSTR( I_SCHE_ID, B.SCHE_ID) > 0

		)
		
		
		
		SELECT A.TENANT_ID
		     , A.SCHE_ID
		     , A.VALUE_TEAM_NM
		     , A.VALUE_SABUN
		     , A.VALUE_MEMB
		     , A.VALUE_NM
		     , A.TARGET_TEAM_NM
		     , A.TARGET_TM_KIND
		     , A.TARGET_SABUN
		     , A.TARGET_MEMB
		     , A.TARGET_NM
		     , A.SELF_SCORE
		     , A.EVAL_SCORE
		     , TO_CHAR(( A.EVAL_SCORE / A.TOTAL_SCORE ) * 100, 'FM990.00') AS CONVERT_SCORE
		  FROM TEMP_LIST A 
		 WHERE A.RESULT_CNT > 0;
		

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_KPI1010S01_06" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SCOPE_GUBUN    IN VARCHAR2 /* 공통코드 (SCOPE_GUBUN) 에 의함*/
    ,I_ITEM_ID	      IN VARCHAR2
    ,I_DEPT_CD        IN VARCHAR2 /* 관리소속 콤마구분자로 연결된 스트링 */
    ,I_GBN			  IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI1010S01_06
   PURPOSE:    관리소속 등록 처리 
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/19  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1010S01_06';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 1. 관리소속  등록
-- ********************************************************************************             

	IF	I_GBN = 'C' THEN
	INSERT INTO TB_CM_ACCESS_SCOPE (
		TENANT_ID , SCOPE_GUBUN, ITEM_ID, DEPT_CD
	)
	SELECT  I_TENANT_ID   AS TENANT_ID
			, I_SCOPE_GUBUN AS SCOPE_GUBUN
			, I_ITEM_ID     AS ITEM_ID
			, SPLIT_VALUE   AS DEPT_CD
	FROM  TABLE(FN_CM_GET_TB_SPLIT(I_DEPT_CD, ','))   
	WHERE SPLIT_VALUE  IS NOT NULL ;

-- ********************************************************************************
-- 2. 관리소속  삭제
-- ********************************************************************************             
	
	ELSIF I_GBN = 'D' THEN
	
	  DELETE FROM TB_CM_ACCESS_SCOPE 
	    WHERE TENANT_ID   = I_TENANT_ID 
	      AND SCOPE_GUBUN = I_SCOPE_GUBUN
	      AND ITEM_ID     = I_ITEM_ID 
	      AND DEPT_CD IN (SELECT SPLIT_VALUE 
	      				  FROM TABLE(FN_CM_GET_TB_SPLIT(I_DEPT_CD, ','))   
						  WHERE SPLIT_VALUE  IS NOT NULL );
	
	END IF;  

	COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.

    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1040S01_03 (
      I_TENANT_ID       IN VARCHAR2     
    , I_LOGIN_ID        IN VARCHAR2  /* 로그인사용자ID */
    , I_CUD_GUBUN       IN VARCHAR2  /* C/U/D  */    
    , I_COSTVALUE_ID    IN VARCHAR2
    , I_COSTVALUE_NM    IN VARCHAR2    
    , I_STD_MONTH       IN VARCHAR2   
    , I_SCHE_YN         IN VARCHAR2
	, I_CALL_IB 		IN VARCHAR2
	, I_CALL_OB 		IN VARCHAR2
	, I_CALL_INTERNAL_S IN VARCHAR2
	, I_CALL_INTENAL_R  IN VARCHAR2
	, I_CALL_CONSULT 	IN VARCHAR2
	, I_CALL_TRANSFER_S IN VARCHAR2
	, I_CALL_TRANSFER_R IN VARCHAR2
	, I_CALL_CONFERENCE IN VARCHAR2
	, I_TIME_IB 		IN VARCHAR2
	, I_TIME_OB 		IN VARCHAR2
	, I_TIME_INTERNAL_S IN VARCHAR2
	, I_TIME_INTERNAL_R IN VARCHAR2
	, I_TIME_CONSULT 	IN VARCHAR2
	, I_TIME_TRANSFER_S IN VARCHAR2
	, I_TIME_TRANSFER_R IN VARCHAR2
	, I_TIME_CONFERENCE IN VARCHAR2
	, I_TIME_READY 	    IN VARCHAR2
	, I_TIME_ACW 	    IN VARCHAR2    
    , I_DEPT_CD			IN VARCHAR2 /* 대상소속 DEPT CD LIST */   
    , I_CONDUCT_CODE	IN VARCHAR2 /* 근태코드  LIST */      
    , O_CUR_LIST      OUT SYS_REFCURSOR     
) AS 
/******************************************************************************
   NAME:       SP_KPI1040S01_03
   PURPOSE:    생산성평가 - 평가기준관리-저장

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/11  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1040S01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

     V_COSTVALUE_ID  VARCHAR2(20) := I_COSTVALUE_ID;
     V_DUP_CNT		 NUMBER :=0 ;

 BEGIN
 
-- ********************************************************************************
-- 0.평가기준관리  등록/수정
-- ********************************************************************************    
  IF (I_CUD_GUBUN ='I') THEN
	 SELECT LPAD(NVL(MAX(COSTVALUE_ID),0)+1 ,10, '0') 
	   INTO V_COSTVALUE_ID
	   FROM TB_KPI_COSTVALUE_STD_HEADER A
	 WHERE  A.TENANT_ID = I_TENANT_ID 
	     ;
  END IF;
  
-- ********************************************************************************
-- 0.동일소속 중복인지 체크
-- ********************************************************************************   
	SELECT COUNT(B.DEPT_CD) INTO V_DUP_CNT
	  FROM TB_KPI_COSTVALUE_STD_HEADER A
	  INNER JOIN TB_KPI_COSTVALUE_STD_DEPT B ON ( A.TENANT_ID = B.TENANT_ID AND A.COSTVALUE_ID = B.COSTVALUE_ID )
	 WHERE A.TENANT_ID = I_TENANT_ID
	   AND A.COSTVALUE_ID != V_COSTVALUE_ID /* 현재 등록건은 제외하고 중복체크해야 하므로 */
	   AND A.STD_MONTH = I_STD_MONTH 	 
	   AND INSTR(I_DEPT_CD,B.DEPT_CD)>0 ;

   IF V_DUP_CNT > 0 THEN	   
      V_COSTVALUE_ID :='DEPT_EXISTS' ;
   ELSE 
    MERGE INTO TB_KPI_COSTVALUE_STD_HEADER T
    USING (SELECT  I_TENANT_ID      AS TENANT_ID
                  , V_COSTVALUE_ID  AS COSTVALUE_ID
			    , I_COSTVALUE_NM    AS COSTVALUE_NM 
			    , I_STD_MONTH       AS STD_MONTH
			    , NVL(I_SCHE_YN,0)  AS SCHE_YN
				, NVL(I_CALL_IB			,0) AS CALL_IB
				, NVL(I_CALL_OB         ,0) AS CALL_OB
				, NVL(I_CALL_INTERNAL_S ,0) AS CALL_INTERNAL_S
				, NVL(I_CALL_INTENAL_R  ,0) AS CALL_INTENAL_R
				, NVL(I_CALL_CONSULT 	,0) AS CALL_CONSULT
				, NVL(I_CALL_TRANSFER_S ,0) AS CALL_TRANSFER_S
				, NVL(I_CALL_TRANSFER_R ,0) AS CALL_TRANSFER_R
				, NVL(I_CALL_CONFERENCE ,0) AS CALL_CONFERENCE
				, NVL(I_TIME_IB 		,0) AS TIME_IB
				, NVL(I_TIME_OB 		,0) AS TIME_OB
				, NVL(I_TIME_INTERNAL_S ,0) AS TIME_INTERNAL_S
				, NVL(I_TIME_INTERNAL_R ,0) AS TIME_INTERNAL_R
				, NVL(I_TIME_CONSULT 	,0) AS TIME_CONSULT
				, NVL(I_TIME_TRANSFER_S ,0) AS TIME_TRANSFER_S
				, NVL(I_TIME_TRANSFER_R ,0) AS TIME_TRANSFER_R
				, NVL(I_TIME_CONFERENCE ,0) AS TIME_CONFERENCE
				, NVL(I_TIME_READY 	    ,0) AS TIME_READY
				, NVL(I_TIME_ACW 	    ,0) AS TIME_ACW
             FROM DUAL ) S
    ON (  T.TENANT_ID      = S.TENANT_ID 
      AND T.COSTVALUE_ID   = S.COSTVALUE_ID)
    WHEN MATCHED THEN
      UPDATE SET COSTVALUE_NM    = S.COSTVALUE_NM 
                ,SCHE_YN 		 = S.SCHE_YN
				,CALL_IB    	 = S.CALL_IB
				,CALL_OB    	 = S.CALL_OB
				,CALL_INTERNAL_S = S.CALL_INTERNAL_S
				,CALL_INTENAL_R  = S.CALL_INTENAL_R
				,CALL_CONSULT    = S.CALL_CONSULT
				,CALL_TRANSFER_S = S.CALL_TRANSFER_S
				,CALL_TRANSFER_R = S.CALL_TRANSFER_R
				,CALL_CONFERENCE = S.CALL_CONFERENCE
				,TIME_IB 		 = S.TIME_IB
				,TIME_OB 		 = S.TIME_OB
				,TIME_INTERNAL_S = S.TIME_INTERNAL_S
				,TIME_INTERNAL_R = S.TIME_INTERNAL_R
				,TIME_CONSULT  = S.TIME_CONSULT
				,TIME_TRANSFER_S = S.TIME_TRANSFER_S
				,TIME_TRANSFER_R = S.TIME_TRANSFER_R
				,TIME_CONFERENCE = S.TIME_CONFERENCE
				,TIME_READY 	 = S.TIME_READY
				,TIME_ACW   	 = S.TIME_ACW
                ,MODIFY_AGENT_ID = I_LOGIN_ID
                ,MODIFY_DT 	 	 = SYSTIMESTAMP
    WHEN NOT MATCHED THEN
      INSERT(  	 TENANT_ID 
				,COSTVALUE_ID 
				,COSTVALUE_NM 
				,STD_MONTH 
				,SCHE_YN 
				,CALL_IB 
				,CALL_OB 
				,CALL_INTERNAL_S 
				,CALL_INTENAL_R 
				,CALL_CONSULT 
				,CALL_TRANSFER_S 
				,CALL_TRANSFER_R 
				,CALL_CONFERENCE 
				,TIME_IB 
				,TIME_OB 
				,TIME_INTERNAL_S 
				,TIME_INTERNAL_R 
				,TIME_CONSULT 
				,TIME_TRANSFER_S 
				,TIME_TRANSFER_R 
				,TIME_CONFERENCE 
				,TIME_READY 
				,TIME_ACW 
				,PROC_STATUS 
				,CREATE_AGENT_ID 
				,CREATE_DT 
				,MODIFY_AGENT_ID 
				,MODIFY_DT 

      ) VALUES ( S.TENANT_ID 
				,S.COSTVALUE_ID 
				,S.COSTVALUE_NM 
				,S.STD_MONTH 
				,S.SCHE_YN 
				,S.CALL_IB 
				,S.CALL_OB 
				,S.CALL_INTERNAL_S 
				,S.CALL_INTENAL_R 
				,S.CALL_CONSULT 
				,S.CALL_TRANSFER_S 
				,S.CALL_TRANSFER_R 
				,S.CALL_CONFERENCE 
				,S.TIME_IB 
				,S.TIME_OB 
				,S.TIME_INTERNAL_S 
				,S.TIME_INTERNAL_R 
				,S.TIME_CONSULT 
				,S.TIME_TRANSFER_S 
				,S.TIME_TRANSFER_R 
				,S.TIME_CONFERENCE 
				,S.TIME_READY 
				,S.TIME_ACW 
				,'10' 
                ,I_LOGIN_ID
                ,SYSTIMESTAMP
                ,I_LOGIN_ID
                ,SYSTIMESTAMP
      )  ;
      
    COMMIT; 
 

-- ********************************************************************************
-- 1.대상소속 등록
-- ********************************************************************************             
	  DELETE FROM TB_KPI_COSTVALUE_STD_DEPT WHERE TENANT_ID = I_TENANT_ID AND COSTVALUE_ID = V_COSTVALUE_ID ;
	  COMMIT;
	  
	  INSERT INTO TB_KPI_COSTVALUE_STD_DEPT (
	  	TENANT_ID , COSTVALUE_ID, DEPT_CD
	  )
	  SELECT   I_TENANT_ID     AS TENANT_ID
		      , V_COSTVALUE_ID AS COSTVALUE_ID
	          , SPLIT_VALUE   AS DEPT_CD
		 FROM  TABLE(FN_CM_GET_TB_SPLIT(I_DEPT_CD, ','))   
	 WHERE SPLIT_VALUE  IS NOT NULL ;
	 COMMIT;

-- ********************************************************************************
-- 2.근태정보 등록
-- ********************************************************************************             
	  DELETE FROM TB_KPI_COSTVALUE_STD_CONDUCT WHERE TENANT_ID = I_TENANT_ID AND COSTVALUE_ID = V_COSTVALUE_ID ;
	  COMMIT;
	  
	  INSERT INTO TB_KPI_COSTVALUE_STD_CONDUCT (
	  	TENANT_ID , COSTVALUE_ID, CONDUCT_CODE
	  )
	  SELECT   I_TENANT_ID     AS TENANT_ID
		      , V_COSTVALUE_ID AS COSTVALUE_ID
	          , SPLIT_VALUE   AS CONDUCT_CODE
		 FROM  TABLE(FN_CM_GET_TB_SPLIT(I_CONDUCT_CODE, ','))   
	 WHERE SPLIT_VALUE  IS NOT NULL ;
	 COMMIT;
	 
END IF;
	 
-- ********************************************************************************
-- 9.등록 PK 리턴
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
     SELECT V_COSTVALUE_ID AS KEY_ID
       FROM DUAL ;
       	 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

create or replace PROCEDURE SP_QA3020M01_01 (
   I_TENANT_ID       IN VARCHAR2
 , I_LOGIN_DEPT_CD	 IN VARCHAR2
 , I_TIMES_ID        IN VARCHAR2  
 , I_FRM_DT			 IN VARCHAR2
 , I_END_DT			 IN VARCHAR2
 , I_SHEET_ID		 IN VARCHAR2
 , I_DEPT_CD		 IN VARCHAR2
 , I_AGENT_ID		 IN VARCHAR2
 , I_QA_VALUE_STATUS IN VARCHAR2
 , I_NOTI_YN         IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA3020M01_01
   PURPOSE:    평가 승인 관리 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/03	JIN 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	SELECT  0 AS ICON
			,CASE WHEN LEVEL = 1 THEN TO_CHAR(ROWNUM)||'.'||TO_CHAR(LEVEL) ELSE TO_CHAR(ROWNUM-1) END AS TREE
			,(SELECT S.TIMES_NM FROM TB_QA_VALUE_TIMES S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS TIMES_NM
			,A.RECORD_ID
			,FN_CM_STRING_FORMAT(A.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
			,FN_CM_GET_DEPT_INFO(A.TENANT_ID, C.DEPT_CD) AS DEPT_INFO
			,C.SABUN
			,A.SHEET_ID
			,C.AGENT_NM
			,A.TOTAL_SCORE
			,A.CONVERT_SCORE
			,FN_CM_GET_CODE_NM(A.TENANT_ID, 'QA_VALUE_STATUS', A.QA_VALUE_STATUS) AS QA_VALUE_STATUS_NM
			,A.QA_VALUE_STATUS
			,A.SHEETKEY
			,B.MANAGER_ID
			,FN_CM_GET_AGENT_NM(A.TENANT_ID, A.VALUE_MEMB) AS QAA_NM			-- 평가자
			,FN_CM_GET_AGENT_NM(A.TENANT_ID, B.MANAGER_ID) AS MANAGER_NM		-- 확인자 ID 
			,TO_CHAR(B.SEUNGIN_DT, 'YYYY-MM-DD') AS SEUNGIN_DT					-- 승인일시(DATE형)
			,TO_CHAR(B.BANRYU_DT, 'YYYY-MM-DD') AS BANRYU_DT					-- 반려일시(DATE형)
			,A.NOTI_YN 															-- 공지여부
			,A.CONFIRM_YN														-- 상담사확인
			,B.REQ_REVALUE_YN													-- 재평가 요청 여부
			,A.REVALUE_SHEETKEY													-- 재평가 SHEETKEY
			FROM TB_QA_VALUE_RESULT_HEADER A
			LEFT JOIN TB_QA_VALUE_RESULT_PROC B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEETKEY = B.SHEETKEY)
			INNER JOIN TB_CM_USER_MASTER_HISTORY C ON (A.TENANT_ID = C.TENANT_ID AND SUBSTR(A.VALUE_YMD,0,6) = C.STD_MONTH AND A.AGENT_ID = C.AGENT_ID)
			WHERE A.TENANT_ID = I_TENANT_ID
			  AND (( I_TIMES_ID IS NULL AND 1=1 ) OR (I_TIMES_ID IS NOT NULL AND INSTR(NULL, A.TIMES_ID) > 0))
			  AND A.VALUE_YMD BETWEEN I_FRM_DT AND I_END_DT
			  AND EXISTS (SELECT 1
				  		  FROM TB_CM_ACCESS_SCOPE S
						  WHERE S.TENANT_ID = A.TENANT_ID
							AND S.SCOPE_GUBUN = 50		-- 평가계획 관련 ITEM
							AND S.ITEM_ID = A.TIMES_ID
						    AND S.DEPT_CD     = I_LOGIN_DEPT_CD
							AND (( I_DEPT_CD IS NULL AND 1=1 ) OR (I_DEPT_CD IS NOT NULL AND INSTR(I_DEPT_CD, S.DEPT_CD) > 0))
						)
			  AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, A.AGENT_ID) > 0))
			  AND (( I_QA_VALUE_STATUS IS NULL AND 1=1 ) OR (I_QA_VALUE_STATUS IS NOT NULL AND A.QA_VALUE_STATUS = I_QA_VALUE_STATUS))
			  AND (( I_NOTI_YN IS NULL AND 1=1 ) OR (I_NOTI_YN IS NOT NULL AND A.NOTI_YN = I_NOTI_YN))
			START WITH A.REVALUE_SHEETKEY IS NULL
			CONNECT BY PRIOR A.SHEETKEY = A.REVALUE_SHEETKEY
			ORDER BY TREE
			
;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA3030M01_01 (
   I_TENANT_ID       IN VARCHAR2
 , I_LOGIN_DEPT_CD	 IN VARCHAR2
 , I_TIMES_ID        IN VARCHAR2  
 , I_FRM_DT			 IN VARCHAR2
 , I_END_DT			 IN VARCHAR2
 , I_DEPT_CD		 IN VARCHAR2
 , I_AGENT_ID		 IN VARCHAR2
 , I_NOTI_YN         IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA3030M01_01
   PURPOSE:    평가 결과 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/10	JIN 
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	SELECT (SELECT S.TIMES_NM FROM TB_QA_VALUE_TIMES S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS TIMES_NM
			, 0 AS ICON
			,CASE WHEN LEVEL = 1 THEN TO_CHAR(ROWNUM)||'.'||TO_CHAR(LEVEL) ELSE TO_CHAR(ROWNUM-1) END AS TREE
			,FN_CM_GET_DEPT_INFO(C.TENANT_ID, C.DEPT_CD) AS DEPT_INFO
			,C.SABUN
			,C.AGENT_NM
			,A.RECORD_ID
			,FN_CM_STRING_FORMAT(A.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
			,A.TOTAL_SCORE
			,A.CONVERT_SCORE
			,A.SHEETKEY
			,D.SHEETKEY AS RE_SHEETKEY
			,D.TOTAL_SCORE AS RE_TOTAL_SCORE
			,D.CONVERT_SCORE AS RE_CONVERT_SCORE
			,FN_CM_STRING_FORMAT(D.VALUE_YMD, '@@@@-@@-@@') AS RE_VALUE_YMD
			,B.REQ_REVALUE_YN
			,TO_CHAR(B.REQ_REVALUE_DT, 'YYYY-MM-DD') AS REQ_REVALUE_DT
			,A.REVALUE_SHEETKEY
	FROM TB_QA_VALUE_RESULT_HEADER A
	LEFT JOIN TB_QA_VALUE_RESULT_PROC B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEETKEY = B.SHEETKEY)
	INNER JOIN TB_CM_USER_MASTER_HISTORY C ON (A.TENANT_ID = C.TENANT_ID AND SUBSTR(A.VALUE_YMD,0,6) = C.STD_MONTH AND A.AGENT_ID = C.AGENT_ID)
	LEFT JOIN TB_QA_VALUE_RESULT_HEADER D ON (A.TENANT_ID = D.TENANT_ID AND A.REVALUE_SHEETKEY = D.SHEETKEY)
	WHERE A.TENANT_ID = I_TENANT_ID
		AND A.VALUE_YMD BETWEEN I_FRM_DT AND I_END_DT	
		AND (( I_TIMES_ID IS NULL AND 1=1 ) OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
		AND (( I_NOTI_YN IS NULL AND 1=1 ) OR (I_NOTI_YN IS NOT NULL AND A.NOTI_YN = I_NOTI_YN))
		AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, A.AGENT_ID) > 0))
		AND A.QA_VALUE_STATUS = '40'
		AND EXISTS (SELECT 1
					FROM TB_CM_ACCESS_SCOPE S
					WHERE S.TENANT_ID = A.TENANT_ID
						AND S.SCOPE_GUBUN = 50		-- 평가계획 관련 ITEM
						AND S.ITEM_ID = A.TIMES_ID
					    AND S.DEPT_CD     = I_LOGIN_DEPT_CD
						AND (( I_DEPT_CD IS NULL AND 1=1 ) OR (I_DEPT_CD IS NOT NULL AND INSTR(I_DEPT_CD, S.DEPT_CD) > 0))
					)
	START WITH A.REVALUE_SHEETKEY IS NULL
	CONNECT BY PRIOR A.SHEETKEY = A.REVALUE_SHEETKEY
	ORDER BY TREE
							;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA5010S02_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_AGENT_ID 	   IN VARCHAR2
 , I_DT_FROM	   IN VARCHAR2
 , I_DT_TO		   IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5010S02_02
   PURPOSE:    코칭 등록 - 코칭 리스트 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5010S02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT A.COACHING_ID
    		,FN_CM_GET_AGENT_NM(A.TENANT_ID, A.COACHING_MEMB) AS COACHING_MEMB_NM
    		,A.COACHING_MEMB
    		,FN_CM_GET_CODE_NM(A.TENANT_ID,'COACHING_GUBUN',A.COACHING_GUBUN) AS COACHING_GUBUN_NM
    		,A.COACHING_GUBUN
    		,FN_CM_GET_CODE_NM(A.TENANT_ID,'COACHING_REASON',A.COACHING_REASON) AS COACHING_REASON_NM
    		,A.COACHING_REASON
    		,FN_CM_GET_CODE_NM(A.TENANT_ID,'COACHING_TYPE',A.COACHING_TYPE) AS COACHING_TYPE_NM
    		,A.COACHING_TYPE
    		,FN_CM_GET_TIME_FORMAT(FN_CM_GET_TIME_DIFF_TO_SECOND(A.START_TM, A.END_TM)) AS COACHING_TM
    		,FN_CM_STRING_FORMAT(A.START_TM,'@@:@@') AS START_TM
    		,FN_CM_STRING_FORMAT(A.END_TM, '@@:@@') AS END_TM
    		,FN_CM_STRING_FORMAT(A.COACHING_YMD ,'@@@@-@@-@@') AS COACHING_YMD
    		,A.GONGMU_YN
    		,A.COACHING_TEXT
    		,A.CREATE_AGENT_ID
            ,FN_CM_GET_DEPT_INFO(B.TENANT_ID, B.DEPT_CD) as DEPT_INFO
    FROM TB_QA_COACHING A INNER JOIN TB_CM_USER_MASTER B on
        A.TENANT_ID = B.TENANT_ID AND  A.TARGET_MEMB = B.AGENT_ID
    	WHERE A.TENANT_ID = I_TENANT_ID
    	AND A.TARGET_MEMB = I_AGENT_ID
    	AND A.COACHING_YMD BETWEEN CASE WHEN I_DT_FROM IS NOT NULL THEN I_DT_FROM ELSE A.COACHING_YMD END 
    							AND CASE WHEN I_DT_TO IS NOT NULL THEN I_DT_TO ELSE A.COACHING_YMD END

      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_TIBERO_TEST
(
  I_TENANT_ID   IN  VARCHAR2
 , I_TIMES_ID   IN  VARCHAR2
 , I_SHEETKEY	IN	VARCHAR2
 , I_AGENT_ID   IN  VARCHAR2
 , I_RECORD_ID  IN  VARCHAR2
 , O_CUR_LIST        OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM1010M01_01
   PURPOSE:    근태 현황 상세 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/12/27   
******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_TIBERO_TEST';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
BEGIN

	OPEN O_CUR_LIST FOR
    SELECT A.TIMES_ID
			,A.TIMES_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID, 'QA_EVAL_TYPE', A.QA_EVAL_TYPE) AS QA_EVAL_TYPE
			,FN_CM_STRING_FORMAT(A.VALUE_FRM_DT, '@@@@-@@-@@') AS VALUE_FRM_DT
			,FN_CM_STRING_FORMAT(A.VALUE_END_DT, '@@@@-@@-@@') AS VALUE_END_DT
			,B.SHEET_ID
			,B.SHEET_NM
			,FN_CM_GET_DEPT_INFO(A.TENANT_ID, C.DEPT_CD) AS DEPT_INFO
			,C.AGENT_ID
			,C.AGENT_NM
			,C.SABUN AS AGENT_SABUN
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',C.AGENT_JIKGUP) AS AGENT_JIKGUP
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',C.AGENT_JIKCHK) AS AGENT_JIKCHK
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',C.TM_KIND) AS TM_KIND
			,FN_CM_GET_AGENT_SABUN(A.TENANT_ID, E.VALUE_MEMB) AS VALUE_MEMB
			,FN_CM_GET_AGENT_NM(A.TENANT_ID, E.VALUE_MEMB) AS VALUE_MEMB_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'QA_VALUE_STATUS', E.QA_VALUE_STATUS) AS QA_VALUE_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'QA_TM_KIND', E.QA_TM_KIND) AS QA_TM_KIND
			,FN_CM_STRING_FORMAT(E.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
			,E.TOTAL_COMMENT
			,E.QA_VALUE_STATUS
			,FN_CM_GET_AGENT_NM(A.TENANT_ID,E.VALUE_MEMB)AS QAA_NM
	FROM TB_QA_VALUE_TIMES A
	INNER JOIN TB_QA_SHEET_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
	INNER JOIN (SELECT S.* FROM TB_CM_USER_MASTER S 
					WHERE S.TENANT_ID = I_TENANT_ID
						AND S.AGENT_ID = I_AGENT_ID) C
	ON (A.TENANT_ID = C.TENANT_ID)
	INNER JOIN (SELECT S.* FROM TB_QA_AUDIO_LOG S 
					WHERE S.TENANT_ID = I_TENANT_ID
						AND S.RECORD_ID = I_RECORD_ID) D
	ON (A.TENANT_ID = D.TENANT_ID)
	LEFT JOIN TB_QA_VALUE_RESULT_HEADER E
	ON (A.TENANT_ID = E.TENANT_ID AND A.TIMES_ID = E.TIMES_ID)
	WHERE A.TENANT_ID = I_TENANT_ID
		AND A.TIMES_ID = I_TIMES_ID
		AND E.SHEETKEY = CASE WHEN I_SHEETKEY IS NULL THEN '' ELSE I_SHEETKEY END
;


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    
	END;

END;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_LOGIN_01 (
  I_TENANT_ID      IN     VARCHAR2
 ,I_LOGIN_ID       IN     VARCHAR2
 ,I_LOGIN_PW       IN     VARCHAR2
 ,I_LOGIN_IP       IN     VARCHAR2
 ,O_CUR_LIST       OUT     SYS_REFCURSOR
)AS 
/******************************************************************************
   NAME:       SP_UC_GET_LOGIN_01
   PURPOSE:    AGRO LOGIN 처리 후 결과 리턴

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/07/13 YAKIM 
    1.1         2016/09/08 YAKIM           SABUN 으로 로그인 처리
    1.2         2016/12/29 YAKIM           GRANT_ID, TENANT_ID,AGENT_JIKGUP 추가
    1.3         2017/02/14 YAKIM           퇴직자 처리
    1.4 		2017/04/17 YAKIM 		      직책 추가
    1.5         2017/05/11 YAKIM		      권한설정의 접근권한에 따라 처리하기 위해 로그인사용자의 조직정보 추가함
    1.6         2017/05/18 YAKIM           비밀번호정책반영 - 최대암호사용기간/최초로그인시 암호변경 여부 추가
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_LOGIN_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
   V_AGENT_ID	        TB_CM_USER_MASTER.AGENT_ID%TYPE         :='';
   V_AGENT_NM	        TB_CM_USER_MASTER.AGENT_NM%TYPE         :='';
   V_AGENT_PW	        TB_CM_USER_MASTER.AGENT_PW%TYPE         :='';
   V_SABUN	            TB_CM_USER_MASTER.SABUN%TYPE            :='';
   V_LOGIN_TRY_COUNT	TB_CM_USER_MASTER.LOGIN_TRY_COUNT%TYPE  := 0;
   V_HIDE_YN            TB_CM_USER_MASTER.HIDE_YN%TYPE          := 0;
   V_GRANT_ID	        TB_CM_USER_MASTER.GRANT_ID%TYPE         :='';
   V_TENANT_ID          TB_CM_USER_MASTER.TENANT_ID%TYPE        :='';
   V_AGENT_JIKGUP       TB_CM_USER_MASTER.AGENT_JIKGUP%TYPE     :='';
   V_JAEJIK_GUBUN       TB_CM_USER_MASTER.JAEJIK_GUBUN%TYPE     :='';
   V_AGENT_JIKCHK       TB_CM_USER_MASTER.AGENT_JIKCHK%TYPE     :='';
   
   V_DEPT_CD          VARCHAR2(50)   :='';
   V_DEPT_NM          VARCHAR2(100)  :='';

   V_CENTER_CD        VARCHAR2(50)   :='';
   V_CENTER_NM        VARCHAR2(100)  :='';   
   V_PART_CD          VARCHAR2(50)   :='';
   V_PART_NM          VARCHAR2(100)  :='';    
   V_TEAM_CD          VARCHAR2(50)   :='';
   V_TEAM_NM          VARCHAR2(100)  :=''; 

   V_CENTER_CDS      VARCHAR2(200)  :=''; 
   V_PART_CDS        VARCHAR2(200)  :=''; 
   V_TEAM_CDS        VARCHAR2(200)  :=''; 
          
   V_RESULT_CD        VARCHAR2(40)  :='';
   V_RESULT_MSG       VARCHAR2(200) :='';
   V_SEQ              NUMBER(3)     :=0 ;   
   V_CNT			  NUMBER(3)     :=0;

   V_PW_MAX_PERIOD_YN   VARCHAR2(1)   :='N';
   V_PW_FIRST_CHANGE_YN VARCHAR2(1)   :='N';
   
   V_SDATE				VARCHAR2(8) :='';
   V_FDATE				VARCHAR2(8) :='';
   V_SERVICE_YN			NUMBER(1)	:=1;
   V_SDATE_ENC			VARCHAR2(128) :='';
   V_FDATE_ENC			VARCHAR2(128) :='';
   
 BEGIN
 
-- ********************************************************************************
-- 0.USER 조회
-- ********************************************************************************    
    SELECT COUNT(*) 
    INTO V_CNT
    FROM TB_CM_USER_MASTER A
    WHERE A.TENANT_ID = I_TENANT_ID
        AND (A.AGENT_ID = I_LOGIN_ID
         OR  A.SABUN    = I_LOGIN_ID ) ;
          
    IF(V_CNT >0) THEN 
    -------------------------------------------------------
    --조직조회: 하위 조직을 포함하여 조회하기 위해 
    ------------------------------------------------------- 
    WITH TEMP_DEPT AS (
	SELECT LEVEL
	      , A.DEPT_CD
          , A.DEPT_NM
          , LTRIM (SYS_CONNECT_BY_PATH (A.DEPT_CD, '.'), '.') AS DEPT_CD_PATH
          , A.PARENT_DEPT_CD
	  FROM TB_CM_DEPT_CD  A
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND NVL(A.HIDE_YN,0) = 0	  
	START WITH DEPT_DEPTH = 0
	CONNECT BY PRIOR   A.DEPT_CD = A.PARENT_DEPT_CD
)
     SELECT  A.AGENT_ID
            ,A.AGENT_NM
            ,A.AGENT_PW
            ,A.SABUN
            ,A.LOGIN_TRY_COUNT
            ,A.HIDE_YN
            ,A.GRANT_ID
            ,A.TENANT_ID
            ,A.AGENT_JIKGUP
            ,A.AGENT_JIKCHK
            ,A.JAEJIK_GUBUN
            ,A.DEPT_CD
            ,FN_CM_GET_DEPT_NM(A.TENANT_ID, 'jo', A.DEPT_CD) AS DEPT_NM
            
            , FN_CM_GET_DEPT_CD(A.TENANT_ID, 'center', A.DEPT_CD) AS CENTER_CD    
			, FN_CM_GET_DEPT_NM(A.TENANT_ID, 'center', A.DEPT_CD) AS CENTER_NM  
		    , FN_CM_GET_DEPT_CD(A.TENANT_ID, 'part', A.DEPT_CD)   AS PART_CD			   
		    , FN_CM_GET_DEPT_NM(A.TENANT_ID, 'part', A.DEPT_CD)   AS PART_NM  
		    , FN_CM_GET_DEPT_CD(A.TENANT_ID, 'team', A.DEPT_CD)   AS TEAM_CD  		    
		    , FN_CM_GET_DEPT_NM(A.TENANT_ID, 'team', A.DEPT_CD)   AS TEAM_NM       
		    /* 메뉴권한별 접근권한에 따라 조직조건 사용하기 위해. */
		    ,(SELECT WM_CONCAT( S.DEPT_CD )  
			    FROM TEMP_DEPT S
		       WHERE INSTR(S.DEPT_CD_PATH, FN_CM_GET_DEPT_CD(A.TENANT_ID, 'center', A.DEPT_CD))>0
			 )	AS CENTER_CDS /* CENTER내 모든 조직코드 */
		    ,(SELECT WM_CONCAT( S.DEPT_CD )  
			    FROM TEMP_DEPT S
		       WHERE INSTR(S.DEPT_CD_PATH, FN_CM_GET_DEPT_CD(A.TENANT_ID, 'part', A.DEPT_CD))>0
			 )	AS PART_CDS /* PART내 모든 조직코드 */
		    ,(SELECT WM_CONCAT( S.DEPT_CD )  
			    FROM TEMP_DEPT S
		       WHERE INSTR(S.DEPT_CD_PATH, FN_CM_GET_DEPT_CD(A.TENANT_ID, 'team', A.DEPT_CD))>0
			 )	AS TEAM_CDS /* TEAM내 모든 조직코드 */
			               
       INTO  V_AGENT_ID
            ,V_AGENT_NM
            ,V_AGENT_PW
            ,V_SABUN
            ,V_LOGIN_TRY_COUNT 
            ,V_HIDE_YN
            ,V_GRANT_ID
            ,V_TENANT_ID
            ,V_AGENT_JIKGUP
            ,V_AGENT_JIKCHK
            ,V_JAEJIK_GUBUN
            ,V_DEPT_CD
            ,V_DEPT_NM
            ,V_CENTER_CD
            ,V_CENTER_NM
            ,V_PART_CD
            ,V_PART_NM
            ,V_TEAM_CD
            ,V_TEAM_NM    
            ,V_CENTER_CDS
            ,V_PART_CDS
            ,V_TEAM_CDS                                
      FROM TB_CM_USER_MASTER A
      WHERE A.TENANT_ID = I_TENANT_ID
        AND (A.AGENT_ID = I_LOGIN_ID
         OR  A.SABUN    = I_LOGIN_ID ) 
        AND ROWNUM = 1  
      ;
      
      SELECT USE_FRM_YMD
      		,USE_END_YMD
      		,USE_FRM_YMD_ENC
      		,USE_END_YMD_ENC
	  INTO V_SDATE, V_FDATE, V_SDATE_ENC, V_FDATE_ENC
	  FROM TB_CM_TENANT_INFO
	  WHERE TENANT_ID = I_TENANT_ID;
      
      SELECT SERVICEABLE_YN
      INTO V_SERVICE_YN
      FROM TB_CM_LICENSE;

      END IF;

-- ********************************************************************************
-- 1.LOGIN CHECK
-- ********************************************************************************         
   dbms_output.put_line(V_SERVICE_YN);
   dbms_output.put_line(V_AGENT_ID);
   IF V_SERVICE_YN = 0 THEN
   		V_RESULT_CD := 'NOUSE';
   		V_RESULT_MSG := '라이센스 확인 바랍니다.';
   
   ELSIF V_SDATE > TO_CHAR(SYSDATE,'YYYYMMDD') THEN 
   		V_RESULT_CD := 'SDATE' ;
   		V_RESULT_MSG := '사용기간이 아닙니다.';
   ELSIF V_FDATE < TO_CHAR(SYSDATE,'YYYYMMDD') THEN 		
   		V_RESULT_CD := 'FDATE' ;
   		V_RESULT_MSG := '사용기간이 지났습니다.';
	   
   --1.2 NO DATA
   ELSIF V_AGENT_ID IS NULL THEN
        V_RESULT_CD  := 'NODATA' ;
        V_RESULT_MSG := '존재하지않는 아이디입니다' ;
   dbms_output.put_line(1);
   ELSE
   --1.3 HIDE_YN
        IF V_HIDE_YN = 1 OR V_JAEJIK_GUBUN ='99'  THEN 
           V_RESULT_CD  := 'NOUSE' ;
           V_RESULT_MSG := '사용하지않는 아이디입니다' || (CASE WHEN V_JAEJIK_GUBUN = '99' THEN '[퇴직]' ELSE '' END); 
                 
        ELSE 
         -- 비밀번호 확인
            IF I_LOGIN_PW = V_AGENT_PW THEN            
              -- 비밀번호 일치하나 실패횟수 체크
              IF V_LOGIN_TRY_COUNT >= 5 THEN
                  V_RESULT_CD  := 'WRONGPASSWORD' ;
                  V_RESULT_MSG := '비밀번호 오류입력 횟수 초과 했습니다.<br> 관리자에게 문의하시기 바랍니다.<br> 누적오류횟수 :' || TO_CHAR(V_LOGIN_TRY_COUNT);               
              ELSE
              -- 정상 로그인
                 V_RESULT_CD  := 'LOGINOK' ;
                 V_RESULT_MSG := '';
               END IF;
            ELSE
            
             IF V_LOGIN_TRY_COUNT >= 5 THEN
                  V_RESULT_CD  := 'WRONGPASSWORD' ;
                  V_RESULT_MSG := '비밀번호 오류입력 횟수 초과 했습니다.<br> 관리자에게 문의하시기 바랍니다.<br> 누적오류횟수 :' || TO_CHAR(V_LOGIN_TRY_COUNT);               
              ELSE
                 V_RESULT_CD  := 'WRONGPASSWORD' ;
                 V_RESULT_MSG := '비밀번호가 일치하지 않습니다<br> 누적오류횟수 : ' || TO_CHAR(V_LOGIN_TRY_COUNT+1);    
                  -- 비밀번호 누적오류횟수 UPDATE >>
                UPDATE TB_CM_USER_MASTER 
                   SET  LOGIN_TRY_COUNT = LOGIN_TRY_COUNT + 1
                       ,LOCK_YN = (CASE WHEN LOGIN_TRY_COUNT + 1 = 5 THEN 1 ELSE 0 END)
                  WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = V_AGENT_ID ;
                COMMIT;     
                
             END IF;
            END IF;
        END IF;
   END IF;
   
-- ********************************************************************************
-- 2.정상 로그인 이면 
-- ******************************************************************************** 
   IF V_RESULT_CD  = 'LOGINOK' THEN
   
 -- ********************************************************************************
-- 1.비밀번호 정책관련 결과값 조회
-- ********************************************************************************   
	 WITH TEMP_CONFIG AS (
			SELECT NVL(PW_MAX_PERIOD, 0 ) AS PW_MAX_PERIOD
			      ,NVL(PW_FIRST_CHANGE_YN,0) AS PW_FIRST_CHANGE_YN
			      ,I_TENANT_ID AS TENANT_ID
			      ,V_AGENT_ID  AS AGENT_ID
			FROM DUAL A  
			LEFT OUTER JOIN (
						 SELECT TENANT_ID, PW_MAX_PERIOD, PW_FIRST_CHANGE_YN
						  FROM(
						       SELECT A.*
						            , ROW_NUMBER() OVER(ORDER BY SNO DESC) AS RN
						         FROM TB_CM_ARGOWFM_CONFIG A 
						         WHERE TENANT_ID = I_TENANT_ID
						      )
						 WHERE RN = 1
			) B ON ( I_TENANT_ID = B.TENANT_ID ) -- NOT FOUND EXCEPT 회피하기 위해 
		)
		SELECT 
		CASE WHEN A.PW_FIRST_CHANGE_YN = 0 THEN 'N' 
		     ELSE 
		     	CASE WHEN ( SELECT COUNT(S.AGENT_ID ) 
					         FROM TB_CM_LOGIN_HISTORY S
					        WHERE S.TENANT_ID = A.TENANT_ID
					          AND S.AGENT_ID  = A.AGENT_ID
		                   ) = 0 
		                    AND (SELECT COUNT(S.AGENT_ID ) FROM TB_LOG_PW_HISTORY S  WHERE S.AGENT_ID  = A.AGENT_ID )=0
		                   THEN 'Y' ELSE 'N' END -- 최초 로그인 이면
		     END AS PW_FIRST_CHANGE_YN ,
		CASE WHEN A.PW_MAX_PERIOD = 0 THEN 'N' 
		     ELSE 
		     	CASE WHEN TO_CHAR(NVL(
		                          (SELECT MAX(S.WORK_DT ) FROM TB_LOG_PW_HISTORY S  WHERE S.AGENT_ID  = A.AGENT_ID )
		                         ,SYSDATE - (A.PW_MAX_PERIOD +1 )) --변경이력이 없으면 무조건 최대사용기간 넘긴것으로 하기 위해 
		  				 ,'YYYYMMDD') < TO_CHAR(SYSDATE - A.PW_MAX_PERIOD,'YYYYMMDD' )          
		         THEN 'Y' ELSE 'N' END
		     END AS PW_MAX_PERIOD 
		INTO V_PW_FIRST_CHANGE_YN ,V_PW_MAX_PERIOD_YN
		FROM TEMP_CONFIG A  ;
       
        IF(V_PW_FIRST_CHANGE_YN='N' AND V_PW_MAX_PERIOD_YN = 'N' ) THEN        
   
           -- 로그인정보 UPDATE                 
	         UPDATE TB_CM_USER_MASTER 
	            SET LOGIN_TRY_COUNT = 0 /* 초기화 */
	          WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = V_AGENT_ID ;
	          COMMIT;
	          
	         -- 로그인이력 ISSERT 
	         SP_UC_SET_LOGIN_HISTORY_01(I_TENANT_ID, V_AGENT_ID,I_LOGIN_IP,V_SEQ) ;         
         ELSE 
             
             V_RESULT_CD  := 'PWDCHG' ;            
             IF (V_PW_FIRST_CHANGE_YN = 'Y') THEN
                 V_RESULT_MSG := '비밀번호변경 - [최초 로그인]' ;                 
             ELSE 
                 IF (V_PW_MAX_PERIOD_YN = 'Y') THEN
                     V_RESULT_MSG := '비밀번호 변경- [암호사용기간 초과 하였습니다]' ;    
                 END IF;                 
             END IF;
            
         END IF;
                    
   END IF ;
   
-- ********************************************************************************
-- 3.LOGIN 결과 리턴
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
   SELECT V_RESULT_CD    AS RESULT_CD
        , V_RESULT_MSG   AS RESULT_MSG
        , V_SEQ          AS LOGIN_SEQ
        , V_AGENT_ID     AS AGENT_ID
        , V_AGENT_NM     AS AGENT_NM
        , V_SABUN        AS SABUN
        , V_GRANT_ID     AS GRANT_ID
        , V_TENANT_ID    AS TENANT_ID
        , V_AGENT_JIKGUP AS AGENT_JIKGUP
        , V_AGENT_JIKCHK AS AGENT_JIKCHK
        , V_DEPT_CD      AS DEPT_CD
        , V_DEPT_NM      AS DEPT_NM
        , V_CENTER_CD    AS CENTER_CD  
        , V_CENTER_NM    AS CENTER_NM
        , V_PART_CD      AS PART_CD
        , V_PART_NM      AS PART_NM
        , V_TEAM_CD      AS TEAM_CD
        , V_TEAM_NM      AS TEAM_NM 
        , V_CENTER_CDS   AS CENTER_CDS
        , V_PART_CDS     AS PART_CDS
        , V_TEAM_CDS     AS TEAM_CDS
        , V_SDATE	 	 AS SDATE
		, V_FDATE		 AS FDATE
		, V_SDATE_ENC	 AS SDATE_ENC
		, V_FDATE_ENC	 AS FDATE_ENC
        --IE 에서 오류 발생으로 수정함.
       , TO_CHAR(SYSDATE, 'YYYY-MM-DD')||'T'||TO_CHAR(SYSDATE, 'HH24:MI:SS')||'+09:00' AS SERVER_DATE
      --  , TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') AS SERVER_DATE
		, V_PW_MAX_PERIOD_YN AS PW_MAX_PERIOD_YN
		, V_PW_FIRST_CHANGE_YN  AS PW_FIRST_CHANGE_YN
  FROM DUAL ;    
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

create or replace PROCEDURE "SP_UC_GET_QA_VALUE_INFO"(
   I_TENANT_ID      IN VARCHAR2
 , I_LOGIN_ID		IN VARCHAR2
 , I_SHEETKEY		IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_QA_VALUE_INFO
   PURPOSE:    QA 평가 상세보기

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08	  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_GET_QA_VALUE_INFO';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR 
	SELECT 
		D.TIMES_NM
		,D.TIMES_ID
		,E.SHEET_NM
		,E.SHEET_ID
		,FN_CM_GET_CODE_NM(I_TENANT_ID, 'QA_EVAL_TYPE', D.QA_EVAL_TYPE) AS QA_EVAL_TYPE
		,FN_CM_STRING_FORMAT(D.VALUE_FRM_DT,'@@@@-@@-@@') AS VALUE_FRM_DT
		,FN_CM_STRING_FORMAT(D.VALUE_END_DT,'@@@@-@@-@@') AS VALUE_END_DT
		,FN_CM_STRING_FORMAT(C.REC_YMD,'@@@@-@@-@@') AS REC_YMD
		,B.SABUN AS AGENT_SABUN
		,TO_CHAR(C.STARTTIME, 'HH24:MI:SS') AS STARTTIME
		,TO_CHAR(C.ENDTIME, 'HH24:MI:SS') AS ENDTIME
		,FN_CM_STRING_FORMAT(A.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
		,FN_CM_GET_DEPT_INFO(A.TENANT_ID, B.DEPT_CD) AS DEPT_INFO
		,B.AGENT_NM
		,FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND', B.TM_KIND) AS TM_KIND
		,FN_CM_GET_AGENT_SABUN(I_TENANT_ID,A.VALUE_MEMB) AS QAA_SABUN
		,A.VALUE_MEMB AS QAA_ID
		,FN_CM_GET_AGENT_NM(I_TENANT_ID,A.VALUE_MEMB) AS QAA_NM
		,TO_CHAR(ENDTIME, 'HH24MISS') AS ENDTIME
		,FN_CM_GET_CODE_NM(A.TENANT_ID, 'AGENT_JIKCHK', B.AGENT_JIKCHK) AS AGENT_JIKCHK
		,FN_CM_GET_CODE_NM(A.TENANT_ID, 'AGENT_JIKGUP', B.AGENT_JIKGUP) AS AGENT_JIKGUP
		,FN_CM_GET_CODE_NM(A.TENANT_ID, 'QA_VALUE_STATUS',  A.QA_VALUE_STATUS) AS QA_VALUE_STATUS_NM
		,FN_CM_GET_CODE_NM(A.TENANT_ID, 'QA_TM_KIND',  A.QA_TM_KIND) AS QA_TM_KIND
		,A.QA_VALUE_STATUS
		,C.RECORD_ID
		,A.TOTAL_COMMENT
		,FN_CM_GET_TIME_FORMAT(TALK_TM) AS TALK_TM
		,C.USER_DATA1
		,C.USER_DATA2
		,C.USER_DATA3
		,C.USER_DATA4
		,C.USER_DATA5
		,C.USER_DATA6
		,C.USER_DATA7
		,C.USER_DATA8
		,C.USER_DATA9
		,C.USER_DATA10
		,A.AGENT_ID
		,CASE WHEN I_LOGIN_ID = A.VALUE_MEMB AND (A.QA_VALUE_STATUS = 10 OR A.QA_VALUE_STATUS = 20)
					AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN D.VALUE_FRM_DT AND D.VALUE_END_DT THEN 1
					ELSE 0 END AS MOD_YN
		,(SELECT COUNT(S.SHEETKEY) 
			FROM TB_QA_VALUE_RESULT_HEADER S 
			WHERE S.TENANT_ID = A.TENANT_ID 
				AND S.TIMES_ID = A.TIMES_ID 
				AND (S.REVALUE_SHEETKEY = A.SHEETKEY OR S.SHEETKEY = A.REVALUE_SHEETKEY)
		) AS REVALUE_YN
	FROM TB_QA_VALUE_RESULT_HEADER A
	INNER JOIN TB_CM_USER_MASTER B ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID)
	INNER JOIN TB_QA_AUDIO_LOG C ON (A.TENANT_ID = C.TENANT_ID AND A.RECORD_ID = C.RECORD_ID)
	INNER JOIN TB_QA_VALUE_TIMES D ON (A.TENANT_ID = D.TENANT_ID AND A.TIMES_ID = D.TIMES_ID)
	INNER JOIN TB_QA_SHEET_HEADER E ON (A.TENANT_ID = E.TENANT_ID AND A.SHEET_ID = E.SHEET_ID)
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.SHEETKEY = I_SHEETKEY
	;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_UC_SET_ACCESS_SCOPE" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_SCOPE_GUBUN    IN VARCHAR2 /* 공통코드 (SCOPE_GUBUN) 에 의함*/
    ,I_ITEM_ID	      IN VARCHAR2
    ,I_DEPT_CD        IN VARCHAR2 /* 관리소속 콤마구분자로 연결된 스트링 */
) AS 
/******************************************************************************
   NAME:       SP_UC_SET_ACCESS_SCOPE
   PURPOSE:    (공통)관리소속 등록 처리 
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_SET_ACCESS_SCOPE';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 1. 관리소속  등록
-- ********************************************************************************             
	  DELETE FROM TB_CM_ACCESS_SCOPE 
	    WHERE TENANT_ID   = I_TENANT_ID 
	      AND SCOPE_GUBUN = I_SCOPE_GUBUN
	      AND ITEM_ID     = I_ITEM_ID  ;
	  COMMIT;
	  
	  INSERT INTO TB_CM_ACCESS_SCOPE (
	  	TENANT_ID , SCOPE_GUBUN, ITEM_ID, DEPT_CD
	  )
	  SELECT    I_TENANT_ID   AS TENANT_ID
		      , I_SCOPE_GUBUN AS SCOPE_GUBUN
		      , I_ITEM_ID     AS ITEM_ID
	          , SPLIT_VALUE   AS DEPT_CD
		 FROM  TABLE(FN_CM_GET_TB_SPLIT(I_DEPT_CD, ','))   
	 WHERE SPLIT_VALUE  IS NOT NULL ;
	 COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.

    END;
END ;
/

;

create or replace PROCEDURE "SP_UC_SET_USER_MASTER_MOD" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID       IN VARCHAR2 
    ,I_AGENT_ID       IN VARCHAR2	 
    ,I_MOD_GUBUN      IN VARCHAR2 /* 상담사기본(A)/비밀번호(P)/권한(G) */
    ,I_MOD_VLAUE      IN VARCHAR2 /* 변경값:상담사기본일때 콤마+공백으로 연결하여 보낼 것 */
) AS 
/******************************************************************************
   NAME:       SP_UC_SET_USER_MASTER_MOD
   PURPOSE:    (공통)상담사 변경이력 생성
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/25  YAKIM            상담사기본(A) 일때 AGENT_NM, SABUN, JIKJONG_KIND, DAYNIGHT_GUBUN, BIRTH_YMD, HIDE_YN, TEL_NO
                                                                                      비밀번호(P) 일때 비밀번호 / 권한(G) 일때 권한값
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_UC_SET_USER_MASTER_MOD';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 1. 변경이력 등록
-- ********************************************************************************             
			INSERT INTO TB_CM_USER_MASTER_MOD (
				CREATE_AGENT_ID
				,CREATE_DT
				,AGENT_ID 
				,ASIS_AGENT_NM 
				,TOBE_AGENT_NM 
				,ASIS_AGENT_PW 
				,TOBE_AGENT_PW 
				,ASIS_SABUN 
				,TOBE_SABUN 
				,ASIS_JIKJONG_KIND 
				,TOBE_JIKJONG_KIND 
				,ASIS_DAYNIGHT_GUBUN
				,TOBE_DAYNIGHT_GUBUN 
				,ASIS_BIRTH_YMD
				,TOBE_BIRTH_YMD
				,ASIS_HIDE_YN 
				,TOBE_HIDE_YN 
				,ASIS_TEL_NO 
				,TOBE_TEL_NO 
				,ASIS_GRANT_ID
				,TOBE_GRANT_ID
			)
			WITH TEMP_ASIS AS (
			---------------------------------------------------------------------
			-- 1. 변경전의 값
			---------------------------------------------------------------------
			SELECT A.AGENT_NM 
			 	  ,A.SABUN 
			 	  ,A.JIKJONG_KIND
			 	  ,A.DAYNIGHT_GUBUN
			 	  ,A.BIRTH_YMD
			 	  ,TO_CHAR(A.HIDE_YN) AS HIDE_YN
			 	  ,A.TEL_NO
			      ,A.AGENT_PW 
			      ,A.GRANT_ID
			      ,A.TENANT_ID
			      ,A.AGENT_ID
			FROM TB_CM_USER_MASTER A
			WHERE A.TENANT_ID = I_TENANT_ID
			  AND A.AGENT_ID  = I_AGENT_ID
			), TEMP_TOBE AS ( 
			---------------------------------------------------------------------
			-- 2. 변경후의 값 : 콤마로 연결된 스트링의 중간에 값이 비어있을 경우 SPLIT하면서 비어있는값이 밀려버리는 문제로
			--              콤마+공백 으로 넘겨야 함. 따라서 파싱 후 TRIM 처리 (e.g 이름, 사번, , <== 이런식
			---------------------------------------------------------------------			
			   SELECT TRIM(MAX(CASE WHEN I_MOD_GUBUN = 'A' AND RN= 1 THEN A.TOBE_VALUE ELSE NULL END)) AS AGENT_NM
			         ,TRIM(MAX(CASE WHEN I_MOD_GUBUN = 'A' AND RN= 2 THEN A.TOBE_VALUE ELSE NULL END)) AS SABUN
			         ,TRIM(MAX(CASE WHEN I_MOD_GUBUN = 'A' AND RN= 3 THEN A.TOBE_VALUE ELSE NULL END)) AS JIKJONG_KIND
			         ,TRIM(MAX(CASE WHEN I_MOD_GUBUN = 'A' AND RN= 4 THEN A.TOBE_VALUE ELSE NULL END)) AS DAYNIGHT_GUBUN
			         ,TRIM(MAX(CASE WHEN I_MOD_GUBUN = 'A' AND RN= 5 THEN A.TOBE_VALUE ELSE NULL END)) AS BIRTH_YMD
			         ,TRIM(MAX(CASE WHEN I_MOD_GUBUN = 'A' AND RN= 6 THEN A.TOBE_VALUE ELSE NULL END)) AS HIDE_YN
			         ,TRIM(MAX(CASE WHEN I_MOD_GUBUN = 'A' AND RN= 7 THEN A.TOBE_VALUE ELSE NULL END)) AS TEL_NO
			         ,TRIM(MAX(CASE WHEN I_MOD_GUBUN = 'P' AND RN= 1 THEN A.TOBE_VALUE ELSE NULL END)) AS AGENT_PW
			         ,TRIM(MAX(CASE WHEN I_MOD_GUBUN = 'G' AND RN= 1 THEN A.TOBE_VALUE ELSE NULL END)) AS GRANT_ID
			         ,I_AGENT_ID AS AGENT_ID                                        
			     FROM (
				    SELECT  IDX AS RN			        
				           ,SPLIT_VALUE AS TOBE_VALUE
				    FROM  TABLE(FN_CM_GET_TB_SPLIT(I_MOD_VLAUE, ','))  
			    ) A 
			 )
			 SELECT 
			 	I_LOGIN_ID AS CREATE_AGENT_ID
				,SYSDATE AS CREATE_DT
				,A.AGENT_ID AS AGENT_ID 
				,A.AGENT_NM AS ASIS_AGENT_NM 
				,CASE WHEN I_MOD_GUBUN  ='A' THEN B.AGENT_NM ELSE A.AGENT_NM END AS TOBE_AGENT_NM
								 
				,A.AGENT_PW AS ASIS_AGENT_PW 				
				,CASE WHEN I_MOD_GUBUN  ='P' THEN B.AGENT_PW ELSE A.AGENT_PW END AS TOBE_AGENT_PW 
								
				,A.SABUN AS ASIS_SABUN 
				,CASE WHEN I_MOD_GUBUN  ='A' THEN B.SABUN ELSE A.SABUN END AS TOBE_SABUN				
				,A.JIKJONG_KIND AS ASIS_JIKJONG_KIND 
				,CASE WHEN I_MOD_GUBUN  ='A' THEN B.JIKJONG_KIND ELSE A.JIKJONG_KIND END AS TOBE_JIKJONG_KIND 
				,A.DAYNIGHT_GUBUN AS ASIS_DAYNIGHT_GUBUN
				,CASE WHEN I_MOD_GUBUN  ='A' THEN B.DAYNIGHT_GUBUN ELSE A.DAYNIGHT_GUBUN END AS TOBE_DAYNIGHT_GUBUN 
				,A.BIRTH_YMD AS ASIS_BIRTH_YMD
				,CASE WHEN I_MOD_GUBUN  ='A' THEN B.BIRTH_YMD ELSE A.BIRTH_YMD END AS TOBE_BIRTH_YMD
				,A.HIDE_YN AS ASIS_HIDE_YN 
				,CASE WHEN I_MOD_GUBUN  ='A' THEN B.HIDE_YN ELSE A.HIDE_YN END AS TOBE_HIDE_YN 
				,A.TEL_NO AS ASIS_TEL_NO 
				,CASE WHEN I_MOD_GUBUN  ='A' THEN B.TEL_NO ELSE A.TEL_NO END AS TOBE_TEL_NO
				 
				,A.GRANT_ID AS ASIS_GRANT_ID
				,CASE WHEN I_MOD_GUBUN  ='G' THEN B.GRANT_ID ELSE A.GRANT_ID END AS TOBE_GRANT_ID
			   FROM  TEMP_ASIS A 
			   INNER JOIN TEMP_TOBE B ON ( A.AGENT_ID = B.AGENT_ID )
   				;
   				COMMIT;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.

    END;
END ;
/

;

create or replace function FN_CM_GET_TB_KPI_USER
( 
	I_TENANT_ID IN VARCHAR2,
	I_STD_MONTH IN VARCHAR2,
	I_AGENT_IDS IN VARCHAR2,
	I_DEPT_CDS	IN VARCHAR2
)
RETURN PK_KPI_USER_MASTER.NT_KPI_USER_MASTER PIPELINED AS V_RETURN    PK_KPI_USER_MASTER.OB_KPI_USER_MASTER;

/******************************************************************************
   NAME:       FN_CM_GET_TB_USER_HISTORY
   PURPOSE:    기준년월 사용자정보 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/03/10  JYMOON           
   
SELECT * FROM TABLE(FN_CM_GET_TB_KPI_USER('BT', '', '', '')); --기준년월이 없거나, 이번달 보다 크면 USER, DEPT_CD 에서 데이터 가져옴.
SELECT * FROM TABLE(FN_CM_GET_TB_KPI_USER('BT', '', 'pmg,2017030001', '')); --agent_id가  pmg,2017030001 인 사람 가져옴.
SELECT * FROM TABLE(FN_CM_GET_TB_KPI_USER('BT', '', '', '0003,0007'));  --dept_cd 가 0003,0007 인 사람 가져옴.
SELECT * FROM TABLE(FN_CM_GET_TB_KPI_USER('BT', '', '2017050001', '0003,0007'));

SELECT * FROM TABLE(FN_CM_GET_TB_KPI_USER('BT', '201702', '', '')); --기준년월 있으면, USER_HISTORY, DEPT_CD_HISTORY 에서 데이터 가져옴.
SELECT * FROM TABLE(FN_CM_GET_TB_KPI_USER('BT', '201702', 'pmg,2017030001', '')); --agent_id가  pmg,2017030001 인 사람 가져옴.
SELECT * FROM TABLE(FN_CM_GET_TB_KPI_USER('BT', '201702', '', '0004,0005'));  --dept_cd 가 0004,0005 인 사람 가져옴.
SELECT * FROM TABLE(FN_CM_GET_TB_KPI_USER('BT', '201702', 'pmg', '0004,0005'));

******************************************************************************/

V_TODAY_MONTH VARCHAR2(6) := TO_CHAR(SYSDATE, 'YYYYMM');

CURSOR TMP_LIST1 IS

        SELECT 
			A.TENANT_ID
			,A.AGENT_ID
			,A.AGENT_NM
			,A.AGENT_PW
			,A.SABUN
			,A.DEPT_CD
			,A.TM_KIND
			,A.AGENT_JIKGUP
			,A.AGENT_JIKCHK
			,A.JIKJONG_KIND
			,A.DAYNIGHT_GUBUN
			,A.JAEJIK_GUBUN
			,A.GENDER_KIND
			,A.BIRTH_YMD
			,A.ENTER_YMD
			,A.RETIRE_YMD
			,A.RETIRE_GUBUN
			,A.RETIRE_RSN
			,A.WORK_MONTH_PERIOD
			,A.HIDE_YN
			,A.LOGIN_TRY_COUNT
			,A.TEL_NO
			,A.LOCK_YN
			,A.CONTRACT_FRM
			,A.CONTRACT_END
			,A.SCHE_TARGET_YN
			,A.EDU_TARGET_YN
			,A.QA_TARGET_YN
			,A.KPI_TARGET_YN
			,A.IMG_REAL_FILENAME
			,A.IMG_USER_FILENAME
			,A.IMG_PATH
			,A.GRANT_ID
			,A.WARNING_INFO
			,B.USER_DATA1
			,B.USER_DATA2
			,B.USER_DATA3
			,B.USER_DATA4
			,B.USER_DATA5
			,B.USER_DATA6
			,B.USER_DATA7
			,B.USER_DATA8
			,B.USER_DATA9
			,B.USER_DATA10
			
			,FN_CM_GET_DEPT_NM(I_TENANT_ID, 'center', C.DEPT_CD) AS CENTER_NM
			,FN_CM_GET_DEPT_NM(I_TENANT_ID, 'part', C.DEPT_CD) AS PART_NM
			,FN_CM_GET_DEPT_NM(I_TENANT_ID, 'team', C.DEPT_CD) AS TEAM_NM
			,FN_CM_GET_DEPT_NM(I_TENANT_ID, 'jo', C.DEPT_CD) AS JO_NM
			,FN_CM_GET_DEPT_CD(I_TENANT_ID, 'center', C.DEPT_CD) AS CENTER_CD
			,FN_CM_GET_DEPT_CD(I_TENANT_ID, 'part', C.DEPT_CD) AS PART_CD
			,FN_CM_GET_DEPT_CD(I_TENANT_ID, 'team', C.DEPT_CD) AS TEAM_CD
			,FN_CM_GET_DEPT_CD(I_TENANT_ID, 'jo', C.DEPT_CD) AS JO_CD
			,C.CENTER_KIND
			,C.COM_KIND
			,C.IN_OUT_KIND
        FROM TABLE(FN_CM_GET_TB_USER(I_TENANT_ID, I_AGENT_IDS)) A
        LEFT OUTER JOIN TB_CM_USER_DETAIL B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
        JOIN			TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CDS)) C ON A.DEPT_CD = C.DEPT_CD
        WHERE 1=1;

        
CURSOR TMP_LIST2 IS

        SELECT 
			A.TENANT_ID
			,A.AGENT_ID
			,A.AGENT_NM
			,A.AGENT_PW
			,A.SABUN
			,A.DEPT_CD
			,A.TM_KIND
			,A.AGENT_JIKGUP
			,A.AGENT_JIKCHK
			,A.JIKJONG_KIND
			,A.DAYNIGHT_GUBUN
			,A.JAEJIK_GUBUN
			,A.GENDER_KIND
			,A.BIRTH_YMD
			,A.ENTER_YMD
			,A.RETIRE_YMD
			,A.RETIRE_GUBUN
			,A.RETIRE_RSN
			,A.WORK_MONTH_PERIOD
			,A.HIDE_YN
			,A.LOGIN_TRY_COUNT
			,A.TEL_NO
			,A.LOCK_YN
			,A.CONTRACT_FRM
			,A.CONTRACT_END
			,A.SCHE_TARGET_YN
			,A.EDU_TARGET_YN
			,A.QA_TARGET_YN
			,A.KPI_TARGET_YN
			,A.IMG_REAL_FILENAME
			,A.IMG_USER_FILENAME
			,A.IMG_PATH
			,A.GRANT_ID
			,A.WARNING_INFO
			,B.USER_DATA1
			,B.USER_DATA2
			,B.USER_DATA3
			,B.USER_DATA4
			,B.USER_DATA5
			,B.USER_DATA6
			,B.USER_DATA7
			,B.USER_DATA8
			,B.USER_DATA9
			,B.USER_DATA10
			
			,FN_CM_GET_DEPT_NM_HISTORY(I_TENANT_ID, 'center', I_STD_MONTH, C.DEPT_CD) AS CENTER_NM
			,FN_CM_GET_DEPT_NM_HISTORY(I_TENANT_ID, 'part', I_STD_MONTH, C.DEPT_CD) AS PART_NM
			,FN_CM_GET_DEPT_NM_HISTORY(I_TENANT_ID, 'team', I_STD_MONTH, C.DEPT_CD) AS TEAM_NM
			,FN_CM_GET_DEPT_NM_HISTORY(I_TENANT_ID, 'jo', I_STD_MONTH, C.DEPT_CD) AS JO_NM
			,FN_CM_GET_DEPT_CD_HISTORY(I_TENANT_ID, 'center', I_STD_MONTH, C.DEPT_CD) AS CENTER_CD
			,FN_CM_GET_DEPT_CD_HISTORY(I_TENANT_ID, 'part', I_STD_MONTH, C.DEPT_CD) AS PART_CD
			,FN_CM_GET_DEPT_CD_HISTORY(I_TENANT_ID, 'team', I_STD_MONTH, C.DEPT_CD) AS TEAM_CD
			,FN_CM_GET_DEPT_CD_HISTORY(I_TENANT_ID, 'jo', I_STD_MONTH, C.DEPT_CD) AS JO_CD
			,C.CENTER_KIND
			,C.COM_KIND
			,C.IN_OUT_KIND
        FROM TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, I_STD_MONTH, I_AGENT_IDS)) A
	        LEFT OUTER JOIN TB_CM_USER_DETAIL B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
	        JOIN			TABLE(FN_CM_GET_TB_DEPT_HISTORY(I_TENANT_ID, I_STD_MONTH, I_DEPT_CDS)) C ON A.DEPT_CD = C.DEPT_CD
        WHERE 1=1;

BEGIN


 
IF (LENGTH(I_STD_MONTH) = 0 OR I_STD_MONTH IS NULL OR I_STD_MONTH >= V_TODAY_MONTH) THEN
  
   FOR CUR IN TMP_LIST1 LOOP
			V_RETURN.TENANT_ID         := CUR.TENANT_ID;
			V_RETURN.AGENT_ID          := CUR.AGENT_ID;
			V_RETURN.AGENT_NM          := CUR.AGENT_NM;
			V_RETURN.AGENT_PW          := CUR.AGENT_PW;
			V_RETURN.SABUN             := CUR.SABUN;
			V_RETURN.DEPT_CD           := CUR.DEPT_CD;
			V_RETURN.TM_KIND           := CUR.TM_KIND;
			V_RETURN.AGENT_JIKGUP      := CUR.AGENT_JIKGUP;
			V_RETURN.AGENT_JIKCHK      := CUR.AGENT_JIKCHK;
			V_RETURN.JIKJONG_KIND      := CUR.JIKJONG_KIND;
			V_RETURN.DAYNIGHT_GUBUN    := CUR.DAYNIGHT_GUBUN;
			V_RETURN.JAEJIK_GUBUN      := CUR.JAEJIK_GUBUN;
			V_RETURN.GENDER_KIND       := CUR.GENDER_KIND;
			V_RETURN.BIRTH_YMD         := CUR.BIRTH_YMD;
			V_RETURN.ENTER_YMD         := CUR.ENTER_YMD;
			V_RETURN.RETIRE_YMD        := CUR.RETIRE_YMD;
			V_RETURN.RETIRE_GUBUN      := CUR.RETIRE_GUBUN;
			V_RETURN.RETIRE_RSN        := CUR.RETIRE_RSN;
			V_RETURN.WORK_MONTH_PERIOD := CUR.WORK_MONTH_PERIOD;
			V_RETURN.HIDE_YN           := CUR.HIDE_YN;
			V_RETURN.LOGIN_TRY_COUNT   := CUR.LOGIN_TRY_COUNT;
			V_RETURN.TEL_NO            := CUR.TEL_NO;
			V_RETURN.LOCK_YN           := CUR.LOCK_YN;
			V_RETURN.CONTRACT_FRM      := CUR.CONTRACT_FRM;
			V_RETURN.CONTRACT_END      := CUR.CONTRACT_END;
			V_RETURN.SCHE_TARGET_YN    := CUR.SCHE_TARGET_YN;
			V_RETURN.EDU_TARGET_YN     := CUR.EDU_TARGET_YN;
			V_RETURN.QA_TARGET_YN      := CUR.QA_TARGET_YN;
			V_RETURN.KPI_TARGET_YN     := CUR.KPI_TARGET_YN;
			V_RETURN.IMG_REAL_FILENAME := CUR.IMG_REAL_FILENAME;
			V_RETURN.IMG_USER_FILENAME := CUR.IMG_USER_FILENAME;
			V_RETURN.IMG_PATH          := CUR.IMG_PATH;
			V_RETURN.GRANT_ID          := CUR.GRANT_ID;
			V_RETURN.WARNING_INFO      := CUR.WARNING_INFO;			
			V_RETURN.USER_DATA1        := CUR.USER_DATA1;
			V_RETURN.USER_DATA2        := CUR.USER_DATA2;
			V_RETURN.USER_DATA3        := CUR.USER_DATA3;
			V_RETURN.USER_DATA4        := CUR.USER_DATA4;
			V_RETURN.USER_DATA5        := CUR.USER_DATA5;
			V_RETURN.USER_DATA6        := CUR.USER_DATA6;
			V_RETURN.USER_DATA7        := CUR.USER_DATA7;
			V_RETURN.USER_DATA8        := CUR.USER_DATA8;
			V_RETURN.USER_DATA9        := CUR.USER_DATA9;
			V_RETURN.USER_DATA10       := CUR.USER_DATA10;
			
			V_RETURN.CENTER_DEPT_NM    := CUR.CENTER_NM;
			V_RETURN.PART_DEPT_NM      := CUR.PART_NM;
			V_RETURN.TEAM_DEPT_NM      := CUR.TEAM_NM;
			V_RETURN.JO_DEPT_NM        := CUR.JO_NM;
			V_RETURN.CENTER_DEPT_CD    := CUR.CENTER_CD;
			V_RETURN.PART_DEPT_CD      := CUR.PART_CD;
			V_RETURN.TEAM_DEPT_CD      := CUR.TEAM_CD;
			V_RETURN.JO_DEPT_CD        := CUR.JO_CD;
	        V_RETURN.CENTER_KIND       := CUR.CENTER_KIND;
	        V_RETURN.COM_KIND          := CUR.COM_KIND;
	        V_RETURN.IN_OUT_KIND       := CUR.IN_OUT_KIND;
	        
	        PIPE ROW(V_RETURN);

    END LOOP;
ELSE
 
   FOR CUR IN TMP_LIST2 LOOP
			V_RETURN.TENANT_ID         := CUR.TENANT_ID;
			V_RETURN.AGENT_ID          := CUR.AGENT_ID;
			V_RETURN.AGENT_NM          := CUR.AGENT_NM;
			V_RETURN.AGENT_PW          := CUR.AGENT_PW;
			V_RETURN.SABUN             := CUR.SABUN;
			V_RETURN.DEPT_CD           := CUR.DEPT_CD;
			V_RETURN.TM_KIND           := CUR.TM_KIND;
			V_RETURN.AGENT_JIKGUP      := CUR.AGENT_JIKGUP;
			V_RETURN.AGENT_JIKCHK      := CUR.AGENT_JIKCHK;
			V_RETURN.JIKJONG_KIND      := CUR.JIKJONG_KIND;
			V_RETURN.DAYNIGHT_GUBUN    := CUR.DAYNIGHT_GUBUN;
			V_RETURN.JAEJIK_GUBUN      := CUR.JAEJIK_GUBUN;
			V_RETURN.GENDER_KIND       := CUR.GENDER_KIND;
			V_RETURN.BIRTH_YMD         := CUR.BIRTH_YMD;
			V_RETURN.ENTER_YMD         := CUR.ENTER_YMD;
			V_RETURN.RETIRE_YMD        := CUR.RETIRE_YMD;
			V_RETURN.RETIRE_GUBUN      := CUR.RETIRE_GUBUN;
			V_RETURN.RETIRE_RSN        := CUR.RETIRE_RSN;
			V_RETURN.WORK_MONTH_PERIOD := CUR.WORK_MONTH_PERIOD;
			V_RETURN.HIDE_YN           := CUR.HIDE_YN;
			V_RETURN.LOGIN_TRY_COUNT   := CUR.LOGIN_TRY_COUNT;
			V_RETURN.TEL_NO            := CUR.TEL_NO;
			V_RETURN.LOCK_YN           := CUR.LOCK_YN;
			V_RETURN.CONTRACT_FRM      := CUR.CONTRACT_FRM;
			V_RETURN.CONTRACT_END      := CUR.CONTRACT_END;
			V_RETURN.SCHE_TARGET_YN    := CUR.SCHE_TARGET_YN;
			V_RETURN.EDU_TARGET_YN     := CUR.EDU_TARGET_YN;
			V_RETURN.QA_TARGET_YN      := CUR.QA_TARGET_YN;
			V_RETURN.KPI_TARGET_YN     := CUR.KPI_TARGET_YN;
			V_RETURN.IMG_REAL_FILENAME := CUR.IMG_REAL_FILENAME;
			V_RETURN.IMG_USER_FILENAME := CUR.IMG_USER_FILENAME;
			V_RETURN.IMG_PATH          := CUR.IMG_PATH;
			V_RETURN.GRANT_ID          := CUR.GRANT_ID;
			V_RETURN.WARNING_INFO      := CUR.WARNING_INFO;			
			V_RETURN.USER_DATA1        := CUR.USER_DATA1;
			V_RETURN.USER_DATA2        := CUR.USER_DATA2;
			V_RETURN.USER_DATA3        := CUR.USER_DATA3;
			V_RETURN.USER_DATA4        := CUR.USER_DATA4;
			V_RETURN.USER_DATA5        := CUR.USER_DATA5;
			V_RETURN.USER_DATA6        := CUR.USER_DATA6;
			V_RETURN.USER_DATA7        := CUR.USER_DATA7;
			V_RETURN.USER_DATA8        := CUR.USER_DATA8;
			V_RETURN.USER_DATA9        := CUR.USER_DATA9;
			V_RETURN.USER_DATA10       := CUR.USER_DATA10;
			
			V_RETURN.CENTER_DEPT_NM    := CUR.CENTER_NM;
			V_RETURN.PART_DEPT_NM      := CUR.PART_NM;
			V_RETURN.TEAM_DEPT_NM      := CUR.TEAM_NM;
			V_RETURN.JO_DEPT_NM        := CUR.JO_NM;
			V_RETURN.CENTER_DEPT_CD    := CUR.CENTER_CD;
			V_RETURN.PART_DEPT_CD      := CUR.PART_CD;
			V_RETURN.TEAM_DEPT_CD      := CUR.TEAM_CD;
			V_RETURN.JO_DEPT_CD        := CUR.JO_CD;
	        V_RETURN.CENTER_KIND       := CUR.CENTER_KIND;
	        V_RETURN.COM_KIND          := CUR.COM_KIND;
	        V_RETURN.IN_OUT_KIND       := CUR.IN_OUT_KIND;
	        
	        PIPE ROW(V_RETURN);

    END LOOP;

END IF; 

  
  
  exception when others then
    dbms_output.put_line('오류발생.');
    dbms_output.put_line('sql error code : ' || sqlcode);
    dbms_output.put_line('sql error message : ' || SQLERRM);
    
END;
/

;

CREATE OR REPLACE PROCEDURE SP_CM1030M01_01 (
   I_TENANT_ID    IN VARCHAR2
  ,I_GRANT_ID     IN VARCHAR2
  , I_DT_FROM     IN VARCHAR2
  , I_DT_TO       IN VARCHAR2
  , I_NOTI_GUBUN  IN VARCHAR2
  , I_NOTI_GRADE  IN VARCHAR2
  , I_DEPT_CD     IN VARCHAR2
  , I_AGENT_ID    IN VARCHAR2
  , I_SUBJECT     IN VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM1030M01_01
   PURPOSE:    공지사항관리-조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/12/29  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM1030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	SELECT
		A.NOTI_ID
		,A.NOTI_NO
		,A.NOTI_TITLE
		,A.NOTI_GUBUN
		,A.NOTI_GRADE
		,DBMS_LOB.SUBSTR(A.NOTI_CONTENTS, DBMS_LOB.GETLENGTH(A.NOTI_CONTENTS),1) AS NOTI_CONTENTS
		,A.NOTI_SCOPE
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'NOTI_GUBUN',A.NOTI_GUBUN) AS NOTI_GUBUN_NM
		,'● '|| FN_CM_GET_CODE_NM(I_TENANT_ID,'NOTI_GRADE',A.NOTI_GRADE) AS NOTI_GRADE_NM
		,(CASE WHEN A.FRM_DATE IS NULL THEN '-' ELSE 
		FN_CM_STRING_FORMAT(A.FRM_DATE, '@@@@-@@-@@')||'~'||FN_CM_STRING_FORMAT(A.END_DATE, '@@@@-@@-@@') END ) AS NOTICE_PERIOD
		,(SELECT WM_CONCAT( S.FILE_PATH  ||'/'||S.REALFILE_NM) AS AA 
		FROM TB_CM_NOTICE_ATTACH S WHERE A.TENANT_ID = S.TENANT_ID AND S.NOTI_ID = A.NOTI_ID GROUP BY S.TENANT_ID,S.NOTI_ID ) AS ATTACH_FILE     
		,(SELECT COUNT( S.FILE_ID) 
		FROM TB_CM_NOTICE_ATTACH S WHERE A.TENANT_ID = S.TENANT_ID AND S.NOTI_ID = A.NOTI_ID ) AS ATTACH_FILE_CNT               
		,A.CREATE_AGENT_ID
		,FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.CREATE_AGENT_ID) AS CREATE_AGENT_INFO
		,TO_CHAR(A.MODIFY_DT,'YYYY-MM-DD') AS MODIFY_DT
		,TO_CHAR ( A.READ_CNT , 'FM9,999,999' ) AS READ_CNT
	FROM TB_CM_NOTICE_HEADER A 
	INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.CREATE_AGENT_ID = B.AGENT_ID
	JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD  
	WHERE 1=1 
	  AND A.TENANT_ID = I_TENANT_ID
	  AND (( I_DT_FROM BETWEEN NVL(A.FRM_DATE, I_DT_FROM) AND NVL(A.END_DATE, I_DT_TO) )     
	    OR ( I_DT_TO  BETWEEN NVL(A.FRM_DATE, I_DT_FROM) AND NVL(A.END_DATE, I_DT_TO) ) )
	  AND A.NOTI_GUBUN = CASE WHEN I_NOTI_GUBUN IS NULL THEN A.NOTI_GUBUN ELSE I_NOTI_GUBUN END
	  AND A.NOTI_GRADE   =  CASE WHEN I_NOTI_GRADE IS NULL THEN A.NOTI_GRADE ELSE I_NOTI_GRADE END
	  AND (( I_SUBJECT IS NULL AND 1=1 )
	    OR (I_SUBJECT IS NOT NULL AND INSTR(A.NOTI_TITLE, I_SUBJECT) > 0))
	  AND (( I_AGENT_ID IS NULL AND 1=1 )
	    OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,B.AGENT_ID) > 0))       
	ORDER BY A.NOTI_NO  DESC   
	;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2010M01_03 (
   I_TENANT_ID  IN VARCHAR2
 , I_GRANT_ID   IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM2010M01_03
   PURPOSE:    권한설정-권한조직 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/23  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT 
      A.DEPT_CD
      ,A.DEPT_NM
      ,A.DEPT_DEPTH
      ,A.PARENT_DEPT_CD
      ,NVL(A.SORT,0) AS SORT
      ,CASE WHEN B.DEPT_CD IS NOT NULL THEN 'Y' END AS HAS_DEPT_AUTH
       -- ADD BY 2016-12-28 상담사 인원수 추가
       ,( SELECT COUNT(S.AGENT_ID) 
           FROM TB_CM_USER_MASTER S
          WHERE  NVL(S.HIDE_YN,0) = 0 
            AND  NVL(S.RETIRE_GUBUN, '-') <> '99' 
            AND FN_CM_GET_DEPT_CD( I_TENANT_ID, (CASE A.DEPT_DEPTH WHEN 0 THEN 'center' WHEN 1 THEN 'part' WHEN 2 THEN 'team' WHEN 3 THEN 'jo' END),S.DEPT_CD ) = A.DEPT_CD
      ) AS AGENT_CNT      
		FROM 
      table(fn_cm_get_tb_dept(I_TENANT_ID,''))  A
      LEFT OUTER JOIN TB_CM_GRANT_SCOPE B ON A.DEPT_CD = B.DEPT_CD AND B.TENANT_ID = I_TENANT_ID AND B.GRANT_ID = I_GRANT_ID
		WHERE 
      NVL(A.HIDE_YN,0) = 0
		ORDER BY A.DEPT_CD, A.SORT ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2020M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_GRANT_ID      IN VARCHAR2 
 , I_DEPT_CD       IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2  
 , I_AGENT_JIKGUP  IN VARCHAR2
 , I_AGENT_JIKCHK  IN VARCHAR2
 , I_JAEJIK_GUBUN  IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM2020M01_01
   PURPOSE:    권한부여/조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/19  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
     SELECT  C.DEPT_CD
         ,C.DEPT_NM
         ,FN_CM_GET_DEPT_NM(I_TENANT_ID,'center', C.DEPT_CD) AS CENTER
         ,FN_CM_GET_DEPT_NM(I_TENANT_ID,'part', C.DEPT_CD) AS PART
         ,FN_CM_GET_DEPT_NM(I_TENANT_ID,'team', C.DEPT_CD) AS TEAM
         ,FN_CM_GET_DEPT_NM(I_TENANT_ID,'jo', C.DEPT_CD) AS JO
         ,A.SABUN
         ,A.AGENT_ID
         ,A.AGENT_NM
         ,A.AGENT_JIKGUP
         ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM    
         ,A.AGENT_JIKCHK
         ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
         ,JAEJIK_GUBUN
         ,FN_CM_GET_CODE_NM(I_TENANT_ID,'JAEJIK_GUBUN', A.JAEJIK_GUBUN) AS JAEJIK_GUBUN_NM
         ,A.GRANT_ID
         ,(SELECT COUNT(S.AGENT_ID) FROM TB_CM_GRANT_HISTORY S WHERE S.TENANT_ID = A.TENANT_ID AND S.AGENT_ID = A.AGENT_ID) AS GRANT_CHG_CNT
   FROM TB_CM_USER_MASTER A
  -- INNER JOIN TB_CM_GRANT_SCOPE B ON  A.TENANT_ID = B.TENANT_ID AND  A.DEPT_CD = B.DEPT_CD AND B.GRANT_ID = I_GRANT_ID
   LEFT OUTER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD))  C ON A.DEPT_CD = C.DEPT_CD 
   --AND NVL(C.HIDE_YN,0) = 0
  WHERE NVL(A.HIDE_YN,0) = 0 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
     AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
     AND A.JAEJIK_GUBUN = CASE WHEN I_JAEJIK_GUBUN IS NULL THEN A.JAEJIK_GUBUN ELSE I_JAEJIK_GUBUN END   
      AND (( I_AGENT_ID IS NULL AND 1=1 )
          OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, A.AGENT_ID) > 0))
     ;    
 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM2020M01_02 (
   I_TENANT_ID  IN VARCHAR2
  ,I_LOGIN_ID   IN VARCHAR2
 , I_AGENT_ID   IN VARCHAR2 
  ,I_GRANT_ID   IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM2020M01_02
   PURPOSE:    권한부여/조회-권한변경

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/19  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    V_SNO NUMBER := 0;
 BEGIN

-- ********************************************************************************
-- 0.권한변경이력 생성
-- ********************************************************************************  
   -- KEY 생성
     SELECT NVL(MAX(SNO),0) + 1
        INTO V_SNO
     FROM TB_CM_GRANT_HISTORY WHERE  TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID;
     
     INSERT INTO TB_CM_GRANT_HISTORY
       ( TENANT_ID
       , AGENT_ID
       , SNO
       , ASIS_GRANT_ID
       , ASIS_GRANT_NM
       , TOBE_GRANT_ID
       , TOBE_GRANT_NM
       , MODIFY_AGENT_ID
       , MODIFY_DT)     
     SELECT A.TENANT_ID
          , A.AGENT_ID
          , V_SNO AS SNO
          , B.GRANT_ID AS ASIS_GRANT_ID
          , B.GRANT_NM AS ASIS_GRANT_NM
          , C.GRANT_ID AS TOBE_GRANT_ID
          , C.GRANT_NM AS TOBE_GRANT_NM
          , I_LOGIN_ID AS MODIFY_AGENT_ID
          , SYSTIMESTAMP AS MODIFY_DT
    FROM TB_CM_USER_MASTER A
    LEFT OUTER JOIN TB_CM_GRANT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.GRANT_ID = B.GRANT_ID ) /* AS-IS GRANT */
    INNER JOIN TB_CM_GRANT_HEADER C ON (A.TENANT_ID = C.TENANT_ID AND C.GRANT_ID = I_GRANT_ID ) /* TO-BE GRANT */
    WHERE A.TENANT_ID = I_TENANT_ID
      AND A.AGENT_ID  = I_AGENT_ID
    ;
    COMMIT;
    
-- ********************************************************************************
-- 0. USER MASTER 변경이력 생성
-- ******************************************************************************** 
	SP_UC_SET_USER_MASTER_MOD(I_TENANT_ID, I_LOGIN_ID,I_AGENT_ID,'G',I_GRANT_ID );

    
-- ********************************************************************************
-- 1.권한변경
-- ********************************************************************************    
    UPDATE TB_CM_USER_MASTER SET GRANT_ID = I_GRANT_ID
                                ,MODIFY_AGENT_ID = I_LOGIN_ID
                                ,MODIFY_DT = SYSTIMESTAMP
    WHERE TENANT_ID =  I_TENANT_ID
      AND AGENT_ID  =  I_AGENT_ID
     ; 
     COMMIT;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

create or replace PROCEDURE SP_CM9010M01_01 (
   I_TENANT_ID  IN VARCHAR2
 , I_DT_FROM    IN VARCHAR2
 , I_DT_TO      IN VARCHAR2
 , I_DEPT_CD    IN VARCHAR2
 , I_AGENT_ID   IN VARCHAR2
 , I_FROM_ROW   IN NUMBER DEFAULT 0
 , I_TO_ROW     IN NUMBER DEFAULT 30
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM9010M01_01
   PURPOSE:    이력조회-로그인이력조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/25  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM9010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT * FROM (
    SELECT ROWNUM AS RNUM
     ,A.* FROM (
    SELECT   FN_CM_STRING_FORMAT(A.LOGIN_YMD, '@@@@-@@-@@') AS LOGIN_YMD
            ,A.AGENT_ID
            ,A.LOGIN_NO
            ,A.TENANT_ID
            ,TO_CHAR(A.LOGIN_DT,'YYYY-MM-DD HH24:MI:SS') AS LOGIN_DT
            ,A.LOGIN_IP
           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD) AS CENTER
           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD) AS PART
           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD) AS TEAM
           ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD) AS JO
           ,B.SABUN
           ,B.AGENT_NM
           ,B.AGENT_JIKGUP
           ,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM    
           ,B.AGENT_JIKCHK
           ,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
          -- ,ROW_NUMBER() OVER(ORDER BY A.LOGIN_DT DESC) RNUM
     FROM TB_CM_LOGIN_HISTORY A 
     INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
    JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD  
    WHERE 1=1 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.LOGIN_YMD BETWEEN I_DT_FROM AND I_DT_TO
     AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,B.AGENT_ID) > 0))  
	ORDER BY 	A.LOGIN_DT DESC	  
    ) A WHERE ROWNUM <= I_TO_ROW	
    ) WHERE RNUM >= I_FROM_ROW
    --WHERE RNUM >= I_FROM_ROW AND RNUM <= I_TO_ROW
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_CM9010M01_02 (
   I_TENANT_ID  IN VARCHAR2
 , I_DT_FROM    IN VARCHAR2
 , I_DT_TO      IN VARCHAR2
 , I_DEPT_CD    IN VARCHAR2
 , I_AGENT_ID   IN VARCHAR2
 , I_FROM_ROW   IN NUMBER DEFAULT 0
 , I_TO_ROW     IN NUMBER DEFAULT 30 
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM9010M01_02
   PURPOSE:    이력조회-메뉴접속이력조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/01/25  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM9010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT * FROM (
    SELECT ROWNUM AS RNUM
     ,A.* FROM (
    SELECT  TO_CHAR(A.LOG_DT,'YYYY-MM-DD HH24:MI:SS') AS LOG_DT
            ,A.IP_ADDR
            ,A.PGM_ID
            ,'['||D.SYSTEM_KIND||']'||D.PGM_NM AS PGM_NM
            ,A.FILE_ID
            ,A.AGENT_ID
            ,A.TENANT_ID
            ,A.ACTION_TYPE
            ,FN_CM_GET_CODE_NM(I_TENANT_ID,'ACTION_TYPE', A.ACTION_TYPE) AS ACTION_TYPE_NM    
            ,A.ACTION_DESC
           ,FN_CM_GET_DEPT_NM(I_TENANT_ID,'center', B.DEPT_CD) AS CENTER
           ,FN_CM_GET_DEPT_NM(I_TENANT_ID,'part', B.DEPT_CD) AS PART
           ,FN_CM_GET_DEPT_NM(I_TENANT_ID,'team', B.DEPT_CD) AS TEAM
           ,FN_CM_GET_DEPT_NM(I_TENANT_ID,'jo', B.DEPT_CD) AS JO
           ,B.SABUN
           ,B.AGENT_NM
           ,B.AGENT_JIKGUP
           ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM    
           ,B.AGENT_JIKCHK
           ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
         --  ,ROW_NUMBER() OVER(ORDER BY A.LOG_DT DESC) RNUM
     FROM TB_CM_MENU_HISTORY A 
     INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
     INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD  
     INNER JOIN TB_CM_ARGOWFM_PGM D ON (A.TENANT_ID = D.TENANT_ID AND A.PGM_ID = D.PGM_ID)
    WHERE 1=1 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.LOG_DT BETWEEN TO_DATE(I_DT_FROM||'000000','YYYYMMDDHH24MISS') AND TO_DATE(I_DT_TO||'235959','YYYYMMDDHH24MISS')
     AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,B.AGENT_ID) > 0))  
	ORDER BY A.LOG_DT DESC
     ) A WHERE ROWNUM <= I_TO_ROW	
    ) WHERE RNUM > I_FROM_ROW
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_CM9010M01_03 (
   I_TENANT_ID  IN VARCHAR2
 , I_DT_FROM    IN VARCHAR2
 , I_DT_TO      IN VARCHAR2
 , I_DEPT_CD    IN VARCHAR2
 , I_AGENT_ID   IN VARCHAR2
 , I_FROM_ROW   IN NUMBER DEFAULT 0
 , I_TO_ROW     IN NUMBER DEFAULT 30  
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_CM9010M01_03
   PURPOSE:    이력조회-업무평가이력조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/24  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM9010M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	SELECT * FROM (
		SELECT ROWNUM AS RNUM
			,A.* FROM (
				SELECT  
					B.TENANT_ID
					,B.AGENT_ID
					,FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD) AS CENTER
					,FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD) AS PART
					,FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD) AS TEAM
					,FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD) AS JO
					,B.SABUN
					,B.AGENT_NM
					,B.AGENT_JIKGUP
					,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM    
					,B.AGENT_JIKCHK
					,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
					,(SELECT S.SCHE_NM FROM TB_EDU_EXAM_SCHE S WHERE S.TENANT_ID = D.TENANT_ID AND S.SCHE_ID = D.SCHE_ID) AS SCHE_NM
					,E.QUESTION_NO       
					,TO_CHAR(A.SAVE_TIME, 'YYYY-MM-DD HH24:MI:SS') AS SAVE_TIME
					,FN_EDU_GET_ANSWER(E.QUESTION_TYPE, A.ANSWER_VALUE,'2') AS ANSWER_VALUE 
					,E.QUESTION_TYPE
					--   ,DBMS_LOB.SUBSTR(E.QUESTION, DBMS_LOB.GETLENGTH(E.QUESTION),1) AS QUESTION
					,SUBSTR(REGEXP_REPLACE(DBMS_LOB.SUBSTR(E.QUESTION, DBMS_LOB.GETLENGTH(E.QUESTION),1), '<[^>]*>', '')
					,1, 50)||'...' AS QUESTION_TEXT
					--   ,ROW_NUMBER() OVER(ORDER BY B.AGENT_ID, A.SHEETKEY, E.QUESTION_NO ) RNUM              
				FROM TB_EDU_EXAM_LOG A 
				INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
				INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD 
				INNER JOIN TB_EDU_EXAM_RESULT_HEADER D ON (A.TENANT_ID = D.TENANT_ID AND A.SHEETKEY = D.SHEETKEY AND A.AGENT_ID = D.AGENT_ID )
				INNER JOIN TB_EDU_SHEET_DETAIL E ON (D.TENANT_ID = E.TENANT_ID AND D.SHEET_ID = E.SHEET_ID AND A.QUESTION_ID = E.QUESTION_ID )
				WHERE 1=1 
				AND A.TENANT_ID = I_TENANT_ID
				AND A.SAVE_TIME BETWEEN TO_DATE(I_DT_FROM||'000000','YYYYMMDDHH24MISS') AND TO_DATE(I_DT_TO||'235959','YYYYMMDDHH24MISS')
				AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,B.AGENT_ID) > 0))  
				ORDER BY B.AGENT_ID, A.SHEETKEY, E.QUESTION_NO 
			) A 
			WHERE ROWNUM <= I_TO_ROW	
		) 
	WHERE RNUM > I_FROM_ROW
	ORDER BY SAVE_TIME DESC
	;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_CM_USEREDIT_02
(
    I_TENANT_ID   IN VARCHAR2  
  , I_AGENT_ID    IN VARCHAR2
  , I_AGENT_NM    IN VARCHAR2
  , I_BIRTH_YMD   IN VARCHAR2
  , I_GENDER_KIND IN VARCHAR2
  , I_TEL_NO      IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_CM_USEREDIT_02
   PURPOSE:    상담사 기본정보 수정 (팝업)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/26
    1.1         2017/05/18 YAKIM           비밀번호 변경 공통화 하면서 수정함. 
    1.2         2017/05/25 YAKIM           USER MASTER 변경이력 생성  추가
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE           := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_CM_USEREDIT_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   
   V_MOD_VALUE VARCHAR2(100) :='';
BEGIN

-- ********************************************************************************
-- 0. USER MASTER 변경이력 생성
-- ******************************************************************************** 
   SELECT I_AGENT_NM||' ,'||SABUN||' ,'||NVL(JIKJONG_KIND,'')||' ,'||NVL(DAYNIGHT_GUBUN,'')||' ,'||I_BIRTH_YMD||' ,'||NVL(HIDE_YN,0)||' ,'||I_TEL_NO 
     INTO V_MOD_VALUE
     FROM TB_CM_USER_MASTER
    WHERE TENANT_ID = I_TENANT_ID
     AND AGENT_ID  = I_AGENT_ID ;	
	        
	SP_UC_SET_USER_MASTER_MOD(I_TENANT_ID, I_AGENT_ID,I_AGENT_ID,'A',V_MOD_VALUE );


	UPDATE TB_CM_USER_MASTER
	   SET AGENT_NM    = I_AGENT_NM
	     , BIRTH_YMD   = I_BIRTH_YMD
	     , GENDER_KIND = I_GENDER_KIND
	     , TEL_NO      = I_TEL_NO
	     , MODIFY_AGENT_ID = I_AGENT_ID
	     , MODIFY_DT       = SYSDATE
	 WHERE TENANT_ID = I_TENANT_ID
	   AND AGENT_ID  = I_AGENT_ID ;	
	 
	 COMMIT;
       
/*
	-- 비밀번호 수정 O
	IF I_PW_EDIT_YN = 'Y' THEN
  
	UPDATE TB_CM_USER_MASTER
	   SET AGENT_NM    = I_AGENT_NM
	     , AGENT_PW    = I_AGENT_PW
	     , BIRTH_YMD   = I_BIRTH_YMD
	     , GENDER_KIND = I_GENDER_KIND
	     , TEL_NO      = I_TEL_NO
	     , MODIFY_AGENT_ID = I_AGENT_ID
	     , MODIFY_DT       = SYSDATE
	 WHERE TENANT_ID = I_TENANT_ID
	   AND AGENT_ID  = I_AGENT_ID ;


	--비밀번호 수정 X
	ELSIF I_PW_EDIT_YN = 'N' THEN 
	
	UPDATE TB_CM_USER_MASTER
	   SET AGENT_NM    = I_AGENT_NM
	     , BIRTH_YMD   = I_BIRTH_YMD
	     , GENDER_KIND = I_GENDER_KIND
	     , TEL_NO      = I_TEL_NO
	     , MODIFY_AGENT_ID = I_AGENT_ID
	     , MODIFY_DT       = SYSDATE
	 WHERE TENANT_ID = I_TENANT_ID
	   AND AGENT_ID  = I_AGENT_ID ;	
	
	END IF;	   
	
	COMMIT;
*/	
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
    
END;
/

;

create or replace PROCEDURE "SP_EDU1020S01_01" (
	 I_TENANT_ID      IN VARCHAR2
	,I_CUD_GUBUN      IN VARCHAR2  /* C/U/D  */
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_SHEET_NM	      IN VARCHAR2
    ,I_EDU_SHEET_TYPE IN VARCHAR2
    ,I_HIDE_YN	      IN VARCHAR2
    ,I_DEPT_CD        IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_EDU1020S01_01
   PURPOSE:    시험지관리-시험지 등록수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

    V_SHEET_ID TB_EDU_SHEET_HEADER.SHEET_ID%TYPE := I_SHEET_ID;
    
 BEGIN
 
-- ********************************************************************************
-- 0.등록/수정/삭제
-- ******************************************************************************** 
	IF (I_CUD_GUBUN ='I') THEN  -- I_SHEET_ID 생성
		SELECT LPAD(NVL(MAX(SHEET_ID),0)+1 ,10, '0') 
		INTO V_SHEET_ID 
		FROM TB_EDU_SHEET_HEADER 
		WHERE TENANT_ID = I_TENANT_ID;
	END IF;
	    
	MERGE INTO TB_EDU_SHEET_HEADER T
	USING (
		SELECT
			I_TENANT_ID AS TENANT_ID
			,V_SHEET_ID  AS SHEET_ID
			,I_SHEET_NM  AS SHEET_NM
			,I_EDU_SHEET_TYPE AS EDU_SHEET_TYPE
			,NVL(I_HIDE_YN,0)  AS HIDE_YN
		FROM DUAL 
	) S ON ( T.TENANT_ID = S.TENANT_ID AND T.SHEET_ID = S.SHEET_ID )
	WHEN MATCHED THEN
		UPDATE SET 
			SHEET_NM = S.SHEET_NM
			,EDU_SHEET_TYPE = S.EDU_SHEET_TYPE
			,HIDE_YN         = S.HIDE_YN
			,MODIFY_AGENT_ID= I_LOGIN_ID
			,MODIFY_DT      = SYSTIMESTAMP
	WHEN NOT MATCHED THEN
		INSERT( 
			TENANT_ID
			,SHEET_ID
			,SHEET_NM
			,EDU_SHEET_TYPE
			,HIDE_YN
			,CREATE_AGENT_ID
			,CREATE_DT
			,MODIFY_AGENT_ID
			,MODIFY_DT
		) VALUES (
			S.TENANT_ID
			,S.SHEET_ID
			,S.SHEET_NM
			,S.EDU_SHEET_TYPE
			,S.HIDE_YN
			,I_LOGIN_ID
			,SYSTIMESTAMP
			,I_LOGIN_ID
			,SYSTIMESTAMP
		);
	  
	COMMIT; 
  
-- ********************************************************************************
-- 1. 관리소속  등록
-- ********************************************************************************             
	SP_UC_SET_ACCESS_SCOPE(I_TENANT_ID, '20', V_SHEET_ID, I_DEPT_CD);
  
-- ********************************************************************************
-- 2.처리 결과 리턴
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR 
	SELECT V_SHEET_ID   AS KEY_ID FROM DUAL ; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU1030S01_01" (
	 I_TENANT_ID      IN VARCHAR2
	,I_CUD_GUBUN      IN VARCHAR2  /* C/U/D  */
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SCHE_ID	      IN VARCHAR2
    ,I_SCHE_NM	      IN VARCHAR2
    ,I_KPI_YN         IN VARCHAR2
    ,I_EDU_EVAL_TYPE  IN VARCHAR2
    ,I_EDU_EXAM_TYPE  IN VARCHAR2
    ,I_EVAL_YMD       IN VARCHAR2
    ,I_STR_TM         IN VARCHAR2                
    ,I_END_TM  		  IN VARCHAR2
    ,I_SHEET_ID 	  IN VARCHAR2
    ,I_PASS_SCORE 	  IN VARCHAR2
    ,I_INFO_TEXT 	  IN VARCHAR2
    ,I_RANDOM_YN      IN VARCHAR2
    ,I_DEPT_CD        IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_EDU1030S01_01
   PURPOSE:    평가계획관리-평가계획 등록수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
    1.1       2017/05/16  yakim            수정 시 - 평가대상의 평가일시 중복여부 체크 추가
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1030S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

    V_SCHE_ID TB_EDU_EXAM_SCHE.SCHE_ID%TYPE := I_SCHE_ID;
    
    V_RESULT_CD        VARCHAR2(40)  :='SUCCESS'; /* 중복일 경우 구분하기 위해 */
	V_RESULT_MSG       VARCHAR2(200) :='';
	V_DUP_CNT          NUMBER(3)     :=0 ;
    
 BEGIN
 
-- ********************************************************************************
-- 0.등록/수정/삭제
-- ******************************************************************************** 
	  IF (I_CUD_GUBUN ='I') THEN
	       -- I_SCHE_ID 생성
         SELECT LPAD(NVL(MAX(SCHE_ID),0)+1 ,10, '0') 
           INTO V_SCHE_ID 
           FROM TB_EDU_EXAM_SCHE 
          WHERE TENANT_ID = I_TENANT_ID;
     END IF;
     
-- ********************************************************************************
-- 1.수정인 경우 평가대상자의 평가시간 중복여부를 체크
-- ********************************************************************************      
    IF (I_CUD_GUBUN ='U') THEN
	 SELECT COUNT(DISTINCT B.AGENT_ID) INTO V_DUP_CNT
	     FROM TB_EDU_EXAM_SCHE A
	    	INNER JOIN TB_EDU_EXAM_TARGET B ON A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID
	    	INNER JOIN TB_EDU_EXAM_TARGET C ON C.TENANT_ID = B.TENANT_ID AND C.SCHE_ID = I_SCHE_ID AND B.AGENT_ID = C.AGENT_ID
	    WHERE 1=1 
	      AND B.TENANT_ID  = I_TENANT_ID
	      AND B.SCHE_ID   != I_SCHE_ID /* 현재 평가계획은 제외하고 비교*/
	       AND (   A.EVAL_YMD = I_EVAL_YMD
		   AND (     ( I_STR_TM  >=A.STR_TM AND I_STR_TM < A.END_TM )
		           OR( I_END_TM > A.STR_TM  AND I_END_TM <=A.END_TM ) 
		           OR( I_STR_TM <= A.STR_TM AND I_END_TM >=A.END_TM )     
		           )
		        ) ;
     END IF; 
     
  IF V_DUP_CNT > 0 THEN
    V_RESULT_CD := 'FAIL' ;
    V_RESULT_MSG:= '동일기간내 중복대상자가 존재합니다.(' ||V_DUP_CNT ||'건)' ;
    
  ELSE /* 중복건이 없으면 처리 */	    
   
    MERGE INTO TB_EDU_EXAM_SCHE T
	    USING (SELECT  I_TENANT_ID 	   AS TENANT_ID
	                  ,V_SCHE_ID  	   AS SCHE_ID
	                  ,I_SCHE_NM  	   AS SCHE_NM
	                  ,NVL(I_KPI_YN,0) AS KPI_YN	                  
	                  ,I_EDU_EVAL_TYPE AS EDU_EVAL_TYPE
					  ,I_EDU_EXAM_TYPE AS EDU_EXAM_TYPE
				      ,I_EVAL_YMD      AS EVAL_YMD
				      ,I_STR_TM        AS STR_TM            
				      ,I_END_TM  	   AS END_TM
				      ,I_SHEET_ID 	   AS SHEET_ID
				      ,I_PASS_SCORE    AS PASS_SCORE
				      ,I_INFO_TEXT 	   AS INFO_TEXT
				      ,NVL(I_RANDOM_YN,0)  AS RANDOM_YN
	             FROM DUAL ) S
	    ON ( T.TENANT_ID = S.TENANT_ID AND T.SCHE_ID = S.SCHE_ID )
	    WHEN MATCHED THEN
	      UPDATE SET SCHE_NM       = S.SCHE_NM
	                ,KPI_YN 	   = S.KPI_YN
	                ,EDU_EVAL_TYPE = S.EDU_EVAL_TYPE
	                ,EDU_EXAM_TYPE = S.EDU_EXAM_TYPE
	                ,EVAL_YMD 	   = S.EVAL_YMD
	                ,STR_TM 	   = S.STR_TM
	                ,END_TM 	   = S.END_TM
	                ,SHEET_ID 	   = S.SHEET_ID
	                ,PASS_SCORE    = S.PASS_SCORE
	                ,INFO_TEXT     = S.INFO_TEXT
	                ,RANDOM_YN     = S.RANDOM_YN
	                ,MODIFY_AGENT_ID= I_LOGIN_ID
	                ,MODIFY_DT      = SYSTIMESTAMP
	    WHEN NOT MATCHED THEN
	      INSERT( TENANT_ID
	              ,SCHE_ID
	              ,SCHE_NM
	              ,KPI_YN
	              ,EDU_EVAL_TYPE
	              ,EDU_EXAM_TYPE
	              ,EVAL_YMD
	              ,STR_TM
	              ,END_TM
	              ,SCHE_STATUS
	              ,SHEET_ID
	              ,PASS_SCORE
	              ,INFO_TEXT
	              ,RANDOM_YN
	              ,CREATE_AGENT_ID
	              ,CREATE_DT
	              ,MODIFY_AGENT_ID
	              ,MODIFY_DT
	      ) VALUES (S.TENANT_ID
	              ,S.SCHE_ID
	              ,S.SCHE_NM
	              ,S.KPI_YN
	              ,S.EDU_EVAL_TYPE
	              ,S.EDU_EXAM_TYPE
	              ,S.EVAL_YMD
	              ,S.STR_TM
	              ,S.END_TM
	              ,'10'
	              ,S.SHEET_ID
	              ,S.PASS_SCORE
	              ,S.INFO_TEXT
	              ,S.RANDOM_YN
	              ,I_LOGIN_ID
	              ,SYSTIMESTAMP
	              ,I_LOGIN_ID
	              ,SYSTIMESTAMP
	     )  ;
	      
	    COMMIT; 
  
-- ********************************************************************************
-- 1. 관리소속  등록
-- ********************************************************************************             
	SP_UC_SET_ACCESS_SCOPE(I_TENANT_ID, '30', V_SCHE_ID, I_DEPT_CD);
 
 END IF;
 
  
-- ********************************************************************************
-- 2.처리 결과 리턴
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
 SELECT V_SCHE_ID     AS KEY_ID
	   ,V_RESULT_CD   AS RESULT_CD
	   ,V_RESULT_MSG  AS RESULT_MSG
  FROM DUAL ; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

create or replace PROCEDURE SP_EDU1030S02_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_DEPT_CD      IN VARCHAR2
 , I_TM_KIND	  IN VARCHAR2
 , I_WORK_PERIOD  IN VARCHAR2 
 , I_AGENT_JIKGUP IN VARCHAR2
 , I_AGENT_JIKCHK IN VARCHAR2
 , I_SCHE_ID      IN VARCHAR2
 , I_DUP_YN       IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU1030S02_01
   PURPOSE:    평가계획관리 - 평가대상자관리 - 평가대상자조회(전체)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/10  YAKIM
    1.1       2017/05/16  YAKIM            중복대상자제외 조건 추가 (동일 평가일시 해당 상담사 제외)
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU1030S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

    V_EVAL_YMD VARCHAR2(8) :='';
    V_STR_TM   VARCHAR2(6) :='';
    V_END_TM   VARCHAR2(6) :='';
 BEGIN

-- ********************************************************************************
-- 0.중복대상자 제외 조건일 경우 체크하기 위해 현 평가계획의 평가일자, 시간 조회
-- ******************************************************************************** 
    SELECT A.EVAL_YMD, A.STR_TM, A.END_TM
      INTO V_EVAL_YMD, V_STR_TM, V_END_TM
      FROM TB_EDU_EXAM_SCHE A
     WHERE A.TENANT_ID = I_TENANT_ID
       AND A.SCHE_ID   = I_SCHE_ID ;
        
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT           --,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
          FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
           ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
            ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
          ,A.DEPT_CD
  		  ,A.SABUN
  		  ,A.AGENT_ID
  		  ,A.AGENT_NM
          ,A.TM_KIND
	      ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
	      ,FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
     FROM TB_CM_USER_MASTER A
    INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
    WHERE 1=1 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.HIDE_YN = 0 
     AND NVL(A.JAEJIK_GUBUN,'10') !='99'
     AND NVL(A.EDU_TARGET_YN ,0)  = 1 /* EDU교육평가대상자만 */
     AND A.TM_KIND	    = CASE WHEN I_TM_KIND 	   IS NULL THEN A.TM_KIND      ELSE I_TM_KIND	   END     
     AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
     AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
     /* 근속기간 조건 일 경우 */
     AND (( I_WORK_PERIOD IS NULL AND 1=1 )
          OR (I_WORK_PERIOD IS NOT NULL 
               AND EXISTS(  SELECT 1
		                      FROM TB_CM_CODE S 
		                     WHERE S.TENANT_ID = A.TENANT_ID 
		                       AND S.SORT_CD   = 'WORK_PERIOD'
		                       AND S.CODE      = I_WORK_PERIOD
		                       AND A.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2 )
         ))
	 /* 중복대상사 제외 조건 일 경우  동일 기간 내 평가대상자로 등록된 AGENT_ID 제외 */
	     AND (( I_DUP_YN IS NULL AND 1=1 )
	          OR (I_DUP_YN IS NOT NULL AND I_DUP_YN = 'Y'
	               AND NOT EXISTS (
			                SELECT 1
						     FROM TB_EDU_EXAM_SCHE X
						    	INNER JOIN TB_EDU_EXAM_TARGET Y ON X.TENANT_ID = Y.TENANT_ID AND X.SCHE_ID = Y.SCHE_ID
						    WHERE 1=1 
						      AND X.TENANT_ID  = I_TENANT_ID
						      AND X.SCHE_ID   != I_SCHE_ID /* 현재 평가계획은 제외하고 비교*/
						       AND (   X.EVAL_YMD = V_EVAL_YMD
							   AND (    ( V_STR_TM  >=X.STR_TM AND V_STR_TM < X.END_TM )
							          OR( V_END_TM > X.STR_TM  AND V_END_TM <=X.END_TM ) 
							          OR( V_STR_TM <= X.STR_TM AND V_END_TM >=X.END_TM ) 
							       ))
			                  AND Y.AGENT_ID = A.AGENT_ID	               
	                )
	         ))         
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2010M01_02" (
	 I_TENANT_ID      IN VARCHAR2
    ,I_LOGIN_ID	      IN VARCHAR2  /* 로그인사용자 ID */	 
    ,I_SHEETKEY       IN VARCHAR2
    ,I_SCHE_ID        IN VARCHAR2    
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_RANDOM_YN	  IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_EDU2010M01_02
   PURPOSE:    업무평가응시 - 문항조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/14  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
    
 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ******************************************************************************** 
OPEN O_CUR_LIST FOR 
    WITH TEMP_LIST AS (
    SELECT   A.TENANT_ID
    		,A.SHEET_ID
            ,B.QUESTION_ID
            ,B.QUESTION_NO
            ,B.WORK_TYPE1
            ,B.WORK_TYPE2
            ,B.QUESTION_TYPE
            ,B.SCORE
            ,B.ANSWER_CNT
            ,B.AUTO_MARKING_YN
            ,DBMS_LOB.SUBSTR(B.QUESTION, DBMS_LOB.GETLENGTH(B.QUESTION),1) AS QUESTION
            ,B.DESCRIPT
            ,A.EDU_SHEET_TYPE
            ,FN_CM_GET_CODE_NM(B.TENANT_ID, 'WORK_TYPE1',B.WORK_TYPE1) AS WORK_TYPE1_NM
            ,FN_CM_GET_CODE_NM(B.TENANT_ID, 'WORK_TYPE2',B.WORK_TYPE2) AS WORK_TYPE2_NM
            ,FN_CM_GET_CODE_NM(B.TENANT_ID, 'QUESTION_TYPE',B.QUESTION_TYPE) AS QUESTION_TYPE_NM
            ,FN_EDU_GET_ANSWER(B.QUESTION_TYPE, C.ANSWER_VALUE) AS ANSWER_VALUE
     FROM TB_EDU_SHEET_HEADER A
     INNER JOIN TB_EDU_SHEET_DETAIL B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
     LEFT OUTER JOIN TB_EDU_EXAM_RESULT_DETAIL C ON (B.TENANT_ID = C.TENANT_ID 
                                                 AND C.SHEETKEY = I_SHEETKEY 
                                                 AND B.QUESTION_ID = C.QUESTION_ID )
    WHERE A.TENANT_ID = I_TENANT_ID
      AND A.SHEET_ID  = I_SHEET_ID
    ORDER BY (CASE WHEN I_RANDOM_YN = 1 THEN  DBMS_RANDOM.VALUE ELSE B.QUESTION_NO END) /* 순서혼합일 경우 랜덤 추출 */
   ) SELECT ROWNUM AS RN
    	   , A.*
    FROM TEMP_LIST A 
    ;
    

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_EDU2030M01_01" (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2 /* 콤마구분자로 여러건 */
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
,  I_PASS_YN       IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU2030M01_01
   PURPOSE:    평가이력조회 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/20  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU2030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
-- ********************************************************************************
-- 0.조회
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR 
	SELECT
		A.TENANT_ID
		,A.SCHE_ID
		,A.SCHE_NM
		,FN_CM_GET_DEPT_NM(C.TENANT_ID,'center', C.DEPT_CD) AS CENTER
		,FN_CM_GET_DEPT_NM(C.TENANT_ID,'part', C.DEPT_CD) AS PART
		,FN_CM_GET_DEPT_NM(C.TENANT_ID,'team', C.DEPT_CD) AS TEAM
		,FN_CM_GET_DEPT_NM(C.TENANT_ID,'jo', C.DEPT_CD) AS JO
		,C.SABUN
		,C.AGENT_NM
		,C.AGENT_JIKGUP
		,FN_CM_GET_CODE_NM(C.TENANT_ID,'AGENT_JIKGUP', C.AGENT_JIKGUP) AS AGENT_JIKGUP_NM    
		,C.AGENT_JIKCHK
		,FN_CM_GET_CODE_NM(C.TENANT_ID,'AGENT_JIKCHK', C.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
		,C.TM_KIND
		,FN_CM_GET_CODE_NM(C.TENANT_ID,'TM_KIND', C.TM_KIND) AS TM_KIND_NM
		,FN_CM_GET_AGENT_INFO(B.TENANT_ID, B.AGENT_ID) AS AGENT_INFO           
		,B.EXAM_STATUS
		,FN_CM_GET_CODE_NM(B.TENANT_ID,'EXAM_STATUS', B.EXAM_STATUS) AS EXAM_STATUS_NM 
		,A.EDU_EXAM_TYPE
		,FN_CM_GET_CODE_NM(B.TENANT_ID,'EDU_EXAM_TYPE', A.EDU_EXAM_TYPE) AS EDU_EXAM_TYPE_NM   
		,(SELECT S.SHEET_NM 
		FROM TB_EDU_SHEET_HEADER S
		WHERE  A.TENANT_ID = S.TENANT_ID AND A.SHEET_ID = S.SHEET_ID ) AS SHEET_NM
		,NVL(A.PASS_SCORE ,0) AS PASS_SCORE /* 수료점수 */    
		,NVL(E.TOTAL_SCORE,'') AS TOTAL_SCORE
		,TO_CHAR(E.CONVERT_SCORE, 'FM990.00') AS CONVERT_SCORE
		,NVL(E.TYPE_SCORE1,'') AS TYPE_SCORE1 /* 진위형 */
		,NVL(E.TYPE_SCORE2,'') AS TYPE_SCORE2 /* 선다(정답형) */
		,NVL(E.TYPE_SCORE3,'') AS TYPE_SCORE3 /* 선다(다답형AND)*/
		,NVL(E.TYPE_SCORE4,'') AS TYPE_SCORE4 /* 선다(다답형OR) */
		,NVL(E.TYPE_SCORE5,'') AS TYPE_SCORE5 /* 주관형 */
		,NVL(E.TYPE_SCORE6,'') AS TYPE_SCORE6 /* 서술형 */
		,NVL(E.TYPE_SCORE2,'') + NVL(E.TYPE_SCORE3,'') + NVL(E.TYPE_SCORE4,'') AS TYPE_SCORE7 /* 선다형 합계 */
		,CASE WHEN NVL(E.TOTAL_SCORE,0) >=  NVL(A.PASS_SCORE ,0) THEN 1 ELSE 0 END AS PASS_YN /* 수료여부 */
		,E.SHEETKEY
		,A.SHEET_ID
		,C.AGENT_ID
	FROM TB_EDU_EXAM_SCHE A
	INNER JOIN TB_EDU_EXAM_TARGET B ON ( A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID )
	INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
	INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
	LEFT OUTER JOIN TB_EDU_EXAM_RESULT_HEADER E ON (B.TENANT_ID = E.TENANT_ID AND B.SCHE_ID  = E.SCHE_ID AND B.AGENT_ID = E.AGENT_ID )
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.EVAL_YMD BETWEEN I_DT_FROM AND I_DT_TO
	AND A.SCHE_STATUS = '40' /* 완료인 건만 */
	AND (( I_AGENT_ID IS NULL AND 1=1 )
		OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))  
	AND (( I_SCHE_ID IS NULL AND 1=1 )
		OR (I_SCHE_ID IS NOT NULL AND INSTR(I_SCHE_ID, A.SCHE_ID) > 0))
	AND (( I_PASS_YN IS NULL AND 1=1 )
		OR (I_PASS_YN IS NOT NULL AND NVL(E.TOTAL_SCORE,0) <  NVL(A.PASS_SCORE ,0))) /* 미수료자 */ 

	/* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
	AND EXISTS (SELECT 1 
				FROM TB_CM_ACCESS_SCOPE S 
				WHERE S.TENANT_ID   = A.TENANT_ID
				AND S.SCOPE_GUBUN = '30'
				AND S.ITEM_ID     = A.SCHE_ID
				AND S.DEPT_CD     = I_LOGIN_DEPT_CD )      
	ORDER BY CENTER, PART, TEAM, JO, C.AGENT_NM
	;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_EDU3020M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_DATE_GUBUN    IN VARCHAR2  /* 월별(M)/분기별(Q)/반기별(H)/년도별(Y) */
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_EDU_EVAL_TYPE IN VARCHAR2
 , I_EDU_EXAM_TYPE IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2 /* 콤마구분자로 여러건 */
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3020M01_01
   PURPOSE:    기간별추이보고서 - 개인별/소속별/업무그룹별/근속기간별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/29  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU3020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
			/* 조건에 해당하는 ROW 데이터 조회  */                      
		    SELECT C.TENANT_ID
		           ,C.DEPT_CD
		           ,C.AGENT_ID
		           ,C.AGENT_NM
		           ,C.TM_KIND
		           ,C.AGENT_JIKGUP
		           ,C.AGENT_JIKCHK
		           ,(SELECT S.CODE
		             FROM TB_CM_CODE S 
		            WHERE S.TENANT_ID = C.TENANT_ID 
		              AND S.SORT_CD   = 'WORK_PERIOD'
			          AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		             AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		           ,B.TOTAL_SCORE
		           ,A.EVAL_YMD
		           ,CASE  I_DATE_GUBUN WHEN 'M' THEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYYMM')
		                      WHEN 'Q' THEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYYQ')
		                      WHEN 'H' THEN (CASE WHEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'Q') < 3 
		                                          THEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYY')||'1' 
		                                          ELSE TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYY')||'3' END)
		                      WHEN 'Y' THEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYY') END AS COLUMN_ID	
		                      
	 	      FROM TB_EDU_EXAM_SCHE A 
		      INNER JOIN TB_EDU_EXAM_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID )
		      INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		    WHERE A.TENANT_ID  = I_TENANT_ID
		     AND A.EVAL_YMD BETWEEN I_DT_FROM||'01' AND I_DT_TO||'31'
		     AND A.EDU_EVAL_TYPE = CASE WHEN I_EDU_EVAL_TYPE IS NULL THEN A.EDU_EVAL_TYPE ELSE I_EDU_EVAL_TYPE END    
		     AND A.EDU_EXAM_TYPE = CASE WHEN I_EDU_EXAM_TYPE IS NULL THEN A.EDU_EXAM_TYPE ELSE I_EDU_EXAM_TYPE END
			 AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))      
		     AND (( I_SCHE_ID IS NULL AND 1=1 )
		          OR (I_SCHE_ID IS NOT NULL AND INSTR(I_SCHE_ID, A.SCHE_ID) > 0))
		     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
		     AND EXISTS (SELECT 1 
		     			   FROM TB_CM_ACCESS_SCOPE S 
		     			  WHERE S.TENANT_ID   = A.TENANT_ID
		     			    AND S.SCOPE_GUBUN = '30'
		     			    AND S.ITEM_ID     = A.SCHE_ID
		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )  
	   ), TEMP_CD AS (
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				    WHEN 'W' THEN 'WORK_PERIOD'
							     				    ELSE NULL END)
		), TEMP_LIST2 AS (  
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					 -- ,A.COLUMN_ID		     			 
					  ,COUNT(*)  AS TOTAL_CNT
					  ,0.89 AS TOTAL_TREND
			  		  ,SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
			  		  ,ROUND(AVG(A.TOTAL_SCORE),2) AS TOTAL_AVG
			  		  ,MAX(A.TOTAL_SCORE) AS TOTAL_MAX
			  		  ,MIN(A.TOTAL_SCORE) AS TOTAL_MIN
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END)
				  --    ,A.COLUMN_ID							     			 
	          ) 
--       ,TEMP_LIST3 AS(
--      SELECT A.TENANT_ID
--      		,A.CODE
--      		,STDDEV_POP(A.TOTAL_AVG) AS TOTAL_TREND
--  --  		,AVG(A.TOTAL_SCORE) AS TOTAL_AVG
--      		,MAX(A.TOTAL_MAX) AS TOTAL_MAX
      		--,MIN(A.TOTAL_MIN) AS TOTAL_MIN
--		FROM  TEMP_LIST2 A
--	   GROUP BY A.TENANT_ID, A.CODE	
--	   ) 	         
 	    SELECT A.TENANT_ID
      		,A.CODE
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.AGENT_NM
			                     WHEN 'D' THEN FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
								 WHEN 'T' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND', A.CODE)
								 WHEN 'W' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'WORK_PERIOD', A.CODE)
 			                     ELSE '' END)  AS CODE_NM       		
     		,TO_CHAR(A.TOTAL_TREND,'FM990.00') AS TOTAL_TREND      		
      		,TO_CHAR(A.TOTAL_AVG  ,'FM990.00') AS TOTAL_AVG
      		,TO_CHAR(A.TOTAL_MAX  ,'FM990.00') AS TOTAL_MAX
      		,TO_CHAR(A.TOTAL_MIN  ,'FM990.00') AS TOTAL_MIN
      	    /* 조회구분별  조회 */	
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.CODE)
			      ELSE '' END) AS CENTER
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.CODE)
			      ELSE '' END) AS PART
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.CODE)
			      ELSE '' END) AS TEAM
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
			      ELSE '' END) AS JO
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND', B.TM_KIND)
 			                     ELSE '' END)  AS TM_KIND_NM 			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.SABUN ELSE '' END)  AS SABUN			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP)
 			                     ELSE '' END)  AS AGENT_JIKGUP_NM    
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK)
 			                     ELSE '' END)  AS AGENT_JIKCHK_NM  			      			      			      
		FROM  TEMP_LIST2 A
		LEFT OUTER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.CODE = B.AGENT_ID )
	
        ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_EDU3020M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_DATE_GUBUN    IN VARCHAR2  /* 월별(M)/분기별(Q)/반기별(H)/년도별(Y) */
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_EDU_EVAL_TYPE IN VARCHAR2
 , I_EDU_EXAM_TYPE IN VARCHAR2
 , I_SCHE_ID       IN VARCHAR2 /* 콤마구분자로 여러건 */
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3020M01_02
   PURPOSE:    기간별추이보고서 - 조회구분별 / 기간구분별 - 데이터조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/29  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU3020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
	        ------------------------------------------------------------------------
	        -- 조건에 해당하는 ROW 데이터 조회
	        ------------------------------------------------------------------------
		    SELECT C.TENANT_ID
		           ,C.DEPT_CD
		           ,C.AGENT_ID
		           ,C.AGENT_NM
		           ,C.TM_KIND
		           ,C.AGENT_JIKGUP
		           ,C.AGENT_JIKCHK
		           ,(SELECT S.CODE
		             FROM TB_CM_CODE S 
		            WHERE S.TENANT_ID = C.TENANT_ID 
		              AND S.SORT_CD   = 'WORK_PERIOD'
			          AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		             AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		           ,B.TOTAL_SCORE
		           ,A.EVAL_YMD
		           ,CASE  I_DATE_GUBUN WHEN 'M' THEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYYMM')
		                      WHEN 'Q' THEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYYQ')
		                      WHEN 'H' THEN (CASE WHEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'Q') < 3 
		                                          THEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYY')||'1' 
		                                          ELSE TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYY')||'3' END)
		                      WHEN 'Y' THEN TO_CHAR(TO_DATE(A.EVAL_YMD,'YYYYMMDD'),'YYYY') END AS COLUMN_ID	
	 	      FROM TB_EDU_EXAM_SCHE A 
		      INNER JOIN TB_EDU_EXAM_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID )
		      INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		    WHERE A.TENANT_ID  = I_TENANT_ID
		     AND A.EVAL_YMD BETWEEN I_DT_FROM||'01' AND I_DT_TO||'31'
		     AND A.EDU_EVAL_TYPE = CASE WHEN I_EDU_EVAL_TYPE IS NULL THEN A.EDU_EVAL_TYPE ELSE I_EDU_EVAL_TYPE END    
		     AND A.EDU_EXAM_TYPE = CASE WHEN I_EDU_EXAM_TYPE IS NULL THEN A.EDU_EXAM_TYPE ELSE I_EDU_EXAM_TYPE END
			 AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))     
		     AND (( I_SCHE_ID IS NULL AND 1=1 )
		          OR (I_SCHE_ID IS NOT NULL AND INSTR(I_SCHE_ID, A.SCHE_ID) > 0))
		     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
		     AND EXISTS (SELECT 1 
		     			   FROM TB_CM_ACCESS_SCOPE S 
		     			  WHERE S.TENANT_ID   = A.TENANT_ID
		     			    AND S.SCOPE_GUBUN = '30'
		     			    AND S.ITEM_ID     = A.SCHE_ID
		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )  
	   ), TEMP_CD AS (
	        ------------------------------------------------------------------------
	        -- 업무그룹/근속기간일 경우 공통코드 조회
	        ------------------------------------------------------------------------
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				   WHEN 'W' THEN 'WORK_PERIOD'
							     				   ELSE NULL END)
		), TEMP_LIST2 AS (
	        ------------------------------------------------------------------------
	        -- 조회구분별 통계 
	        ------------------------------------------------------------------------
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					  ,A.COLUMN_ID		     			 
					  ,COUNT(*)  AS TOTAL_CNT
			  		  ,ROUND(AVG(A.TOTAL_SCORE),2) AS TOTAL_AVG
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                WHEN 'D' THEN  A.DEPT_CD
			                                ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			END)
				      ,A.COLUMN_ID							     			 
	          )  
      SELECT A.TENANT_ID
      		,A.CODE
      		,A.COLUMN_ID
      		,TO_CHAR(A.TOTAL_CNT  ,'FM990.00') AS TOTAL_CNT
   			,TO_CHAR(A.TOTAL_AVG  ,'FM990.00') AS TOTAL_AVG
		FROM  TEMP_LIST2 A 
		
		UNION ALL
		
		SELECT A.TENANT_ID
	  		,A.CODE
	  		,'#' AS COLUMN_ID
			,TO_CHAR(SUM(A.TOTAL_CNT),'FM990.00') AS TOTAL_CNT
	  		,TO_CHAR(STDDEV_POP(A.TOTAL_AVG),'FM990.00') AS TOTAL_AVG
		FROM TEMP_LIST2 A
	   GROUP BY A.TENANT_ID , A.CODE
	   ORDER BY CODE
		;
			      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_EDU3030M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_SCHE_ID       IN VARCHAR2  
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3030M01_01
   PURPOSE:    평가항목별보고서 - 개인별/소속별/업무그룹별/근속기간별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/29  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU3030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
			/* 조건에 해당하는 ROW 데이터 조회  */                      
		    SELECT C.TENANT_ID
		           ,C.DEPT_CD
		           ,C.AGENT_ID
		           ,C.AGENT_NM
		           ,C.TM_KIND
		           ,C.AGENT_JIKGUP
		           ,C.AGENT_JIKCHK
		           ,(SELECT S.CODE
		             FROM TB_CM_CODE S 
		            WHERE S.TENANT_ID = C.TENANT_ID 
		              AND S.SORT_CD   = 'WORK_PERIOD'
			          AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		             AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		           ,B.TOTAL_SCORE
		           ,A.EVAL_YMD
		           ,(SELECT SUM(CASE WHEN S.RESULT_SCORE = T.SCORE THEN 1 ELSE 0 END)
		               FROM TB_EDU_EXAM_RESULT_DETAIL S 
		               INNER JOIN TB_EDU_SHEET_DETAIL T 
		                 ON (S.TENANT_ID = T.TENANT_ID  
		                     AND T.QUESTION_ID = S.QUESTION_ID)
		               WHERE S.TENANT_ID = B.TENANT_ID
		                AND S.SHEETKEY   = B.SHEETKEY 
		                AND T.SHEET_ID   = B.SHEET_ID
		             ) AS CORRECT_CNT
				 ,(SELECT SUM(CASE WHEN S.RESULT_SCORE>0 AND S.RESULT_SCORE < T.SCORE THEN 1 ELSE 0 END)
	               FROM TB_EDU_EXAM_RESULT_DETAIL S 
	               INNER JOIN TB_EDU_SHEET_DETAIL T 
	                 ON (S.TENANT_ID = T.TENANT_ID  
	                     AND T.QUESTION_ID = S.QUESTION_ID)
	               WHERE S.TENANT_ID = B.TENANT_ID
	                AND S.SHEETKEY   = B.SHEETKEY 
	                AND T.SHEET_ID   = B.SHEET_ID
	             ) AS PART_CNT	
				 ,(SELECT COUNT(QUESTION_ID)
	                FROM TB_EDU_SHEET_DETAIL T 
	                WHERE T.TENANT_ID = B.TENANT_ID  
	                AND T.SHEET_ID   = B.SHEET_ID                
	             ) AS QUESTION_CNT	             	             
	 	      FROM TB_EDU_EXAM_SCHE A 
		      INNER JOIN TB_EDU_EXAM_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID )
		      INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		    WHERE A.TENANT_ID  = I_TENANT_ID
		     AND A.SCHE_ID = I_SCHE_ID
			 AND (( I_AGENT_ID IS NULL AND 1=1 )
			   OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))      
		     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
		     AND EXISTS (SELECT 1 
		     			   FROM TB_CM_ACCESS_SCOPE S 
		     			  WHERE S.TENANT_ID   = A.TENANT_ID
		     			    AND S.SCOPE_GUBUN = '30'
		     			    AND S.ITEM_ID     = A.SCHE_ID
		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )  
	   ), TEMP_CD AS (
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				    WHEN 'W' THEN 'WORK_PERIOD'
							     				    ELSE NULL END)
		)
		, TEMP_LIST2 AS (  
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					 -- ,A.COLUMN_ID		     			 
					  ,COUNT(*)  AS TOTAL_CNT
			  		  ,SUM(A.TOTAL_SCORE) AS TOTAL_SUM
			  		  ,RANK() OVER(ORDER BY SUM(A.TOTAL_SCORE) DESC) AS TOTAL_RANK
			  		  ,SUM(A.CORRECT_CNT) AS TOTAL_CORRECT
			  		  ,SUM(A.PART_CNT) AS TOTAL_PART
			  		  ,SUM(A.QUESTION_CNT)-SUM(A.CORRECT_CNT)-SUM(A.PART_CNT) AS TOTAL_INCORRECT  /* 오답건수 =전체 문항건수에서  */
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END)
				  --    ,A.COLUMN_ID							     			 
	          ) 
 /*      ,TEMP_LIST3 AS(
      SELECT A.TENANT_ID
      		,A.CODE
      		,AVG(A.TOTAL_SCORE) AS TOTAL_AVG
      		,MAX(A.TOTAL_MAX) AS TOTAL_MAX
      		,MIN(A.TOTAL_MIN) AS TOTAL_MIN
		FROM  TEMP_LIST2 A
	   GROUP BY A.TENANT_ID, A.CODE	
	   ) 	  */         
 	    SELECT A.TENANT_ID
      		,A.CODE
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.AGENT_NM
			                     WHEN 'D' THEN FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
								 WHEN 'T' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND', A.CODE)
								 WHEN 'W' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'WORK_PERIOD', A.CODE)
 			                     ELSE '' END)  AS CODE_NM       		
      		,A.TOTAL_SUM
      		,A.TOTAL_RANK
      		,A.TOTAL_CORRECT
      		,A.TOTAL_PART
      		,A.TOTAL_INCORRECT
      	    /* 조회구분별  조회 */	
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.CODE)
			      ELSE '' END) AS CENTER
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.CODE)
			      ELSE '' END) AS PART
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.CODE)
			      ELSE '' END) AS TEAM
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
			      ELSE '' END) AS JO
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND', B.TM_KIND)
 			                     ELSE '' END)  AS TM_KIND_NM 			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.SABUN ELSE '' END)  AS SABUN			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP)
 			                     ELSE '' END)  AS AGENT_JIKGUP_NM    
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK)
 			                     ELSE '' END)  AS AGENT_JIKCHK_NM  			      			      			      
		FROM  TEMP_LIST2 A
		LEFT OUTER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.CODE = B.AGENT_ID )
        ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_EDU3030M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_SCHE_ID       IN VARCHAR2  
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN1   IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , I_VIEW_GUBUN2   IN VARCHAR2 /* 문항별(Q)/업무구분별(E) */  
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU3030M01_02
   PURPOSE:    평가항목별보고서 - 조회구분별 / (문항별/업무구분별) - 데이터조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/29  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU3030M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
	        ------------------------------------------------------------------------
	        -- 조건에 해당하는 ROW 데이터 조회
	        ------------------------------------------------------------------------
		    SELECT C.TENANT_ID
		           ,C.DEPT_CD
		           ,C.AGENT_ID
		           ,C.AGENT_NM
		           ,C.TM_KIND
		           ,C.AGENT_JIKGUP
		           ,C.AGENT_JIKCHK
		           ,(SELECT S.CODE
		             FROM TB_CM_CODE S 
		            WHERE S.TENANT_ID = C.TENANT_ID 
		              AND S.SORT_CD   = 'WORK_PERIOD'
			          AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		             AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		           ,NVL(F.RESULT_SCORE,0) AS RESULT_SCORE
		           ,A.EVAL_YMD
		           ,CASE  I_VIEW_GUBUN2  /* 문항별 또는 업무구분별에 따라 */
		                WHEN 'Q' THEN E.QUESTION_ID
		                WHEN 'E' THEN WORK_TYPE1||NVL(E.WORK_TYPE2,'NOITEM')
					END AS COLUMN_ID	
	      FROM TB_EDU_EXAM_SCHE A 
		      INNER JOIN TB_EDU_EXAM_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID )
		      INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		      INNER JOIN TB_EDU_SHEET_DETAIL E ON ( A.TENANT_ID = E.TENANT_ID AND A.SHEET_ID = E.SHEET_ID)
		      INNER JOIN TB_EDU_EXAM_RESULT_DETAIL F ON (B.TENANT_ID =F.TENANT_ID AND B.SHEETKEY = F.SHEETKEY )		                                            
		    WHERE A.TENANT_ID  = I_TENANT_ID
		     AND A.SCHE_ID = I_SCHE_ID
		     AND F.QUESTION_ID = E.QUESTION_ID
			 AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))     
		     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
		     AND EXISTS (SELECT 1 
		     			   FROM TB_CM_ACCESS_SCOPE S 
		     			  WHERE S.TENANT_ID   = A.TENANT_ID
		     			    AND S.SCOPE_GUBUN = '30'
		     			    AND S.ITEM_ID     = A.SCHE_ID
		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD ) 
	   ), TEMP_CD AS (
	        ------------------------------------------------------------------------
	        -- 업무그룹/근속기간일 경우 공통코드 조회
	        ------------------------------------------------------------------------
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN1  WHEN 'T' THEN 'TM_KIND'
							     				   WHEN 'W' THEN 'WORK_PERIOD'
							     				   ELSE NULL END)
		), TEMP_LIST2 AS (
	        ------------------------------------------------------------------------
	        -- 조회구분별 통계 
	        ------------------------------------------------------------------------
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN1  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					  ,A.COLUMN_ID		     			 
					  ,SUM(A.RESULT_SCORE) AS TOTAL_SCORE
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN1  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN1  WHEN 'P' THEN  A.AGENT_ID
			                                WHEN 'D' THEN  A.DEPT_CD
			                                ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			END)
				      ,A.COLUMN_ID							     			 
	          )  
      SELECT A.TENANT_ID
      		,A.CODE
      		,A.COLUMN_ID
      		,A.TOTAL_SCORE
		FROM  TEMP_LIST2 A ;
			      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4010S01_01" (
	  I_TENANT_ID   IN VARCHAR2
	, I_AGENT_ID    IN VARCHAR2
	, I_CU_GUBUN    IN VARCHAR2
	, I_SCHE_ID     IN VARCHAR2
	, I_SCHE_NM     IN VARCHAR2
	, I_EDU_KIND    IN VARCHAR2
	, I_EDU_TARGET  IN VARCHAR2
	, I_STD_MONTH   IN VARCHAR2
	, I_START_YMD   IN VARCHAR2
	, I_END_YMD     IN VARCHAR2
	, I_EDU_STATUS  IN VARCHAR2
	, I_DEPT_CD     IN VARCHAR2
	, I_NOTICE_YN   IN VARCHAR2
    , O_CUR_LIST    OUT SYS_REFCURSOR
) AS 

/******************************************************************************
   NAME:       SP_EDU4010S01_01
   PURPOSE:    교육계획 관리 - 교육계획 등록, 수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/20  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_EDU4010S01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

	V_SCHE_ID		VARCHAR2(10)		:=''; 
	
BEGIN

-- ********************************************************************************
-- 1. 수정, 등록
-- ********************************************************************************

	SELECT 
		CASE WHEN CHK.SCHE_ID IS NULL THEN TO_CHAR(SYSDATE, 'YYYYMM') || '0001'
			ELSE TO_CHAR(SYSDATE, 'YYYYMM') || SUBSTR(CHK.SCHE_ID, 7, 4)
			END INTO V_SCHE_ID
	FROM (
		SELECT MAX(SCHE_ID + 1) AS SCHE_ID
		FROM TB_EDU_SCHE
		WHERE 1 = 1 
		AND TENANT_ID = I_TENANT_ID
		AND STD_MONTH = TO_CHAR(SYSDATE, 'YYYYMM')
	) CHK; 


	IF I_CU_GUBUN = 'U' THEN
	
		UPDATE TB_EDU_SCHE SET 
			SCHE_NM    = I_SCHE_NM
			, EDU_KIND   = I_EDU_KIND
			, EDU_TARGET = I_EDU_TARGET
			, STD_MONTH  = I_STD_MONTH
			, START_YMD  = I_START_YMD
			, END_YMD    = I_END_YMD
			, EDU_STATUS = I_EDU_STATUS
			, NOTICE_YN  = I_NOTICE_YN
			, MODIFY_DT  = SYSDATE
			, MODIFY_AGENT_ID = I_AGENT_ID
		WHERE TENANT_ID = I_TENANT_ID
		AND SCHE_ID   = I_SCHE_ID ;
			                   
		DELETE FROM TB_CM_ACCESS_SCOPE
		WHERE TENANT_ID = I_TENANT_ID
		AND SCOPE_GUBUN = '80'
		AND ITEM_ID = I_SCHE_ID;
	
		SP_UC_SET_ACCESS_SCOPE(I_TENANT_ID, '80', I_SCHE_ID, I_DEPT_CD);
	
	ELSIF I_CU_GUBUN = 'I' THEN
			
		INSERT INTO TB_EDU_SCHE(
			TENANT_ID
			, SCHE_ID
			, SCHE_NM
			, EDU_KIND
			, EDU_TARGET
			, STD_MONTH
			, START_YMD
			, END_YMD
			, EDU_STATUS
			, NOTICE_YN
			, CREATE_AGENT_ID
			, CREATE_DT
			, MODIFY_AGENT_ID
			, MODIFY_DT
		) VALUES ( 
			I_TENANT_ID
			, V_SCHE_ID
			, I_SCHE_NM
			, I_EDU_KIND
			, I_EDU_TARGET
			, I_STD_MONTH
			, I_START_YMD
			, I_END_YMD
			, I_EDU_STATUS
			, I_NOTICE_YN
			, I_AGENT_ID
			, SYSDATE
			, I_AGENT_ID
			, SYSDATE
		) ;
		   
		-- 관리소속 등록  
		SP_UC_SET_ACCESS_SCOPE(I_TENANT_ID, '80', V_SCHE_ID, I_DEPT_CD);	          		   
	
	END IF;
	
	COMMIT;	
		
	-- 키값 반환
	OPEN O_CUR_LIST FOR 
    SELECT V_SCHE_ID AS SCHE_ID FROM DUAL;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4010S04_01" (
   I_TENANT_ID    IN VARCHAR2
 , I_DEPT_CD      IN VARCHAR2
 , I_TM_KIND	  IN VARCHAR2
 , I_WORK_PERIOD  IN VARCHAR2 
 , I_AGENT_JIKGUP IN VARCHAR2
 , I_AGENT_JIKCHK IN VARCHAR2
 , I_SCHE_ID      IN VARCHAR2
 , I_DUP_YN       IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4010S04_01
   PURPOSE:    교육계획관리 - 평가대상자관리 - 평가대상자조회(전체)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/26
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4010S04_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

    V_START_YMD   VARCHAR2(8) :='';
    V_END_YMD     VARCHAR2(8) :='';
 BEGIN

-- ********************************************************************************
-- 0.중복대상자 제외 조건일 경우 체크하기 위해 현 평가계획의 기간 조회
-- ******************************************************************************** 
    SELECT A.START_YMD, A.END_YMD
      INTO V_START_YMD, V_END_YMD
      FROM TB_EDU_SCHE A
     WHERE A.TENANT_ID = I_TENANT_ID
       AND A.SCHE_ID   = I_SCHE_ID ;
        
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 

		SELECT FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
	         , A.DEPT_CD
	  		 , A.SABUN
	  		 , A.AGENT_ID
	  		 , A.AGENT_NM
	         , A.TM_KIND
		     , FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
		     , FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
		  FROM TB_CM_USER_MASTER A
         INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
         WHERE 1 = 1 
		   AND A.TENANT_ID = I_TENANT_ID
		   AND A.HIDE_YN = 0 
		   AND NVL(A.JAEJIK_GUBUN,'10') !='99'
		   AND A.TM_KIND	  = CASE WHEN I_TM_KIND 	 IS NULL THEN A.TM_KIND      ELSE I_TM_KIND	   END     
		   AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
		   AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
		   /* 근속기간 조건 일 경우 */
		   AND (( I_WORK_PERIOD IS NULL AND 1=1 )
		          OR (I_WORK_PERIOD IS NOT NULL 
		               AND EXISTS(  SELECT 1
				                      FROM TB_CM_CODE S 
				                     WHERE S.TENANT_ID = A.TENANT_ID 
				                       AND S.SORT_CD   = 'WORK_PERIOD'
				                       AND S.CODE      = I_WORK_PERIOD
				                       AND A.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2 )
         ))
	 /* 중복대상사 제외 조건 일 경우  동일 기간 내 평가대상자로 등록된 AGENT_ID 제외 */
	     AND ( ( I_DUP_YN IS NULL AND 1=1 )
  	            OR (I_DUP_YN IS NOT NULL AND I_DUP_YN = 'Y'
	           AND NOT EXISTS ( SELECT 1
							      FROM TB_EDU_SCHE X
							     INNER JOIN TB_EDU_TARGET Y ON X.TENANT_ID = Y.TENANT_ID AND X.SCHE_ID = Y.SCHE_ID
							     WHERE 1 = 1 
							       AND X.TENANT_ID  = I_TENANT_ID
							       AND X.SCHE_ID   != I_SCHE_ID /* 현재 평가계획은 제외하고 비교*/
								   AND (    ( V_START_YMD  >= X.START_YMD AND V_START_YMD < X.END_YMD )
								          OR( V_END_YMD > X.START_YMD  AND V_END_YMD <=X.END_YMD ) 
								          OR( V_START_YMD <= X.START_YMD AND V_END_YMD >=X.END_YMD ) 
								       )
								   AND Y.AGENT_ID = A.AGENT_ID
							   )
	               
				)
	         )         
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4020S02_01" (
	I_TENANT_ID  IN VARCHAR2
  , I_SCHE_ID    IN VARCHAR2
  , I_DEPT_CD    IN VARCHAR2
  , I_AGENT_ID   IN VARCHAR2
  , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4020S02_01
   PURPOSE:    교육진행관리 - 교육이수/승인(팝업) - 명단 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/30
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4020S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 

		SELECT A.TENANT_ID
		     , A.SCHE_ID
		     , A.AGENT_ID
		     , A.COMPLETE_YN
		     , A.COMMENT_TEXT
		     , A.GONGMU_YN
		     , A.GONGMU_TM  || '분' AS GONGMU_TM
		     , A.USERDATA1
		     , A.USERDATA2
		     , A.USERDATA3
		     , A.USERDATA4
		     , A.USERDATA5
		     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, B.DEPT_CD) AS TEAM_NM
		     , B.SABUN
		     , B.AGENT_NM
		     , ( SELECT COUNT(*)
		           FROM TB_EDU_ATTENDANCE T
		          WHERE T.TENANT_ID = I_TENANT_ID
		            AND T.SCHE_ID   = I_SCHE_ID
		            AND T.AGENT_ID  = A.AGENT_ID
		            AND T.ATTENDANCE_YN = '1') || '/' ||
				( SELECT COUNT(*)
				    FROM TB_EDU_SUBJECT T
				   WHERE T.TENANT_ID = I_TENANT_ID
				     AND T.SCHE_ID   = I_SCHE_ID )   AS ATTENDANCE_CNT
		     , ( SELECT SUM(TRUNC((TO_DATE(T.EDU_END_TM, 'HH24MI') - TO_DATE(T.EDU_START_TM, 'HH24MI')) * 24 * 60))
		           FROM TB_EDU_SUBJECT T
		          WHERE T.TENANT_ID = I_TENANT_ID
		            AND T.SCHE_ID   = I_SCHE_ID ) AS SUBJECT_TM
		  FROM TB_EDU_TARGET A
  		 INNER JOIN TB_CM_USER_MASTER B
		    ON A.TENANT_ID = B.TENANT_ID
  		   AND A.AGENT_ID  = B.AGENT_ID
		 INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND A.SCHE_ID   = I_SCHE_ID
   		   AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID, A.AGENT_ID) > 0)) ;
		
		 
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_EDU4030M01_01" (
	I_TENANT_ID    IN VARCHAR2
  , I_START_MONTH  IN VARCHAR2
  , I_END_MONTH    IN VARCHAR2
  , I_SCHE_ID      IN VARCHAR2
  , I_DEPT_CD      IN VARCHAR2
  , I_AGENT_ID     IN VARCHAR2
  , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_EDU4030M01_01
   PURPOSE:    대상자이력 조회 - 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/07/03
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_EDU4030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

 BEGIN
 
    OPEN O_CUR_LIST FOR 

		SELECT FN_CM_GET_DEPT_NM(I_TENANT_ID, 'center', B.DEPT_CD) AS CENTER
		     , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'part', B.DEPT_CD) AS PART
		     , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'team', B.DEPT_CD) AS TEAM
		     , FN_CM_GET_DEPT_NM(I_TENANT_ID, 'jo', B.DEPT_CD) AS JO
			 , B.TM_KIND
	         , FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND_NM         
	         , B.SABUN
	         , B.AGENT_ID
	         , B.AGENT_NM
	         , B.AGENT_JIKGUP
	         , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM 
	         , B.AGENT_JIKCHK
	         , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
	         , C.SCHE_ID
	         , C.SCHE_NM
		     , ( SELECT COUNT(*)
		           FROM TB_EDU_ATTENDANCE T
		          WHERE T.TENANT_ID = I_TENANT_ID
		            AND T.SCHE_ID   = A.SCHE_ID
		            AND T.AGENT_ID  = A.AGENT_ID
		            AND T.ATTENDANCE_YN = '1') || '/' ||
				( SELECT COUNT(*)
				    FROM TB_EDU_SUBJECT T
				   WHERE T.TENANT_ID = I_TENANT_ID
				     AND T.SCHE_ID   = A.SCHE_ID )   AS ATTENDANCE_CNT
		     , A.COMPLETE_YN
		     , A.GONGMU_YN
		     , A.GONGMU_TM || '분' AS GONGMU_TM
   		     , TO_CHAR(TO_DATE(C.START_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') || '~' || TO_CHAR(TO_DATE(C.END_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')
		       || ' (' || (TO_DATE(C.END_YMD, 'YYYYMMDD') - TO_DATE(C.START_YMD, 'YYYYMMDD') + 1) || '일)' AS EDU_PERIOD
 		     , C.EDU_KIND AS EDU_KIND
			 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_KIND', C.EDU_KIND) AS EDU_KIND_NM
			 , C.EDU_TARGET AS EDU_TARGET
			 , FN_CM_GET_CODE_NM(I_TENANT_ID, 'EDU_TARGET', C.EDU_TARGET) AS EDU_TARGET_NM
			 , ( SELECT COUNT(*)
			       FROM TB_EDU_SUBJECT T
			      WHERE T.TENANT_ID = I_TENANT_ID
			        AND T.SCHE_ID   = C.SCHE_ID ) AS SUBJECT_CNT
		     , ( SELECT CASE WHEN SUM(TRUNC((TO_DATE(T.EDU_END_TM, 'HH24MI') - TO_DATE(T.EDU_START_TM, 'HH24MI')) * 24 * 60)) != 0
	                         THEN SUM(TRUNC((TO_DATE(T.EDU_END_TM, 'HH24MI') - TO_DATE(T.EDU_START_TM, 'HH24MI')) * 24 * 60)) || '분'
	                         ELSE NULL END
 		           FROM TB_EDU_SUBJECT T
 		          WHERE T.TENANT_ID = I_TENANT_ID
 		            AND T.SCHE_ID   = C.SCHE_ID ) AS SUBJECT_TM
		  FROM TB_EDU_TARGET A INNER JOIN TB_CM_USER_MASTER B
		    ON A.TENANT_ID = B.TENANT_ID
		   AND A.AGENT_ID  = B.AGENT_ID
		 INNER JOIN TB_EDU_SCHE C
		    ON A.TENANT_ID = C.TENANT_ID
		   AND A.SCHE_ID   = C.SCHE_ID
		 INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) D ON B.DEPT_CD = D.DEPT_CD		
		 WHERE A.TENANT_ID = I_TENANT_ID
		   AND I_START_MONTH <= SUBSTR(C.SCHE_ID, 0, 6) 
		   AND I_END_MONTH   >= SUBSTR(C.SCHE_ID, 0, 6)
		   AND (( I_SCHE_ID  IS NULL AND 1=1 ) OR (I_SCHE_ID  IS NOT NULL AND INSTR( I_SCHE_ID, C.SCHE_ID) > 0))
		   AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID, A.AGENT_ID) > 0))		   
	  ;
	  

         
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1010M01_06 (
	 I_TENANT_ID    	   IN VARCHAR2
	,I_LOGIN_ID     	   IN VARCHAR2 /* 로그인사용자ID */   
	,I_AGENT_ID     	   IN VARCHAR2
	,I_SABUN               IN VARCHAR2
	,I_AGENT_NM            IN VARCHAR2
	,I_BIRTH_YMD           IN VARCHAR2
	,I_GENDER_KIND         IN VARCHAR2
	,I_TEL_NO              IN VARCHAR2	
	,I_HIDE_YN             IN VARCHAR2	
	,I_SCHE_TARGET_YN      IN VARCHAR2
	,I_EDU_TARGET_YN       IN VARCHAR2
	,I_QA_TARGET_YN        IN VARCHAR2
	,I_KPI_TARGET_YN       IN VARCHAR2
	,I_DAYNIGHT_GUBUN      IN VARCHAR2	
	,I_JIKJONG_KIND        IN VARCHAR2
	,I_CONTRACT_FRM        IN VARCHAR2
	,I_CONTRACT_END        IN VARCHAR2
	,I_USER_DATA1    	   IN VARCHAR2
	,I_USER_DATA2    	   IN VARCHAR2
	,I_USER_DATA3    	   IN VARCHAR2
	,I_USER_DATA4    	   IN VARCHAR2
	,I_USER_DATA5    	   IN VARCHAR2
	,I_USER_DATA6    	   IN VARCHAR2
	,I_USER_DATA7    	   IN VARCHAR2
	,I_USER_DATA8    	   IN VARCHAR2
	,I_USER_DATA9    	   IN VARCHAR2
	,I_USER_DATA10   	   IN VARCHAR2				 
) AS 
/******************************************************************************
   NAME:       SP_HR1010M01_06
   PURPOSE:    상담사정보관리 - 저장

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/09  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1010M01_06';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. USER MASTER 변경이력 생성
-- ******************************************************************************** 
	SP_UC_SET_USER_MASTER_MOD(I_TENANT_ID, I_LOGIN_ID,I_AGENT_ID,'A'
	,I_AGENT_NM||' ,'||I_SABUN||' ,'||I_JIKJONG_KIND||' ,'||I_DAYNIGHT_GUBUN||' ,'||I_BIRTH_YMD||' ,'||I_HIDE_YN||' ,'||I_TEL_NO );

 
-- ********************************************************************************
-- 0. 저장
-- ********************************************************************************    
	 UPDATE TB_CM_USER_MASTER SET
	        SABUN             = I_SABUN
	        ,AGENT_NM         = I_AGENT_NM
	        ,BIRTH_YMD        = I_BIRTH_YMD
	        ,GENDER_KIND      = I_GENDER_KIND
	        ,TEL_NO			  = I_TEL_NO
	        ,JIKJONG_KIND     = I_JIKJONG_KIND
	        ,DAYNIGHT_GUBUN   = I_DAYNIGHT_GUBUN
	        ,HIDE_YN          = NVL(I_HIDE_YN,0)
 			,CONTRACT_FRM     = I_CONTRACT_FRM
 			,CONTRACT_END     = I_CONTRACT_END 			
	        ,SCHE_TARGET_YN   = NVL(I_SCHE_TARGET_YN,0)
	        ,EDU_TARGET_YN    = NVL(I_EDU_TARGET_YN,0)
	        ,QA_TARGET_YN     = NVL(I_QA_TARGET_YN,0)
	        ,KPI_TARGET_YN    = NVL(I_KPI_TARGET_YN,0)
	        ,MODIFY_AGENT_ID = I_LOGIN_ID
	        ,MODIFY_DT       = SYSTIMESTAMP
	 WHERE TENANT_ID = I_TENANT_ID AND AGENT_ID = I_AGENT_ID ;
         
  	COMMIT;
  	
  	MERGE INTO TB_CM_USER_DETAIL T
    USING (SELECT I_TENANT_ID  AS TENANT_ID
                , I_AGENT_ID   AS AGENT_ID
                , I_USER_DATA1 AS USER_DATA1
                , I_USER_DATA2 AS USER_DATA2
                , I_USER_DATA3 AS USER_DATA3
                , I_USER_DATA4 AS USER_DATA4
                , I_USER_DATA5 AS USER_DATA5
                , I_USER_DATA6 AS USER_DATA6
                , I_USER_DATA7 AS USER_DATA7
                , I_USER_DATA8 AS USER_DATA8
                , I_USER_DATA9 AS USER_DATA9                                
                , I_USER_DATA10 AS USER_DATA10
             FROM DUAL ) S
    ON ( T.TENANT_ID = S.TENANT_ID AND T.AGENT_ID = S.AGENT_ID )
    WHEN MATCHED THEN
      UPDATE SET  USER_DATA1 = S.USER_DATA1
      	  		 ,USER_DATA2 = S.USER_DATA2
      	  		 ,USER_DATA3 = S.USER_DATA3
      	  		 ,USER_DATA4 = S.USER_DATA4
      	  		 ,USER_DATA5 = S.USER_DATA5
      	  		 ,USER_DATA6 = S.USER_DATA6 
      	  		 ,USER_DATA7 = S.USER_DATA7
      	  		 ,USER_DATA8 = S.USER_DATA8
      	  		 ,USER_DATA9 = S.USER_DATA9
      	  		 ,USER_DATA10= S.USER_DATA10       	  		      	  		       	  		       	  		 
    WHEN NOT MATCHED THEN
      INSERT(     TENANT_ID
                , AGENT_ID
                , USER_DATA1
                , USER_DATA2
                , USER_DATA3
                , USER_DATA4
                , USER_DATA5                                                 
                , USER_DATA6
                , USER_DATA7
                , USER_DATA8
                , USER_DATA9
                , USER_DATA10
      ) VALUES (
                  S.TENANT_ID
                , S.AGENT_ID
                , S.USER_DATA1
                , S.USER_DATA2
                , S.USER_DATA3
                , S.USER_DATA4
                , S.USER_DATA5
                , S.USER_DATA6
                , S.USER_DATA7
                , S.USER_DATA8
                , S.USER_DATA9
                , S.USER_DATA10                 
        )  ;
    
   	COMMIT;
   	     
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
   
   		RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1020M01_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_DT_FROM      IN VARCHAR2
 , I_DT_TO        IN VARCHAR2
 , I_DEPT_CD      IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , I_APPOINT_KIND IN VARCHAR2
 , I_EXECUTE_STATUS IN NUMBER
 , I_ORDER_RSN      IN VARCHAR2 
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1020M01_01
   PURPOSE:    상담사발령 - 발령목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/13  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  
    OPEN O_CUR_LIST FOR 
    SELECT FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD) AS CENTER
          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD) AS PART
          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD) AS TEAM
          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD) AS JO
          ,A.AGENT_ID
  		  ,B.SABUN
  		  ,B.AGENT_NM
          , FN_CM_STRING_FORMAT(A.OFFICIAL_ORDER_YMD,'@@@@-@@-@@') AS OFFICIAL_ORDER_YMD 
          , A.APPOINT_KIND
    	  , FN_CM_GET_CODE_NM(A.TENANT_ID,'APPOINT_KIND',A.APPOINT_KIND) AS APPOINT_KIND_NM
    	  , CASE WHEN A.EXECUTE_YN = 1 THEN '시행' ELSE '예약' END AS EXECUTE_YN_NM
    	  , NVL(A.EXECUTE_YN,0) AS EXECUTE_YN
		  , A.BF_DEPT_CD
          , A.BF_TMKIND_CD
          , A.BF_JIKGUP_CD
          , A.BF_JIKCHK_CD        	  
          , A.BF_DEPT_NM
          , A.BF_TMKIND_NM
          , A.BF_JIKGUP_NM
          , A.BF_JIKCHK_NM
          , A.AF_DEPT_CD
          , A.AF_TMKIND_CD
          , A.AF_JIKGUP_CD
          , A.AF_JIKCHK_CD              	  
          , A.AF_DEPT_NM
          , A.AF_TMKIND_NM
          , A.AF_JIKGUP_NM
          , A.AF_JIKCHK_NM
          , FN_CM_GET_AGENT_NM(A.TENANT_ID, A.OFFICIAL_ORDER_MEMB) AS WORK_MEMB_NM
          , TO_CHAR(A.WORK_YMD,'YYYY-MM-DD HH24:MI:SS') AS WORK_YMD
          , A.SNO
    FROM TB_HR_OFFICIAL_ORDER A
    INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
    JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD  
    WHERE 1=1 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.OFFICIAL_ORDER_YMD BETWEEN I_DT_FROM AND I_DT_TO
     AND (( I_AGENT_ID IS NULL AND 1=1 )
	      OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,B.AGENT_ID) > 0))            
     AND A.APPOINT_KIND = CASE WHEN I_APPOINT_KIND IS NULL THEN A.APPOINT_KIND ELSE I_APPOINT_KIND END
     AND A.EXECUTE_YN = CASE WHEN I_EXECUTE_STATUS IS NULL THEN A.EXECUTE_YN ELSE I_EXECUTE_STATUS END   
     AND (( I_ORDER_RSN IS NULL AND 1=1 )
          OR (I_ORDER_RSN IS NOT NULL AND INSTR(A.OFFICIAL_ORDER_RSN, I_ORDER_RSN) > 0))        
     ORDER BY A.OFFICIAL_ORDER_YMD DESC, SNO DESC, WORK_YMD DESC
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1020S02_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_DEPT_CD      IN VARCHAR2
 , I_AGENT_ID     IN VARCHAR2
 , I_AGENT_JIKGUP IN VARCHAR2
 , I_AGENT_JIKCHK IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1020S02_01
   PURPOSE:    상담사발령 - 이동발령/퇴직발령 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/13  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1020S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
  
    OPEN O_CUR_LIST FOR 
    SELECT FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.DEPT_CD) AS CENTER
          ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD) AS PART
          ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD) AS TEAM
          ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS JO
          ,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
          ,A.DEPT_CD
  		  ,A.SABUN
  		  ,A.AGENT_ID
  		  ,A.AGENT_NM
          ,A.TM_KIND
        ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
        ,A.AGENT_JIKGUP
        ,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM 
        ,A.AGENT_JIKCHK
        ,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM 
        ,FN_CM_STRING_FORMAT(A.ENTER_YMD, '@@@@-@@-@@') AS ENTER_YMD
        ,FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
     FROM TB_CM_USER_MASTER A
    INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
    WHERE 1=1 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.HIDE_YN = 0 
     AND NVL(A.JAEJIK_GUBUN,'10') !='99'
      AND (( I_AGENT_ID IS NULL AND 1=1 )
          OR (I_AGENT_ID IS NOT NULL AND INSTR(A.AGENT_ID, I_AGENT_ID) > 0)) 
     AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
     AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1030M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_STD_MONTH     IN VARCHAR2
 , I_DEPT_CD       IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_TM_KIND       IN VARCHAR2
 , I_AGENT_JIKGUP  IN VARCHAR2
 , I_AGENT_JIKCHK  IN VARCHAR2
 , I_TARGET_YN     IN VARCHAR2
 , I_RETIRE_YN     IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1030M01_01
   PURPOSE:    평가대상자관리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/15  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT *
    FROM (
        SELECT A.STD_MONTH
	          ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.DEPT_CD) AS CENTER
	          ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD) AS PART
	          ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD) AS TEAM
	          ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS JO
	          ,A.AGENT_ID
              ,A.AGENT_NM
              ,A.SABUN
              ,A.DEPT_CD AS DEPT_ID
              ,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_NM
              ,A.TM_KIND
              ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM
              ,A.AGENT_JIKGUP
              ,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
              ,A.AGENT_JIKCHK
              ,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
              ,A.JAEJIK_GUBUN
              ,FN_CM_STRING_FORMAT(A.ENTER_YMD, '@@@@-@@-@@') AS ENTER_YMD
		      ,NVL(A.SCHE_TARGET_YN,0) AS SCHE_TARGET_YN
		      ,NVL(A.EDU_TARGET_YN ,0) AS EDU_TARGET_YN
		      ,NVL(A.QA_TARGET_YN  ,0) AS QA_TARGET_YN
		      ,NVL(A.KPI_TARGET_YN ,0) AS KPI_TARGET_YN
		      ,(CASE NVL(A.SCHE_TARGET_YN,0)+NVL(A.EDU_TARGET_YN,0)+NVL(A.QA_TARGET_YN,0)+NVL(A.KPI_TARGET_YN,0) 
		        WHEN  0 THEN 0
		         ELSE 1 END ) AS TARGET_YN
        FROM TB_CM_USER_MASTER_HISTORY A
        INNER JOIN TB_CM_USER_MASTER C ON A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID
        INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) D ON A.DEPT_CD = D.DEPT_CD
        WHERE A.STD_MONTH = I_STD_MONTH
         AND A.TENANT_ID = I_TENANT_ID
         AND NVL(C.HIDE_YN	,0) = 0
         AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))         
        AND A.TM_KIND = CASE WHEN I_TM_KIND IS NULL THEN A.TM_KIND ELSE I_TM_KIND END
        AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
        AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
        AND (( I_RETIRE_YN IS NULL  AND NVL(A.JAEJIK_GUBUN, '-') <> '99' ) 
          OR (I_RETIRE_YN IS NOT NULL AND 1=1 ))  
    ) 
    WHERE ( (I_TARGET_YN IS NULL  AND 1=1 ) 
         OR (I_TARGET_YN = '1' AND TARGET_YN = 1 )
         OR (I_TARGET_YN = '0' AND TARGET_YN = 0 )
         )
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1030M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_STD_MONTH     IN VARCHAR2
 , I_DEPT_CD       IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_TM_KIND       IN VARCHAR2
 , I_AGENT_JIKGUP  IN VARCHAR2
 , I_AGENT_JIKCHK  IN VARCHAR2
 , I_TARGET_YN     IN VARCHAR2
 , I_RETIRE_YN     IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1030M01_02
   PURPOSE:    평가대상자관리 - 합계조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/15  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1030M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT COUNT(AGENT_ID) AS TOTAL_CNT1
    	  ,NVL(SUM(TARGET_YN ), 0) AS TOTAL_CNT2 /* 평가대상 */
    	  ,NVL(SUM(CASE WHEN TARGET_YN = 1 THEN 0 ELSE 1 END ), 0) AS TOTAL_CNT3 /* 평가제외 */
    	  ,NVL(SUM(SCHE_TARGET_YN ), 0) AS TOTAL_CNT4 /* 스케쥴 */
    	  ,NVL(SUM(EDU_TARGET_YN ), 0)  AS TOTAL_CNT5 /* 교육 */
    	  ,NVL(SUM(QA_TARGET_YN ), 0)   AS TOTAL_CNT6 /* 통화품질 */
    	  ,NVL(SUM(KPI_TARGET_YN ), 0)  AS TOTAL_CNT7 /* 성과실적 */    	  
    FROM (
        SELECT A.AGENT_ID
              ,NVL(A.SCHE_TARGET_YN,0) AS SCHE_TARGET_YN
		      ,NVL(A.EDU_TARGET_YN ,0) AS EDU_TARGET_YN
		      ,NVL(A.QA_TARGET_YN  ,0) AS QA_TARGET_YN
		      ,NVL(A.KPI_TARGET_YN ,0) AS KPI_TARGET_YN
		      ,(CASE NVL(A.SCHE_TARGET_YN,0)+NVL(A.EDU_TARGET_YN,0)+NVL(A.QA_TARGET_YN,0)+NVL(A.KPI_TARGET_YN,0) 
		        WHEN  0 THEN 0
		         ELSE 1 END ) AS TARGET_YN
        FROM TB_CM_USER_MASTER_HISTORY A
        INNER JOIN TB_CM_USER_MASTER C ON A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID
        INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) D ON A.DEPT_CD = D.DEPT_CD
        WHERE A.STD_MONTH = I_STD_MONTH
         AND A.TENANT_ID = I_TENANT_ID
         AND NVL(C.HIDE_YN	,0) = 0
         AND (( I_AGENT_ID IS NULL AND 1=1 )
          OR (I_AGENT_ID IS NOT NULL AND INSTR(A.AGENT_ID, I_AGENT_ID) > 0))        
        AND A.TM_KIND = CASE WHEN I_TM_KIND IS NULL THEN A.TM_KIND ELSE I_TM_KIND END
        AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
        AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
        AND (( I_RETIRE_YN IS NULL  AND NVL(A.JAEJIK_GUBUN, '-') <> '99' ) 
          OR (I_RETIRE_YN IS NOT NULL AND 1=1 ))  
    ) 
    WHERE ( (I_TARGET_YN IS NULL  AND 1=1 ) 
         OR (I_TARGET_YN = '1' AND TARGET_YN = 1 )
         OR (I_TARGET_YN = '0' AND TARGET_YN = 0 )
         )
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1040M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_DEPT_CD       IN VARCHAR2
 , I_COLUMN_ID     IN VARCHAR2 /* 구분 - C(센터별)/P(파트별)/T(업무그룹별) */
 , I_MONTH_FROM    IN VARCHAR2
 , I_MONTH_TO      IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1040M01_01
   PURPOSE:    인원현황 - 센터별/파트별/업무그룹별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/20  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1040M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
			SELECT A.TENANT_ID
			     ,(CASE I_COLUMN_ID  WHEN 'C' THEN FN_CM_GET_DEPT_CD(A.TENANT_ID, 'center', A.DEPT_CD)
			     					 WHEN 'P' THEN FN_CM_GET_DEPT_CD(A.TENANT_ID, 'part'  , A.DEPT_CD)
			     					 WHEN 'T' THEN A.TM_KIND END) AS COLUMN_ID
				 ,(CASE I_COLUMN_ID  WHEN 'C' THEN FN_CM_GET_DEPT_NM(A.TENANT_ID, 'center', A.DEPT_CD)
			     					 WHEN 'P' THEN FN_CM_GET_DEPT_NM(A.TENANT_ID, 'part'  , A.DEPT_CD)
			     					 WHEN 'T' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND', A.TM_KIND)
			       END ) AS COLUMN_NM 
			  FROM TB_CM_USER_MASTER_HISTORY A
			  INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
			 WHERE A.TENANT_ID = I_TENANT_ID
			   AND A.STD_MONTH BETWEEN I_MONTH_FROM AND I_MONTH_TO
			   AND A.HIDE_YN = 0
		--	   AND A.JAEJIK_GUBUN != '99'
	   ) 
	SELECT  A.COLUMN_ID
	       ,A.COLUMN_NM
	  FROM TEMP_LIST A
	 GROUP BY A.COLUMN_ID,A.COLUMN_NM
	 /* 퇴직자 항목 추가*/
	 UNION ALL
	 SELECT 'XXRET' AS COLUMN_ID
	 		,'퇴직자' AS COLUMN_NM
	 FROM DUAL		
	 ORDER BY 2 ;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1040M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_DEPT_CD       IN VARCHAR2
 , I_COLUMN_ID     IN VARCHAR2 /* 구분 - C(센터별)/P(파트별)/T(업무그룹별) */
 , I_MONTH_FROM    IN VARCHAR2
 , I_MONTH_TO      IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1040M01_02
   PURPOSE:    인원현황 - 인원추이 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/20  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1040M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
			SELECT A.TENANT_ID
			     , A.STD_MONTH
			     , A.AGENT_ID
			     ,(CASE I_COLUMN_ID  WHEN 'C' THEN FN_CM_GET_DEPT_CD(A.TENANT_ID, 'center', A.DEPT_CD)
			     					 WHEN 'P' THEN FN_CM_GET_DEPT_CD(A.TENANT_ID, 'part'  , A.DEPT_CD)
			     					 WHEN 'T' THEN A.TM_KIND END) AS COLUMN_ID
			     ,(CASE WHEN A.JAEJIK_GUBUN	='99' THEN 1 ELSE 0 END ) AS RETIRE_YN				 
			  FROM TB_CM_USER_MASTER_HISTORY A
			  INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
			 WHERE A.TENANT_ID  = I_TENANT_ID
			   AND A.STD_MONTH BETWEEN I_MONTH_FROM AND I_MONTH_TO			 
			   AND A.HIDE_YN    = 0
			   ) 
	, TEMP_SUM AS (
   SELECT  A.STD_MONTH
		  ,A.COLUMN_ID
          ,COUNT(A.AGENT_ID) AS TOTAL_CNT
	  FROM TEMP_LIST A
	 WHERE 1=1
	  AND RETIRE_YN = 0 /* ADD BY  2017-04-26 퇴직자 제외 */ 
   GROUP BY A.TENANT_ID, A.STD_MONTH, A.COLUMN_ID    
	)		   
	SELECT A.STD_MONTH
		  ,A.COLUMN_ID
          ,COUNT(A.AGENT_ID) AS TOTAL_CNT
	  FROM TEMP_LIST A
	 WHERE RETIRE_YN = 0 /* 퇴직자 제외 */ 
   GROUP BY A.TENANT_ID, A.STD_MONTH, A.COLUMN_ID 
   UNION ALL
    /* 월별 퇴직자 */
    SELECT A.STD_MONTH
          ,'XXRET' AS COLUMN_ID
          , SUM(RETIRE_YN) AS TOTAL_CNT
     FROM TEMP_LIST A
   GROUP BY A.TENANT_ID, A.STD_MONTH     
    /* 이하는 차트를 위한 데이터 */

    /* 월별 합계 */
    UNION ALL
    SELECT A.STD_MONTH
          ,'XXSUM' AS COLUMN_ID
          ,SUM(A.TOTAL_CNT) AS TOTAL_CNT
     FROM TEMP_SUM A
    
      GROUP BY  A.STD_MONTH 
     /* 월별 평균 */
    UNION ALL 
    SELECT A.STD_MONTH
          ,'XXAVG' AS COLUMN_ID
          , AVG(A.TOTAL_CNT) AS TOTAL_CNT
     FROM TEMP_SUM A
   GROUP BY A.STD_MONTH  
   ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1040M01_03 (
   I_TENANT_ID     IN VARCHAR2
 , I_DEPT_CD       IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1040M01_03
   PURPOSE:    인원현황 - 직급별/직책별/직종별/업무그룹별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/17  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1040M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
			SELECT A.TENANT_ID
			     , A.AGENT_ID
			     , A.DEPT_CD
			  FROM TB_CM_USER_MASTER A
			  INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
			 WHERE A.TENANT_ID = I_TENANT_ID
			   AND A.HIDE_YN = 0
			   AND A.JAEJIK_GUBUN != '99'
	   ) 
	SELECT A.DEPT_CD
	       ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.DEPT_CD) AS CENTER
	       ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD) AS PART
	       ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD) AS TEAM
	       ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD)   AS JO
	  FROM TEMP_LIST A
	 GROUP BY A.TENANT_ID, A.DEPT_CD 
	 ORDER BY 2,3,4,5 ;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR1040M01_04 (
   I_TENANT_ID     IN VARCHAR2
 , I_DEPT_CD       IN VARCHAR2
 , I_COLUMN_ID     IN VARCHAR2 /* 구분 - 1(직급별)/2(직책별)/3(직종별)/4(업무그룹별) */
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR1040M01_04
   PURPOSE:    인원현황 - 직급별/직책별/직종별/업무그룹별 - 목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/17  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR1040M01_04';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS (
		SELECT 
			A.TENANT_ID
			, A.AGENT_ID
			, A.DEPT_CD
			,(CASE I_COLUMN_ID  WHEN '1' THEN A.AGENT_JIKGUP
								WHEN '2' THEN A.AGENT_JIKCHK
								WHEN '3' THEN A.JIKJONG_KIND
								WHEN '4' THEN A.TM_KIND END) AS COLUMN_ID
		FROM TB_CM_USER_MASTER A
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
		WHERE A.TENANT_ID  = I_TENANT_ID
		AND A.HIDE_YN    = 0
		AND A.JAEJIK_GUBUN != '99'
	) 
	, TEMP_CD AS (
		SELECT CODE
		FROM TB_CM_CODE S
		WHERE S.TENANT_ID = I_TENANT_ID
		AND S.SORT_CD   = (CASE I_COLUMN_ID  WHEN '1' THEN 'AGENT_JIKGUP'
											WHEN '2' THEN 'AGENT_JIKCHK'
											WHEN '3' THEN 'JIKJONG_KIND'
											WHEN '4' THEN 'TM_KIND' END)
	)   
	SELECT A.DEPT_CD
	/* 값이없거나 공통코드에 없는 값는 별도 컬럼으로  계산하기 위해 */
	--, CASE WHEN A.COLUMN_ID IS NULL OR B.CODE IS NULL THEN 'NO_ITEM' ELSE A.COLUMN_ID END AS COLUMN_ID 
	, CASE WHEN A.COLUMN_ID IS NULL THEN 'NO_ITEM' ELSE A.COLUMN_ID END AS COLUMN_ID 
	, COUNT(A.AGENT_ID) AS TOTAL_CNT
	FROM TEMP_LIST A
	LEFT OUTER JOIN TEMP_CD B ON ( A.COLUMN_ID = B.CODE )
	GROUP BY A.TENANT_ID, A.DEPT_CD, A.COLUMN_ID
	;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2010M01_01 
(
    I_TENANT_ID     IN  VARCHAR2
  , I_STD_MONTH     IN  VARCHAR2
  , I_TM_KIND       IN  VARCHAR2
  , I_AGENT_JIKGUP  IN  VARCHAR2
  , I_AGENT_JIKCHK  IN  VARCHAR2
  , I_DEPT_CD       IN  VARCHAR2
  , I_AGENT_ID      IN  VARCHAR2
  , I_JAEJIK_GUBUN  IN  VARCHAR2
  , I_NOT_WORK      IN  VARCHAR2
  , O_CUR_LIST      OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_HR2010M01_01
   PURPOSE:    근무스케줄관리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/08  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_HR2010M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
      SELECT
		A.AGENT_ID
		, D.WORK_ID
		, E.WORK_NM || CASE WHEN E.WORK_TM IS NULL THEN '' ELSE '(' || TO_CHAR(TO_TIMESTAMP(E.WORK_TM, 'HH24:mi'), 'HH24:mi') || ')' END AS WORK_NM
		, A.DEPT_CD
		, FN_CM_GET_DEPT_NM(A.TENANT_ID, 'center', A.DEPT_CD) AS CENTER_NM     
	    , FN_CM_GET_DEPT_NM(A.TENANT_ID, 'part', A.DEPT_CD)   AS PART_NM  
	    , FN_CM_GET_DEPT_NM(A.TENANT_ID, 'team', A.DEPT_CD)   AS TEAM_NM       
	    , FN_CM_GET_DEPT_NM(A.TENANT_ID, 'jo', A.DEPT_CD)     AS JO_NM      
	    , A.TM_KIND
	    , FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM
		, A.SABUN
		, A.AGENT_NM
		, A.AGENT_JIKCHK
		, FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
		, A.AGENT_JIKGUP
		, FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
		, FN_CM_STRING_FORMAT(E.WORK_FRM_TM, '@@:@@') AS WORK_FRM_TM
		, FN_CM_STRING_FORMAT(E.WORK_END_TM, '@@:@@') AS WORK_END_TM
		, FN_CM_STRING_FORMAT(E.MEAL_FRM_TM, '@@:@@') AS MEAL_FRM_TM
		, FN_CM_STRING_FORMAT(E.MEAL_END_TM, '@@:@@') AS MEAL_END_TM
		FROM TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID,I_STD_MONTH,I_AGENT_ID)) A 
--		INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT_HISTORY(I_TENANT_ID,I_STD_MONTH,I_DEPT_CD)) C ON A.DEPT_CD = C.DEPT_CD
		LEFT OUTER JOIN TB_HR_AGENT_WORK D ON A.TENANT_ID = D.TENANT_ID AND A.STD_MONTH = D.STD_MONTH AND A.AGENT_ID = D.AGENT_ID
		LEFT OUTER JOIN TB_HR_WORK_TYPE E ON A.TENANT_ID = E.TENANT_ID AND D.WORK_ID = E.WORK_ID
		WHERE 1=1
		AND A.HIDE_YN = 0
		AND A.TM_KIND = CASE WHEN I_TM_KIND IS NULL THEN A.TM_KIND ELSE I_TM_KIND END
		AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
		AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
		AND A.JAEJIK_GUBUN = CASE WHEN I_JAEJIK_GUBUN = '1' THEN A.JAEJIK_GUBUN ELSE '10' END   
		AND ((I_NOT_WORK IS NULL AND 1=1) OR (I_NOT_WORK IS NOT NULL AND D.WORK_ID IS NULL))
		ORDER BY A.DEPT_CD, A.AGENT_NM;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2020M01_01
(
    I_TENANT_ID     IN  VARCHAR2
  , I_DT_FROM       IN  VARCHAR2
  , I_DT_TO	        IN  VARCHAR2
  , I_TM_KIND  	    IN  VARCHAR2
  , I_AGENT_JIKGUP  IN  VARCHAR2
  , I_AGENT_JIKCHK  IN  VARCHAR2
  , I_DEPT_CD       IN  VARCHAR2
  , I_AGENT_ID      IN  VARCHAR2
  , I_NOT_HOLY      IN  VARCHAR2
  , I_NOT_LOGIN     IN  VARCHAR2
  , I_LAZY_TYPE     IN  VARCHAR2
  , I_REASONABLE    IN  NUMBER
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_HR2020M01_01
   PURPOSE:    CTI 일일근무현황

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/14  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_HR2020M01_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################

BEGIN

  -- ********************************************************************************
  -- 1. TEMP_AGENT_ABSENCE : 상담사 로그인/아웃 기록 조회
  --    TEMP_AGENT_WORK    : 상담사 월별 근무유형조회
  --    추후 예외근무유형 추가
  --    추후 근태정보 추가
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR
	WITH TEMP_AGENT_ABSENCE AS 
		(
			SELECT 
				A.AGENT_ID AS AGENT_ID,
				C.SABUN AS SABUN,
				C.AGENT_NM AS AGENT_NM,
				C.AGENT_JIKCHK AS AGENT_JIKCHK,
				FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', C.AGENT_JIKCHK) AS AGENT_JIKCHK_NM,
				C.AGENT_JIKGUP AS AGENT_JIKGUP,
				FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', C.AGENT_JIKGUP) AS AGENT_JIKGUP_NM,
				TO_CHAR(TO_DATE(C.ENTER_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS ENTER_YMD,
				C.WORK_MONTH_PERIOD AS WORK_MONTH_PERIOD,
				C.DEPT_CD AS DEPT_CD,
				FN_CM_GET_DEPT_NM(A.TENANT_ID, 'center', C.DEPT_CD) AS CENTER_NM,
				FN_CM_GET_DEPT_NM(A.TENANT_ID, 'part', C.DEPT_CD) AS PART_NM,
				FN_CM_GET_DEPT_NM(A.TENANT_ID, 'team', C.DEPT_CD) AS TEAM_NM,
				FN_CM_GET_DEPT_NM(A.TENANT_ID, 'jo', C.DEPT_CD) AS JO_NM,
				C.TM_KIND AS TM_KIND,
				FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND', C.TM_KIND) AS TM_KIND_NM,
				TO_CHAR(TO_DATE(A.WORK_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS WORK_YMD,
				B.HOLI_YN AS HOLI_YN,
				TO_CHAR(A.LOGIN_DT, 'HH24:MI') AS LOGIN_TM,
				TO_CHAR(A.LOGOUT_DT, 'HH24:MI') AS LOGOUT_TM,
				A.LAZY_TYPE AS LAZY_TYPE,
				FN_CM_GET_CODE_NM(I_TENANT_ID,'LAZY_TYPE', A.LAZY_TYPE) AS LAZY_TYPE_NM,
				A.REASONABLE_YN AS REASONABLE_YN,
				CASE WHEN A.REASONABLE_YN = '1' THEN '인정' ELSE '' END AS REASONABLE_NM,
				CASE WHEN C.WARNING_INFO IS NULL THEN '● 정상' ELSE '● '|| FN_CM_GET_CODE_NM(I_TENANT_ID,'WARNING_GBN', C.WARNING_INFO) END AS WARNING_INFO
			FROM TB_HR_AGENT_ABSENCE A
			INNER JOIN TB_CM_HOLIDAY B ON A.WORK_YMD = B.STD_YMD
			INNER JOIN TABLE(FN_CM_GET_TB_USER(I_TENANT_ID, I_AGENT_ID)) C ON A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID
			INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) D ON A.TENANT_ID = D.TENANT_ID AND C.DEPT_CD = D.DEPT_CD
			WHERE A.WORK_YMD BETWEEN I_DT_FROM AND I_DT_TO
		),
		TEMP_AGENT_WORK AS
		(
			SELECT
				A.AGENT_ID
				,A.STD_MONTH
				,A.WORK_ID
				,B.WORK_NM
				,'['||B.WORK_NM||']'|| FN_CM_STRING_FORMAT(B.WORK_FRM_TM, '@@:@@')||'~'||FN_CM_STRING_FORMAT(B.WORK_END_TM, '@@:@@')||' ('||B.WORK_TM||')' AS WORK_INFO
				,FN_CM_STRING_FORMAT(B.WORK_FRM_TM, '@@:@@') ||'~'|| FN_CM_STRING_FORMAT(B.WORK_END_TM, '@@:@@') AS WORK_TM
			FROM TB_HR_AGENT_WORK A
			LEFT OUTER JOIN TB_HR_WORK_TYPE B ON A.TENANT_ID = B.TENANT_ID AND A.WORK_ID = B.WORK_ID
			WHERE A.TENANT_ID = I_TENANT_ID
			  AND A.STD_MONTH BETWEEN SUBSTR(I_DT_FROM,0,6) AND SUBSTR(I_DT_TO,0,6)
		),
		TEMP_HR_CONDUCT AS(
			SELECT AGENT_ID,
					FN_CM_GET_CODE_NM(A.TENANT_ID, 'CONDUCT_CODE', A.CONDUCT_CODE) AS CONDUCT_NM,
					A.FRM_YMD, 
					A.END_YMD 
			FROM TB_HR_CONDUCT A
			INNER JOIN TB_CM_APPROVAL_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.APPROVAL_ID = B.APPROVAL_ID
			WHERE A.TENANT_ID = I_TENANT_ID
			AND B.APPROVAL_STATUS IN ('40','50') --종결, 종결(전결)
			AND (A.FRM_YMD BETWEEN I_DT_FROM AND I_DT_TO OR A.END_YMD BETWEEN I_DT_FROM AND I_DT_TO)
		
		)
		SELECT 
			A.AGENT_ID,
			A.SABUN,
			A.AGENT_NM,
			A.AGENT_JIKCHK,
			A.AGENT_JIKCHK_NM,
			A.AGENT_JIKGUP,
			A.AGENT_JIKGUP_NM,
			A.ENTER_YMD,
			A.WORK_MONTH_PERIOD,
			A.DEPT_CD,
			A.CENTER_NM,
			A.PART_NM,
			A.TEAM_NM,
			A.JO_NM,
			A.TM_KIND,
			A.TM_KIND_NM,
			A.WORK_YMD,
			A.HOLI_YN,
			A.LOGIN_TM,
			A.LOGOUT_TM,
			A.LAZY_TYPE,
			A.LAZY_TYPE_NM,
			A.REASONABLE_YN,
			A.REASONABLE_NM,
			A.WARNING_INFO,
			B.WORK_ID,
			B.WORK_NM,
			B.WORK_INFO,
			B.WORK_TM,
			C.CONDUCT_NM
		FROM TEMP_AGENT_ABSENCE A
		LEFT OUTER JOIN TEMP_AGENT_WORK B ON A.AGENT_ID = B.AGENT_ID AND REPLACE(A.WORK_YMD,'-','') LIKE B.STD_MONTH || '%'
		LEFT OUTER JOIN TEMP_HR_CONDUCT C ON A.AGENT_ID = C.AGENT_ID AND REPLACE(A.WORK_YMD,'-','') BETWEEN C.FRM_YMD AND C.END_YMD
    	WHERE 1=1
    	  AND TM_KIND = CASE WHEN I_TM_KIND IS NULL THEN TM_KIND ELSE I_TM_KIND END --업무그룹
		  AND AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN AGENT_JIKGUP ELSE I_AGENT_JIKGUP END --직급
		  AND AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN AGENT_JIKCHK ELSE I_AGENT_JIKCHK END --직책
		  AND HOLI_YN = CASE WHEN I_NOT_HOLY IS NULL THEN HOLI_YN ELSE 0 END --휴일제외
		  AND ((I_NOT_LOGIN IS NOT NULL AND 1=1) OR (I_NOT_LOGIN IS NULL AND LOGIN_TM IS NOT NULL))--미로그인포함
		  AND (LAZY_TYPE = CASE WHEN I_LAZY_TYPE IS NULL THEN LAZY_TYPE ELSE '10' END OR LAZY_TYPE = CASE WHEN I_LAZY_TYPE IS NULL THEN LAZY_TYPE ELSE '20' END) --지각대상자
		  AND REASONABLE_YN = CASE WHEN I_REASONABLE IS NULL THEN REASONABLE_YN ELSE I_REASONABLE END --정당성 인정
		ORDER BY 
			CENTER_NM,
			PART_NM,
			TEAM_NM,
			JO_NM,
			AGENT_NM,
			AGENT_ID,
			WORK_YMD
		;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_HR2030M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_ID      IN VARCHAR2 
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO	       IN VARCHAR2
 , I_DEPT_CD       IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_TM_KIND       IN VARCHAR2
 , I_AGENT_JIKGUP  IN VARCHAR2
 , I_AGENT_JIKCHK  IN VARCHAR2
 , I_CONDUCT_CODE  IN VARCHAR2
 , I_APPROVAL_STATUS IN VARCHAR2
 , I_SELF_YN       IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR2030M01_01
   PURPOSE:    근태신청/처리

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/02/22  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    WITH TEMP_LIST AS (
        SELECT A.TENANT_ID
        	  ,A.CONSULT_ID
        	  ,A.APPROVAL_ID
	          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD) AS CENTER
	          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD) AS PART
	          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD) AS TEAM
	          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD) AS JO
	          ,A.AGENT_ID
              ,B.AGENT_NM
              ,B.SABUN
              ,B.DEPT_CD AS DEPT_ID
              ,FN_CM_GET_DEPT_INFO(B.TENANT_ID, B.DEPT_CD) AS DEPT_NM
              ,B.TM_KIND
              ,FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND_NM
              ,B.AGENT_JIKGUP
              ,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
              ,B.AGENT_JIKCHK
              ,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
			  ,A.CONDUCT_KIND
			  ,FN_CM_GET_CODE_NM(A.TENANT_ID,'CONDUCT_KIND',A.CONDUCT_KIND) AS CONDUCT_KIND_NM
			  ,A.CONDUCT_CODE
			  ,FN_CM_GET_CODE_NM(A.TENANT_ID,'CONDUCT_CODE',A.CONDUCT_CODE) AS CONDUCT_CODE_NM
              ,FN_CM_STRING_FORMAT(A.FRM_YMD, '@@@@-@@-@@') AS FRM_YMD
              ,FN_CM_STRING_FORMAT(A.END_YMD, '@@@@-@@-@@') AS END_YMD
              ,FN_CM_STRING_FORMAT(A.FRM_TM, '@@:@@') AS FRM_TM
			  ,FN_CM_STRING_FORMAT(A.END_TM, '@@:@@') AS END_TM
			  ,CASE WHEN A.FRM_TM='0000' AND A.END_TM='0000' THEN FN_CM_GET_WORKDAYS_DIFF(A.TENANT_ID, A.AGENT_ID, 'D' , A.FRM_YMD||A.FRM_TM, A.END_YMD||A.END_TM ) ELSE '' END AS CONDUCT_DAYS /*근태일수*/			  
			  ,CASE WHEN A.FRM_TM='0000' AND A.END_TM='0000' THEN '' ELSE FN_CM_GET_SECONDS_TO_FORMAT(FN_CM_GET_WORKDAYS_DIFF(A.TENANT_ID, A.AGENT_ID, 'T' , A.FRM_YMD||A.FRM_TM, A.END_YMD||A.END_TM ) ) END AS CONDUCT_TIMES /*근태시간*/	  
			  ,D.APPROVAL_STATUS
			  ,FN_CM_GET_CODE_NM(D.TENANT_ID,'APPROVAL_STATUS',D.APPROVAL_STATUS) AS APPROVAL_STATUS_NM	
			  ,FN_CM_GET_APPROVAL_AGENT_ID(D.TENANT_ID, D.APPROVAL_ID,'AGENT_ID') AS APPROVAL_AGENT_ID /* 최종결재자 또는 결재할ID*/
			  ,FN_CM_GET_APPROVAL_AGENT_ID(D.TENANT_ID, D.APPROVAL_ID,'SNO') AS APPROVAL_SNO /* 최종결재 SNO 또는 결재할SNO*/
			  ,A.CREATE_AGENT_ID 
	 	 	  ,FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.CREATE_AGENT_ID) AS CREATE_AGENT_NM
	 	 	  ,FN_CM_GET_AGENT_SABUN(A.TENANT_ID, A.CREATE_AGENT_ID) AS CREATE_AGENT_SABUN
			  ,TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT
			  /* 수신참조 리스트 한 컬럼으로 */
			  ,(SELECT WM_CONCAT( S.AGENT_ID ) 
			      FROM TB_CM_APPROVAL_CONSULT S
			     WHERE S.TENANT_ID = A.TENANT_ID AND S.APPROVAL_ID = A.APPROVAL_ID 
			  ) AS USER2_ID
			  ,(SELECT WM_CONCAT( FN_CM_GET_AGENT_NM( S.TENANT_ID,S.AGENT_ID) ) 
			      FROM TB_CM_APPROVAL_CONSULT S
			     WHERE S.TENANT_ID = A.TENANT_ID AND S.APPROVAL_ID = A.APPROVAL_ID 
			  ) AS USER2_NM		
			  ,A.CONDUCT_RSN /* 근태신청팝업에서  사용*/	  
        FROM TB_HR_CONDUCT A
        INNER JOIN TABLE(FN_CM_GET_TB_USER(I_TENANT_ID, I_AGENT_ID)) B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
        INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD
        LEFT OUTER JOIN TB_CM_APPROVAL_HEADER D ON (A.TENANT_ID =  D.TENANT_ID AND A.APPROVAL_ID = D.APPROVAL_ID
            AND D.APPROVAL_STATUS = CASE WHEN I_APPROVAL_STATUS IS NULL THEN D.APPROVAL_STATUS ELSE I_APPROVAL_STATUS END )
        WHERE A.TENANT_ID = I_TENANT_ID
--          AND TO_CHAR(A.CREATE_DT,'YYYYMMDD') BETWEEN I_DT_FROM AND I_DT_TO /* 신청일자 */
          AND (FRM_YMD BETWEEN I_DT_FROM AND I_DT_TO OR END_YMD BETWEEN I_DT_FROM AND I_DT_TO) /* 근태일자 */
          AND A.CONDUCT_CODE = CASE WHEN I_CONDUCT_CODE IS NULL THEN A.CONDUCT_CODE ELSE I_CONDUCT_CODE END         
          AND B.TM_KIND = CASE WHEN I_TM_KIND IS NULL THEN B.TM_KIND ELSE I_TM_KIND END
          AND B.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN B.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
          AND B.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN B.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END          
          AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,B.AGENT_ID) > 0))     
    ) 
    SELECT A.*
          ,FRM_YMD || ' ~ ' || END_YMD AS CONDUCT_DATE
          ,(CASE WHEN FRM_TM IS NULL THEN '' ELSE FRM_TM  || ' ~ ' || END_TM END)  AS CONDUCT_TIME
          ,FN_CM_GET_AGENT_NM(A.TENANT_ID, A.APPROVAL_AGENT_ID) AS APPROVAL_AGENT_NM
     FROM TEMP_LIST A
    WHERE 1=1 /* 본인만 조건일때  근태신청자 또는 결재자가 본인*/
      AND (( I_SELF_YN IS NULL AND 1=1 )
           OR (I_SELF_YN IS NOT NULL AND (A.APPROVAL_AGENT_ID =  I_LOGIN_ID OR A.AGENT_ID =  I_LOGIN_ID)))      
	ORDER BY CREATE_DT, CENTER, PART, TEAM, JO, AGENT_NM
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_HR2030M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_ID      IN VARCHAR2 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR2030M01_02
   PURPOSE:    근태신청/처리 - dashboard 에서 호출시 로그인 사용자의 결재 처리할 목록 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/19  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2030M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    WITH TEMP_LIST AS (
        SELECT A.TENANT_ID
        	  ,A.CONSULT_ID
        	  ,A.APPROVAL_ID
	          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD) AS CENTER
	          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD) AS PART
	          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD) AS TEAM
	          ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD) AS JO
	          ,A.AGENT_ID
              ,B.AGENT_NM
              ,B.SABUN
              ,B.DEPT_CD AS DEPT_ID
              ,FN_CM_GET_DEPT_INFO(B.TENANT_ID, B.DEPT_CD) AS DEPT_NM
              ,B.TM_KIND
              ,FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND_NM
              ,B.AGENT_JIKGUP
              ,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
              ,B.AGENT_JIKCHK
              ,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
			  ,A.CONDUCT_KIND
			  ,FN_CM_GET_CODE_NM(A.TENANT_ID,'CONDUCT_KIND',A.CONDUCT_KIND) AS CONDUCT_KIND_NM
			  ,A.CONDUCT_CODE
			  ,FN_CM_GET_CODE_NM(A.TENANT_ID,'CONDUCT_CODE',A.CONDUCT_CODE) AS CONDUCT_CODE_NM
              ,FN_CM_STRING_FORMAT(A.FRM_YMD, '@@@@-@@-@@') AS FRM_YMD
              ,FN_CM_STRING_FORMAT(A.END_YMD, '@@@@-@@-@@') AS END_YMD
              ,FN_CM_STRING_FORMAT(A.FRM_TM, '@@:@@') AS FRM_TM
			  ,FN_CM_STRING_FORMAT(A.END_TM, '@@:@@') AS END_TM
			  ,CASE WHEN A.FRM_TM='0000' AND A.END_TM='0000' THEN FN_CM_GET_WORKDAYS_DIFF(A.TENANT_ID, A.AGENT_ID, 'D' , A.FRM_YMD||A.FRM_TM, A.END_YMD||A.END_TM ) ELSE '' END AS CONDUCT_DAYS /*근태일수*/			  
			  ,CASE WHEN A.FRM_TM='0000' AND A.END_TM='0000' THEN '' ELSE FN_CM_GET_SECONDS_TO_FORMAT(FN_CM_GET_WORKDAYS_DIFF(A.TENANT_ID, A.AGENT_ID, 'T' , A.FRM_YMD||A.FRM_TM, A.END_YMD||A.END_TM ) ) END AS CONDUCT_TIMES /*근태시간*/	  
            --  ,FN_CM_GET_TIME_DIFF_TO_FORMAT(FRM_TM, END_TM) AS CONDUCT_TIMES	 /*근태시간*/		  
			  ,D.APPROVAL_STATUS
			  ,FN_CM_GET_CODE_NM(D.TENANT_ID,'APPROVAL_STATUS',D.APPROVAL_STATUS) AS APPROVAL_STATUS_NM	
			  ,FN_CM_GET_APPROVAL_AGENT_ID(D.TENANT_ID, D.APPROVAL_ID,'AGENT_ID') AS APPROVAL_AGENT_ID /* 최종결재자 또는 결재할ID*/
			  ,FN_CM_GET_APPROVAL_AGENT_ID(D.TENANT_ID, D.APPROVAL_ID,'SNO') AS APPROVAL_SNO /* 최종결재 SNO 또는 결재할SNO*/
			  ,A.CREATE_AGENT_ID 
	 	 	  ,FN_CM_GET_AGENT_NM(A.TENANT_ID, A.CREATE_AGENT_ID) AS CREATE_AGENT_NM
	 	 	  ,FN_CM_GET_AGENT_SABUN(A.TENANT_ID, A.CREATE_AGENT_ID) AS CREATE_AGENT_SABUN
			  ,TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT
			  /* 수신참조 리스트 한 컬럼으로 */
			  ,(SELECT WM_CONCAT( S.AGENT_ID ) 
			      FROM TB_CM_APPROVAL_CONSULT S
			     WHERE S.TENANT_ID = A.TENANT_ID AND S.APPROVAL_ID = A.APPROVAL_ID 
			  ) AS USER2_ID
			  ,(SELECT WM_CONCAT( FN_CM_GET_AGENT_NM( S.TENANT_ID,S.AGENT_ID) ) 
			      FROM TB_CM_APPROVAL_CONSULT S
			     WHERE S.TENANT_ID = A.TENANT_ID AND S.APPROVAL_ID = A.APPROVAL_ID 
			  ) AS USER2_NM			  
			FROM TB_HR_CONDUCT A
	       INNER JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
 			INNER JOIN TB_CM_APPROVAL_HEADER D ON (A.TENANT_ID =  D.TENANT_ID AND A.APPROVAL_ID = D.APPROVAL_ID )
			WHERE A.TENANT_ID  = I_TENANT_ID
			  AND D.APPROVAL_STATUS IN ('10','20')			  
  ) 
    SELECT A.*
          ,FRM_YMD || ' ~ ' || END_YMD AS CONDUCT_DATE
          ,(CASE WHEN FRM_TM IS NULL THEN '' ELSE FRM_TM  || ' ~ ' || END_TM END)  AS CONDUCT_TIME
          ,FN_CM_GET_AGENT_NM(A.TENANT_ID, A.APPROVAL_AGENT_ID) AS APPROVAL_AGENT_NM
     FROM TEMP_LIST A
    WHERE 1=1 /* 결재자가 본인*/
      AND A.APPROVAL_AGENT_ID =  I_LOGIN_ID     
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_HR2040M01_01 
(
    I_TENANT_ID     IN  VARCHAR2
  , I_STD_MONTH     IN  VARCHAR2
  , I_TM_KIND       IN  VARCHAR2
  , I_AGENT_JIKGUP  IN  VARCHAR2
  , I_AGENT_JIKCHK  IN  VARCHAR2
  , I_DEPT_CD       IN  VARCHAR2
  , I_AGENT_ID      IN  VARCHAR2
  , O_CUR_LIST      OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_HR2040M01_01
   PURPOSE:    근태현황

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/25  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR2040M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################

	V_START_DT VARCHAR(8) := I_STD_MONTH || '01';
	V_END_DT VARCHAR(8) := TO_CHAR(LAST_DAY(TO_DATE(I_STD_MONTH, 'YYYYMM')),'YYYYMMDD');
	
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS(
		SELECT
			A.TENANT_ID
			,A.AGENT_ID
			,A.DEPT_CD
			,A.SABUN
			,A.AGENT_NM
			,A.AGENT_JIKCHK
			,A.AGENT_JIKGUP
			,A.TM_KIND
			,FN_CM_GET_BUSINESS_DAY(I_TENANT_ID, V_START_DT, V_END_DT) AS BUSINESS_DAY
			,NVL(C.WORK_ID, D.WORK_ID) AS WORK_ID
			,NVL(E.CTI_LOGIN, 0) AS CTI_LOGIN_DAY
		FROM TABLE(FN_CM_GET_TB_USER(I_TENANT_ID,I_AGENT_ID)) A
		JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD
		LEFT OUTER JOIN TB_HR_AGENT_WORK C ON A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID AND C.STD_MONTH = I_STD_MONTH
		LEFT OUTER JOIN (SELECT TENANT_ID, WORK_ID FROM TB_HR_WORK_TYPE WHERE DEFAULT_YN = 1) D ON A.TENANT_ID = D.TENANT_ID
		LEFT OUTER JOIN (
			SELECT TENANT_ID, AGENT_ID, COUNT(AGENT_ID) AS CTI_LOGIN 
			FROM TB_HR_AGENT_ABSENCE 
			WHERE SUBSTR(WORK_YMD,0,6) = I_STD_MONTH
			GROUP BY TENANT_ID, AGENT_ID) E ON A.TENANT_ID = E.TENANT_ID AND A.AGENT_ID = E.AGENT_ID
		WHERE A.TM_KIND = CASE WHEN I_TM_KIND IS NULL THEN A.TM_KIND ELSE I_TM_KIND END
		AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
		AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
	)
	,TEMP_LIST2 AS (
		SELECT 
			TENANT_ID
			,AGENT_ID
			,SUM(CONDUCT_KIND1) AS CONDUCT_KIND1 --근태
			,SUM(CONDUCT_KIND2) AS CONDUCT_KIND2 --휴가
			,SUM(CONDUCT_KIND3) AS CONDUCT_KIND3 --휴직
			,SUM(CONDUCT_KIND4) AS CONDUCT_KIND4 --공무
			,SUM(CONDUCT_KIND5) AS CONDUCT_KIND5 --기타
		FROM(
			SELECT
				TENANT_ID
				,AGENT_ID
				,CASE WHEN CONDUCT_KIND = 1 THEN FN_CM_GET_WORKDAYS_DIFF(I_TENANT_ID, AGENT_ID, 'D' , FRM_YMD||FRM_TM, END_YMD||END_TM ) END AS CONDUCT_KIND1  --근태
				,CASE WHEN CONDUCT_KIND = 2 THEN FN_CM_GET_WORKDAYS_DIFF(I_TENANT_ID, AGENT_ID, 'D' , FRM_YMD||FRM_TM, END_YMD||END_TM ) END AS CONDUCT_KIND2 --휴가
				,CASE WHEN CONDUCT_KIND = 3 THEN FN_CM_GET_WORKDAYS_DIFF(I_TENANT_ID, AGENT_ID, 'D' , FRM_YMD||FRM_TM, END_YMD||END_TM ) END AS CONDUCT_KIND3 --휴직
				,CASE WHEN CONDUCT_KIND = 4 THEN FN_CM_GET_WORKDAYS_DIFF(I_TENANT_ID, AGENT_ID, 'D' , FRM_YMD||FRM_TM, END_YMD||END_TM ) END AS CONDUCT_KIND4 --공무
				,CASE WHEN CONDUCT_KIND = 5 THEN FN_CM_GET_WORKDAYS_DIFF(I_TENANT_ID, AGENT_ID, 'D' , FRM_YMD||FRM_TM, END_YMD||END_TM ) END AS CONDUCT_KIND5 --기타
			FROM (
				SELECT 
					A.TENANT_ID
					,A.AGENT_ID
					,A.FRM_TM
					,A.END_TM
					,A.CONDUCT_KIND
					,A.CONDUCT_CODE
					,CASE WHEN SUBSTR(A.FRM_YMD, 0, 6) < I_STD_MONTH THEN I_STD_MONTH || '01' ELSE A.FRM_YMD END AS FRM_YMD
					,CASE WHEN SUBSTR(A.END_YMD, 0, 6) > I_STD_MONTH THEN TO_CHAR(LAST_DAY(TO_DATE(I_STD_MONTH, 'YYYYMM')),'YYYYMMDD') ELSE A.END_YMD END END_YMD
				FROM TB_HR_CONDUCT A
				INNER JOIN TB_CM_APPROVAL_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.APPROVAL_ID = B.APPROVAL_ID
				INNER JOIN TABLE(FN_CM_GET_TB_USER(I_TENANT_ID,I_AGENT_ID)) C ON A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID
				WHERE I_STD_MONTH BETWEEN SUBSTR(A.FRM_YMD, 0, 6) AND SUBSTR(A.END_YMD, 0, 6)
				AND B.APPROVAL_STATUS IN ('40','50') --종결/종결(전결)
			)
		)
		GROUP BY AGENT_ID, TENANT_ID
	)
	  
	SELECT
		I_STD_MONTH AS SEARCH_MONTH
		,A.AGENT_ID
		,FN_CM_GET_DEPT_NM(I_TENANT_ID,'CENTER',A.DEPT_CD) AS CENTER_NM
		,FN_CM_GET_DEPT_NM(I_TENANT_ID,'PART',A.DEPT_CD) AS PART_NM
		,FN_CM_GET_DEPT_NM(I_TENANT_ID,'TEAM',A.DEPT_CD) AS TEAM_NM
		,FN_CM_GET_DEPT_NM(I_TENANT_ID,'JO',A.DEPT_CD) AS JO_NM
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND
		,A.SABUN
		,A.AGENT_NM
		,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
		,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
		,A.BUSINESS_DAY
		,A.CTI_LOGIN_DAY
		,A.WORK_ID
		,NVL(B.CONDUCT_KIND1, 0) AS CONDUCT_KIND1
		,NVL(B.CONDUCT_KIND2, 0) AS CONDUCT_KIND2
		,NVL(B.CONDUCT_KIND3, 0) AS CONDUCT_KIND3
		,NVL(B.CONDUCT_KIND4, 0) AS CONDUCT_KIND4
		,NVL(B.CONDUCT_KIND5, 0) AS CONDUCT_KIND5
		,(A.BUSINESS_DAY - (NVL(B.CONDUCT_KIND1,0) + NVL(B.CONDUCT_KIND2,0) + NVL(B.CONDUCT_KIND3,0) + NVL(B.CONDUCT_KIND4,0) + NVL(B.CONDUCT_KIND5,0))) AS WORK_DAY
		,C.WORK_NM || CASE WHEN C.WORK_TM IS NULL THEN '' ELSE '(' || TO_CHAR(TO_TIMESTAMP(C.WORK_TM, 'HH24:MI'), 'HH24:MI') || ')' END AS WORK_NM
		,C.WORK_FRM_TM
		,C.WORK_END_TM
		,C.WORK_TM
	FROM TEMP_LIST A
	LEFT OUTER JOIN TEMP_LIST2 B ON A.AGENT_ID = B.AGENT_ID
	LEFT OUTER JOIN TB_HR_WORK_TYPE C ON A.TENANT_ID = C.TENANT_ID AND A.WORK_ID = C.WORK_ID
	ORDER BY A.AGENT_ID
	;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_HR2040S01_02
(
  I_TENANT_ID       IN  VARCHAR2,
  I_STD_MONTH       IN  VARCHAR2,
  I_AGENT_ID		IN	VARCHAR2,
  O_CUR_LIST        OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR2040S01_02
   PURPOSE:    근태 현황 상세 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2016/12/27   
******************************************************************************/
-- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_CM2040S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
-- ########## LOG DB END  ########################
BEGIN

OPEN O_CUR_LIST FOR
	WITH TEMP_LIST AS( 
	  SELECT B.SUBJECT AS TITLE
	  		,CASE WHEN to_char(to_date(A.FRM_YMD, 'yyyymmdd'), 'YYYYMM') != I_STD_MONTH 
				THEN to_char(to_date(I_STD_MONTH, 'yyyymm'), 'YYYYMM')||'01' 
				ELSE to_char(to_date(A.FRM_YMD, 'yyyymmdd'), 'yyyymmdd') END AS FRM_YMD
		    ,CASE WHEN to_char(to_date(A.END_YMD, 'yyyymmdd'), 'YYYYMM') != I_STD_MONTH 
				THEN to_char(last_day(to_date(I_STD_MONTH, 'yyyymm')),'yyyymmdd') 
				ELSE to_char(to_date(A.END_YMD, 'yyyymmdd'), 'yyyymmdd') END AS END_YMD
			,A.FRM_TM
			,CASE WHEN A.END_TM ='0000' THEN '2359' ELSE A.END_TM END AS END_TM
			,FN_CM_GET_CODE_NM(I_TENANT_ID,'CONDUCT_KIND',A.CONDUCT_KIND) AS CONDUCT_KIND_NM
			,FN_CM_GET_CODE_NM(I_TENANT_ID,'CONDUCT_CODE',A.CONDUCT_CODE) AS CONDUCT_CODE_NM
			,CONDUCT_KIND
			,A.AGENT_ID
			,A.TENANT_ID
	FROM TB_HR_CONDUCT A
	INNER JOIN TB_CM_APPROVAL_HEADER B
	ON A.TENANT_ID = B.TENANT_ID
	AND A.APPROVAL_ID = B.APPROVAL_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	AND A.AGENT_ID = I_AGENT_ID
	AND (B.APPROVAL_STATUS = '50' OR B.APPROVAL_STATUS = '40')
	AND I_STD_MONTH BETWEEN to_char(to_date(FRM_YMD, 'yyyymmdd'), 'YYYYMM') 
	AND to_char(to_date(END_YMD, 'yyyymmdd'), 'YYYYMM')
)

	SELECT 'c'||rownum as ID
			,A.TITLE
			,FN_CM_STRING_FORMAT(A.FRM_YMD, '@@@@-@@-@@')||'T'||to_char(to_date(NVL(A.FRM_TM,'000000'), 'hh24miss'), 'hh24:mi:ss') as "start"
			,FN_CM_STRING_FORMAT(A.END_YMD, '@@@@-@@-@@')||'T'||to_char(to_date(NVL(A.END_TM,'235959'), 'hh24miss'), 'hh24:mi:ss') as "end"
			,FN_CM_STRING_FORMAT(A.FRM_YMD, '@@@@-@@-@@') AS FRM_YMD
	   		,FN_CM_STRING_FORMAT(A.END_YMD, '@@@@-@@-@@') AS END_YMD
	        ,FN_CM_STRING_FORMAT(A.FRM_TM, '@@:@@') AS FRM_TM
			,FN_CM_STRING_FORMAT(A.END_TM, '@@:@@') AS END_TM
			,FN_CM_GET_WORKDAYS_DIFF(A.TENANT_ID, A.AGENT_ID, 'D' , A.FRM_YMD||A.FRM_TM, A.END_YMD||A.END_TM ) AS DAY
			,FN_CM_GET_SECONDS_TO_FORMAT(FN_CM_GET_WORKDAYS_DIFF(A.TENANT_ID, A.AGENT_ID, 'T' , A.FRM_YMD||A.FRM_TM, A.END_YMD||A.END_TM ) )  AS TIME
			,A.CONDUCT_KIND_NM
			,A.CONDUCT_CODE_NM
			,A.CONDUCT_KIND
	FROM TEMP_LIST A;
	
	

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    
	END;

END;
/

;

create or replace PROCEDURE "SP_HR3010S01_01" (
	 I_TENANT_ID           IN VARCHAR2
    ,I_LOGIN_ID            IN VARCHAR2  /* 로그인사용자ID */
	,I_CUD_GUBUN           IN VARCHAR2  /* C/U/D */
    ,I_SHEET_ID	           IN VARCHAR2
    ,I_SHEET_NM	           IN VARCHAR2
    ,I_TARGET_AGENT_JIKCHK IN VARCHAR2
    ,I_HIDE_YN	           IN VARCHAR2
    ,I_DEPT_CD             IN VARCHAR2
    ,O_CUR_LIST            OUT SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_HR3010S01_01
   PURPOSE:    인사고과 평가 - 평가표 관리 - 평가표  등록/수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/25
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_HR3010S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

    V_SHEET_ID TB_HR_SHEET_HEADER.SHEET_ID%TYPE := I_SHEET_ID;
    
BEGIN
 
-- ********************************************************************************
-- 0.등록/수정/삭제
-- ********************************************************************************

	IF (I_CUD_GUBUN ='I') THEN
		-- I_SHEET_ID 생성
		SELECT LPAD(NVL(MAX(SHEET_ID),0)+1 ,10, '0') 
		  INTO V_SHEET_ID 
		  FROM TB_HR_SHEET_HEADER 
		 WHERE TENANT_ID = I_TENANT_ID;
	END IF;
	    
		MERGE INTO TB_HR_SHEET_HEADER T
		USING (SELECT I_TENANT_ID      AS TENANT_ID
	                , V_SHEET_ID       AS SHEET_ID
	                , I_SHEET_NM       AS SHEET_NM
	                , I_TARGET_AGENT_JIKCHK AS TARGET_AGENT_JIKCHK
	                , NVL(I_HIDE_YN,0)  AS HIDE_YN
	             FROM DUAL ) S
	       ON ( T.TENANT_ID = S.TENANT_ID AND T.SHEET_ID = S.SHEET_ID )
	       
	     WHEN MATCHED THEN
	     
			UPDATE SET SHEET_NM            = S.SHEET_NM
	        	     , TARGET_AGENT_JIKCHK = S.TARGET_AGENT_JIKCHK
	              	 , HIDE_YN             = S.HIDE_YN
		             , MODIFY_AGENT_ID     = I_LOGIN_ID
	 	             , MODIFY_DT           = SYSTIMESTAMP
	            
		 WHEN NOT MATCHED THEN
	    
			  INSERT ( TENANT_ID
	                 , SHEET_ID
	                 , SHEET_NM
	                 , TARGET_AGENT_JIKCHK
	                 , HIDE_YN
	                 , CREATE_AGENT_ID
	                 , CREATE_DT
	                 , MODIFY_AGENT_ID
	                 , MODIFY_DT
   	        ) VALUES ( S.TENANT_ID
	                 , S.SHEET_ID
	                 , S.SHEET_NM
	                 , S.TARGET_AGENT_JIKCHK
	                 , S.HIDE_YN
	                 , I_LOGIN_ID
	                 , SYSTIMESTAMP
	                 , I_LOGIN_ID
	                 , SYSTIMESTAMP
	                 );
	      
		COMMIT; 
  
-- ********************************************************************************
-- 1. 관리소속  등록
-- ********************************************************************************             
	SP_UC_SET_ACCESS_SCOPE(I_TENANT_ID, '60', V_SHEET_ID, I_DEPT_CD);
  
-- ********************************************************************************
-- 2.처리 결과 리턴
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR 
		SELECT V_SHEET_ID AS KEY_ID
		  FROM DUAL ; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
    v_work_date_end := SYSTIMESTAMP;
    v_work_result := 'F';
    v_work_bigo := SQLERRM;
    SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    ROLLBACK;
    
    RAISE_APPLICATION_ERROR(-20001, SQLERRM) ;
	END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3020S01_01" (
	  I_TENANT_ID     IN VARCHAR2
	, I_GBN           IN VARCHAR2  
	, I_DEPT_CD       IN VARCHAR2
	, I_TM_KIND	  	  IN VARCHAR2
	, I_WORK_PERIOD   IN VARCHAR2
	, I_AGENT_JIKGUP  IN VARCHAR2
	, I_AGENT_JIKCHK  IN VARCHAR2
	, I_SCHE_ID		  IN VARCHAR2
	, I_DUPLICATE_YN  IN VARCHAR2
	, O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3020S01_01
   PURPOSE:    인사고과평가(평가계획 관리) - 평가자, 평가대상자 조회(전체)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/30  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3020S01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	IF I_GBN = 'I' THEN -- 개별조정

		OPEN O_CUR_LIST FOR 
		
		
			WITH TEMP_LIST1 AS (

				SELECT A.TENANT_ID
				     , FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
			           ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
		    	       ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
		             , A.DEPT_CD
			  		 , A.SABUN
			  		 , A.AGENT_ID
			  		 , A.AGENT_NM
			         , A.TM_KIND
				     , FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
				     , FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
				     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, A.DEPT_CD) AS TEAM_NM
				     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
				     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM		     				     
			      FROM TB_CM_USER_MASTER A
			     INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
			     WHERE 1 = 1 
		 	       AND A.TENANT_ID = I_TENANT_ID
			       AND A.HIDE_YN = 0 
			       AND NVL(A.JAEJIK_GUBUN,'10') !='99'
		--           AND NVL(A.QA_TARGET_YN ,0)  = 1 /* 스케줄관리가 인사고과인지 확인 후 수정 */
			       AND A.TM_KIND	    = CASE WHEN I_TM_KIND 	 IS NULL THEN A.TM_KIND      ELSE I_TM_KIND	   END     
			       AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
			       AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
			       
			       /* 근속기간 조건 일 경우 */
			       AND (( I_WORK_PERIOD IS NULL AND 1=1 )
			            OR (I_WORK_PERIOD IS NOT NULL 
			           AND EXISTS( SELECT 1
					                 FROM TB_CM_CODE S 
					                WHERE S.TENANT_ID = A.TENANT_ID 
					                  AND S.SORT_CD   = 'WORK_PERIOD'
					                  AND S.CODE      = I_WORK_PERIOD
					                  AND A.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2 )))			
			
			) , TEMP_LIST2 AS (
				
				SELECT A.TENANT_ID
				     , A.TARGET_MEMB
				  FROM TB_HR_EVAL_TARGET A
				 WHERE A.TENANT_ID = I_TENANT_ID
				   AND A.SCHE_ID   = I_SCHE_ID
			
			)
			
			SELECT A.TENANT_ID
			     , A.DEPT_INFO
			     , A.DEPT_CD
			     , A.SABUN
			     , A.AGENT_ID
			     , A.AGENT_NM
			     , A.TM_KIND
			     , A.TM_KIND_NM
			     , A.WORK_MONTH_PERIOD
			     , A.TEAM_NM
			     , A.AGENT_JIKGUP_NM
			     , A.AGENT_JIKCHK_NM
			  FROM TEMP_LIST1 A INNER JOIN TEMP_LIST2 B
			    ON A.TENANT_ID = I_TENANT_ID
			   AND A.TENANT_ID = B.TENANT_ID
			   AND A.AGENT_ID  = B.TARGET_MEMB
			 WHERE A.TENANT_ID = I_TENANT_ID
			   AND A.TENANT_ID = B.TENANT_ID
			   AND A.AGENT_ID  = B.TARGET_MEMB ;

			  
	ELSE -- 평가대상자, 평가자 선택

		IF I_DUPLICATE_YN = 1 THEN -- 중복인원 제거
	    
	    OPEN O_CUR_LIST FOR 
	
			SELECT FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
		           ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
	     	       ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
		         , A.DEPT_CD
	  		     , A.SABUN
	  		     , A.AGENT_ID
	  		     , A.AGENT_NM
	             , A.TM_KIND
		         , FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
		         , FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
			     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, A.DEPT_CD) AS TEAM_NM
			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM	         
	          FROM TB_CM_USER_MASTER A
	          INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
	         WHERE 1 = 1 
	           AND A.TENANT_ID = I_TENANT_ID
	           AND A.HIDE_YN = 0 
	           AND NVL(A.JAEJIK_GUBUN,'10') !='99'
	--           AND NVL(A.QA_TARGET_YN ,0)  = 1 /* 스케줄관리가 인사고과인지 확인 후 수정 */
	           AND A.TM_KIND	  = CASE WHEN I_TM_KIND 	 IS NULL THEN A.TM_KIND      ELSE I_TM_KIND	   END     
	           AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
	           AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
	     	
	     	   /* 근속기간 조건 일 경우 */
	           AND (( I_WORK_PERIOD IS NULL AND 1=1 )
				    OR (I_WORK_PERIOD IS NOT NULL 
	               AND EXISTS( SELECT 1
			                     FROM TB_CM_CODE S 
			                    WHERE S.TENANT_ID = A.TENANT_ID 
			                      AND S.SORT_CD   = 'WORK_PERIOD'
			                      AND S.CODE      = I_WORK_PERIOD
			                      AND A.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2 )))
			   AND NOT EXISTS ( SELECT 1
				     	  		  FROM TB_HR_EVAL_TARGET S
				     			 WHERE S.SCHE_ID     = I_SCHE_ID
				     			   AND S.TARGET_MEMB = A.AGENT_ID ) ;
	    
		ELSE 
	
		OPEN O_CUR_LIST FOR 	
		
			SELECT FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
		           ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
	    	       ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
	             , A.DEPT_CD
		  		 , A.SABUN
		  		 , A.AGENT_ID
		  		 , A.AGENT_NM
		         , A.TM_KIND
			     , FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
			     , FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
			     , FN_CM_GET_DEPT_INFO(I_TENANT_ID, A.DEPT_CD) AS TEAM_NM
			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
			     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM		     
		      FROM TB_CM_USER_MASTER A
		     INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
		     WHERE 1 = 1 
	 	       AND A.TENANT_ID = I_TENANT_ID
		       AND A.HIDE_YN = 0 
		       AND NVL(A.JAEJIK_GUBUN,'10') !='99'
	--           AND NVL(A.QA_TARGET_YN ,0)  = 1 /* 스케줄관리가 인사고과인지 확인 후 수정 */
		       AND A.TM_KIND	    = CASE WHEN I_TM_KIND 	 IS NULL THEN A.TM_KIND      ELSE I_TM_KIND	   END     
		       AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
		       AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
		       
		       /* 근속기간 조건 일 경우 */
		       AND (( I_WORK_PERIOD IS NULL AND 1=1 )
		            OR (I_WORK_PERIOD IS NOT NULL 
		           AND EXISTS( SELECT 1
				                 FROM TB_CM_CODE S 
				                WHERE S.TENANT_ID = A.TENANT_ID 
				                  AND S.SORT_CD   = 'WORK_PERIOD'
				                  AND S.CODE      = I_WORK_PERIOD
				                  AND A.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2 ))) ;
	    
		END IF;
    
    END IF;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE "SP_HR3030M01_02" (
	  I_TENANT_ID  IN VARCHAR2
	, I_SCHE_ID    IN VARCHAR2
	, I_AGENT_ID   IN VARCHAR2
	, I_STATUS_GBN IN VARCHAR2
	, O_CUR_LIST  OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_HR3030M01_01
   PURPOSE:    인사고과평가 - 평가진행 관리 - 상세조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/07  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE 		   := SYSDATE;
    v_work_date_str TIMESTAMP 	   := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP	   := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)   := 'SP_HR3030M01_01';
    v_work_result   VARCHAR2(1)    := 'F';
    v_work_count    NUMBER 		   := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN

	OPEN O_CUR_LIST FOR	
	SELECT
		A.TENANT_ID,
		A.SCHE_ID,
		FN_CM_GET_DEPT_INFO(I_TENANT_ID, D.DEPT_CD) AS VALUE_TEAM_NM,
		FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND', D.TM_KIND) AS VALUE_TM_KIND,
		D.SABUN AS VALUE_SABUN,
		A.VALUE_MEMB,
		D.AGENT_NM AS VALUE_NM,
		FN_CM_GET_CODE_NM(I_TENANT_ID, 'AGENT_JIKGUP', D.AGENT_JIKGUP) AS VALUE_JIKGUP,
		FN_CM_GET_CODE_NM(I_TENANT_ID, 'AGENT_JIKCHK', D.AGENT_JIKCHK) AS VALUE_JIKCHK,
		FN_CM_GET_DEPT_INFO(I_TENANT_ID, E.DEPT_CD) AS TARGET_TEAM_NM,
		FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND', E.TM_KIND) AS TARGET_TM_KIND,
		E.SABUN AS TARGET_SABUN,
		A.TARGET_MEMB,
		E.AGENT_NM AS TARGET_NM,
		FN_CM_GET_CODE_NM(I_TENANT_ID, 'AGENT_JIKGUP', E.AGENT_JIKGUP) AS TARGET_JIKGUP,
		FN_CM_GET_CODE_NM(I_TENANT_ID, 'AGENT_JIKCHK', E.AGENT_JIKCHK) AS TARGET_JIKCHK,
		NVL(TO_CHAR(B.TOTAL_SCORE, 'FM990.00'),'') AS SELF_SCORE,
		NVL(TO_CHAR(C.TOTAL_SCORE, 'FM990.00'),'') AS EVAL_SCORE,
		CASE WHEN C.SHEETKEY IS NULL THEN '미평가' ELSE '완료' END AS STATUS_NM,
		CASE WHEN C.SHEETKEY IS NULL THEN '10' ELSE '20' END AS STATUS_CD,
		B.SELF_YN AS SELF_YN_CD
	FROM TB_HR_EVAL_MAPPING A
	LEFT OUTER JOIN TB_HR_EVAL_RESULT_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID AND A.TARGET_MEMB = B.VALUE_MEMB AND B.TARGET_MEMB = B.VALUE_MEMB AND B.SELF_YN = 1 --본인 평가건
	LEFT OUTER JOIN TB_HR_EVAL_RESULT_HEADER C ON A.TENANT_ID = C.TENANT_ID AND A.SCHE_ID = C.SCHE_ID AND A.VALUE_MEMB = C.VALUE_MEMB AND A.TARGET_MEMB = C.TARGET_MEMB AND C.SELF_YN = 0 --실제 평가건
	LEFT OUTER JOIN TABLE(FN_CM_GET_TB_USER(I_TENANT_ID, '')) D ON A.TENANT_ID = D.TENANT_ID AND A.VALUE_MEMB = D.AGENT_ID --평가자정보
	LEFT OUTER JOIN TABLE(FN_CM_GET_TB_USER(I_TENANT_ID, I_AGENT_ID)) E ON A.TENANT_ID = E.TENANT_ID AND A.TARGET_MEMB = E.AGENT_ID --평가대상자정보
	WHERE A.SCHE_ID = I_SCHE_ID
	ORDER BY VALUE_TEAM_NM, VALUE_NM
	;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1010M01_01 
(
    I_TENANT_ID   	IN  VARCHAR2
  , I_STD_MONTH  	IN  VARCHAR2
  , I_DEPT_CD		IN	VARCHAR2
  , I_AGENT_ID		IN  VARCHAR2
  , I_TYPE			IN	VARCHAR2
  , I_CHK			IN	VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI1010M01_01
   PURPOSE:    근태점수 산정 조회

   REVISIONS:
   Ver             Date             Author                  Description
   -    -  
    1.0         2017/03/14
******************************************************************************/

 --  ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
--    ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
    
    
    IF I_TYPE = 'P' THEN
    OPEN O_CUR_LIST FOR 
		SELECT A.AGENT_ID
				,FN_CM_GET_DEPT_NM(B.TENANT_ID,'center',B.DEPT_CD) AS CENTER_NM
		  		,FN_CM_GET_DEPT_NM(B.TENANT_ID,'part',B.DEPT_CD) AS PART_NM
		        ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'team',B.DEPT_CD) AS TEAM_NM
		    	,FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo',B.DEPT_CD) AS JO_NM
			    ,FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND
		 		,B.SABUN
		 		,B.AGENT_NM
		 		,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
		       	,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
		       	,A.SUM_SCORE
		       	,A.LOOKUP_FAIR_CNT
		       	,A.LOOKUP_UNFAIR_CNT
		       	,A.LOOKUP_SCORE
		       	,A.TASK_FAIR_CNT
		       	,A.TASK_UNFAIR_CNT
		       	,A.TASK_SCORE
		       	,A.ABS_FAIR_CNT
		       	,A.ABS_UNFAIR_CNT
		       	,A.ABS_SCORE
		       	,A.EARLY_FAIR_CNT
		       	,A.EARLY_UNFAIR_CNT
		       	,A.EARLY_SCORE
		       	,A.VACA_FAIR_CNT
		       	,A.VACA_UNFAIR_CNT
		       	,A.VACA_SCORE
		       	,C.STD_NM
		FROM (
				SELECT A.AGENT_ID
						,NVL(SUM(C.FAIR_SCORE + C.UNFAIR_SCORE),0) AS SUM_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '10' THEN C.FAIR_CNT ELSE 0 END),0) AS LOOKUP_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '10' THEN C.UNFAIR_CNT ELSE 0 END),0) AS LOOKUP_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '10' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS LOOKUP_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '20' THEN C.FAIR_CNT ELSE 0 END),0) AS TASK_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '20' THEN C.UNFAIR_CNT ELSE 0 END),0) AS TASK_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '20' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS TASK_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '30' THEN C.FAIR_CNT ELSE 0 END),0) AS ABS_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '30' THEN C.UNFAIR_CNT ELSE 0 END),0) AS ABS_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '30' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS ABS_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '102' THEN C.FAIR_CNT ELSE 0 END),0) AS EARLY_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '102' THEN C.UNFAIR_CNT ELSE 0 END),0) AS EARLY_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '102' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS EARLY_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '203' THEN C.FAIR_CNT ELSE 0 END),0) AS VACA_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '203' THEN C.UNFAIR_CNT ELSE 0 END),0) AS VACA_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '203' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS VACA_SCORE
				FROM TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, I_STD_MONTH, I_AGENT_ID)) A
				INNER JOIN TABLE(FN_CM_GET_TB_DEPT_HISTORY(I_TENANT_ID, I_STD_MONTH, I_DEPT_CD)) B
				ON A.DEPT_CD = B.DEPT_CD
				LEFT JOIN TB_KPI_CONDUCT_SCORE C ON (A.TENANT_ID = C.TENANT_ID AND A.STD_MONTH = C.STD_MONTH AND A.AGENT_ID = C.AGENT_ID)
				WHERE A.STD_MONTH = I_STD_MONTH
				GROUP BY A.AGENT_ID
				) A
		INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, I_STD_MONTH, NULL)) B ON A.AGENT_ID = B.AGENT_ID
		LEFT JOIN (SELECT A.STD_NM
							,B.DEPT_CD
					FROM TB_KPI_CONDUCT_STD A
					INNER JOIN TB_CM_ACCESS_SCOPE B
					ON (A.TENANT_ID = B.TENANT_ID AND A.STD_ID = B.ITEM_ID)
					WHERE A.TENANT_ID = I_TENANT_ID
					  AND A.STD_MONTH = I_STD_MONTH
					  AND B.SCOPE_GUBUN = 10
					GROUP BY A.STD_NM, B.DEPT_CD
					) C
		ON C.DEPT_CD = B.DEPT_CD
		WHERE (( I_CHK = 0 AND 1=1 ) OR (I_CHK = 1 AND A.SUM_SCORE > 0 ))
	;
	
  	ELSE
    OPEN O_CUR_LIST FOR 
	SELECT FN_CM_GET_DEPT_NM(A.TENANT_ID,'center',A.DEPT_CD) AS CENTER_NM
		  		,FN_CM_GET_DEPT_NM(A.TENANT_ID,'part',A.DEPT_CD) AS PART_NM
		        ,FN_CM_GET_DEPT_NM(A.TENANT_ID,'team',A.DEPT_CD) AS TEAM_NM
		    	,FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo',A.DEPT_CD) AS JO_NM
		       	,A.SUM_SCORE
		       	,A.LOOKUP_FAIR_CNT
		       	,A.LOOKUP_UNFAIR_CNT
		       	,A.LOOKUP_SCORE
		       	,A.TASK_FAIR_CNT
		       	,A.TASK_UNFAIR_CNT
		       	,A.TASK_SCORE
		       	,A.ABS_FAIR_CNT
		       	,A.ABS_UNFAIR_CNT
		       	,A.ABS_SCORE
		       	,A.EARLY_FAIR_CNT
		       	,A.EARLY_UNFAIR_CNT
		       	,A.EARLY_SCORE
		       	,A.VACA_FAIR_CNT
		       	,A.VACA_UNFAIR_CNT
		       	,A.VACA_SCORE
		       	,B.STD_NM
		FROM (
				SELECT A.TENANT_ID
						,A.DEPT_CD
						,NVL(SUM(C.FAIR_SCORE + C.UNFAIR_SCORE),0) AS SUM_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '10' THEN C.FAIR_CNT ELSE 0 END),0) AS LOOKUP_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '10' THEN C.UNFAIR_CNT ELSE 0 END),0) AS LOOKUP_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '10' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS LOOKUP_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '20' THEN C.FAIR_CNT ELSE 0 END),0) AS TASK_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '20' THEN C.UNFAIR_CNT ELSE 0 END),0) AS TASK_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '20' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS TASK_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '30' THEN C.FAIR_CNT ELSE 0 END),0) AS ABS_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '30' THEN C.UNFAIR_CNT ELSE 0 END),0) AS ABS_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '30' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS ABS_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '102' THEN C.FAIR_CNT ELSE 0 END),0) AS EARLY_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '102' THEN C.UNFAIR_CNT ELSE 0 END),0) AS EARLY_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '102' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS EARLY_SCORE
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '203' THEN C.FAIR_CNT ELSE 0 END),0) AS VACA_FAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '203' THEN C.UNFAIR_CNT ELSE 0 END),0) AS VACA_UNFAIR_CNT
						,NVL(SUM(CASE WHEN C.CONDUCT_CODE = '203' THEN C.FAIR_SCORE+C.UNFAIR_SCORE ELSE 0 END),0) AS VACA_SCORE
				FROM TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, I_STD_MONTH, I_AGENT_ID)) A
				INNER JOIN TABLE(FN_CM_GET_TB_DEPT_HISTORY(I_TENANT_ID, I_STD_MONTH, I_DEPT_CD)) B
				ON A.DEPT_CD = B.DEPT_CD
				LEFT JOIN TB_KPI_CONDUCT_SCORE C ON (A.TENANT_ID = C.TENANT_ID AND A.STD_MONTH = C.STD_MONTH AND A.AGENT_ID = C.AGENT_ID)
				WHERE A.STD_MONTH = I_STD_MONTH
				GROUP BY A.TENANT_ID, A.DEPT_CD
				) A
		LEFT JOIN (SELECT A.STD_NM
							,B.DEPT_CD
					FROM TB_KPI_CONDUCT_STD A
					INNER JOIN TB_CM_ACCESS_SCOPE B
					ON (A.TENANT_ID = B.TENANT_ID AND A.STD_ID = B.ITEM_ID)
					WHERE A.TENANT_ID = I_TENANT_ID
					  AND A.STD_MONTH = I_STD_MONTH
					  AND B.SCOPE_GUBUN = 10
					GROUP BY A.STD_NM, B.DEPT_CD
					) B
		ON  A.DEPT_CD = B.DEPT_CD
		WHERE (( I_CHK = 0 AND 1=1 ) OR (I_CHK = 1 AND A.SUM_SCORE > 0 ))
		;
	END IF;
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1010M01_02
(
    I_TENANT_ID 	IN  VARCHAR2
  , I_STD_MONTH 	IN  VARCHAR2
  , I_DEPT_CD		IN  VARCHAR2
  , I_AGENT_ID		IN  VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_KPI1010M01_02
   PURPOSE:    근태점수 산정 집계

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/14
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN

		DELETE FROM TB_KPI_CONDUCT_SCORE
		WHERE TENANT_ID = I_TENANT_ID
		AND STD_MONTH = I_STD_MONTH
		AND	((I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, AGENT_ID) > 0))
		AND AGENT_ID IN (SELECT AGENT_ID 
						 FROM TB_CM_USER_MASTER_HISTORY	A
 					    JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) C 
						ON A.DEPT_CD = C.DEPT_CD
						AND A.TENANT_ID = C.TENANT_ID
						WHERE A.TENANT_ID = I_TENANT_ID
						AND STD_MONTH = I_STD_MONTH
						)
		;
		
		
		INSERT INTO TB_KPI_CONDUCT_SCORE(
		SELECT TENANT_ID
					,STD_MONTH
					,AGENT_ID
--					,DEPT_CD
					,CONDUCT_CODE
					,NVL(MAX(CASE WHEN REASONABLE_YN = 1 THEN CNT ELSE 0 END),0) AS FAIR_CNT
					,NVL(MAX(CASE WHEN REASONABLE_YN = 1 THEN SCORE ELSE 0 END),0)  AS FAIR_SCORE
			 		,NVL(MAX(CASE WHEN REASONABLE_YN = 0 THEN CNT ELSE 0 END),0) AS UNFAIR_CNT
					,NVL(MAX(CASE WHEN REASONABLE_YN = 0 THEN SCORE ELSE 0 END),0)  AS UNFAIR_SCORE
 FROM (
	SELECT MAIN.TENANT_ID
			,MAIN.STD_MONTH
			,MAIN.AGENT_ID
			,MAIN.DEPT_CD
			,MAIN.CONDUCT_CODE
			,MAIN.REASONABLE_YN
			,MAIN.CNT --CNT
			,CASE WHEN MAIN.REASONABLE_YN = 1 THEN SUB.FAIR_SCORE*MAIN.CNT
			ELSE SUB.UNFAIR_SCORE*CNT+ (CASE WHEN SUB.CUMULATE_CNT != 0 THEN FLOOR(CNT/SUB.CUMULATE_CNT)*SUB.CUMULATE_SCORE
										ELSE 0 END)
			END  AS SCORE
			,SUB.CUMULATE_CNT
			,SUB.CUMULATE_SCORE
			FROM (
						SELECT A.AGENT_ID,
							   A.DEPT_CD,
							   B.CONDUCT_CODE,
							   B.REASONABLE_YN,
							   A.TENANT_ID,
							   A.STD_MONTH,
							   B.CNT FROM TB_CM_USER_MASTER_HISTORY A
					    JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) C 
						ON A.DEPT_CD = C.DEPT_CD
						AND A.TENANT_ID = C.TENANT_ID
						INNER JOIN 
						(SELECT AGENT_ID
										 ,LAZY_TYPE AS CONDUCT_CODE
										 ,NVL(REASONABLE_YN,0) AS REASONABLE_YN
										 ,COUNT(LAZY_TYPE) AS CNT 
								 	FROM TB_HR_AGENT_ABSENCE 
									WHERE TENANT_ID = I_TENANT_ID
									AND LAZY_TYPE IN (10,20,30)
									AND SUBSTR(WORK_YMD,0,6) = I_STD_MONTH
									GROUP BY AGENT_ID, LAZY_TYPE, REASONABLE_YN
						UNION 
						SELECT AGENT_ID
										 ,CONDUCT_CODE
										 ,NVL(REASONABLE_YN,0) AS REASONABLE_YN
										 ,COUNT(CONDUCT_CODE) AS CNT 
								   FROM TB_HR_CONDUCT 
								   WHERE TENANT_ID = I_TENANT_ID 
								   AND CONDUCT_CODE IN (102,203)
						   		   AND SUBSTR(FRM_YMD,0,6) = I_STD_MONTH
							   	   GROUP BY AGENT_ID, CONDUCT_CODE, REASONABLE_YN
--								   ORDER BY AGENT_ID, TO_NUMBER(CONDUCT_CODE)
									) B
									ON A.AGENT_ID = B.AGENT_ID
									WHERE A.TENANT_ID = I_TENANT_ID
									AND STD_MONTH = I_STD_MONTH
									AND	((I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, A.AGENT_ID) > 0))
						) MAIN 
						INNER JOIN (
									SELECT TA.DEPT_CD
											,TB.CONDUCT_CODE
											,TB.UNFAIR_SCORE
											,TB.FAIR_SCORE
											,TB.CUMULATE_CNT
											,TB.CUMULATE_SCORE
									FROM TB_CM_ACCESS_SCOPE TA
									JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) TC 
										ON TA.DEPT_CD = TC.DEPT_CD
										AND TA.TENANT_ID = TC.TENANT_ID
									INNER JOIN TB_KPI_CONDUCT_STD TB
									ON TA.TENANT_ID = TB.TENANT_ID
									AND TA.ITEM_ID = TB.STD_ID
									WHERE TA.TENANT_ID = I_TENANT_ID
									AND TA.SCOPE_GUBUN = '10'
									AND SUBSTR(ITEM_ID,0,6) = I_STD_MONTH
						) SUB 
						ON MAIN.DEPT_CD = SUB.DEPT_CD 
					AND MAIN.CONDUCT_CODE = SUB.CONDUCT_CODE
				)
				GROUP BY TENANT_ID, STD_MONTH, AGENT_ID, CONDUCT_CODE
			);		
		
			COMMIT;					
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI1020M01_01 
(
    I_TENANT_ID   	 IN VARCHAR2
  , I_STD_MONTH  	 IN VARCHAR2
  , I_DEPT_CD		 IN	VARCHAR2
  , I_AGENT_ID		 IN VARCHAR2
  , I_SCORE_GBN		 IN VARCHAR2
  , I_PLUS_MINUS_STD IN	VARCHAR2
  , O_CUR_LIST       OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI1020M01_01
   PURPOSE:    가감점 관리 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/07
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  #########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
   

	IF I_SCORE_GBN = 'P' THEN 
	
    OPEN O_CUR_LIST FOR 
	
	SELECT TA.AGENT_ID
		 , FN_CM_GET_DEPT_NM(I_TENANT_ID,'center',TA.DEPT_CD)  AS CENTER_NM
	  	 , FN_CM_GET_DEPT_NM(I_TENANT_ID,'part',TA.DEPT_CD)    AS PART_NM
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'team',TA.DEPT_CD)    AS TEAM_NM
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'jo',TA.DEPT_CD)      AS JO_NM
		 , FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',TA.TM_KIND) AS TM_KIND
	 	 , TA.SABUN    AS SABUN
	 	 , TA.AGENT_NM AS USER1_NM
	 	 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',TA.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
	     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',TA.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
	     , TB.SNO             AS SNO
	     , TB.STD_ID          AS STD_ID
	     , TB.STD_NM          AS STD_NM
	     , TO_CHAR(TO_DATE(TB.START_MONTH, 'YYYYMM'), 'YYYY-MM') AS START_MONTH
	     , TO_CHAR(TO_DATE(TB.END_MONTH, 'YYYYMM'), 'YYYY-MM')   AS END_MONTH
	     , TB.AGENT_SCORE     AS AGENT_SCORE
   	     , TB.STEP_ID         AS STEP_ID
   	     , TB.STEP1_NM        AS STEP1_NM   	     
	     , TB.STEP_SCORE      AS STEP_SCORE
	     , TB.AGENT_MAX_SCORE AS AGENT_MAX_SCORE	     
	     , TB.AGENT_MIN_SCORE AS AGENT_MIN_SCORE
	     , TB.STEP_MAX_SCORE  AS STEP_MAX_SCORE
	     , TB.STEP_MIN_SCORE  AS STEP_MIN_SCORE	     	     	     
	     , TB.KPI_YN          AS KPI_YN
	     , FN_CM_GET_AGENT_NM(I_TENANT_ID, TB.CREATE_AGENT_ID) AS CREATE_NM
	     , TO_CHAR(TB.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT     
	  FROM TB_CM_USER_MASTER_HISTORY TA
	  JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) C  
		ON TA.DEPT_CD = C.DEPT_CD
	   AND TA.TENANT_ID = C.TENANT_ID
     INNER JOIN ( SELECT A.TENANT_ID
     				   , A.SNO
	                   , A.AGENT_ID
	                   , A.AGENT_SCORE
	                   , A.STEP_ID	      
	                   , (SELECT AGENT_NM FROM TB_CM_USER_MASTER WHERE AGENT_ID = A.STEP_ID) AS STEP1_NM             
	                   , A.STEP_SCORE
	                   , A.START_MONTH
	                   , A.END_MONTH
	                   , A.KPI_YN
	                   , A.CREATE_AGENT_ID
	                   , A.CREATE_DT
	                   , B.STD_ID
	                   , B.STD_NM
	                   , B.AGENT_MAX_SCORE	                   
	                   , B.AGENT_MIN_SCORE	                   
	                   , B.STEP_MAX_SCORE	                   
	                   , B.STEP_MIN_SCORE	                   
	                FROM TB_KPI_PLUS_MINUS A
	          INNER JOIN TB_KPI_PLUS_MINUS_STD B
	                  ON A.TENANT_ID = B.TENANT_ID
	                 AND A.STD_ID    = B.STD_ID
	               WHERE A.AGENT_SCORE > 0
	                 AND (( I_PLUS_MINUS_STD IS NULL AND 1=1 ) OR
                          ( I_PLUS_MINUS_STD  IS NOT NULL AND INSTR(I_PLUS_MINUS_STD, A.STD_ID) > 0))
                          ) TB    
	    ON TA.TENANT_ID = TB.TENANT_ID
	   AND TA.AGENT_ID  = TB.AGENT_ID
	 WHERE TA.TENANT_ID = I_TENANT_ID
	   AND TA.STD_MONTH = I_STD_MONTH
	   AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, TA.AGENT_ID) > 0))
	   ;  
                          
             
	ELSIF I_SCORE_GBN = 'M' THEN 
	
    OPEN O_CUR_LIST FOR 
	
	SELECT TA.AGENT_ID
		 , FN_CM_GET_DEPT_NM(I_TENANT_ID,'center',TA.DEPT_CD)  AS CENTER_NM
	  	 , FN_CM_GET_DEPT_NM(I_TENANT_ID,'part',TA.DEPT_CD)    AS PART_NM
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'team',TA.DEPT_CD)    AS TEAM_NM
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'jo',TA.DEPT_CD)      AS JO_NM
		 , FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',TA.TM_KIND) AS TM_KIND
	 	 , TA.SABUN    AS SABUN
	 	 , TA.AGENT_NM AS USER1_NM
	 	 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',TA.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
	     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',TA.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
	     , TB.SNO             AS SNO
	     , TB.STD_ID          AS STD_ID	     
	     , TB.STD_NM          AS STD_NM
	     , TO_CHAR(TO_DATE(TB.START_MONTH, 'YYYYMM'), 'YYYY-MM') AS START_MONTH
	     , TO_CHAR(TO_DATE(TB.END_MONTH, 'YYYYMM'), 'YYYY-MM')   AS END_MONTH
	     , TB.AGENT_SCORE     AS AGENT_SCORE
	     , TB.STEP_ID         AS STEP_ID
   	     , TB.STEP1_NM        AS STEP1_NM	     
	     , TB.STEP_SCORE      AS STEP_SCORE
	     , TB.AGENT_MAX_SCORE AS AGENT_MAX_SCORE	     
	     , TB.AGENT_MIN_SCORE AS AGENT_MIN_SCORE
	     , TB.STEP_MAX_SCORE  AS STEP_MAX_SCORE
	     , TB.STEP_MIN_SCORE  AS STEP_MIN_SCORE		     	     
	     , TB.KPI_YN          AS KPI_YN
	     , FN_CM_GET_AGENT_NM(I_TENANT_ID, TB.CREATE_AGENT_ID) AS CREATE_NM
	     , TO_CHAR(TB.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT     
	  FROM TB_CM_USER_MASTER_HISTORY TA
	  JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) C  
		ON TA.DEPT_CD = C.DEPT_CD
	   AND TA.TENANT_ID = C.TENANT_ID
     INNER JOIN ( SELECT A.TENANT_ID
     				   , A.SNO
	                   , A.AGENT_ID
	                   , A.AGENT_SCORE
	                   , A.STEP_ID
	                   , (SELECT AGENT_NM FROM TB_CM_USER_MASTER WHERE AGENT_ID = A.STEP_ID) AS STEP1_NM	                   
	                   , A.STEP_SCORE	                   
	                   , A.START_MONTH
	                   , A.END_MONTH
	                   , A.KPI_YN
	                   , A.CREATE_AGENT_ID
	                   , A.CREATE_DT
	                   , B.STD_ID
	                   , B.STD_NM
	                   , B.AGENT_MAX_SCORE	                   
	                   , B.AGENT_MIN_SCORE	                   
	                   , B.STEP_MAX_SCORE	                   
	                   , B.STEP_MIN_SCORE	                   
	                FROM TB_KPI_PLUS_MINUS A
	          INNER JOIN TB_KPI_PLUS_MINUS_STD B
	                  ON A.TENANT_ID = B.TENANT_ID
	                 AND A.STD_ID    = B.STD_ID
	               WHERE A.AGENT_SCORE < 0
	                 AND (( I_PLUS_MINUS_STD IS NULL AND 1=1 ) OR
                          ( I_PLUS_MINUS_STD  IS NOT NULL AND INSTR(I_PLUS_MINUS_STD, A.STD_ID) > 0))
                          ) TB    
	    ON TA.TENANT_ID = TB.TENANT_ID
	   AND TA.AGENT_ID  = TB.AGENT_ID
	 WHERE TA.TENANT_ID = I_TENANT_ID
	   AND TA.STD_MONTH = I_STD_MONTH
	   AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, TA.AGENT_ID) > 0))
	   ;  


	ELSIF I_SCORE_GBN = 'A' THEN 
	
    OPEN O_CUR_LIST FOR 
	
	SELECT TA.AGENT_ID
		 , FN_CM_GET_DEPT_NM(I_TENANT_ID,'center',TA.DEPT_CD)  AS CENTER_NM
	  	 , FN_CM_GET_DEPT_NM(I_TENANT_ID,'part',TA.DEPT_CD)    AS PART_NM
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'team',TA.DEPT_CD)    AS TEAM_NM
	     , FN_CM_GET_DEPT_NM(I_TENANT_ID,'jo',TA.DEPT_CD)      AS JO_NM
		 , FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',TA.TM_KIND) AS TM_KIND
	 	 , TA.SABUN    AS SABUN
	 	 , TA.AGENT_NM AS USER1_NM
	 	 , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',TA.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
	     , FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',TA.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
	     , TB.SNO             AS SNO
	     , TB.STD_ID          AS STD_ID	     
	     , TB.STD_NM          AS STD_NM
	     , TO_CHAR(TO_DATE(TB.START_MONTH, 'YYYYMM'), 'YYYY-MM') AS START_MONTH
	     , TO_CHAR(TO_DATE(TB.END_MONTH, 'YYYYMM'), 'YYYY-MM')   AS END_MONTH
	     , TB.AGENT_SCORE     AS AGENT_SCORE
	     , TB.STEP_ID         AS STEP_ID	
   	     , TB.STEP1_NM        AS STEP1_NM	          
	     , TB.STEP_SCORE      AS STEP_SCORE
	     , TB.AGENT_MAX_SCORE AS AGENT_MAX_SCORE	     
	     , TB.AGENT_MIN_SCORE AS AGENT_MIN_SCORE
	     , TB.STEP_MAX_SCORE  AS STEP_MAX_SCORE
	     , TB.STEP_MIN_SCORE  AS STEP_MIN_SCORE		     	     
	     , TB.KPI_YN          AS KPI_YN
	     , FN_CM_GET_AGENT_NM(I_TENANT_ID, TB.CREATE_AGENT_ID) AS CREATE_NM
	     , TO_CHAR(TB.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT     
	  FROM TB_CM_USER_MASTER_HISTORY TA
	  JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) C  
		ON TA.DEPT_CD = C.DEPT_CD
	   AND TA.TENANT_ID = C.TENANT_ID
     INNER JOIN ( SELECT A.TENANT_ID
     				   , A.SNO
	                   , A.AGENT_ID
	                   , A.AGENT_SCORE
	                   , A.STEP_ID
	                   , (SELECT AGENT_NM FROM TB_CM_USER_MASTER WHERE AGENT_ID = A.STEP_ID) AS STEP1_NM	                   
	                   , A.STEP_SCORE	                   
	                   , A.START_MONTH
	                   , A.END_MONTH
	                   , A.KPI_YN
	                   , A.CREATE_AGENT_ID
	                   , A.CREATE_DT
	                   , B.STD_ID
	                   , B.STD_NM
	                   , B.AGENT_MAX_SCORE	                   
	                   , B.AGENT_MIN_SCORE	                   
	                   , B.STEP_MAX_SCORE	                   
	                   , B.STEP_MIN_SCORE	                   
	                FROM TB_KPI_PLUS_MINUS A
	          INNER JOIN TB_KPI_PLUS_MINUS_STD B
	                  ON A.TENANT_ID = B.TENANT_ID
	                 AND A.STD_ID    = B.STD_ID
	               WHERE (( I_PLUS_MINUS_STD IS NULL AND 1=1 ) OR
                          ( I_PLUS_MINUS_STD  IS NOT NULL AND INSTR(I_PLUS_MINUS_STD, A.STD_ID) > 0))
                          ) TB    
	    ON TA.TENANT_ID = TB.TENANT_ID
	   AND TA.AGENT_ID  = TB.AGENT_ID
	 WHERE TA.TENANT_ID = I_TENANT_ID
	   AND TA.STD_MONTH = I_STD_MONTH
	   AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, TA.AGENT_ID) > 0))
	   ;  	                  
	END IF;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_KPI1030M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_TIME_FROM     IN VARCHAR2
 , I_TIME_TO       IN VARCHAR2 
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , I_HOLIDAY       IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI1030M01_01
   PURPOSE:    콜실적조회 - 개인별/소속별/업무그룹별/근속기간별 

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/05  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
		    SELECT C.TENANT_ID
		           ,C.DEPT_CD
		           ,C.AGENT_ID
		           ,C.TM_KIND
		           ,(SELECT S.CODE
		             FROM TB_CM_CODE S 
		            WHERE S.TENANT_ID = C.TENANT_ID 
		              AND S.SORT_CD   = 'WORK_PERIOD'
			          AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		             AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		            ,A.CALL_DATE 
		            ,A.IB_ANSWER_CNT /* IB응답호 - IB콜수 */
		            ,A.IB_TALK_TIME  /* IB통화시간 - IB콜타임 */
		            ,A.OB_CONN_CNT /* OB시도호 - OB콜수 */
		            ,A.OB_TALK_TIME /* OB통화시간 - OB콜타임 */
		            ,A.IB_EXT_CNT /* IB내선통화호  */
		            ,A.IB_EXT_TIME /* IB내선통화시간 */
		            ,A.OB_EXT_CNT /* OB내선통화호 */
		            ,A.OB_EXT_TIME /* OB내선통화시간 */
		            ,A.TRANSFER_CNT /* 전환호 */
		            ,A.TRANSFER_TIME /* 전환통화시간 */
		            ,A.TRANSRECV_CNT /* 전환받은호 */
		            ,A.TRANSRECV_TIME AS TRANSRECV_TIME /* 전환받은통화시간 */
		            ,A.CONFERENCE_CNT    /* 3자통화 */
		            ,A.CONFERENCE_TIME 
		            ,NVL(B.READY_TIME,0) AS AGENT_TOTAL1 /* 대기시간 */
		            ,NVL(B.ACW_TIME ,0) AS AGENT_TOTAL2  /* 후처리 */
		            ,NVL(B.NOTREADY_TIME,0) AS AGENT_TOTAL3 /* 휴식 */   
	 	      FROM TB_KPI_COSTVALUE_HH A 
	 	      LEFT OUTER JOIN TB_KPI_AGENT_STATUS_HH B ON (A.TENANT_ID = B.TENANT_ID 
	 	                                               AND A.CALL_DATE = B.WORK_DATE
	 	                                               AND A.CALL_HH   = B.HOUR_TIME
	 	                                               AND A.AGENT_ID  = B.AGENT_ID )
		      INNER JOIN TB_CM_USER_MASTER C ON ( A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		      INNER JOIN TB_CM_HOLIDAY E ON (A.CALL_DATE = E.STD_YMD )
		    WHERE A.TENANT_ID  = I_TENANT_ID
		     AND A.CALL_DATE BETWEEN I_DT_FROM AND I_DT_TO
		       AND A.CALL_HH   BETWEEN I_TIME_FROM||'00' AND I_TIME_TO||'59'
			   AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID,C.AGENT_ID) > 0))      
			  AND E.HOLI_YN = CASE WHEN I_HOLIDAY = '1' THEN 0 ELSE E.HOLI_YN END /* 휴일제외 */
	   )
     , TEMP_CD AS (
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				    WHEN 'W' THEN 'WORK_PERIOD'
							     				    ELSE NULL END)
		), TEMP_LIST2 AS (
						SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					,A.CALL_DATE		     			 
					,(SUM(A.IB_ANSWER_CNT) + SUM(A.OB_CONN_CNT)) AS TOTAL_CNT1  /* 총통화 - 콜수 */	
					,(SUM(A.IB_TALK_TIME ) + SUM(OB_TALK_TIME )) AS TOTAL_TIME1 /* 총통화 - 콜타임 */	     			 
		            ,SUM(A.IB_ANSWER_CNT )AS TOTAL_CNT2   /*IB - 콜수 */
		            ,SUM(A.IB_TALK_TIME ) AS TOTAL_TIME2  /*IB - 콜타임 */
		            ,SUM(A.OB_CONN_CNT)  AS TOTAL_CNT3  /* OB-콜수 */
		            ,SUM(A.OB_TALK_TIME) AS TOTAL_TIME3 /* OB-콜타임 */
		            ,SUM(A.IB_EXT_CNT) + SUM(A.OB_EXT_CNT) AS TOTAL_CNT4 /* 내선 - 통화호  */
		            ,SUM(A.IB_EXT_TIME)+ SUM(OB_EXT_TIME) AS TOTAL_TIME4 /* 내선 - 통화시간 */
		            ,SUM(A.TRANSFER_CNT) AS TOTAL_CNT5  /* 전환호 -콜수 */
		            ,SUM(A.TRANSFER_TIME) AS TOTAL_TIME5  /* 전환호 -콜타임 */
		            ,SUM(A.TRANSRECV_CNT) AS TOTAL_CNT6  /* 전환받은호 -콜수 */
		            ,SUM(A.TRANSRECV_TIME) AS TOTAL_TIME6  /* 전환받은호 -콜타임 */		
		            ,SUM(A.CONFERENCE_CNT) AS TOTAL_CNT7  /* 회의 -콜수 */
		            ,SUM(A.CONFERENCE_TIME) AS TOTAL_TIME7  /* 회의 -콜타임 */			                        
     	            ,SUM(A.AGENT_TOTAL1) AS AGENT_TOTAL1 /* 대기시간 */
     	            ,SUM(A.AGENT_TOTAL2) AS AGENT_TOTAL2 /* 후처리 */
     	            ,SUM(A.AGENT_TOTAL3) AS AGENT_TOTAL3 /* 휴식 */
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END)
				      , A.CALL_DATE			     			 
	          ) 
 	    SELECT A.TENANT_ID
 	        ,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.CODE)
			      ELSE '' END) AS CENTER
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.CODE)
			      ELSE '' END) AS PART
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.CODE)
			      ELSE '' END) AS TEAM
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
			      ELSE '' END) AS JO
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND', B.TM_KIND)
 			                     ELSE '' END)  AS TM_KIND_NM 			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.SABUN ELSE '' END)  AS SABUN			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP)
 			                     ELSE '' END)  AS AGENT_JIKGUP_NM    
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK)
 			                     ELSE '' END)  AS AGENT_JIKCHK_NM  	
      		  ,A.CODE
			  ,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.AGENT_NM
			                     WHEN 'D' THEN FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
								 WHEN 'T' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND', A.CODE)
								 WHEN 'W' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'WORK_PERIOD', A.CODE)
 			                     ELSE '' END)  AS CODE_NM       		
      	    /* 조회구분별  조회 */	 			                     
 			,TO_CHAR(TO_DATE(A.CALL_DATE   ,'YYYYMMDD'),'YYYY-MM-DD') AS CALL_DATE
 			,A.TOTAL_CNT1
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TOTAL_TIME1) AS TOTAL_TIME1
 			,A.TOTAL_TIME1 AS TOTAL_SEC1
  			,A.TOTAL_CNT2
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TOTAL_TIME2) AS TOTAL_TIME2
 			,A.TOTAL_TIME2 AS TOTAL_SEC2
 			,A.TOTAL_CNT3
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TOTAL_TIME3) AS TOTAL_TIME3
 			,A.TOTAL_TIME3 AS TOTAL_SEC3
 			,A.TOTAL_CNT4
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TOTAL_TIME4) AS TOTAL_TIME4
 			,A.TOTAL_TIME4 AS TOTAL_SEC4
 			,A.TOTAL_CNT5
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TOTAL_TIME5) AS TOTAL_TIME5
 			,A.TOTAL_TIME5 AS TOTAL_SEC5
 			,A.TOTAL_CNT6
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TOTAL_TIME6) AS TOTAL_TIME6
 			,A.TOTAL_TIME6 AS TOTAL_SEC6
 			,A.TOTAL_CNT7
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TOTAL_TIME7) AS TOTAL_TIME7
 			,A.TOTAL_TIME7 AS TOTAL_SEC7
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.AGENT_TOTAL1) AS AGENT_TOTAL1
 			, AGENT_TOTAL1 AS AGENT_SEC1
			,FN_CM_GET_SECONDS_TO_FORMAT(A.AGENT_TOTAL2) AS AGENT_TOTAL2
 			, AGENT_TOTAL2 AS AGENT_SEC2
			,FN_CM_GET_SECONDS_TO_FORMAT(A.AGENT_TOTAL3) AS AGENT_TOTAL3	                  		      			      			      
 			, AGENT_TOTAL3 AS AGENT_SEC3
		FROM  TEMP_LIST2 A
		LEFT OUTER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.CODE = B.AGENT_ID )
		ORDER BY 1,2,3,4,5,6,7,8,9,10,12
        ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI1040M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_STD_MONTH     IN VARCHAR2
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 요약(S)/상세(D) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI1040M01_01
   PURPOSE:    생산성평가 - 요약/상세

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/10  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1040M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
 WITH TEMP_LIST AS (
	  SELECT 
		     A.TENANT_ID AS TENANT_ID
			,A.COSTVALUE_ID AS COSTVALUE_ID
			,A.AGENT_ID AS AGENT_ID
			,A.EVEL_DEPT_CD AS EVEL_DEPT_CD
			,A.EVAL_TM_KIND AS EVAL_TM_KIND
			,A.TOTAL_CALL_CNT AS TOTAL_CALL_CNT
			,A.TOTAL_CALL_TIME AS TOTAL_CALL_TIME
			,A.IB_CNT AS IB_CNT
			,A.IB_TIME AS IB_TIME
			,A.OB_CNT AS OB_CNT
			,A.OB_TIME AS OB_TIME
			,A.INTERNAL_S_CNT AS INTERNAL_S_CNT
			,A.INTERNAL_S_TIME AS INTERNAL_S_TIME
			,A.INTERNAL_R_CNT AS INTERNAL_R_CNT
			,A.INTERNAL_R_TIME AS INTERNAL_R_TIME
			,A.CONSULT_CNT AS CONSULT_CNT
			,A.CONSULT_TIME AS CONSULT_TIME
			,A.TRANSFER_S_CNT AS TRANSFER_S_CNT
			,A.TRANSFER_S_TIME AS TRANSFER_S_TIME
			,A.TRANSFER_R_CNT AS TRANSFER_R_CNT
			,A.TRANSFER_R_TIME AS TRANSFER_R_TIME
			,A.CONFERENCE_CNT AS CONFERENCE_CNT
			,A.CONFERENCE_TIME AS CONFERENCE_TIME
			,A.READY_TIME AS READY_TIME
			,A.ACW_TIME AS ACW_TIME
			,A.NOTREADY_TIME AS NOTREADY_TIME
			,A.WORK_ID AS WORK_ID
			,A.CONDUCT1_TIME AS CONDUCT1_TIME
			,A.CONDUCT2_TIME AS CONDUCT2_TIME
			,A.CONDUCT3_TIME AS CONDUCT3_TIME
			,A.CONDUCT4_TIME AS CONDUCT4_TIME
			,A.CONDUCT5_TIME AS CONDUCT5_TIME
			,A.EDU_TIME AS EDU_TIME
			,A.COACHING_TIME AS COACHING_TIME
			,A.WORK_TIME AS WORK_TIME
			,A.WORK_ID
			,E.WORK_NM
			,E.WORK_FRM_TM
			,E.WORK_END_TM
			,E.NEXT_DAY_YN			
            ,FN_CM_GET_WORKTYPE_SECONDS(A.TENANT_ID, A.AGENT_ID, B.STD_MONTH) AS WORK_STD_TIME /* 일 근무시간 (초)*/
		    ,FN_CM_GET_WORKDAYS_DIFF(A.TENANT_ID,A.AGENT_ID, 'D', B.STD_MONTH||'01', B.STD_MONTH||'31') AS WORK_STD_DAYS /* 월 기준 근무일수 */
	      FROM TB_KPI_COSTVALUE_STATICS A 
		      INNER JOIN TB_KPI_COSTVALUE_STD_HEADER B ON ( A.TENANT_ID = B.TENANT_ID AND A.COSTVALUE_ID = B.COSTVALUE_ID)
		      INNER JOIN TB_CM_USER_MASTER C ON ( A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
			  INNER JOIN TB_HR_WORK_TYPE E ON (A.TENANT_ID = E.TENANT_ID AND A.WORK_ID = E.WORK_ID) 
		    WHERE A.TENANT_ID  = I_TENANT_ID
		      AND B.STD_MONTH   = I_STD_MONTH
			  AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID,C.AGENT_ID) > 0)) 
	   )
     SELECT A.TENANT_ID
 	        ,FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD) AS CENTER
			,FN_CM_GET_DEPT_NM(B.TENANT_ID,'part'  , B.DEPT_CD) AS PART
			,FN_CM_GET_DEPT_NM(B.TENANT_ID,'team'  , B.DEPT_CD) AS TEAM
			,FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo'    , B.DEPT_CD) AS JO
			,FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND', B.TM_KIND) AS TM_KIND_NM 
			,B.SABUN
			,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
			,FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
		    ,B.AGENT_NM		    
 			,TOTAL_CALL_CNT AS TOTAL_CNT1
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TOTAL_CALL_TIME) AS TOTAL_TIME1
 			,IB_CNT AS TOTAL_CNT2
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.IB_TIME) AS TOTAL_TIME2	
 			,OB_CNT AS TOTAL_CNT3
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.OB_TIME) AS TOTAL_TIME3 	
 			
 			,A.INTERNAL_S_CNT+ A.INTERNAL_R_CNT AS TOTAL_CNT4
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.INTERNAL_S_CNT+ A.INTERNAL_R_CNT) AS TOTAL_TIME4 	
 			,A.TRANSFER_S_CNT AS TOTAL_CNT5
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TRANSFER_S_TIME) AS TOTAL_TIME5 	
 			,A.TRANSFER_R_CNT AS TOTAL_CNT6
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.TRANSFER_R_TIME) AS TOTAL_TIME6 	
 			,A.CONFERENCE_CNT AS TOTAL_CNT7
 			,FN_CM_GET_SECONDS_TO_FORMAT(A.CONFERENCE_TIME) AS TOTAL_TIME7	 

 			,FN_CM_GET_SECONDS_TO_FORMAT(A.READY_TIME)    AS TOTAL_AGENT1
			,FN_CM_GET_SECONDS_TO_FORMAT(A.ACW_TIME)      AS TOTAL_AGENT2
			,FN_CM_GET_SECONDS_TO_FORMAT(A.NOTREADY_TIME) AS TOTAL_AGENT3	 						 			 			 							
 			,A.WORK_NM || '('|| FN_CM_GET_SECONDS_TO_FORMAT(A.WORK_STD_TIME )||')' AS TOTAL_CONDUCT1  
 			,A.WORK_STD_DAYS || '('|| FN_CM_GET_SECONDS_TO_FORMAT(A.WORK_STD_DAYS*A.WORK_STD_TIME )||')' AS TOTAL_CONDUCT2  
 			, TO_CHAR(ROUND(A.CONDUCT1_TIME /A.WORK_STD_TIME  ,2) ,'FM9990.00')
 			  ||'('||FN_CM_GET_SECONDS_TO_FORMAT(A.CONDUCT1_TIME)||')'  AS TOTAL_CONDUCT3    

 			, TO_CHAR(ROUND(A.CONDUCT2_TIME /A.WORK_STD_TIME  ,2) ,'FM9990.00')
 			  ||'('||FN_CM_GET_SECONDS_TO_FORMAT(A.CONDUCT2_TIME)||')'  AS TOTAL_CONDUCT4    
 			, TO_CHAR(ROUND(A.CONDUCT3_TIME /A.WORK_STD_TIME  ,2) ,'FM9990.00')
 			  ||'('||FN_CM_GET_SECONDS_TO_FORMAT(A.CONDUCT3_TIME)||')'  AS TOTAL_CONDUCT5     
 			, TO_CHAR(ROUND(A.CONDUCT4_TIME /A.WORK_STD_TIME  ,2) ,'FM9990.00')
 			  ||'('||FN_CM_GET_SECONDS_TO_FORMAT(A.CONDUCT4_TIME)||')'  AS TOTAL_CONDUCT6     
 			, TO_CHAR(ROUND(A.CONDUCT5_TIME /A.WORK_STD_TIME  ,2) ,'FM9990.00')
 			  ||'('||FN_CM_GET_SECONDS_TO_FORMAT(A.CONDUCT5_TIME)||')'  AS TOTAL_CONDUCT7 
 			, TO_CHAR(ROUND(A.EDU_TIME /A.WORK_STD_TIME  ,2) ,'FM9990.00')
 			  ||'('||FN_CM_GET_SECONDS_TO_FORMAT(A.EDU_TIME)||')'  AS TOTAL_CONDUCT8       
 			, TO_CHAR(ROUND(A.COACHING_TIME /A.WORK_STD_TIME  ,2) ,'FM9990.00')
 			  ||'('||FN_CM_GET_SECONDS_TO_FORMAT(A.COACHING_TIME)||')'  AS TOTAL_CONDUCT9
			, TO_CHAR(ROUND(A.WORK_TIME /A.WORK_STD_TIME  ,2) ,'FM9990.00') || '('|| FN_CM_GET_SECONDS_TO_FORMAT(WORK_TIME)||')' AS TOTAL_CONDUCT10
			, TO_CHAR((ROUND(A.WORK_TIME /(A.WORK_STD_DAYS*A.WORK_STD_TIME)  ,2))*100 ,'FM9990.00')||'%' AS TOTAL_CONDUCT11  
  			, TO_CHAR(ROUND(A.TOTAL_CALL_TIME/ CASE WHEN TOTAL_CALL_CNT = 0 THEN 1 ELSE TOTAL_CALL_CNT END ,2),'FM9990.00') AS TOTAL_ATT
  			, TO_CHAR(ROUND((A.TOTAL_CALL_TIME+ A.ACW_TIME)/ CASE WHEN TOTAL_CALL_CNT = 0 THEN 1 ELSE TOTAL_CALL_CNT END ,2),'FM9990.00') AS TOTAL_AHT   			  			   			   			   			          		      			      			      
			,TO_CHAR(ROUND(A.TOTAL_CALL_CNT/CASE WHEN WORK_TIME = 0 THEN 1 ELSE (WORK_TIME/(60*60)) END ,2),'FM9990.00')
			 ||'('||FN_CM_GET_SECONDS_TO_FORMAT(ROUND(A.TOTAL_CALL_TIME/CASE WHEN WORK_TIME = 0 THEN 1 ELSE (WORK_TIME/(60*60)) END ,1) )
			 ||')' AS TOTAL_CPH
			,TO_CHAR(ROUND(A.TOTAL_CALL_CNT/ ROUND(A.WORK_TIME /A.WORK_STD_TIME  ,2) ,2),'FM9990.00')
			 ||'('||FN_CM_GET_SECONDS_TO_FORMAT(ROUND(A.TOTAL_CALL_TIME/ROUND(A.WORK_TIME /A.WORK_STD_TIME  ,1) ,1) )
			 ||')' AS TOTAL_CPD			 
		FROM  TEMP_LIST A
		LEFT OUTER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID )
		ORDER BY 1,2,3,4,5,6,7,8,9
        ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI1040S02_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_ID      IN VARCHAR2  /* 로그인사용자ID */   
 , I_COSTVALUE_ID  IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI1040S02_02
   PURPOSE:    생산성평가 - 생산성평가 팝업 -집계

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/14  YAKIM
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI1040S02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
   V_RESULT_CD        VARCHAR2(40)  :='SUCCESS'; /* 평가ID별 멀티 처리하므로 각 건별 처리 결과를 리턴하기 위해 .*/
   V_RESULT_MSG       VARCHAR2(200) :='';
    
 BEGIN
 
-- ********************************************************************************
-- 1.기존 집계 데이터 삭제
-- ********************************************************************************    
   DELETE FROM TB_KPI_COSTVALUE_STATICS 
    WHERE TENANT_ID     = I_TENANT_ID 
      AND COSTVALUE_ID  = I_COSTVALUE_ID ;

     COMMIT;
-- ********************************************************************************
-- 2.집계 생성
-- ********************************************************************************      

INSERT INTO  TB_KPI_COSTVALUE_STATICS
 	WITH TEMP_STD_HEADER AS (
			-----------------------------------------------------------------
			-- 평가기준 조회
			-----------------------------------------------------------------	 
				 SELECT A.TENANT_ID
						,A.COSTVALUE_ID
						,A.COSTVALUE_NM
						,A.STD_MONTH
						,A.SCHE_YN
						,A.PROC_STATUS
						,A.CALL_IB
						,A.CALL_OB
						,A.CALL_INTERNAL_S
						,A.CALL_INTENAL_R
						,A.CALL_CONSULT
						,A.CALL_TRANSFER_S
						,A.CALL_TRANSFER_R
						,A.CALL_CONFERENCE
						,A.TIME_IB
						,A.TIME_OB
						,A.TIME_INTERNAL_S
						,A.TIME_INTERNAL_R
						,A.TIME_CONSULT
						,A.TIME_TRANSFER_S
						,A.TIME_TRANSFER_R
						,A.TIME_CONFERENCE
						,A.TIME_READY
						,A.TIME_ACW
				  FROM TB_KPI_COSTVALUE_STD_HEADER A
				 WHERE A.TENANT_ID    = I_TENANT_ID
				   AND A.COSTVALUE_ID = I_COSTVALUE_ID
					)   
			-----------------------------------------------------------------
			-- 대상소속의 상담사 
			-----------------------------------------------------------------		
			,TEMP_AGENT AS (
			 SELECT  C.TENANT_ID
			 		,C.DEPT_CD
			 		,C.AGENT_ID
			 		,C.TM_KIND
			 		,CASE WHEN D.WORK_ID IS NULL THEN  -- 상담사별 근태유형이 없으면 DEFAULT 근태유형으로 처리 
			 		      (SELECT S.WORK_ID 
			 		        FROM TB_HR_WORK_TYPE S 
			 		       WHERE S.TENANT_ID = A.TENANT_ID AND S.DEFAULT_YN = 0 AND HIDE_YN = 0 AND ROWNUM=1)   
			 		      ELSE  D.WORK_ID END AS WORK_ID
			 		,A.SCHE_YN
			 		,A.STD_MONTH 
			 		,A.COSTVALUE_ID     
			  FROM TEMP_STD_HEADER A
			  INNER JOIN TB_KPI_COSTVALUE_STD_DEPT B ON (A.TENANT_ID = B.TENANT_ID AND A.COSTVALUE_ID = B.COSTVALUE_ID)
			  INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.DEPT_CD = C.DEPT_CD) 
			  LEFT OUTER JOIN TB_HR_AGENT_WORK D ON ( A.STD_MONTH = D.STD_MONTH AND A.TENANT_ID = D.TENANT_ID 
			                                          AND C.AGENT_ID = D.AGENT_ID )                                          
			 WHERE A.TENANT_ID    = I_TENANT_ID
			   AND A.COSTVALUE_ID = I_COSTVALUE_ID
			   AND C.KPI_TARGET_YN = 1 /* KPI대상자만 */
			) 
			-----------------------------------------------------------------
			-- 상담사별 콜실적 : ROW 데이터
			-----------------------------------------------------------------	
			,TEMP_COSTVALUE AS (
			 SELECT C.TENANT_ID
			  	   ,C.COSTVALUE_ID
			       ,C.DEPT_CD
			       ,C.AGENT_ID
			       ,C.TM_KIND
			       ,C.STD_MONTH  
			       ,D.WORK_ID  
			       -- 근무유형에 따라 해당월 근무시간 계산
			        ,FN_CM_GET_WORKDAYS_DIFF(C.TENANT_ID, C.AGENT_ID,'T',C.STD_MONTH||'01', C.STD_MONTH||'31') AS WORK_TIME
			        ,A.CALL_DATE
			        ,A.CALL_HH			        
			        /* 평가기준관리의 업무그룹별 가중치 적용 =  IB/OB/전환 */ 
			        ,A.IB_ANSWER_CNT /* IB응답호 - IB콜수 */
			        ,A.IB_TALK_TIME  /* IB통화시간 - IB콜타임 */
			        ,A.OB_CONN_CNT   /* OB시도호 - OB콜수 */
			        ,A.OB_TALK_TIME  /* OB통화시간 - OB콜타임 */
			        ,A.TRANSFER_CNT  /* 전환호 */
			        ,A.TRANSFER_TIME /* 전환통화시간 */
			        ,A.TRANSRECV_CNT /* 전환받은호 */
			        ,A.TRANSRECV_TIME /* 전환받은통화시간 */
			        
			        ,ROUND(A.IB_ANSWER_CNT  *( NVL(E.WEIGHT_IBCALL,100)/100),0) AS IB_CNT
			        ,ROUND(A.IB_TALK_TIME   *( NVL(E.WEIGHT_IBTIME,100)/100),0) AS IB_TIME        
			        ,ROUND(A.OB_CONN_CNT    *( NVL(E.WEIGHT_OBCALL,100)/100),0) AS OB_CNT
			        ,ROUND(A.OB_TALK_TIME   *( NVL(E.WEIGHT_OBTIME,100)/100),0) AS OB_TIME
			        ,ROUND(A.TRANSFER_CNT   *( NVL(E.WEIGHT_TRCALL,100)/100),0) AS TRANSFER_S_CNT 
			        ,ROUND(A.TRANSFER_TIME  *( NVL(E.WEIGHT_TRTIME,100)/100),0) AS TRANSFER_S_TIME        
			        ,ROUND(A.TRANSRECV_CNT  *( NVL(E.WEIGHT_TRCALL,100)/100),0) AS TRANSFER_R_CNT 
			        ,ROUND(A.TRANSRECV_TIME *( NVL(E.WEIGHT_TRTIME,100)/100),0) AS TRANSFER_R_TIME    
			 
			        ,NVL(E.WEIGHT_IBCALL,100) AS WEIGHT_IBCALL
			        ,NVL(E.WEIGHT_IBTIME,100) AS WEIGHT_IBTIME
			        ,NVL(E.WEIGHT_OBCALL,100) AS WEIGHT_OBCALL
			        ,NVL(E.WEIGHT_OBTIME,100) AS WEIGHT_OBTIME
			        ,NVL(E.WEIGHT_TRCALL,100) AS WEIGHT_TRCALL
			        ,NVL(E.WEIGHT_TRTIME,100) AS WEIGHT_TRTIME            
			        
			        /* 내선 통화 */
			        ,A.OB_EXT_CNT   AS  INTERNAL_S_CNT
			        ,A.OB_EXT_TIME  AS INTERNAL_S_TIME            
			        ,A.IB_EXT_CNT   AS  INTERNAL_R_CNT
			        ,A.IB_EXT_TIME  AS INTERNAL_R_TIME
			        ,A.CONSULT_CNT  AS CONSULT_CNT /* 협의통화 콜수 */
			        ,A.CONSULT_TIME AS CONSULT_TIME /* 협의통화 시간 */
			        /* 회의 - 3자통화 */
			        ,A.CONFERENCE_CNT    
			        ,A.CONFERENCE_TIME 
			        
			        ,NVL(B.READY_TIME,0)    AS READY_TIME    /* 대기시간 */
			        ,NVL(B.ACW_TIME ,0)     AS ACW_TIME      /* 후처리   */
			        ,NVL(B.NOTREADY_TIME,0) AS NOTREADY_TIME /* 휴식       */ 
			      FROM TB_KPI_COSTVALUE_HH A 
			      LEFT OUTER JOIN TB_KPI_AGENT_STATUS_HH B ON (A.TENANT_ID = B.TENANT_ID 
			                                               AND A.CALL_DATE = B.WORK_DATE
			                                               AND A.CALL_HH   = B.HOUR_TIME
			                                               AND A.AGENT_ID  = B.AGENT_ID )
			  INNER JOIN TEMP_AGENT C ON ( A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID
			                              AND A.CALL_DATE BETWEEN C.STD_MONTH||'01' AND C.STD_MONTH||'31' )
			  INNER JOIN TB_HR_WORK_TYPE D ON (C.TENANT_ID = D.TENANT_ID AND C.WORK_ID = D.WORK_ID)
			  LEFT OUTER JOIN TB_KPI_COSTVALUE_STD_TMKIND E ON (C.TENANT_ID = E.TENANT_ID 
			                                                    AND C.COSTVALUE_ID = E.COSTVALUE_ID
			                                                    AND C.TM_KIND      = E.TM_KIND )
			   WHERE 1=1
			      /* 평가기준정보.스케쥴반영=1이면 근무시간 내 만 대상 */
			      AND (  (C.SCHE_YN = 0 AND 1=1 )
			         OR (C.SCHE_YN = 1 AND A.CALL_HH >= D.WORK_FRM_TM AND A.CALL_HH<=D.WORK_END_TM )) 
			)
			-----------------------------------------------------------------
			-- 상담사별 콜실적 : 통계 데이터
			-----------------------------------------------------------------	
			, TEMP_COSTVALUE_SUM AS (
			  SELECT A.TENANT_ID
			  		,A.COSTVALUE_ID
			  		,A.AGENT_ID
			  		,MAX(A.DEPT_CD) AS DEPT_CD
			  		,MAX(A.TM_KIND) AS TM_KIND
			  		,MAX(A.WORK_ID) AS WORK_ID
			  		,MAX(A.WORK_TIME) AS WORK_TIME
					,SUM(A.IB_CNT) 			AS IB_CNT
					,SUM(A.IB_TIME) 		AS IB_TIME
					,SUM(A.OB_CNT) 			AS OB_CNT
					,SUM(A.OB_TIME) 		AS OB_TIME
					,SUM(A.INTERNAL_S_CNT)  AS INTERNAL_S_CNT
					,SUM(A.INTERNAL_S_TIME) AS INTERNAL_S_TIME
					,SUM(A.INTERNAL_R_CNT)  AS INTERNAL_R_CNT
					,SUM(A.INTERNAL_R_TIME) AS INTERNAL_R_TIME
					,SUM(A.CONSULT_CNT) 	AS CONSULT_CNT
					,SUM(A.CONSULT_TIME) 	AS CONSULT_TIME
					,SUM(A.TRANSFER_S_CNT)  AS TRANSFER_S_CNT
					,SUM(A.TRANSFER_S_TIME) AS TRANSFER_S_TIME
					,SUM(A.TRANSFER_R_CNT)  AS TRANSFER_R_CNT
					,SUM(A.TRANSFER_R_TIME) AS TRANSFER_R_TIME
					,SUM(A.CONFERENCE_CNT)  AS CONFERENCE_CNT
					,SUM(A.CONFERENCE_TIME) AS CONFERENCE_TIME
					,SUM(A.READY_TIME) 		AS READY_TIME
					,SUM(A.ACW_TIME) 		AS ACW_TIME
					,SUM(A.NOTREADY_TIME)   AS NOTREADY_TIME
				FROM TEMP_COSTVALUE A
			   GROUP BY  A.TENANT_ID ,A.COSTVALUE_ID ,A.AGENT_ID
			)
			,TEMP_CONDUCT AS (
			-----------------------------------------------------------------
			-- 상담사별 근태시간  :  근태 1 / 휴가 2 / 휴직 3 /공무 4 /기타 5 
			-----------------------------------------------------------------	
			SELECT A.TENANT_ID
				  ,A.AGENT_ID
				  ,A.COSTVALUE_ID
				  ,SUM(CASE WHEN C.CONDUCT_KIND = '1' THEN FN_CM_GET_WORKDAYS_DIFF(C.TENANT_ID, C.AGENT_ID, 'T' , C.FRM_YMD||C.FRM_TM, C.END_YMD||C.END_TM ) 
				   ELSE '0' END) AS CONDUCT1_TIME	
				  ,SUM(CASE WHEN C.CONDUCT_KIND = '2' THEN FN_CM_GET_WORKDAYS_DIFF(C.TENANT_ID, C.AGENT_ID, 'T' , C.FRM_YMD||C.FRM_TM, C.END_YMD||C.END_TM ) 
				   ELSE '0' END) AS CONDUCT2_TIME
				  ,SUM(CASE WHEN C.CONDUCT_KIND = '3' THEN FN_CM_GET_WORKDAYS_DIFF(C.TENANT_ID, C.AGENT_ID, 'T' , C.FRM_YMD||C.FRM_TM, C.END_YMD||C.END_TM ) 
				   ELSE '0' END) AS CONDUCT3_TIME
				  ,SUM(CASE WHEN C.CONDUCT_KIND = '4' THEN FN_CM_GET_WORKDAYS_DIFF(C.TENANT_ID, C.AGENT_ID, 'T' , C.FRM_YMD||C.FRM_TM, C.END_YMD||C.END_TM ) 
				   ELSE '0' END) AS CONDUCT4_TIME	        
				  ,SUM(CASE WHEN C.CONDUCT_KIND = '5' THEN FN_CM_GET_WORKDAYS_DIFF(C.TENANT_ID, C.AGENT_ID, 'T' , C.FRM_YMD||C.FRM_TM, C.END_YMD||C.END_TM ) 
				   ELSE '0' END) AS CONDUCT5_TIME
			  FROM TEMP_AGENT A
			  INNER JOIN TB_KPI_COSTVALUE_STD_CONDUCT B ON (A.TENANT_ID = B.TENANT_ID  AND A.COSTVALUE_ID = B.COSTVALUE_ID )
			  INNER JOIN TB_HR_CONDUCT C ON (A.TENANT_ID = B.TENANT_ID 
			  								 AND A.AGENT_ID = C.AGENT_ID 
			  								 AND C.FRM_YMD >= A.STD_MONTH||'01' 
			  								 AND C.END_YMD <= A.STD_MONTH||'31' 
			                                 AND B.CONDUCT_CODE = C.CONDUCT_CODE )
			  INNER JOIN TB_CM_APPROVAL_HEADER D ON ( C.TENANT_ID = D.TENANT_ID AND C.APPROVAL_ID = D.APPROVAL_ID )
			  WHERE 1=1
			   -- AND C.KPI_EXCEPT_YN = 0 /* KPI 제외여부 >> 사용안함 화면에서 제외 된 상태  */ 
			   AND D.APPROVAL_KIND   = '10'  /* 결재종류 - 근태 */
			   AND D.APPROVAL_STATUS IN ('40','50')  /* 전결 또는 종결 */ 
			  GROUP BY A.TENANT_ID
				  ,A.AGENT_ID
				  ,A.COSTVALUE_ID 
			) 
						
			SELECT   A.TENANT_ID AS TENANT_ID
					,A.COSTVALUE_ID AS COSTVALUE_ID
					,A.AGENT_ID AS AGENT_ID
					,A.DEPT_CD AS EVEL_DEPT_CD
					,A.TM_KIND AS EVAL_TM_KIND
					/* 상담건수 - 평가기준 체크에 따라  */
					, (A.IB_CNT * C.CALL_IB) + (A.OB_CNT * C.CALL_OB) + (A.INTERNAL_S_CNT * C.CALL_INTERNAL_S) + (A.INTERNAL_R_CNT * C.CALL_INTENAL_R)
					+ (A.CONSULT_CNT * C.CALL_CONSULT) + (A.TRANSFER_S_CNT * C.CALL_TRANSFER_S) + (A.TRANSFER_S_CNT * C.CALL_TRANSFER_R) 
					+ (A.CONFERENCE_CNT * C.CALL_CONFERENCE) AS TOTAL_CALL_CNT 
					/* 상담시간- 평가기준 체크에 따라 */
					, (A.IB_TIME * C.TIME_IB) + (A.OB_TIME * C.TIME_OB) + (A.INTERNAL_S_TIME * C.TIME_INTERNAL_S) + (A.INTERNAL_R_TIME * C.TIME_INTERNAL_R)
					+ (A.CONSULT_TIME * C.TIME_CONSULT) + (A.TRANSFER_S_TIME * C.TIME_TRANSFER_S) + (A.TRANSFER_S_TIME * C.TIME_TRANSFER_R) 
					+ (A.CONFERENCE_TIME * C.TIME_CONFERENCE) 
					+ (A.READY_TIME  * C.TIME_READY)
					+ (A.ACW_TIME * C.TIME_ACW) 		
					AS TOTAL_CALL_TIME 
					,A.IB_CNT AS IB_CNT
					,A.IB_TIME AS IB_TIME
					,A.OB_CNT AS OB_CNT
					,A.OB_TIME AS OB_TIME
					,A.INTERNAL_S_CNT AS INTERNAL_S_CNT
					,A.INTERNAL_S_TIME AS INTERNAL_S_TIME
					,A.INTERNAL_R_CNT AS INTERNAL_R_CNT
					,A.INTERNAL_R_TIME AS INTERNAL_R_TIME
					,A.CONSULT_CNT AS CONSULT_CNT
					,A.CONSULT_TIME AS CONSULT_TIME
					,A.TRANSFER_S_CNT AS TRANSFER_S_CNT
					,A.TRANSFER_S_TIME AS TRANSFER_S_TIME
					,A.TRANSFER_R_CNT AS TRANSFER_R_CNT
					,A.TRANSFER_R_TIME AS TRANSFER_R_TIME
					,A.CONFERENCE_CNT  AS CONFERENCE_CNT
					,A.CONFERENCE_TIME AS CONFERENCE_TIME
					,A.READY_TIME AS READY_TIME
					,A.ACW_TIME AS ACW_TIME
					,A.NOTREADY_TIME AS NOTREADY_TIME
					,A.WORK_ID AS WORK_ID
					,NVL(B.CONDUCT1_TIME,0) AS CONDUCT1_TIME
					,NVL(B.CONDUCT2_TIME,0) AS CONDUCT2_TIME
					,NVL(B.CONDUCT3_TIME,0) AS CONDUCT3_TIME
					,NVL(B.CONDUCT4_TIME,0) AS CONDUCT4_TIME
					,NVL(B.CONDUCT5_TIME,0) AS CONDUCT5_TIME
					,0 AS EDU_TIME
					,0 AS COACHING_TIME
					/* 실근무시간 = 근무유형별 근무시간 - 근태.. */
					,A.WORK_TIME -(NVL(B.CONDUCT1_TIME,0)+NVL(B.CONDUCT2_TIME,0)+NVL(B.CONDUCT3_TIME,0)+NVL(B.CONDUCT4_TIME,0)+NVL(B.CONDUCT5_TIME,0) ) AS WORK_TIME
					,I_LOGIN_ID AS CREATE_AGENT_ID
					,SYSDATE AS CREATE_DT
			  FROM TEMP_COSTVALUE_SUM A
			  INNER JOIN TEMP_STD_HEADER C ON (A.TENANT_ID = C.TENANT_ID AND A.COSTVALUE_ID = C.COSTVALUE_ID)
			  LEFT OUTER JOIN TEMP_CONDUCT B ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID) 
  ;
  COMMIT;     
          
-- ********************************************************************************
-- 9.처리상태 진행(20)으로 변경
-- ********************************************************************************   
 UPDATE TB_KPI_COSTVALUE_STD_HEADER 
    SET PROC_STATUS = '20' 
       ,MODIFY_AGENT_ID = I_LOGIN_ID
       ,MODIFY_DT 	 	 = SYSTIMESTAMP
  WHERE TENANT_ID    = I_TENANT_ID
    AND COSTVALUE_ID = I_COSTVALUE_ID ;
    
   COMMIT;
    
-- ********************************************************************************
-- X.처리결과 리턴
-- ********************************************************************************    
    -- 성공이 아니면 DB LOG에 기록
    
    IF V_RESULT_CD != 'SUCCESS' THEN 
    
		v_work_date_end := SYSTIMESTAMP;
        v_work_result   := 'F';
        v_work_bigo     := V_RESULT_MSG;
 
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo); 
            
    END IF;
    
    OPEN O_CUR_LIST FOR 
    SELECT V_RESULT_CD   AS RESULT_CD
         , V_RESULT_MSG  AS RESULT_MSG
     FROM DUAL ;   
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        
        RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
        
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2010M01_03 
(
    I_TENANT_ID   IN  VARCHAR2
  , I_GRP_ID      IN  VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2010M01_03
   PURPOSE:    평가그룹관리_대상자조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/03/17  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2010M01_03';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    V_MONTH VARCHAR2(6) := SUBSTR(I_GRP_ID,0,6);
    V_TODAY VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    V_STDDAY VARCHAR2(8) := CASE WHEN TO_CHAR(ADD_MONTHS(TO_DATE(V_MONTH || '01', 'YYYYMMDD'), 1) - 1, 'YYYYMMDD') > V_TODAY THEN V_TODAY ELSE TO_CHAR(ADD_MONTHS(TO_DATE(V_MONTH || '01', 'YYYYMMDD'), 1) - 1, 'YYYYMMDD') END;
    
BEGIN

  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	
	SELECT
		A.AGENT_ID AS AGENT_ID,
		B.SABUN AS SABUN,
		B.AGENT_NM AS AGENT_NM,
		A.DEPT_CD AS DEPT_CD,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'center', A.DEPT_CD) AS CENTER_NM,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'part', A.DEPT_CD)   AS PART_NM,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'team', A.DEPT_CD)   AS TEAM_NM,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'jo', A.DEPT_CD)     AS JO_NM,
		A.TM_KIND AS TM_KIND,
		FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM,
		A.AGENT_JIKGUP AS AGENT_JIKGUP,
		FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM,
		A.AGENT_JIKCHK AS AGENT_JIKCHK,
		FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM,
		FN_CM_GET_WORKPERIOD('D', C.ENTER_YMD, V_STDDAY) AS WORK_PERIOD
	FROM TB_KPI_EVAL_TARGET A
	INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID,V_MONTH,'')) B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
	INNER JOIN TABLE(FN_CM_GET_TB_USER(I_TENANT_ID,'')) C ON A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID
	WHERE A.GRP_ID = I_GRP_ID
	;
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_KPI2010S01_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_DEPT_CD      IN VARCHAR2
 , I_TM_KIND	  IN VARCHAR2
 , I_WORK_PERIOD  IN VARCHAR2 
 , I_AGENT_JIKGUP IN VARCHAR2
 , I_AGENT_JIKCHK IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI2010S01_01
   PURPOSE:    평가그룹관리 - 평가대상자관리 - 평가대상자조회(전체)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/17  JMOON
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI2010S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT           --,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
          FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.DEPT_CD)
           ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.DEPT_CD)
           ||'/'||FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.DEPT_CD) AS DEPT_INFO          
          ,A.DEPT_CD
  		  ,A.SABUN
  		  ,A.AGENT_ID
  		  ,A.AGENT_NM
          ,A.TM_KIND
	      ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
	      ,FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
     FROM TB_CM_USER_MASTER A
    INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
    WHERE 1=1 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.HIDE_YN = 0 
     AND NVL(A.JAEJIK_GUBUN,'10') !='99'
     AND NVL(A.KPI_TARGET_YN ,0)  = 1 /* KPI 교육평가대상자만 */
     AND A.TM_KIND	    = CASE WHEN I_TM_KIND 	   IS NULL THEN A.TM_KIND      ELSE I_TM_KIND	   END     
     AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
     AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
     /* 근속기간 조건 일 경우 */
     AND (( I_WORK_PERIOD IS NULL AND 1=1 )
          OR (I_WORK_PERIOD IS NOT NULL 
               AND EXISTS(  SELECT 1
		                      FROM TB_CM_CODE S 
		                     WHERE S.TENANT_ID = A.TENANT_ID 
		                       AND S.SORT_CD   = 'WORK_PERIOD'
		                       AND S.CODE      = I_WORK_PERIOD
		                       AND A.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2 )
         ))
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_07
(
    I_TENANT_ID       IN  VARCHAR2
  , I_STD_MONTH       IN  VARCHAR2
  , I_FACTOR_ID       IN  VARCHAR2
  , I_DEPT_ID         IN  VARCHAR2
  , I_START_DATE      IN  VARCHAR2
  , I_END_DATE        IN  VARCHAR2
  , O_CUR_LIST        OUT SYS_REFCURSOR 
  
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_07
   PURPOSE:    실적요소 상세내용 조회

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_07';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
    V_FACTORBASE_ID VARCHAR2(10) := '';
    V_CNT NUMBER := 0;
BEGIN
	
	-- ********************************************************************************
	-- [1010] 근태점수조회
	-- ********************************************************************************
	IF I_FACTOR_ID = '1010' THEN
		INSERT INTO GT_KPI_FACTORBASE_DETAIL
		SELECT 
			'' AS  FACTORBASE_ID,
			DENSE_RANK() OVER (ORDER BY A.STD_MONTH)  AS  SNO,
			A.STD_MONTH AS FACTORKEY_VALUE,
			FN_CM_STRING_FORMAT(A.STD_MONTH, '[@@@@.@@]')|| ' 근태점수 집계' AS FACTORKEY_NM,
			COUNT(*) AS FACTORKEY_CNT,
			'*' AS WEIGHT_KIND,
			TO_CHAR(1,'fm9999999999999.00') AS WEIGHT_VALUE
		FROM TB_KPI_CONDUCT_SCORE A
		INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, I_STD_MONTH, '')) B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT_CLASS(I_TENANT_ID, I_DEPT_ID)) C ON A.TENANT_ID = C.TENANT_ID AND B.DEPT_CD = C.DEPT_CD
		WHERE A.STD_MONTH BETWEEN SUBSTR(I_START_DATE,0,6) AND SUBSTR(I_END_DATE,0,6)
		GROUP BY A.TENANT_ID, A.STD_MONTH;
		
	ELSIF I_FACTOR_ID = '1020' THEN
		SELECT '1' INTO V_FACTORBASE_ID FROM DUAL;
		
	-- ********************************************************************************
	-- [2020] 업무능력평가
	-- ********************************************************************************
	ELSIF I_FACTOR_ID = '2020' THEN
		INSERT INTO GT_KPI_FACTORBASE_DETAIL
		SELECT 
			'' AS  FACTORBASE_ID,
			DENSE_RANK() OVER (ORDER BY A.SCHE_ID)  AS  SNO,
			A.SCHE_ID AS FACTORKEY_VALUE,
			A.SCHE_NM AS FACTORKEY_NM,
			COUNT(B.AGENT_ID) AS FACTORKEY_CNT,
			'*' AS WEIGHT_KIND,
			TO_CHAR(1,'fm9999999999999.00') AS WEIGHT_VALUE
		FROM TB_EDU_EXAM_SCHE A
		LEFT OUTER JOIN TB_EDU_EXAM_RESULT_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID
		INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, I_STD_MONTH, '')) C ON A.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT_CLASS(I_TENANT_ID, I_DEPT_ID)) D ON A.TENANT_ID = D.TENANT_ID AND C.DEPT_CD = D.DEPT_CD
		WHERE A.EVAL_YMD BETWEEN I_START_DATE AND I_END_DATE
		  AND A.SCHE_STATUS IN('40','50') --완료, 마감건만 조회
		  AND A.KPI_YN = 1 --KPI반영건만
		GROUP BY A.TENANT_ID, A.SCHE_ID, A.SCHE_NM;
	
	-- ********************************************************************************
	-- [3010] 통화품질평가
	-- ********************************************************************************
	ELSIF I_FACTOR_ID = '3010' THEN
		INSERT INTO GT_KPI_FACTORBASE_DETAIL
		SELECT 
			'' AS  FACTORBASE_ID,
			DENSE_RANK() OVER (ORDER BY A.TIMES_ID)  AS  SNO,
			A.TIMES_ID AS FACTORKEY_VALUE,
			A.TIMES_NM AS FACTORKEY_NM,
			COUNT(B.AGENT_ID) AS FACTORKEY_CNT,
			'*' AS WEIGHT_KIND,
			TO_CHAR(1,'fm9999999999999.00') AS WEIGHT_VALUE
		FROM TB_QA_VALUE_TIMES A
		LEFT OUTER JOIN TB_QA_VALUE_RESULT_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID
		INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, I_STD_MONTH, '')) C ON A.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT_CLASS(I_TENANT_ID, I_DEPT_ID)) D ON A.TENANT_ID = D.TENANT_ID AND C.DEPT_CD = D.DEPT_CD
		--WHERE SUBSTR(A.TIMES_ID,0,6) BETWEEN I_START_DATE AND I_END_DATE
        WHERE SUBSTR(A.TIMES_ID,0,6) like I_STD_MONTH || '%'
		  AND B.QA_VALUE_STATUS IN ('20','30') -- 완료, 승인 (추후 완료건 제거 예정)
		  AND A.KPI_YN = 1 --KPI반영건만
		GROUP BY A.TENANT_ID, A.TIMES_ID, A.TIMES_NM
		ORDER BY A.TIMES_ID, A.TIMES_NM;
	END IF;
	
	-- ********************************************************************************
	-- 집계할 건수가 없을때..
	-- ********************************************************************************
	SELECT COUNT(*) INTO V_CNT FROM GT_KPI_FACTORBASE_DETAIL;
	IF V_CNT = 0 THEN
		INSERT INTO GT_KPI_FACTORBASE_DETAIL
		SELECT 
			'' AS  FACTORBASE_ID,
			1  AS  SNO,
			I_STD_MONTH AS FACTORKEY_VALUE,
			FN_CM_STRING_FORMAT(I_STD_MONTH, '[@@@@.@@]') || ' ' || FACTOR_NM AS FACTORKEY_NM,
			0 AS FACTORKEY_CNT,
			'*' AS WEIGHT_KIND,
			1.0 AS WEIGHT_VALUE
		FROM TB_KPI_FACTOR
		WHERE FACTOR_ID = I_FACTOR_ID;
	END IF;
	
	
	-- ********************************************************************************
	-- 작업결과 RETURN
	-- ********************************************************************************
	OPEN O_CUR_LIST FOR
	SELECT 
		FACTORBASE_ID,
		SNO,
		'1' AS CALC_YN,
		FACTORKEY_VALUE,
		FACTORKEY_NM,
		FACTORKEY_CNT,
		WEIGHT_KIND,
		WEIGHT_VALUE
	FROM GT_KPI_FACTORBASE_DETAIL;
	
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_08
(
    I_TENANT_ID       IN  VARCHAR2
  , I_FACTORBASE_ID   IN  VARCHAR2
  , I_AGENT_ID        IN  VARCHAR2
  
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_08
   PURPOSE:    실적요소 집계

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/04  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_08';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
    V_TENANT_ID     TB_KPI_FACTORBASE_HEADER.TENANT_ID%TYPE     := '';
	V_FACTORBASE_ID TB_KPI_FACTORBASE_HEADER.FACTORBASE_ID%TYPE := '';
	V_FACTORBASE_NM TB_KPI_FACTORBASE_HEADER.FACTORBASE_NM%TYPE := '';
	V_STD_MONTH     TB_KPI_FACTORBASE_HEADER.STD_MONTH%TYPE     := '';
	V_FACTOR_ID     TB_KPI_FACTORBASE_HEADER.FACTOR_ID%TYPE     := '';
	V_DEPT_CD       TB_KPI_FACTORBASE_HEADER.DEPT_CD%TYPE       := '';
	V_START_DATE    VARCHAR2(8)    := '';
	V_END_DATE      VARCHAR2(8)    := '';
	V_VALUATE_KIND  TB_KPI_FACTORBASE_HEADER.VALUATE_KIND%TYPE  := '';
	V_PLUS_MINUS    TB_KPI_FACTORBASE_HEADER.PLUS_MINUS%TYPE    := '';    

BEGIN

	-- ********************************************************************************
	-- 1. 평가기준 정보 조회
	-- ******************************************************************************** 
	SELECT 
		TENANT_ID
		,FACTORBASE_ID
		,FACTORBASE_NM
		,STD_MONTH
		,FACTOR_ID
		,DEPT_CD
		,TO_CHAR(START_DATE,'YYYYMMDD') AS START_DATE
		,TO_CHAR(END_DATE,'YYYYMMDD') AS END_DATE
		,VALUATE_KIND
		,PLUS_MINUS
	INTO
		V_TENANT_ID
		,V_FACTORBASE_ID
		,V_FACTORBASE_NM
		,V_STD_MONTH
		,V_FACTOR_ID
		,V_DEPT_CD
		,V_START_DATE
		,V_END_DATE
		,V_VALUATE_KIND
		,V_PLUS_MINUS
	FROM TB_KPI_FACTORBASE_HEADER
	WHERE TENANT_ID = I_TENANT_ID
	  AND FACTORBASE_ID = I_FACTORBASE_ID;
	
	-- ********************************************************************************
	-- [1010]. 근태점수 집계
	-- ********************************************************************************    
	IF V_FACTOR_ID = '1010' THEN

		INSERT INTO GT_KPI_FACTORVALUE_DETAIL
		SELECT 
			V_TENANT_ID AS TENANT_ID,
			V_FACTORBASE_ID AS FACTORBASE_ID,
			A.AGENT_ID AS AGENT_ID,
			RANK() OVER (ORDER BY A.AGENT_ID, B.FACTORKEY_VALUE)  AS SNO,
			B.FACTORKEY_VALUE AS FACTORKEY_VALUE,
			'정당성 인정 : ' || SUM(NVL(FAIR_SCORE,0)) || chr(13)||chr(10) ||
			'정당성 불인정 : ' || SUM(NVL(UNFAIR_SCORE,0)) AS FACTORKEY_NM,
			SUM(NVL(FAIR_SCORE,0)) + SUM(NVL(UNFAIR_SCORE,0)) AS FACTOR_SCORE,
			B.WEIGHT_KIND AS WEIGHT_KIND,
			B.WEIGHT_VALUE AS WEIGHT_VALUE,
			0 AS LAST_SCORE,
			0 AS SOURCE_SCORE,
			0 AS CHANGE_SCORE,
			'' AS CHANGE_REASON,
			'' AS CHANGE_MEMB,
			I_AGENT_ID AS VALUE_MEMB,
			SYSDATE AS VALUE_DATE
		FROM TB_KPI_CONDUCT_SCORE A
		INNER JOIN TB_KPI_FACTORBASE_DETAIL B ON A.TENANT_ID = B.TENANT_ID AND B.FACTORBASE_ID = V_FACTORBASE_ID AND A.STD_MONTH = B.FACTORKEY_VALUE
		INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(V_TENANT_ID, V_STD_MONTH, '')) C ON A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT_CLASS(V_TENANT_ID, V_DEPT_CD)) D ON A.TENANT_ID = D.TENANT_ID AND C.DEPT_CD = D.DEPT_CD
		WHERE A.STD_MONTH BETWEEN SUBSTR(V_START_DATE,0,6) AND SUBSTR(V_END_DATE,0,6)
		GROUP BY A.TENANT_ID, A.STD_MONTH, A.AGENT_ID, B.FACTORKEY_VALUE, B.WEIGHT_KIND, B.WEIGHT_VALUE;

	ELSIF V_FACTOR_ID = '1020' THEN
		SELECT '1' INTO V_FACTORBASE_ID FROM DUAL;
		
	ELSIF V_FACTOR_ID = '2020' THEN
		INSERT INTO GT_KPI_FACTORVALUE_DETAIL
		SELECT 
			V_TENANT_ID AS TENANT_ID,
			V_FACTORBASE_ID AS FACTORBASE_ID,
			B.AGENT_ID AS AGENT_ID,
			RANK() OVER (ORDER BY B.AGENT_ID, C.FACTORKEY_VALUE)  AS SNO,
			C.FACTORKEY_VALUE AS FACTORKEY_VALUE,
			A.SCHE_NM || '(총점 : ' || B.TOTAL_SCORE || chr(13)||chr(10) ||
			'환산 : ' || B.CONVERT_SCORE ||')' AS FACTORKEY_NM,
			B.CONVERT_SCORE AS FACTOR_SCORE,
			C.WEIGHT_KIND AS WEIGHT_KIND,
			C.WEIGHT_VALUE AS WEIGHT_VALUE,
			0 AS LAST_SCORE,
			0 AS SOURCE_SCORE,
			0 AS CHANGE_SCORE,
			'' AS CHANGE_REASON,
			'' AS CHANGE_MEMB,
			I_AGENT_ID AS VALUE_MEMB,
			SYSDATE AS VALUE_DATE
		FROM TB_EDU_EXAM_SCHE A
		INNER JOIN TB_EDU_EXAM_RESULT_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.SCHE_ID = B.SCHE_ID
		INNER JOIN TB_KPI_FACTORBASE_DETAIL C ON A.TENANT_ID = C.TENANT_ID AND C.FACTORBASE_ID = V_FACTORBASE_ID AND A.SCHE_ID = C.FACTORKEY_VALUE
		INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(V_TENANT_ID, V_STD_MONTH, '')) D ON A.TENANT_ID = D.TENANT_ID AND B.AGENT_ID = D.AGENT_ID
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT_CLASS(V_TENANT_ID, V_DEPT_CD)) E ON A.TENANT_ID = E.TENANT_ID AND D.DEPT_CD = E.DEPT_CD
		WHERE A.EVAL_YMD BETWEEN V_START_DATE AND V_END_DATE
		  AND A.SCHE_STATUS IN('40','50') --완료, 마감건만 조회
		  AND A.KPI_YN = 1 --KPI반영건만
--		GROUP BY A.TENANT_ID, A.SCHE_ID, B.AGENT_ID, C.FACTORKEY_VALUE, C.WEIGHT_KIND, C.WEIGHT_VALUE;
		;
	-- ********************************************************************************
	-- [3010] 통화품질평가
	-- ********************************************************************************  
	ELSIF V_FACTOR_ID = '3010' THEN
	
		INSERT INTO GT_KPI_FACTORVALUE_DETAIL
		SELECT 
			V_TENANT_ID AS TENANT_ID,
			V_FACTORBASE_ID AS FACTORBASE_ID,
			B.AGENT_ID AS AGENT_ID,
			--RANK() OVER (ORDER BY B.AGENT_ID, C.FACTORKEY_VALUE)  AS SNO,
            ROWNUM as SNO,
			C.FACTORKEY_VALUE AS FACTORKEY_VALUE,
			A.TIMES_NM || '(총점 : ' || B.TOTAL_SCORE || chr(13)||chr(10) ||
			'환산 : ' || B.CONVERT_SCORE ||')' AS FACTORKEY_NM,
			B.CONVERT_SCORE AS FACTOR_SCORE,
			C.WEIGHT_KIND AS WEIGHT_KIND,
			C.WEIGHT_VALUE AS WEIGHT_VALUE,
			0 AS LAST_SCORE,
			0 AS SOURCE_SCORE,
			0 AS CHANGE_SCORE,
			'' AS CHANGE_REASON,
			'' AS CHANGE_MEMB,
			I_AGENT_ID AS VALUE_MEMB,
			SYSDATE AS VALUE_DATE
		FROM TB_QA_VALUE_TIMES A
		INNER JOIN TB_QA_VALUE_RESULT_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID
		INNER JOIN TB_KPI_FACTORBASE_DETAIL C ON A.TENANT_ID = C.TENANT_ID AND C.FACTORBASE_ID = V_FACTORBASE_ID AND A.TIMES_ID = C.FACTORKEY_VALUE
		INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(V_TENANT_ID, V_STD_MONTH, '')) D ON A.TENANT_ID = D.TENANT_ID AND B.AGENT_ID = D.AGENT_ID
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT_CLASS(V_TENANT_ID, V_DEPT_CD)) E ON A.TENANT_ID = E.TENANT_ID AND D.DEPT_CD = E.DEPT_CD
		--WHERE SUBSTR(A.TIMES_ID,0,6) BETWEEN V_START_DATE AND V_END_DATE
        WHERE SUBSTR(A.TIMES_ID,0,6) like V_STD_MONTH || '%'
		  AND B.QA_VALUE_STATUS IN ('20','30') -- 완료, 승인 (추후 완료건 제거 예정)
		  AND A.KPI_YN = 1; --KPI반영건만
		--GROUP BY A.TENANT_ID, A.SCHE_ID, B.AGENT_ID, C.FACTORKEY_VALUE, C.WEIGHT_KIND, C.WEIGHT_VALUE          
          
	END IF;
	
	

	
	-- ********************************************************************************
	-- [9999]. 상세/최종 내역 삭제후 업데이트
	-- ********************************************************************************
	DELETE FROM TB_KPI_FACTORVALUE_DETAIL WHERE TENANT_ID = I_TENANT_ID AND FACTORBASE_ID = I_FACTORBASE_ID;
	DELETE FROM TB_KPI_FACTORVALUE_HEADER WHERE TENANT_ID = I_TENANT_ID AND FACTORBASE_ID = I_FACTORBASE_ID;

	IF V_PLUS_MINUS = '-' THEN
		UPDATE GT_KPI_FACTORVALUE_DETAIL SET FACTOR_SCORE = FACTOR_SCORE * -1;
	END IF;

	UPDATE GT_KPI_FACTORVALUE_DETAIL SET SOURCE_SCORE = FACTOR_SCORE * WEIGHT_VALUE WHERE WEIGHT_KIND = '*';
	UPDATE GT_KPI_FACTORVALUE_DETAIL SET SOURCE_SCORE = FACTOR_SCORE + WEIGHT_VALUE WHERE WEIGHT_KIND = '+';
	UPDATE GT_KPI_FACTORVALUE_DETAIL SET SOURCE_SCORE = FACTOR_SCORE - WEIGHT_VALUE WHERE WEIGHT_KIND = '-';
	UPDATE GT_KPI_FACTORVALUE_DETAIL SET SOURCE_SCORE = FACTOR_SCORE / WEIGHT_VALUE WHERE WEIGHT_KIND = '/' AND WEIGHT_VALUE > 0;
	
	UPDATE GT_KPI_FACTORVALUE_DETAIL SET LAST_SCORE = SOURCE_SCORE;
	

    
	INSERT INTO TB_KPI_FACTORVALUE_DETAIL
	SELECT
		TENANT_ID
		,FACTORBASE_ID
		,AGENT_ID
		,SNO
		,FACTORKEY_VALUE
		,FACTORKEY_NM
		,FACTOR_SCORE
		,WEIGHT_KIND
		,WEIGHT_VALUE
		,LAST_SCORE
		,SOURCE_SCORE
		,CHANGE_SCORE
		,CHANGE_REASON
		,CHANGE_MEMB
		,VALUE_MEMB
		,VALUE_DATE
	FROM GT_KPI_FACTORVALUE_DETAIL;
	
	INSERT INTO TB_KPI_FACTORVALUE_HEADER
--	SELECT 
--		TENANT_ID AS TENANT_ID
--		,FACTORBASE_ID AS FACTORBASE_ID
--		,AGENT_ID AS AGENT_ID
--		,COUNT(*) AS TOTAL_CNT
--		,SUM(LAST_SCORE) AS TOTAL_SUM
--		,AVG(LAST_SCORE) AS TOTAL_AVG
--		,V_VALUATE_KIND AS V_VALUATE_KIND
--		,CASE WHEN V_VALUATE_KIND = 'SUM' THEN SUM(LAST_SCORE) ELSE AVG(LAST_SCORE) END AS FACTOR_SCORE
--		,RANK() OVER (ORDER BY FACTOR_SCORE DESC) AS FACTOR_RANK
--		,I_AGENT_ID AS VALUE_MEMB
--		,SYSDATE AS VALUE_DATE
--	FROM GT_KPI_FACTORVALUE_DETAIL
--	GROUP BY TENANT_ID, FACTORBASE_ID, AGENT_ID, FACTOR_SCORE;

	SELECT 
		TENANT_ID AS TENANT_ID
		,FACTORBASE_ID AS FACTORBASE_ID
		,AGENT_ID AS AGENT_ID
		,COUNT(*) AS TOTAL_CNT
		,SUM(LAST_SCORE) AS TOTAL_SUM
		,AVG(LAST_SCORE) AS TOTAL_AVG
		,V_VALUATE_KIND AS VALUATE_KIND
		,CASE WHEN V_VALUATE_KIND = 'SUM' THEN SUM(LAST_SCORE) ELSE AVG(LAST_SCORE) END AS FACTOR_SCORE
		,RANK() OVER (ORDER BY CASE WHEN 'SUM' = 'SUM' THEN SUM(LAST_SCORE) ELSE AVG(LAST_SCORE) END DESC) AS FACTOR_RANK
		,I_AGENT_ID AS VALUE_MEMB
		,SYSDATE AS VALUE_DATE
	FROM GT_KPI_FACTORVALUE_DETAIL
	GROUP BY TENANT_ID, FACTORBASE_ID, AGENT_ID;
    

	
	--진행상태 업데이트 (진행)
	UPDATE TB_KPI_FACTORBASE_HEADER SET PROC_STATUS = '20' WHERE TENANT_ID = I_TENANT_ID AND FACTORBASE_ID = I_FACTORBASE_ID;
	
	COMMIT;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_09
(
    I_TENANT_ID       IN  VARCHAR2
  , I_FACTORBASE_ID   IN  VARCHAR2
  , O_CUR_LIST        OUT SYS_REFCURSOR 
  
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_09
   PURPOSE:    실적요소 결과내용조회(최종내역)

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/03  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_09';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   V_MONTH VARCHAR2(6) := '';
    
BEGIN

	SELECT STD_MONTH INTO V_MONTH FROM TB_KPI_FACTORBASE_HEADER WHERE TENANT_ID = I_TENANT_ID AND FACTORBASE_ID = I_FACTORBASE_ID;


	-- ********************************************************************************
	-- 1. 평가결과 조회
	-- ******************************************************************************** 
	OPEN O_CUR_LIST FOR
	SELECT 
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'center', B.DEPT_CD) AS CENTER_NM,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'part', B.DEPT_CD)   AS PART_NM,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'team', B.DEPT_CD)   AS TEAM_NM,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'jo', B.DEPT_CD)     AS JO_NM,
		FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND',B.TM_KIND) AS TM_KIND_NM,
		B.SABUN,
		A.AGENT_ID,
		B.AGENT_NM,
		FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM,
		FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM,
		TO_CHAR(A.FACTOR_SCORE,'fm9999999999999.00') AS FACTOR_SCORE,
		A.FACTOR_RANK
	FROM TB_KPI_FACTORVALUE_HEADER A
	INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID,V_MONTH,'')) B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.FACTORBASE_ID = I_FACTORBASE_ID
	ORDER BY A.FACTOR_RANK, B.AGENT_NM
	;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020M01_10
(
    I_TENANT_ID       IN  VARCHAR2
  , I_FACTORBASE_ID   IN  VARCHAR2
  , O_CUR_LIST        OUT SYS_REFCURSOR 
  
) AS 
/******************************************************************************
   NAME:       SP_KPI2020M01_09
   PURPOSE:    실적요소 결과내용조회(최종내역)

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/03  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020M01_10';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   V_MONTH VARCHAR2(6) := '';
    
BEGIN

	SELECT STD_MONTH INTO V_MONTH FROM TB_KPI_FACTORBASE_HEADER WHERE TENANT_ID = I_TENANT_ID AND FACTORBASE_ID = I_FACTORBASE_ID;


	-- ********************************************************************************
	-- 1. 평가결과 조회
	-- ******************************************************************************** 
	OPEN O_CUR_LIST FOR
	SELECT 
		FN_CM_GET_DEPT_INFO(I_TENANT_ID, B.DEPT_CD) AS DEPT_NM,
		FN_CM_GET_CODE_NM(I_TENANT_ID, 'TM_KIND',B.TM_KIND) AS TM_KIND_NM,
		B.SABUN,
		A.AGENT_ID,
		B.AGENT_NM,
		A.FACTORKEY_NM,
		TO_CHAR(A.FACTOR_SCORE,'fm9999999999999.00') AS FACTOR_SCORE,
		A.WEIGHT_KIND,
		TO_CHAR(A.WEIGHT_VALUE,'fm9999999999999.00') AS WEIGHT_VALUE,
		TO_CHAR(A.SOURCE_SCORE,'fm9999999999999.00') AS SOURCE_SCORE,
		TO_CHAR(A.CHANGE_SCORE,'fm9999999999999.00') AS CHANGE_SCORE,
		TO_CHAR(A.LAST_SCORE,'fm9999999999999.00') AS LAST_SCORE
	FROM TB_KPI_FACTORVALUE_DETAIL A
	INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID,V_MONTH,'')) B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.FACTORBASE_ID = I_FACTORBASE_ID
	ORDER BY DEPT_NM, B.AGENT_NM, A.FACTORKEY_VALUE
	;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2020S03_01
(
    I_TENANT_ID       IN  VARCHAR2
  , I_FACTORBASE_ID   IN  VARCHAR2
  , I_AGENT_ID        IN  VARCHAR2
  , I_LOGIN_ID        IN  VARCHAR2
  , I_FACTORSCORE     IN  NUMBER
  
) AS 
/******************************************************************************
   NAME:       SP_KPI2020S03_01
   PURPOSE:    성과실적 집계 엑셀 Import

   REVISIONS:
   Ver        Date        Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/08/31  YSKIM
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2020S03_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
    
    V_TENANT_ID     TB_KPI_FACTORBASE_HEADER.TENANT_ID%TYPE     := '';
	V_FACTORBASE_ID TB_KPI_FACTORBASE_HEADER.FACTORBASE_ID%TYPE := '';
	V_FACTORBASE_NM TB_KPI_FACTORBASE_HEADER.FACTORBASE_NM%TYPE := '';
	V_STD_MONTH     TB_KPI_FACTORBASE_HEADER.STD_MONTH%TYPE     := '';
	V_FACTOR_ID     TB_KPI_FACTORBASE_HEADER.FACTOR_ID%TYPE     := '';
	V_DEPT_CD       TB_KPI_FACTORBASE_HEADER.DEPT_CD%TYPE       := '';
	V_START_DATE    VARCHAR2(8)    := '';
	V_END_DATE      VARCHAR2(8)    := '';
	V_VALUATE_KIND  TB_KPI_FACTORBASE_HEADER.VALUATE_KIND%TYPE  := '';
	V_PLUS_MINUS    TB_KPI_FACTORBASE_HEADER.PLUS_MINUS%TYPE    := '';    

BEGIN

	-- ********************************************************************************
	-- 1. 평가기준 정보 조회
	-- ******************************************************************************** 
		SELECT 
			TENANT_ID
			,FACTORBASE_ID
			,FACTORBASE_NM
			,STD_MONTH
			,FACTOR_ID
			,DEPT_CD
			,TO_CHAR(START_DATE,'YYYYMMDD') AS START_DATE
			,TO_CHAR(END_DATE,'YYYYMMDD') AS END_DATE
			,VALUATE_KIND
			,PLUS_MINUS
		INTO
			V_TENANT_ID
			,V_FACTORBASE_ID
			,V_FACTORBASE_NM
			,V_STD_MONTH
			,V_FACTOR_ID
			,V_DEPT_CD
			,V_START_DATE
			,V_END_DATE
			,V_VALUATE_KIND
			,V_PLUS_MINUS
		FROM TB_KPI_FACTORBASE_HEADER
		WHERE TENANT_ID = I_TENANT_ID
		AND FACTORBASE_ID = I_FACTORBASE_ID;
	
	-- ********************************************************************************
	-- [9010]. 엑셀 데이터 집계
	-- ********************************************************************************    
		INSERT INTO GT_KPI_FACTORVALUE_DETAIL
	  	SELECT 
			I_TENANT_ID AS TENANT_ID,
		    I_FACTORBASE_ID AS FACTORBASE_ID,
			I_AGENT_ID AS AGENT_ID,
			'' AS SNO,
			A.FACTORKEY_VALUE AS FACTORKEY_VALUE,
			'' AS FACTORKEY_NM,
			I_FACTORSCORE AS FACTOR_SCORE,
			A.WEIGHT_KIND AS WEIGHT_KIND,
			A.WEIGHT_VALUE AS WEIGHT_VALUE,
			I_FACTORSCORE AS LAST_SCORE,
			I_FACTORSCORE AS SOURCE_SCORE,
			I_FACTORSCORE AS CHANGE_SCORE,
			'' AS CHANGE_REASON,
			'' AS CHANGE_MEMB,
			I_LOGIN_ID AS VALUE_MEMB,
			SYSDATE AS VALUE_DATE
		FROM TB_KPI_FACTORBASE_DETAIL A INNER JOIN  TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, V_STD_MONTH, I_AGENT_ID)) B 
		ON A.TENANT_ID = B.TENANT_ID
		where A.FACTORBASE_ID = I_FACTORBASE_ID;

	
	-- ********************************************************************************
	-- [9999]. 상세/최종 내역 삭제후 업데이트
	-- ********************************************************************************
	DELETE FROM TB_KPI_FACTORVALUE_DETAIL WHERE TENANT_ID = I_TENANT_ID AND FACTORBASE_ID = I_FACTORBASE_ID;
	DELETE FROM TB_KPI_FACTORVALUE_HEADER WHERE TENANT_ID = I_TENANT_ID AND FACTORBASE_ID = I_FACTORBASE_ID;

	IF V_PLUS_MINUS = '-' THEN
		UPDATE GT_KPI_FACTORVALUE_DETAIL SET FACTOR_SCORE = FACTOR_SCORE * -1;
	END IF;

	UPDATE GT_KPI_FACTORVALUE_DETAIL SET SOURCE_SCORE = FACTOR_SCORE * WEIGHT_VALUE WHERE WEIGHT_KIND = '*';
	UPDATE GT_KPI_FACTORVALUE_DETAIL SET SOURCE_SCORE = FACTOR_SCORE + WEIGHT_VALUE WHERE WEIGHT_KIND = '+';
	UPDATE GT_KPI_FACTORVALUE_DETAIL SET SOURCE_SCORE = FACTOR_SCORE - WEIGHT_VALUE WHERE WEIGHT_KIND = '-';
	UPDATE GT_KPI_FACTORVALUE_DETAIL SET SOURCE_SCORE = FACTOR_SCORE / WEIGHT_VALUE WHERE WEIGHT_KIND = '/' AND WEIGHT_VALUE > 0;
	
	UPDATE GT_KPI_FACTORVALUE_DETAIL SET LAST_SCORE = SOURCE_SCORE;
	

    
	INSERT INTO TB_KPI_FACTORVALUE_DETAIL
	SELECT
		TENANT_ID
		,FACTORBASE_ID
		,AGENT_ID
		,SNO
		,FACTORKEY_VALUE
		,FACTORKEY_NM
		,FACTOR_SCORE
		,WEIGHT_KIND
		,WEIGHT_VALUE
		,LAST_SCORE
		,SOURCE_SCORE
		,CHANGE_SCORE
		,CHANGE_REASON
		,CHANGE_MEMB
		,VALUE_MEMB
		,VALUE_DATE
	FROM GT_KPI_FACTORVALUE_DETAIL;
	
	INSERT INTO TB_KPI_FACTORVALUE_HEADER
--	SELECT 
--		TENANT_ID AS TENANT_ID
--		,FACTORBASE_ID AS FACTORBASE_ID
--		,AGENT_ID AS AGENT_ID
--		,COUNT(*) AS TOTAL_CNT
--		,SUM(LAST_SCORE) AS TOTAL_SUM
--		,AVG(LAST_SCORE) AS TOTAL_AVG
--		,V_VALUATE_KIND AS V_VALUATE_KIND
--		,CASE WHEN V_VALUATE_KIND = 'SUM' THEN SUM(LAST_SCORE) ELSE AVG(LAST_SCORE) END AS FACTOR_SCORE
--		,RANK() OVER (ORDER BY FACTOR_SCORE DESC) AS FACTOR_RANK
--		,I_AGENT_ID AS VALUE_MEMB
--		,SYSDATE AS VALUE_DATE
--	FROM GT_KPI_FACTORVALUE_DETAIL
--	GROUP BY TENANT_ID, FACTORBASE_ID, AGENT_ID, FACTOR_SCORE;

	SELECT 
		TENANT_ID AS TENANT_ID
		,FACTORBASE_ID AS FACTORBASE_ID
		,AGENT_ID AS AGENT_ID
		,COUNT(*) AS TOTAL_CNT
		,SUM(LAST_SCORE) AS TOTAL_SUM
		,AVG(LAST_SCORE) AS TOTAL_AVG
		,V_VALUATE_KIND AS VALUATE_KIND
		,CASE WHEN V_VALUATE_KIND = 'SUM' THEN SUM(LAST_SCORE) ELSE AVG(LAST_SCORE) END AS FACTOR_SCORE
		,RANK() OVER (ORDER BY CASE WHEN 'SUM' = 'SUM' THEN SUM(LAST_SCORE) ELSE AVG(LAST_SCORE) END DESC) AS FACTOR_RANK
		,I_AGENT_ID AS VALUE_MEMB
		,SYSDATE AS VALUE_DATE
	FROM GT_KPI_FACTORVALUE_DETAIL
	GROUP BY TENANT_ID, FACTORBASE_ID, AGENT_ID;
    

	
	--진행상태 업데이트 (진행)
	UPDATE TB_KPI_FACTORBASE_HEADER SET PROC_STATUS = '20' WHERE TENANT_ID = I_TENANT_ID AND FACTORBASE_ID = I_FACTORBASE_ID;
	
	COMMIT;
		
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_KPI2040M01_03
(
    I_TENANT_ID    IN  VARCHAR2
  , I_STD_MONTH    IN  VARCHAR2
  , I_GRP_ID       IN  VARCHAR2 
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_KPI2040M01_03
   PURPOSE:    성과실적계산 - 결과조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2017/04/25  JYMOON
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_KPI2040M01_03';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
BEGIN

  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
    OPEN O_CUR_LIST FOR 
	SELECT 
		A.AGENT_ID AS AGENT_ID,
		C.SABUN AS SABUN,
		C.AGENT_NM AS AGENT_NM,
		A.DEPT_CD AS DEPT_CD,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'center', A.DEPT_CD) AS CENTER,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'part', A.DEPT_CD)   AS PART,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'team', A.DEPT_CD)   AS TEAM,
		FN_CM_GET_DEPT_NM(A.TENANT_ID, 'jo', A.DEPT_CD)     AS JO,
		A.TM_KIND AS TM_KIND,
		FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM,
		A.AGENT_JIKGUP AS AGENT_JIKGUP,
		FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM,
		A.AGENT_JIKCHK AS AGENT_JIKCHK,
		FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM,
		FN_CM_STRING_FORMAT(C.ENTER_YMD,'@@@@-@@-@@') AS ENTER_YMD,
		TO_CHAR(B.TOTAL_SCORE,'fm9999999999999.00') AS TOTAL_SCORE,
		TO_CHAR(B.CONVERT_SCORE,'fm9999999999999.00') AS CONVERT_SCORE,
		B.EVAL_GRP_RANK,
		TO_CHAR(B.EVAL_GRP_DIST,'fm9999999999999.00') AS EVAL_GRP_DIST
	FROM TB_KPI_EVAL_TARGET A
	INNER JOIN TB_KPI_RESULT_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.GRP_ID = B.GRP_ID AND A.AGENT_ID = B.AGENT_ID
	INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID,I_STD_MONTH,'')) C ON A.TENANT_ID = C.TENANT_ID AND A.AGENT_ID = C.AGENT_ID
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.GRP_ID = I_GRP_ID
	ORDER BY A.DEPT_CD, A.TM_KIND, A.AGENT_ID;
  
  
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_KPI3020M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_DATE_GUBUN    IN VARCHAR2  /* 월별(M)/분기별(Q)/반기별(H)/년도별(Y) */
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI3020M01_01
   PURPOSE:    기간별추이보고서 - 개인별/소속별/업무그룹별/근속기간별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/17
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI3020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
			/* 조건에 해당하는 ROW 데이터 조회  */                      
		    SELECT C.TENANT_ID
		         , C.DEPT_CD
		         , C.AGENT_ID
		         , C.AGENT_NM
		         , C.TM_KIND
		         , C.AGENT_JIKGUP
		         , C.AGENT_JIKCHK
		         , (SELECT S.CODE
		              FROM TB_CM_CODE S 
		             WHERE S.TENANT_ID = C.TENANT_ID 
		               AND S.SORT_CD   = 'WORK_PERIOD'
			           AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		              AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		         , B.TOTAL_SCORE
		         , A.STD_MONTH
		         , CASE  I_DATE_GUBUN WHEN 'M' THEN TO_CHAR(TO_DATE(A.STD_MONTH, 'YYYYMM'),'YYYYMM')
		                              WHEN 'Q' THEN TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'YYYYQ')
		                              WHEN 'H' THEN (CASE WHEN TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'Q') < 3 
		                                                  THEN TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'YYYY')||'1' 
		                                                  ELSE TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'YYYY')||'3' END)
                                      WHEN 'Y' THEN TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'YYYY') END AS COLUMN_ID	
		                      
	 	     FROM TB_KPI_EVAL_TARGET A 
		    INNER JOIN TB_KPI_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.GRP_ID = B.GRP_ID AND A.AGENT_ID = B.AGENT_ID )
		    INNER JOIN TB_CM_USER_MASTER_HISTORY C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
      		  AND A.STD_MONTH = C.STD_MONTH
		    INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		    WHERE A.TENANT_ID  = I_TENANT_ID
		      AND A.STD_MONTH BETWEEN I_DT_FROM AND I_DT_TO
			  AND (( I_AGENT_ID IS NULL AND 1=1 )
			   OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))      

	   ), TEMP_CD AS (
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				    WHEN 'W' THEN 'WORK_PERIOD'
							     				    ELSE NULL END)
		), TEMP_LIST2 AS (  
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
	     			 
					  ,COUNT(*)  AS TOTAL_CNT
					  ,0.89 AS TOTAL_TREND
			  		  ,SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
			  		  ,ROUND(AVG(A.TOTAL_SCORE),1) AS TOTAL_AVG
			  		  ,MAX(A.TOTAL_SCORE) AS TOTAL_MAX
			  		  ,MIN(A.TOTAL_SCORE) AS TOTAL_MIN
			  		  , A.STD_MONTH
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID, A.STD_MONTH
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END)
						     			 
	          ) 
     
 	    SELECT A.TENANT_ID
      		,A.CODE
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.AGENT_NM
			                     WHEN 'D' THEN FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
								 WHEN 'T' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND', A.CODE)
								 WHEN 'W' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'WORK_PERIOD', A.CODE)
 			                     ELSE '' END)  AS CODE_NM       		
      		,A.TOTAL_TREND
      		,TO_CHAR(A.TOTAL_AVG, 'FM999,999.00') AS TOTAL_AVG
      		,TO_CHAR(A.TOTAL_MAX, 'FM999,999.00') AS TOTAL_MAX
      		,TO_CHAR(A.TOTAL_MIN, 'FM999,999.00') AS TOTAL_MIN
      	    /* 조회구분별  조회 */	
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.CODE)
			      ELSE '' END) AS CENTER
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.CODE)
			      ELSE '' END) AS PART
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.CODE)
			      ELSE '' END) AS TEAM
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
			      ELSE '' END) AS JO
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND', B.TM_KIND)
 			                     ELSE '' END)  AS TM_KIND_NM 			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.SABUN ELSE '' END)  AS SABUN			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP)
 			                     ELSE '' END)  AS AGENT_JIKGUP_NM    
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK)
 			                     ELSE '' END)  AS AGENT_JIKCHK_NM  			      			      			      
		FROM  TEMP_LIST2 A
		LEFT OUTER JOIN TB_CM_USER_MASTER_HISTORY B ON ( A.TENANT_ID = B.TENANT_ID AND A.CODE = B.AGENT_ID AND A.STD_MONTH = B.STD_MONTH)
        ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI3020M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_DATE_GUBUN    IN VARCHAR2  /* 월별(M)/분기별(Q)/반기별(H)/년도별(Y) */
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI3020M01_02
   PURPOSE:    기간별추이보고서 - 조회구분별 / 기간구분별 - 데이터조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/17
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI3020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
	        ------------------------------------------------------------------------
	        -- 조건에 해당하는 ROW 데이터 조회
	        ------------------------------------------------------------------------
		    SELECT C.TENANT_ID
		         , C.DEPT_CD
		         , C.AGENT_ID
		         , C.AGENT_NM
		         , C.TM_KIND
		         , C.AGENT_JIKGUP
		         , C.AGENT_JIKCHK
		         , (SELECT S.CODE
		              FROM TB_CM_CODE S 
		             WHERE S.TENANT_ID = C.TENANT_ID 
		               AND S.SORT_CD   = 'WORK_PERIOD'
			           AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		               AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		         , B.TOTAL_SCORE
		         , A.STD_MONTH
		         , CASE  I_DATE_GUBUN WHEN 'M' THEN TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'YYYYMM')
		                              WHEN 'Q' THEN TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'YYYYQ')
		                              WHEN 'H' THEN (CASE WHEN TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'Q') < 3 
		                                                  THEN TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'YYYY')||'1' 
		                                                  ELSE TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'YYYY')||'3' END)
		                              WHEN 'Y' THEN TO_CHAR(TO_DATE(A.STD_MONTH,'YYYYMM'),'YYYY') END AS COLUMN_ID	
	 	      FROM TB_KPI_EVAL_TARGET A 
		     INNER JOIN TB_KPI_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.GRP_ID = B.GRP_ID AND A.AGENT_ID = B.AGENT_ID)
		     INNER JOIN TB_CM_USER_MASTER_HISTORY C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
    		   AND A.STD_MONTH = C.STD_MONTH
		     INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		     WHERE A.TENANT_ID  = I_TENANT_ID
		       AND A.STD_MONTH BETWEEN I_DT_FROM AND I_DT_TO
		 	   AND (( I_AGENT_ID IS NULL AND 1=1 )
	 		    OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))     

		    
	   ), TEMP_CD AS (
	        ------------------------------------------------------------------------
	        -- 업무그룹/근속기간일 경우 공통코드 조회
	        ------------------------------------------------------------------------
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				   WHEN 'W' THEN 'WORK_PERIOD'
							     				   ELSE NULL END)
		), TEMP_LIST2 AS (
	        ------------------------------------------------------------------------
	        -- 조회구분별 통계 
	        ------------------------------------------------------------------------
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					  ,A.COLUMN_ID		     			 
					  ,COUNT(*)  AS TOTAL_CNT
			  		  ,ROUND(AVG(A.TOTAL_SCORE),1) AS TOTAL_AVG
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                WHEN 'D' THEN  A.DEPT_CD
			                                ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			END)
				      ,A.COLUMN_ID							     			 
	          )  
      SELECT A.TENANT_ID
      		,A.CODE
      		,A.COLUMN_ID
      		,A.TOTAL_CNT
      		,TO_CHAR(A.TOTAL_AVG, 'FM999,999.00') AS TOTAL_AVG
		FROM  TEMP_LIST2 A 
		
		UNION ALL 
		
		SELECT A.TENANT_ID
	  		,A.CODE
	  		,'#' AS COLUMN_ID
			,0 AS TOTAL_CNT
	  		,TO_CHAR(STDDEV_POP(A.TOTAL_AVG),'FM990.00') AS TOTAL_AVG
		FROM TEMP_LIST2 A
	   GROUP BY A.TENANT_ID , A.CODE
	   ORDER BY CODE, A.COLUMN_ID
		;
			      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_KPI3030M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_GRP_ID        IN VARCHAR2
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_KPI3030M01_01
   PURPOSE:    평가항목별 보고서 - 개인별/소속별/업무그룹별/근속기간별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/17
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_KPI3030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
			/* 조건에 해당하는 ROW 데이터 조회  */                      
		    SELECT C.TENANT_ID
		         , C.DEPT_CD
		         , C.AGENT_ID
		         , C.AGENT_NM
		         , C.TM_KIND
		         , C.AGENT_JIKGUP
		         , C.AGENT_JIKCHK
		         , (SELECT S.CODE
		              FROM TB_CM_CODE S 
		             WHERE S.TENANT_ID = C.TENANT_ID 
		               AND S.SORT_CD   = 'WORK_PERIOD'
			           AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		              AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		         , B.TOTAL_SCORE
		         , A.STD_MONTH
	 	     FROM TB_KPI_EVAL_TARGET A 
		    INNER JOIN TB_KPI_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.GRP_ID = B.GRP_ID AND A.AGENT_ID = B.AGENT_ID )
		    INNER JOIN TB_CM_USER_MASTER_HISTORY C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
      		  AND A.STD_MONTH = C.STD_MONTH
		    INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		    WHERE A.TENANT_ID  = I_TENANT_ID
  			  AND A.GRP_ID = I_GRP_ID
			  AND (( I_AGENT_ID IS NULL AND 1=1 )
			   OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))      

	   ), TEMP_CD AS (
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				   WHEN 'W' THEN 'WORK_PERIOD' ELSE NULL END)
		), TEMP_LIST2 AS (  
				SELECT A.TENANT_ID
			         , ( CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                WHEN 'D' THEN  A.DEPT_CD
			                                ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
 						     			    END) AS CODE		 
					 , COUNT(*)  AS TOTAL_CNT
			  		 , SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
			  		 , ROUND(AVG(A.TOTAL_SCORE),1) AS TOTAL_AVG
			  		 , A.STD_MONTH
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID, A.STD_MONTH
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END))
   
 	    SELECT A.TENANT_ID AS TENANT_ID
      		,A.CODE
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.AGENT_NM
			                     WHEN 'D' THEN FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
								 WHEN 'T' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND', A.CODE)
								 WHEN 'W' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'WORK_PERIOD', A.CODE)
 			                     ELSE '' END)  AS CODE_NM       		
 			, A.TOTAL_SCORE   AS TOTAL_SCORE
      		, A.TOTAL_AVG     AS TOTAL_AVG
            , RANK() OVER( ORDER BY DECODE(A.TOTAL_SCORE, 0, null, TO_CHAR(A.TOTAL_SCORE, 'FM999,999.00')) DESC) AS EVAL_GRP_RANK
      	    /* 조회구분별  조회 */	
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.CODE)
			      ELSE '' END) AS CENTER
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.CODE)
			      ELSE '' END) AS PART
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.CODE)
			      ELSE '' END) AS TEAM
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
			      ELSE '' END) AS JO
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND', B.TM_KIND)
 			                     ELSE '' END)  AS TM_KIND_NM 			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.SABUN ELSE '' END)  AS SABUN			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP)
 			                     ELSE '' END)  AS AGENT_JIKGUP_NM    
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK)
 			                     ELSE '' END)  AS AGENT_JIKCHK_NM  			      			      			      
		FROM  TEMP_LIST2 A
		LEFT OUTER JOIN TB_CM_USER_MASTER_HISTORY B ON ( A.TENANT_ID = B.TENANT_ID AND A.CODE = B.AGENT_ID AND A.STD_MONTH = B.STD_MONTH)
        ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA1020S01_01" (
	 I_TENANT_ID      IN VARCHAR2
	,I_CUD_GUBUN      IN VARCHAR2  /* C/U/D  */
    ,I_LOGIN_ID       IN VARCHAR2  /* 로그인사용자ID */
    ,I_SHEET_ID	      IN VARCHAR2
    ,I_SHEET_NM	      IN VARCHAR2
    ,I_QA_SHEET_TYPE IN VARCHAR2
    ,I_HIDE_YN	      IN VARCHAR2
    ,I_DEPT_CD        IN VARCHAR2
    ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
) AS 
/******************************************************************************
   NAME:       SP_QA1020S01_01
   PURPOSE:    평가표관리-평가표 등록수정

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/03  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1020S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################

    V_SHEET_ID TB_QA_SHEET_HEADER.SHEET_ID%TYPE := I_SHEET_ID;
    
 BEGIN
 
-- ********************************************************************************
-- 0.등록/수정/삭제
-- ******************************************************************************** 
	  IF (I_CUD_GUBUN ='I') THEN
	        
	        SELECT 
		      CASE WHEN CHK.SHEET_ID is null THEN TO_CHAR(sysdate, 'YYYYMM')||'0001'
		      ELSE TO_CHAR(sysdate, 'YYYYMM')||SUBSTR(CHK.SHEET_ID,7,4)
		      END INTO V_SHEET_ID
		    FROM
		      (SELECT 
		        MAX(SHEET_ID+1) AS SHEET_ID
		      FROM TB_QA_SHEET_HEADER WHERE 1=1 
		      and TO_CHAR(CREATE_DT, 'YYYYMM') = TO_CHAR(sysdate, 'YYYYMM')) CHK; 
	          
	  END IF;
	    
	    MERGE INTO TB_QA_SHEET_HEADER T
	    USING (SELECT  I_TENANT_ID AS TENANT_ID
	                  ,V_SHEET_ID  AS SHEET_ID
	                  ,I_SHEET_NM  AS SHEET_NM
	                  ,I_QA_SHEET_TYPE AS QA_SHEET_TYPE
	                  ,NVL(I_HIDE_YN, 1)  AS HIDE_YN
	             FROM DUAL ) S
	    ON ( T.TENANT_ID = S.TENANT_ID AND T.SHEET_ID = S.SHEET_ID )
	    WHEN MATCHED THEN
	      UPDATE SET SHEET_NM       = S.SHEET_NM
	                ,QA_SHEET_TYPE = S.QA_SHEET_TYPE
	                ,HIDE_YN         = S.HIDE_YN
	                ,MODIFY_AGENT_ID = I_LOGIN_ID
	                ,MODIFY_DT      = SYSTIMESTAMP
	    WHEN NOT MATCHED THEN
	      INSERT( TENANT_ID
	              ,SHEET_ID
	              ,SHEET_NM
	              ,QA_SHEET_TYPE
	              ,HIDE_YN
	              ,VALUE_YN
	              ,CREATE_AGENT_ID
	              ,CREATE_DT
	              ,MODIFY_AGENT_ID
	              ,MODIFY_DT
	      ) VALUES (S.TENANT_ID
	              ,S.SHEET_ID
	              ,S.SHEET_NM
	              ,S.QA_SHEET_TYPE
	              ,S.HIDE_YN
	              ,'0'
	              ,I_LOGIN_ID
	              ,SYSTIMESTAMP
	              ,I_LOGIN_ID
	              ,SYSTIMESTAMP
	     )  ;
	      
	    COMMIT; 
  
-- ********************************************************************************
-- 1. 관리소속  등록
-- ********************************************************************************             
	SP_UC_SET_ACCESS_SCOPE(I_TENANT_ID, '40', V_SHEET_ID, I_DEPT_CD);
  
-- ********************************************************************************
-- 2.처리 결과 리턴
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
 SELECT V_SHEET_ID   AS KEY_ID
  FROM DUAL ; 

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
  
       RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
    
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1030M02_02
(
	  I_TENANT_ID		IN  VARCHAR2
	, I_TIMES_ID		IN  VARCHAR2
	 ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
	
) AS 
/******************************************************************************
   NAME:       SP_QA1030M02_02
   PURPOSE:    QAA 배정 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/20
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA1030M02_02';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
	V_TIMES_ID		VARCHAR2(10)		:='';
    
BEGIN
   
	OPEN O_CUR_LIST FOR
--		SELECT 
--			FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD)
--				||'/'||FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD)
--				||'/'||FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD) AS DEPT_NM
--			,B.SABUN AS SABUN
--			,B.AGENT_NM AS AGENT_NM
--			,(SELECT COUNT(S.AGENT_ID) FROM TB_QA_VALUE_ALLOC_AGENT S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID AND S.QAA_ID= A.QAA_ID) TARGET_CNT
--			,(SELECT COUNT(S.SHEETKEY) FROM TB_QA_VALUE_RESULT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID  AND S.VALUE_MEMB = A.QAA_ID) AS VALUE_CNT
--			,'0' AS ASSIGNMENT_RATE
--			,'0' AS ASSIGNMENT_CNT
--			,A.QAA_ID AS QAA_ID
--		FROM  TB_QA_VALUE_ALLOC_QAA A
--		JOIN TB_CM_USER_MASTER B ON A.TENANT_ID = B.TENANT_ID AND A.QAA_ID = B.AGENT_ID
--		WHERE A.TENANT_ID = I_TENANT_ID 
--		AND A.TIMES_ID = I_TIMES_ID;

		SELECT FN_CM_GET_DEPT_INFO(A.TENANT_ID, B.DEPT_CD) AS DEPT_INFO
					,B.SABUN
					,B.AGENT_NM
					,COUNT(distinct C.AGENT_ID) AS TARGET_CNT
					,COUNT(D.SHEETKEY) AS VALUE_CNT
					,A.QAA_ID
		FROM TB_QA_VALUE_ALLOC_QAA A
		INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(A.TENANT_ID, SUBSTR(A.TIMES_ID,0,6), '')) B 
		ON (A.TENANT_ID = B.TENANT_ID AND A.QAA_ID = B.AGENT_ID)
		LEFT JOIN TB_QA_VALUE_ALLOC_AGENT C	
		ON (A.TENANT_ID = C.TENANT_ID AND A.TIMES_ID = C.TIMES_ID AND A.QAA_ID = C.QAA_ID)
		LEFT JOIN TB_QA_VALUE_RESULT_HEADER D 
		ON (A.TENANT_ID = D.TENANT_ID AND A.TIMES_ID = D.TIMES_ID AND A.QAA_ID = D.VALUE_MEMB AND C.AGENT_ID = D.AGENT_ID)
		WHERE A.TENANT_ID = I_TENANT_ID
			AND A.TIMES_ID = I_TIMES_ID
			AND D.REVALUE_SHEETKEY IS NULL
			GROUP BY A.TENANT_ID, A.TIMES_ID, B.DEPT_CD, B.SABUN, B.AGENT_NM, A.QAA_ID ;
 
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

CREATE OR REPLACE PROCEDURE SP_QA1030M03_01
(
	  I_TENANT_ID		IN  VARCHAR2
	, I_TIMES_ID		IN  VARCHAR2
	, I_QAA_ID			IN	VARCHAR2
	 ,O_CUR_LIST       OUT    SYS_REFCURSOR /* 등록 키정보를 리턴하기 위해*/
	
) AS 
/******************************************************************************
   NAME:       SP_QA1030M03_01
   PURPOSE:    QAA 배정 조회

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/03/20
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_QA1030M03_01';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
	V_TIMES_ID		VARCHAR2(10)		:='';
    
BEGIN
   
	OPEN O_CUR_LIST FOR    
--	SELECT FN_CM_GET_DEPT_INFO(A.TENANT_ID , B.DEPT_CD) AS DEPT_INFO
--			,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND
--			,B.SABUN
--			,B.AGENT_NM
--			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
--	   		,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
--			,FN_CM_GET_WORKPERIOD('M',B.ENTER_YMD, TO_CHAR(SYSDATE,'YYYYMMDD')) AS WORK_PERIOD
--			,COUNT(C.SHEETKEY) AS VALUE_CNT
--	FROM TB_QA_VALUE_ALLOC_AGENT A
--	INNER JOIN TB_CM_USER_MASTER B 
--	ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID)
--	LEFT JOIN TB_QA_VALUE_RESULT_HEADER C 
--	ON (A.TENANT_ID = C.TENANT_ID AND A.TIMES_ID = C.TIMES_ID AND A.QAA_ID = C.VALUE_MEMB AND A.AGENT_ID = C.AGENT_ID)
--	WHERE A.TENANT_ID = I_TENANT_ID
--	AND A.TIMES_ID = I_TIMES_ID
--	AND A.QAA_ID = I_QAA_ID
--	GROUP BY A.TENANT_ID, A.QAA_ID, B.SABUN, B.AGENT_NM, B.AGENT_JIKGUP, B.AGENT_JIKCHK, B.ENTER_YMD, B.DEPT_CD, B.TM_KIND


	SELECT FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND
			,A.SABUN
			,A.AGENT_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
			,FN_CM_GET_WORKPERIOD('M',A.ENTER_YMD, TO_CHAR(SYSDATE,'YYYYMMDD')) AS WORK_PERIOD
			,B.VALUE_CNT
	FROM TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, SUBSTR(I_TIMES_ID,0,6), '')) A
	INNER JOIN (SELECT COUNT(B.SHEETKEY) AS VALUE_CNT
						,A.AGENT_ID
				FROM TB_QA_VALUE_ALLOC_AGENT A
				LEFT JOIN TB_QA_VALUE_RESULT_HEADER B
				ON A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID AND A.QAA_ID = B.VALUE_MEMB AND A.AGENT_ID = B.AGENT_ID
				WHERE A.TENANT_ID = I_TENANT_ID
				  AND A.TIMES_ID = I_TIMES_ID
				  AND A.QAA_ID = I_QAA_ID
				  AND B.REVALUE_SHEETKEY IS NULL
				GROUP BY A.AGENT_ID) B
	ON A.AGENT_ID = B.AGENT_ID
;
 
	
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
 
END;
/

;

create or replace PROCEDURE SP_QA1030S01_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_DEPT_CD      IN VARCHAR2
 , I_TM_KIND	  IN VARCHAR2
 , I_WORK_PERIOD  IN VARCHAR2 
 , I_AGENT_JIKGUP IN VARCHAR2
 , I_AGENT_JIKCHK IN VARCHAR2
 , I_TIMES_ID	  IN VARCHAR2
 , I_QAA_ID		  IN VARCHAR2
 , I_TYPE		  IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA1030S01_01
   PURPOSE:    평가계획관리 - 평가대상자관리 - 평가대상자조회(전체)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/23  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1030S01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
	IF I_TYPE = 1 THEN -- 중복인원 제거
    OPEN O_CUR_LIST FOR 
    SELECT FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO         
          ,A.DEPT_CD
  		  ,A.SABUN
  		  ,A.AGENT_ID
  		  ,A.AGENT_NM
          ,A.TM_KIND
	      ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
	      ,FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
     FROM TB_CM_USER_MASTER A
    INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
    WHERE 1=1 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.HIDE_YN = 0 
     AND NVL(A.JAEJIK_GUBUN,'10') !='99'
     AND NVL(A.QA_TARGET_YN ,0)  = 1 /* QA평가 대상자만 */
     AND A.TM_KIND	    = CASE WHEN I_TM_KIND 	   IS NULL THEN A.TM_KIND      ELSE I_TM_KIND	   END     
     AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
     AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
     /* 근속기간 조건 일 경우 */
     AND (( I_WORK_PERIOD IS NULL AND 1=1 )
          OR (I_WORK_PERIOD IS NOT NULL 
               AND EXISTS(  SELECT 1
		                      FROM TB_CM_CODE S 
		                     WHERE S.TENANT_ID = A.TENANT_ID 
		                       AND S.SORT_CD   = 'WORK_PERIOD'
		                       AND S.CODE      = I_WORK_PERIOD
		                       AND A.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2 )
         ))
	AND NOT EXISTS (SELECT 1
     				FROM TB_QA_VALUE_ALLOC_AGENT S
     				WHERE S.TENANT_ID = A.TENANT_ID 
     				AND S.TIMES_ID = I_TIMES_ID
     				AND S.AGENT_ID = A.AGENT_ID
     				)
    ;
    
    ELSE 
        OPEN O_CUR_LIST FOR 
    SELECT FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO         
          ,A.DEPT_CD
  		  ,A.SABUN
  		  ,A.AGENT_ID
  		  ,A.AGENT_NM
          ,A.TM_KIND
	      ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
	      ,FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
     FROM TB_CM_USER_MASTER A
    INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) B ON A.DEPT_CD = B.DEPT_CD  
    WHERE 1=1 
     AND A.TENANT_ID = I_TENANT_ID
     AND A.HIDE_YN = 0 
     AND NVL(A.JAEJIK_GUBUN,'10') !='99'
     AND NVL(A.QA_TARGET_YN ,0)  = 1 /* QA평가 대상자만 */
     AND A.TM_KIND	    = CASE WHEN I_TM_KIND 	   IS NULL THEN A.TM_KIND      ELSE I_TM_KIND	   END     
     AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
     AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
     /* 근속기간 조건 일 경우 */
     AND (( I_WORK_PERIOD IS NULL AND 1=1 )
          OR (I_WORK_PERIOD IS NOT NULL 
               AND EXISTS(  SELECT 1
		                      FROM TB_CM_CODE S 
		                     WHERE S.TENANT_ID = A.TENANT_ID 
		                       AND S.SORT_CD   = 'WORK_PERIOD'
		                       AND S.CODE      = I_WORK_PERIOD
		                       AND A.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2 )
         ))
    ;
    
    END IF;
    
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA1030S01_02 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID     IN VARCHAR2
 , I_QAA_ID	   	  IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA1030S01_02
   PURPOSE:    평가계획관리 - 평가대상자관리 - 대상자조회(선택)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/23  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA1030S01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT 
          FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
          ,A.DEPT_CD
  		  ,A.SABUN
  		  ,A.AGENT_ID
  		  ,A.AGENT_NM
          ,A.TM_KIND
	      ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND_NM         
	      ,FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
     FROM TABLE(FN_CM_GET_TB_USER(I_TENANT_ID,'')) A
     INNER JOIN TB_QA_VALUE_ALLOC_AGENT B ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID)
    WHERE 1=1 
      AND B.TENANT_ID = I_TENANT_ID
      AND B.TIMES_ID   = I_TIMES_ID
      AND B.QAA_ID	= I_QAA_ID
    ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA2010M01_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID     IN VARCHAR2
 , I_QAA_ID		  IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2010M01_01
   PURPOSE:    통화품질평가(배정인원조회) - 평가계획 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/23  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT A.TENANT_ID
			,A.TIMES_NM
			,A.TIMES_ID
			,FN_CM_GET_AGENT_NM(A.TENANT_ID, A.QAA_ID)||'('||FN_CM_GET_AGENT_SABUN(A.TENANT_ID, A.QAA_ID)||')' AS QAA_NM
			,A.QAA_ID
			,A.VALUE_CNT AS VALUE_CNT2
			,A.MAX_SCORE
			,A.MIN_SCORE
			,A.AVG_SCORE
			,A.SAVE_CNT
			,A.COMPLETE_CNT
			,A.SANGSIN_CNT
			,A.SEUNGIN_CNT
			,A.BANRYU_CNT
			,A.STDDEV_NUM
			,A.BUSINESS_DAY
			,A.PROGRESS_DAY
			,A.AGENT_CNT
			,A.TIMES_CNT
			,A.TIMES_CNT||'/'|| A.VALUE_CNT * A.AGENT_CNT AS VALUE_CNT
			,TO_CHAR(ROUND(CASE WHEN A.TIMES_CNT = 0 THEN 0 
						ELSE ROUND(A.TIMES_CNT*100/(A.VALUE_CNT * A.AGENT_CNT),4) END,2),'FM990.00') AS PROGRESS 
			,TO_CHAR(ROUND((A.PROGRESS_DAY*100/A.BUSINESS_DAY),2),'FM990.00') AS ACHIEVEMENT
			,A.BUSINESS_DAY
			,A.PROGRESS_DAY
	FROM (
			SELECT A.TENANT_ID
					,A.TIMES_NM
					,B.QAA_ID
					,A.TIMES_ID
					,A.VALUE_CNT
					,MAX(D.TOTAL_SCORE) AS MAX_SCORE
					,MIN(D.TOTAL_SCORE) AS MIN_SCORE
					,AVG(D.TOTAL_SCORE) AS AVG_SCORE
					,COUNT(D.SHEETKEY) AS TIMES_CNT
					,(SELECT COUNT(S.AGENT_ID) FROM TB_QA_VALUE_ALLOC_AGENT S WHERE S.TENANT_ID =A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID AND S.QAA_ID = B.QAA_ID) AS AGENT_CNT
					,SUM(CASE WHEN D.QA_VALUE_STATUS = 10 THEN 1 ELSE 0 END) AS SAVE_CNT			-- 저장
					,SUM(CASE WHEN D.QA_VALUE_STATUS = 20 THEN 1 ELSE 0 END) AS COMPLETE_CNT		-- 완료
					,SUM(CASE WHEN D.QA_VALUE_STATUS = 30 THEN 1 ELSE 0 END) AS SANGSIN_CNT			-- 상신
					,SUM(CASE WHEN D.QA_VALUE_STATUS = 40 THEN 1 ELSE 0 END) AS SEUNGIN_CNT			-- 승인
					,SUM(CASE WHEN D.QA_VALUE_STATUS = 90 THEN 1 ELSE 0 END) AS BANRYU_CNT			-- 반려
					,TO_CHAR(ROUND(STDDEV_POP(D.TOTAL_SCORE),2),'FM990.00') AS STDDEV_NUM			-- 표준편차
					,FN_CM_GET_BUSINESS_DAY(A.TENANT_ID, A.VALUE_FRM_DT, A.VALUE_END_DT) AS BUSINESS_DAY
					,FN_CM_GET_BUSINESS_DAY(A.TENANT_ID, A.VALUE_FRM_DT, CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD')> A.VALUE_END_DT THEN A.VALUE_END_DT ELSE TO_CHAR(SYSDATE,'YYYYMMDD') END) AS PROGRESS_DAY
			FROM TB_QA_VALUE_TIMES A
			INNER JOIN TB_QA_VALUE_ALLOC_AGENT B ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID)
			INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(A.TENANT_ID, SUBSTR(A.TIMES_ID,0,6),'')) C ON (A.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID)
			LEFT JOIN TB_QA_VALUE_RESULT_HEADER D ON (A.TENANT_ID = D.TENANT_ID AND A.TIMES_ID = D.TIMES_ID AND B.QAA_ID = D.VALUE_MEMB AND B.AGENT_ID = D.AGENT_ID)
			WHERE A.TENANT_ID = I_TENANT_ID
				AND (( I_TIMES_ID IS NULL AND 1=1 )
			      OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
				AND D.REVALUE_SHEETKEY IS NULL
--				AND EXISTS (SELECT 1 
--							FROM TB_CM_USER_MASTER S
--							WHERE S.TENANT_ID = A.TENANT_ID
--								AND S.AGENT_ID = B.AGENT_ID
--								AND S.HIDE_YN = 0
--								AND NVL(S.JAEJIK_GUBUN,'10') !='99'
--							)
			GROUP BY A.TENANT_ID, A.TIMES_ID, A.TIMES_NM, B.QAA_ID, A.VALUE_FRM_DT, A.VALUE_END_DT, A.VALUE_CNT
				) A
		ORDER BY A.TIMES_NM, A.QAA_ID  
				;
    
    
    
    
--    WITH TEMP_LIST AS (
--		SELECT A.TENANT_ID 
--			,A.TIMES_ID
--			,A.TIMES_NM
--			,A.VALUE_CNT
--			,B.QAA_ID
--			,(SELECT COUNT(S.AGENT_ID) FROM TB_QA_VALUE_ALLOC_AGENT S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID AND S.QAA_ID = B.QAA_ID) AS AGENT_CNT
--			,(SELECT COUNT(S.SHEETKEY) FROM TB_QA_VALUE_RESULT_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID AND S.VALUE_MEMB = B.QAA_ID) AS TIMES_CNT
--			,A.VALUE_FRM_DT
--			,A.VALUE_END_DT
--		FROM TB_QA_VALUE_TIMES A
--		INNER JOIN TB_QA_VALUE_ALLOC_QAA B ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID)
--		INNER JOIN TB_QA_VALUE_ALLOC_AGENT C ON (A.TENANT_ID = D.TENANT_ID AND A.TIMES_ID = D.TIMES_ID)
--		AND B.QAA_ID = D.QAA_ID
--		WHERE A.TENANT_ID = I_TENANT_ID
--		     AND (( I_TIMES_ID IS NULL AND 1=1 )
--	      OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
--		AND	(( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, B.QAA_ID) > 0))
--		GROUP BY A.TENANT_ID, A.TIMES_ID, A.TIMES_NM, A.VALUE_CNT, B.QAA_ID, A.VALUE_FRM_DT, A.VALUE_END_DT
--	),
--	TEMP_LIST2 AS (
--		SELECT A.VALUE_MEMB
--				,A.AGENT_ID
--				,A.TENANT_ID
--				,A.TIMES_ID
--				,A.TOTAL_SCORE AS SCORE
--				,A.SHEETKEY
--				,A.QA_VALUE_STATUS
--		FROM TB_QA_VALUE_RESULT_HEADER A
--		WHERE A.TENANT_ID = I_TENANT_ID
--	     AND (( I_TIMES_ID IS NULL AND 1=1 )
--	      OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
--		AND	(( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, A.VALUE_MEMB) > 0))
--	),
--	TEMP_LIST3 AS(
--		SELECT A.TIMES_ID
--				,A.TIMES_NM
--				,A.QAA_ID
--				,FN_CM_GET_AGENT_NM(I_TENANT_ID, A.QAA_ID) AS QAA_NM
--				,A.AGENT_CNT
--				,A.TIMES_CNT||'/'||A.VALUE_CNT*A.AGENT_CNT AS VALUE_CNT
--				,A.VALUE_CNT AS VALUE_CNT2
--				,A.TIMES_CNT
--				,ROUND(AVG(NVL(B.SCORE,0)),2) AS AVG_NUM
--				,ROUND(MAX(NVL(B.SCORE,0)),2) AS MAX_NUM
--				,ROUND(MIN(NVL(B.SCORE,0)),2) AS MIN_NUM
--				,SUM(CASE WHEN B.QA_VALUE_STATUS = 10 THEN 1 ELSE 0 END) AS SAVE_CNT		-- 저장
--				,SUM(CASE WHEN B.QA_VALUE_STATUS = 20 THEN 1 ELSE 0 END) AS COMPLETE_CNT	-- 완료
--				,SUM(CASE WHEN B.QA_VALUE_STATUS = 30 THEN 1 ELSE 0 END) AS SANGSIN_CNT		-- 상신
--				,SUM(CASE WHEN B.QA_VALUE_STATUS = 40 THEN 1 ELSE 0 END) AS SEUNGIN_CNT		-- 승인
--				,SUM(CASE WHEN B.QA_VALUE_STATUS = 90 THEN 1 ELSE 0 END) AS BANRYU_CNT		-- 반려
--				,TO_CHAR(ROUND(STDDEV_POP(NVL(B.SCORE,0)),2),'FM990.00') AS STDDEV_NUM		-- 표준편차
--				,A.VALUE_FRM_DT
--				,A.VALUE_END_DT
--		FROM TEMP_LIST A
--		LEFT JOIN TEMP_LIST2 B
--		ON A.TENANT_ID = B.TENANT_ID 
--		AND A.TIMES_ID = B.TIMES_ID
--		AND A.QAA_ID = B.VALUE_MEMB
--		GROUP BY A.TIMES_ID, A.TIMES_NM, A.QAA_ID,A.AGENT_CNT, A.VALUE_CNT, A.TIMES_CNT||'/'||A.AGENT_CNT*A.VALUE_CNT, A.TIMES_CNT,A.VALUE_FRM_DT,A.VALUE_END_DT
--	)
--	SELECT TIMES_ID
--			,TIMES_NM
--			,QAA_ID
--			,QAA_NM || ' (' || FN_CM_GET_AGENT_SABUN(I_TENANT_ID,QAA_ID) || ')' AS QAA_NM
--			,AGENT_CNT
--			,VALUE_CNT
--			,VALUE_CNT2
--			,TIMES_CNT
--			,AVG_NUM
--			,MAX_NUM
--			,MIN_NUM
--			,SAVE_CNT
--			,COMPLETE_CNT
--			,SANGSIN_CNT
--			,SEUNGIN_CNT
--			,BANRYU_CNT
--			,STDDEV_NUM
--			,TO_CHAR(ROUND(PROGRESS,2),'FM990.00') AS PROGRESS
--			,TO_CHAR(ROUND((PROGRESS_DAY*100/BUSINESS_DAY),2),'FM990.00') AS ACHIEVEMENT
--			,BUSINESS_DAY
--			,PROGRESS_DAY
--	FROM (
--			SELECT A.*
--					,CASE 
--						WHEN A.TIMES_CNT = 0 THEN 0 
--						ELSE ROUND(A.TIMES_CNT*100/(A.VALUE_CNT2 * A.AGENT_CNT),4) END AS PROGRESS 
--					,FN_CM_GET_BUSINESS_DAY(I_TENANT_ID, A.VALUE_FRM_DT, A.VALUE_END_DT) AS BUSINESS_DAY
--					,FN_CM_GET_BUSINESS_DAY(I_TENANT_ID, A.VALUE_FRM_DT, CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD')> A.VALUE_END_DT THEN A.VALUE_END_DT ELSE TO_CHAR(SYSDATE,'YYYYMMDD') END) AS PROGRESS_DAY
--			FROM TEMP_LIST3 A
--	)
--	ORDER BY TIMES_ID, QAA_NM
--	;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA2010M01_02 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID     IN VARCHAR2
 , I_QAA_ID		  IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2010M01_02
   PURPOSE:    통화품질평가(배정인원조회) - 하단 평가정보조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/23  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 	
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************   
    OPEN O_CUR_LIST FOR 
    SELECT FN_CM_GET_AGENT_INFO(A.TENANT_ID, I_QAA_ID) AS QAA_INFO
			,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND
			,FN_CM_GET_AGENT_NM(A.TENANT_ID,A.AGENT_ID) AS AGENT_NM
			,A.SABUN
			,A.AGENT_ID
			,B.VALUE_CNT
			,NVL(B.AVG_SCORE,0) AS AVG_SCORE
			,B.SHEETKEY
			,B.RECORD_ID
			,B.QA_VALUE_STATUS
			,B.SCORE
			,I_QAA_ID AS QAA_ID
	FROM TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, SUBSTR(I_TIMES_ID,0,6),'')) A
	INNER JOIN (
		SELECT AVG(TOTAL_SCORE) AS AVG_SCORE
				,COUNT(B.SHEETKEY) AS VALUE_CNT
				,WM_CONCAT(B.SHEETKEY ORDER BY SHEETKEY) AS SHEETKEY
				,WM_CONCAT(B.RECORD_ID ORDER BY SHEETKEY) AS RECORD_ID
				,WM_CONCAT(B.QA_VALUE_STATUS ORDER BY SHEETKEY) AS QA_VALUE_STATUS
				,WM_CONCAT(B.TOTAL_SCORE ORDER BY SHEETKEY) AS SCORE
				,A.AGENT_ID
		FROM TB_QA_VALUE_ALLOC_AGENT A
		LEFT JOIN TB_QA_VALUE_RESULT_HEADER B 
		ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID AND A.AGENT_ID = B.AGENT_ID)
		WHERE A.TENANT_ID = I_TENANT_ID
		  AND A.TIMES_ID= I_TIMES_ID
		  AND A.QAA_ID = I_QAA_ID
		  AND b.REVALUE_SHEETKEY is null
		GROUP BY A.AGENT_ID
		) B
	ON A.AGENT_ID = B.AGENT_ID
	
	;
--    WITH TEMP_LIST AS (
--		  SELECT A.QAA_ID
--		  		,FN_CM_GET_AGENT_SABUN(B.TENANT_ID,A.QAA_ID) AS QAA_SABUN
--				,FN_CM_GET_AGENT_NM(B.TENANT_ID,A.QAA_ID) AS QAA_NM
--				,FN_CM_GET_DEPT_INFO(B.TENANT_ID,B.DEPT_CD) AS DEPT_INFO
--				,FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND
--				,FN_CM_GET_AGENT_NM(B.TENANT_ID,A.AGENT_ID) AS AGENT_NM
--				,B.SABUN
--				,A.AGENT_ID
--			FROM TB_QA_VALUE_ALLOC_AGENT A
--			INNER JOIN TB_CM_USER_MASTER_HISTORY B
--			ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID AND SUBSTR(TIMES_ID ,0,6) = B.STD_MONTH)
--			WHERE A.TENANT_ID = I_TENANT_ID
--				AND A.TIMES_ID = I_TIMES_ID
--				AND A.QAA_ID = I_QAA_ID
--	),TEMP_LIST2 AS(
--			SELECT AGGR_CONCAT(RECORD_ID,',' ORDER BY SHEETKEY ASC) AS RECORD_ID
--					,AGGR_CONCAT(SCORE,',' ORDER BY SHEETKEY ASC) AS SCORE
--					,AGGR_CONCAT(QA_VALUE_STATUS,',' ORDER BY SHEETKEY ASC) AS QA_VALUE_STATUS
--					,AGGR_CONCAT(SHEETKEY,',' ORDER BY SHEETKEY ASC) AS SHEETKEY
--					,AGENT_ID
--					,VALUE_MEMB
--			FROM(
--					SELECT A.RECORD_ID
--							,A.TOTAL_SCORE AS SCORE
--							,FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_VALUE_STATUS',A.QA_VALUE_STATUS) AS QA_VALUE_STATUS
--							,A.SHEETKEY
--							,A.AGENT_ID
--							,A.VALUE_MEMB
--					FROM TB_QA_VALUE_RESULT_HEADER A
--					WHERE A.TENANT_ID = I_TENANT_ID
--					AND A.TIMES_ID = I_TIMES_ID
--					AND A.REVALUE_SHEETKEY IS NULL
--					)
--			GROUP BY AGENT_ID, VALUE_MEMB
--			) 
--	
--	SELECT 	A.QAA_NM || '(' || A.QAA_SABUN || ')' AS QAA_INFO
--			,A.QAA_ID
--			,A.DEPT_INFO
--			,A.TM_KIND
--			,A.SABUN
--			,A.AGENT_NM
--			,B.SCORE
--			,B.RECORD_ID
--			,B.QA_VALUE_STATUS
--			,V_VALUE_CNT AS VALUE_CNT
--			,I_TIMES_ID AS TIMES_ID
--			,CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD') >= V_FRM_DT AND TO_CHAR(SYSDATE,'YYYYMMDD') <= V_END_DT THEN 1 ELSE 0 END AS VALUE_YN
--			,A.AGENT_ID
--			,B.SHEETKEY
--	FROM TEMP_LIST A
--	LEFT JOIN TEMP_LIST2 B 
--	ON A.AGENT_ID = B.AGENT_ID 
--	AND A.QAA_ID = B.VALUE_MEMB
--	ORDER BY A.DEPT_INFO, A.TM_KIND, A.AGENT_NM; 
					 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA2010M02_02 (
   I_TENANT_ID    IN VARCHAR2
 , I_TIMES_ID     IN VARCHAR2
 , I_AGENT_ID  	  IN VARCHAR2
 , I_LOGIN_ID	  IN VARCHAR2
 , I_REC_FRM_DT	  IN VARCHAR2
 , I_REC_END_DT	  IN VARCHAR2
 , I_REC_FRM_TM	  IN VARCHAR2
 , I_REC_END_TM	  IN VARCHAR2
 , I_TALK_FRM_TM  IN VARCHAR2
 , I_TALK_END_TM  IN VARCHAR2
 , I_START_ROW	  IN NUMBER
 , I_END_ROW	  IN NUMBER
 , I_VALUE_YN	  IN VARCHAR2
 , I_USER_DATA1	  IN VARCHAR2
 , I_USER_DATA2	  IN VARCHAR2
 , I_USER_DATA3	  IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2010M02_02
   PURPOSE:    통화품질평가(녹음파일 조회)
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2010M02_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************  

    OPEN O_CUR_LIST FOR 
	SELECT *
	FROM(
		SELECT 
			A.TENANT_ID
			,A.RECORD_ID
			,A.RECORD_ID AS REC_ID
			,A.CIDX AS CALL_ID
			,A.SERVER_IP
			,A.SERVER_PORT					        
			,A.AGENT_ID
			,TO_CHAR(TO_DATE(A.REC_YMD,'yyyymmdd'),'YYYY-MM-DD') AS REC_YMD
			,TO_CHAR(A.STARTTIME,'HH24:MI:SS') AS STARTTIME
			,TO_CHAR(A.ENDTIME,'HH24:MI:SS') AS ENDTIME
			,FN_CM_GET_TIME_FORMAT(A.TALK_TM) AS TALK_TM
			,CASE WHEN (SELECT COUNT(SHEETKEY) FROM TB_QA_VALUE_RESULT_HEADER B WHERE B.TENANT_ID = I_TENANT_ID AND B.RECORD_ID = A.RECORD_ID AND B.VALUE_MEMB = I_LOGIN_ID AND TIMES_ID = I_TIMES_ID) = 0 THEN 0 ELSE 1 END AS VALUE_YN
			,A.USER_DATA1
			,A.USER_DATA2
			,A.USER_DATA3
			,A.USER_DATA4
			,A.USER_DATA5
			,NVL((SELECT SHEETKEY FROM TB_QA_VALUE_RESULT_HEADER B WHERE B.TENANT_ID = I_TENANT_ID AND B.RECORD_ID = A.RECORD_ID AND B.VALUE_MEMB = I_LOGIN_ID AND B.TIMES_ID =I_TIMES_ID AND B.REVALUE_SHEETKEY IS NULL),'') AS SHEETKEY
			,FN_CM_GET_DEPT_INFO(B.TENANT_ID, B.DEPT_CD) AS DEPT_INFO
			,B.SABUN
			,B.AGENT_NM
			,A.DN_NO
			,ROWNUM AS RNUM
			,B.TENANT_ID
		FROM TB_QA_AUDIO_LOG A
		INNER JOIN TABLE(FN_CM_GET_TB_USER(I_TENANT_ID, I_AGENT_ID)) B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID 
		WHERE A.TENANT_ID = I_TENANT_ID
		AND A.REC_YMD BETWEEN I_REC_FRM_DT AND I_REC_END_DT
		AND TO_CHAR(STARTTIME, 'HH24MISS') >= I_REC_FRM_TM||'00' AND TO_CHAR(ENDTIME, 'HH24MISS') <= I_REC_END_TM||'59'
		AND TALK_TM <= FN_CM_GET_TIME_DIFF_TO_SECOND(I_TALK_FRM_TM, I_TALK_END_TM)
--		AND A.AGENT_ID = I_AGENT_ID
		AND ((I_USER_DATA1 IS NULL AND 1=1) OR ( I_USER_DATA1 IS NOT NULL AND A.USER_DATA1 = I_USER_DATA1)) 
		AND ((I_USER_DATA2 IS NULL AND 1=1) OR ( I_USER_DATA2 IS NOT NULL AND A.USER_DATA2 = I_USER_DATA2))
		AND ((I_USER_DATA3 IS NULL AND 1=1) OR ( I_USER_DATA3 IS NOT NULL AND A.USER_DATA3 = I_USER_DATA3))
		AND ((I_VALUE_YN = 1 AND NOT EXISTS (
			SELECT 1 FROM TB_QA_VALUE_RESULT_HEADER S
			WHERE S.TENANT_ID = A.TENANT_ID 
			AND S.RECORD_ID = A.RECORD_ID
			AND S.TIMES_ID = I_TIMES_ID)) OR (I_VALUE_YN != 1 AND 1=1)
		)
	) 
	WHERE RNUM >= I_START_ROW AND RNUM <= I_END_ROW
	;
	
	
	 
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA2010M03_01 (
  I_TENANT_ID   IN  VARCHAR2
 , I_TIMES_ID   IN  VARCHAR2
 , I_SHEETKEY	IN	VARCHAR2
 , I_AGENT_ID   IN  VARCHAR2
 , I_RECORD_ID  IN  VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2010M03_01
   PURPOSE:    통화품질평가 상세조회
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2010M03_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
   OPEN O_CUR_LIST FOR 
   SELECT A.TIMES_ID
			,A.TIMES_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID, 'QA_EVAL_TYPE', A.QA_EVAL_TYPE) AS QA_EVAL_TYPE
			,FN_CM_STRING_FORMAT(A.VALUE_FRM_DT, '@@@@-@@-@@') AS VALUE_FRM_DT
			,FN_CM_STRING_FORMAT(A.VALUE_END_DT, '@@@@-@@-@@') AS VALUE_END_DT
			,B.SHEET_ID
			,B.SHEET_NM
			,FN_CM_GET_DEPT_INFO(A.TENANT_ID, C.DEPT_CD) AS DEPT_INFO
			,C.AGENT_ID
			,C.AGENT_NM
			,C.SABUN AS AGENT_SABUN
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',C.AGENT_JIKGUP) AS AGENT_JIKGUP
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',C.AGENT_JIKCHK) AS AGENT_JIKCHK
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',C.TM_KIND) AS TM_KIND
			,FN_CM_GET_AGENT_SABUN(A.TENANT_ID, E.VALUE_MEMB) AS VALUE_MEMB
			,NVL(FN_CM_GET_AGENT_NM(A.TENANT_ID, E.VALUE_MEMB), '') AS VALUE_MEMB_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'QA_VALUE_STATUS', E.QA_VALUE_STATUS) AS QA_VALUE_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'QA_TM_KIND', E.QA_TM_KIND) AS QA_TM_KIND
			,FN_CM_STRING_FORMAT(E.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
			,E.TOTAL_COMMENT
			,E.QA_VALUE_STATUS
			,FN_CM_GET_AGENT_NM(A.TENANT_ID,E.VALUE_MEMB)AS QAA_NM
			,TO_CHAR(TO_DATE(D.REC_YMD,'yyyymmdd'),'YYYY-MM-DD') AS REC_YMD
			,TO_CHAR(D.STARTTIME,'HH24:MI:SS') AS STARTTIME
			,TO_CHAR(D.ENDTIME,'HH24:MI:SS') AS ENDTIME
			,FN_CM_GET_TIME_FORMAT(D.TALK_TM) AS TALK_TM
			,D.RECORD_ID
			,D.USER_DATA1
			,D.USER_DATA2
			,D.USER_DATA3
			,D.USER_DATA4
	FROM TB_QA_VALUE_TIMES A
	INNER JOIN TB_QA_SHEET_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
	INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, SUBSTR(I_TIMES_ID,0,6), I_AGENT_ID)) C ON (A.TENANT_ID = C.TENANT_ID)
	INNER JOIN TB_QA_AUDIO_LOG D ON (A.TENANT_ID = D.TENANT_ID)
	LEFT JOIN TB_QA_VALUE_RESULT_HEADER E
	ON (A.TENANT_ID = E.TENANT_ID AND A.TIMES_ID = E.TIMES_ID)
	WHERE A.TENANT_ID = I_TENANT_ID
		AND A.TIMES_ID = I_TIMES_ID
--		AND C.AGENT_ID = I_AGENT_ID
		AND D.RECORD_ID = I_RECORD_ID
		AND E.SHEETKEY = CASE WHEN I_SHEETKEY IS NULL THEN '' ELSE I_SHEETKEY END
		
--		;
--		WITH INFO1 AS (
--			SELECT
--				A.TIMES_ID
--				,A.TIMES_NM
--				,A.SHEET_ID
--				,FN_CM_GET_CODE_NM(I_TENANT_ID, 'QA_EVAL_TYPE', A.QA_EVAL_TYPE) AS QA_EVAL_TYPE
--				,FN_CM_STRING_FORMAT(A.VALUE_FRM_DT, '@@@@-@@-@@') AS VALUE_FRM_DT
--				,FN_CM_STRING_FORMAT(A.VALUE_END_DT, '@@@@-@@-@@') AS VALUE_END_DT
--				,B.SHEET_NM
--			  FROM TB_QA_VALUE_TIMES A
--			INNER JOIN TB_QA_SHEET_HEADER B ON A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID
--			 WHERE A.TENANT_ID = I_TENANT_ID
--			   AND A.TIMES_ID = I_TIMES_ID
--		),
--		INFO2 AS(
--			SELECT 
--				TO_CHAR(TO_DATE(REC_YMD,'yyyymmdd'),'YYYY-MM-DD') AS REC_YMD
--				,TO_CHAR(STARTTIME,'HH24:MI:SS') AS STARTTIME
--				,TO_CHAR(ENDTIME,'HH24:MI:SS') AS ENDTIME
--				,FN_CM_GET_TIME_FORMAT(TALK_TM) AS TALK_TM
--				,RECORD_ID
--				,USER_DATA1
--				,USER_DATA2
--				,USER_DATA3
--				,USER_DATA4
--				,USER_DATA5
--				,USER_DATA6
--				,USER_DATA7
--				,USER_DATA8
--				,USER_DATA9
--				,USER_DATA10
--			  FROM TB_QA_AUDIO_LOG 
--			 WHERE TENANT_ID = I_TENANT_ID
--			   AND RECORD_ID = I_RECORD_ID
--		),
--		INFO3 AS(
--			SELECT 
--				FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_INFO
--				,AGENT_ID
--				,FN_CM_GET_AGENT_SABUN(A.TENANT_ID, A.AGENT_ID) AS AGENT_SABUN
--				,AGENT_NM
--				,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS AGENT_JIKGUP
--				,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS AGENT_JIKCHK
--				,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',A.TM_KIND) AS TM_KIND
--			  FROM TB_CM_USER_MASTER A
--			 WHERE TENANT_ID = I_TENANT_ID
--			   AND AGENT_ID = I_AGENT_ID
--		),
--		INFO4 AS(
--			SELECT 
--				FN_CM_GET_AGENT_SABUN(I_TENANT_ID,VALUE_MEMB) AS VALUE_MEMB
--				,FN_CM_GET_AGENT_NM(I_TENANT_ID,VALUE_MEMB) AS VALUE_MEMB_NM
--				,FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_VALUE_STATUS',QA_VALUE_STATUS) AS QA_VALUE_NM
--				,FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_TM_KIND',QA_TM_KIND) AS QA_TM_KIND
--				,FN_CM_STRING_FORMAT(VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
--				,TOTAL_COMMENT
--				,QA_VALUE_STATUS
--				,FN_CM_GET_AGENT_NM(I_TENANT_ID,VALUE_MEMB)AS QAA_NM
--			  FROM TB_QA_VALUE_RESULT_HEADER
--			 WHERE TENANT_ID = I_TENANT_ID
--			   AND SHEETKEY = CASE WHEN I_SHEETKEY IS NULL THEN '' ELSE I_SHEETKEY END
--			   AND RECORD_ID = I_RECORD_ID
--		)
--		SELECT * 
--		FROM INFO1 A
--		INNER JOIN INFO2 B ON 1=1
--		INNER JOIN INFO3 C ON 1=1
--		LEFT JOIN INFO4 D ON 1=1
		;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA2020M01_01 (
   I_TENANT_ID    		IN VARCHAR2
 , I_LOGIN_DEPT_CD		IN VARCHAR2
 , I_VALUE_FRM_YMD		IN VARCHAR2
 , I_VALUE_END_YMD		IN VARCHAR2
 , I_QAA_ID				IN VARCHAR2
 , I_TIMES_ID			IN VARCHAR2
 , I_DEPT_CD			IN VARCHAR2
 , I_QA_VALUE_STATUS	IN VARCHAR2
 , I_SHEET_ID			IN VARCHAR2
 , I_AGENT_ID			IN VARCHAR2
 , I_SCORE				IN NUMBER
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2020M01_01
   PURPOSE:    평가이력 조회
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/10  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
--	WITH TEMP_LIST AS (
--		SELECT A.TIMES_NM
--				,FN_CM_GET_AGENT_SABUN(A.TENANT_ID, B.QAA_ID) AS QAA_SABUN
--				,FN_CM_GET_AGENT_NM(A.TENANT_ID,B.QAA_ID) AS QAA_NM
--				,(SELECT S.SHEET_NM FROM TB_QA_SHEET_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID) AS SHEET_NM
--				,(SELECT S.DEPT_CD FROM TB_CM_USER_MASTER S WHERE S.TENANT_ID = A.TENANT_ID AND S.AGENT_ID = C.AGENT_ID) AS DEPT_CD
--				,C.AGENT_ID
--				,FN_CM_GET_AGENT_SABUN(A.TENANT_ID, C.AGENT_ID) AS AGENT_SABUN
--				,FN_CM_GET_AGENT_NM(A.TENANT_ID,C.AGENT_ID) AS AGENT_NM
--				,B.QAA_ID
--				,A.TIMES_ID
--		FROM TB_QA_VALUE_TIMES A
--		INNER JOIN TB_QA_VALUE_ALLOC_QAA B ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID)
--		INNER JOIN TB_QA_VALUE_ALLOC_AGENT C ON (A.TENANT_ID = C. TENANT_ID AND A.TIMES_ID = C.TIMES_ID AND B.QAA_ID = C.QAA_ID)
--		WHERE A.TENANT_ID = I_TENANT_ID
--		  AND A.TIMES_ID = CASE WHEN I_TIMES_ID IS NULL THEN A.TIMES_ID ELSE I_TIMES_ID END
--		  AND A.SHEET_ID = CASE WHEN I_SHEET_ID IS NULL THEN A.SHEET_ID ELSE I_SHEET_ID END
--		  AND	(( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, B.QAA_ID) > 0))
--		  AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, C.AGENT_ID) > 0))
--		  AND EXISTS (SELECT 1
--						FROM TB_CM_ACCESS_SCOPE S
--						WHERE S.TENANT_ID = A.TENANT_ID
--							AND S.SCOPE_GUBUN = 50		-- 평가계획 관련 ITEM
--							AND S.ITEM_ID = A.TIMES_ID
--						    AND S.DEPT_CD     = I_LOGIN_DEPT_CD
--						)   
--	),
--	TEMP_LIST2 AS(
--		SELECT 
--			A.RECORD_ID
--			,A.AGENT_ID
--			,A.VALUE_MEMB
--			,FN_CM_GET_CODE_NM(I_TENANT_ID,'QA_VALUE_STATUS',A.QA_VALUE_STATUS) AS QA_VALUE_STATUS_NM
--			,A.QA_VALUE_STATUS
--			,A.TOTAL_SCORE 
--			,A.CONVERT_SCORE
--			,A.SHEETKEY
--			,A.VALUE_YMD
--			,A.TIMES_ID
--			,B.SERVER_PORT
--			,B.SERVER_IP
--			,A.TENANT_ID
--			,B.CIDX AS CALL_ID
--		FROM TB_QA_VALUE_RESULT_HEADER A
--		INNER JOIN TB_QA_AUDIO_LOG B 
--		ON (A.TENANT_ID = B.TENANT_ID AND A.RECORD_ID= B.RECORD_ID)
--		WHERE A.TENANT_ID = I_TENANT_ID
--		AND A.TIMES_ID = CASE WHEN I_TIMES_ID IS NULL THEN A.TIMES_ID ELSE I_TIMES_ID END
--		AND A.SHEET_ID = CASE WHEN I_SHEET_ID IS NULL THEN A.SHEET_ID ELSE I_SHEET_ID END
--		AND A.VALUE_YMD BETWEEN I_VALUE_FRM_YMD AND I_VALUE_END_YMD
--		AND	(( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, A.VALUE_MEMB) > 0))
--		AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, A.AGENT_ID) > 0))
--		AND A.QA_VALUE_STATUS = CASE WHEN I_QA_VALUE_STATUS IS NULL THEN A.QA_VALUE_STATUS ELSE I_QA_VALUE_STATUS END
--		AND A.CONVERT_SCORE >= CASE WHEN I_SCORE IS NULL THEN A.CONVERT_SCORE ELSE I_SCORE END
----		AND A.REVALUE_SHEETKEY IS NULL
--		AND EXISTS (SELECT 1
--						FROM TB_CM_ACCESS_SCOPE S
--						WHERE S.TENANT_ID = A.TENANT_ID
--							AND S.SCOPE_GUBUN = 50		-- 평가계획 관련 ITEM
--							AND S.ITEM_ID = A.TIMES_ID
--						    AND S.DEPT_CD     = I_LOGIN_DEPT_CD
--						)   
--	)
--		
--	SELECT
--		A.QAA_ID
--		,A.QAA_NM || ' (' || A.QAA_SABUN || ')' AS QAA_INFO
--		,FN_CM_GET_DEPT_INFO(I_TENANT_ID,A.DEPT_CD) AS DEPT_INFO
--		,A.AGENT_ID
--		,A.AGENT_NM
--		,A.TIMES_NM
--		,A.SHEET_NM
--		,A.AGENT_SABUN
--		,B.RECORD_ID
--		,FN_CM_STRING_FORMAT(B.VALUE_YMD,'@@@@-@@-@@') as VALUE_YMD
--		,B.QA_VALUE_STATUS_NM
--		,B.QA_VALUE_STATUS
--		,B.TOTAL_SCORE
--		,B.SHEETKEY
--		,TO_CHAR(B.CONVERT_SCORE,'FM990.00') AS CONVERT_SCORE
--		,B.SERVER_PORT
--		,B.SERVER_IP
--		,B.CALL_ID
--		,B.TENANT_ID
--	FROM TEMP_LIST A
--	INNER JOIN TEMP_LIST2 B ON A.TIMES_ID = B.TIMES_ID AND A.AGENT_ID = B.AGENT_ID AND A.QAA_ID = B.VALUE_MEMB
--	JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON A.DEPT_CD = C.DEPT_CD
--	ORDER BY B.VALUE_YMD, A.QAA_SABUN
--	;
	SELECT FN_CM_STRING_FORMAT(D.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
		,FN_CM_GET_AGENT_INFO(D.TENANT_ID, D.VALUE_MEMB) AS QAA_INFO
		,FN_CM_GET_DEPT_INFO(C.TENANT_ID, C.DEPT_CD) AS DEPT_INFO
		,C.SABUN
		,C.AGENT_NM
		,A.TIMES_ID
		,B.SHEET_NM
		,D.RECORD_ID
		,FN_CM_GET_CODE_NM(D.TENANT_ID, 'QA_VALUE_STATUS', D.QA_VALUE_STATUS) AS QA_VALUE_STATUS_NM
		,QA_VALUE_STATUS
		,D.TOTAL_SCORE
		,D.CONVERT_SCORE
		,D.SHEETKEY
		,D.VALUE_MEMB AS QAA_ID
		,D.AGENT_ID
		,A.TIMES_NM
	FROM TB_QA_VALUE_TIMES A
	INNER JOIN TB_QA_SHEET_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID) 
	INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(A.TENANT_ID, SUBSTR(A.TIMES_ID, 0,6), I_AGENT_ID)) C ON (A.TENANT_ID = C.TENANT_ID)
	INNER JOIN TB_QA_VALUE_RESULT_HEADER D ON (A.TENANT_ID = D.TENANT_ID AND A.TIMES_ID = D.TIMES_ID AND C.AGENT_ID = D.AGENT_ID)
	WHERE A.TENANT_ID = I_TENANT_ID
		  AND D.VALUE_YMD BETWEEN I_VALUE_FRM_YMD AND I_VALUE_END_YMD
		  AND A.TIMES_ID = CASE WHEN I_TIMES_ID IS NULL THEN A.TIMES_ID ELSE I_TIMES_ID END
		  AND A.SHEET_ID = CASE WHEN I_SHEET_ID IS NULL THEN A.SHEET_ID ELSE I_SHEET_ID END
		  AND	(( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, D.VALUE_MEMB) > 0))
		  AND EXISTS (SELECT 1
						FROM TB_CM_ACCESS_SCOPE S
						WHERE S.TENANT_ID = A.TENANT_ID
							AND S.SCOPE_GUBUN = 50		-- 평가계획 관련 ITEM
							AND S.ITEM_ID = A.TIMES_ID
						    AND S.DEPT_CD     = I_LOGIN_DEPT_CD
						)  
	;

				      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA2030M01_01 (
   I_TENANT_ID    IN VARCHAR2
 , I_RECORD_ID	  IN VARCHAR2
 , I_AGENT_ID  	  IN VARCHAR2
 , I_DEPT_CD      IN VARCHAR2
 , I_REC_FRM_DT	  IN VARCHAR2
 , I_REC_END_DT	  IN VARCHAR2
 , I_REC_FRM_TM	  IN VARCHAR2
 , I_REC_END_TM	  IN VARCHAR2
 , I_TALK_FRM_TM  IN VARCHAR2
 , I_TALK_END_TM  IN VARCHAR2
 , I_USER_DATA1	  IN VARCHAR2
 , I_USER_DATA2   IN VARCHAR2
 , I_USER_DATA3   IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2030M01_01
   PURPOSE:    녹음파일 조회 건수
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	SELECT COUNT(*) AS CNT
	FROM TB_QA_AUDIO_LOG A
	INNER JOIN TB_CM_USER_MASTER B ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID)
	JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON (A.TENANT_ID = C.TENANT_ID AND B.DEPT_CD = C.DEPT_CD)
	WHERE 1=1
			AND A.TENANT_ID = I_TENANT_ID
			AND A.RECORD_ID = CASE WHEN I_RECORD_ID IS NULL THEN A.RECORD_ID ELSE I_RECORD_ID END
			AND A.REC_YMD BETWEEN I_REC_FRM_DT AND I_REC_END_DT
			AND TO_CHAR(STARTTIME, 'HH24MISS') >= I_REC_FRM_TM||'00' AND TO_CHAR(ENDTIME, 'HH24MISS') <= I_REC_END_TM||'59'
			AND TALK_TM <= FN_CM_GET_TIME_DIFF_TO_SECOND(I_TALK_FRM_TM, I_TALK_END_TM) 
			AND	((I_AGENT_ID IS NULL AND 1=1) OR ( I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, A.AGENT_ID) > 0))
			AND ((I_USER_DATA1 IS NULL AND 1=1) OR ( I_USER_DATA1 IS NOT NULL AND A.USER_DATA1 = I_USER_DATA1)) 
			AND ((I_USER_DATA2 IS NULL AND 1=1) OR ( I_USER_DATA2 IS NOT NULL AND A.USER_DATA2 = I_USER_DATA2))
			AND ((I_USER_DATA3 IS NULL AND 1=1) OR ( I_USER_DATA3 IS NOT NULL AND A.USER_DATA3 = I_USER_DATA3))
	 ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA2030M01_02 (
   I_TENANT_ID    IN VARCHAR2
 , I_RECORD_ID	  IN VARCHAR2
 , I_AGENT_ID  	  IN VARCHAR2
 , I_DEPT_CD      IN VARCHAR2
 , I_REC_FRM_DT	  IN VARCHAR2
 , I_REC_END_DT	  IN VARCHAR2
 , I_REC_FRM_TM	  IN VARCHAR2
 , I_REC_END_TM	  IN VARCHAR2
 , I_TALK_FRM_TM  IN VARCHAR2
 , I_TALK_END_TM  IN VARCHAR2
 , I_START_ROW	  IN NUMBER
 , I_END_ROW	  IN NUMBER
 , I_USER_DATA1   IN VARCHAR2
 , I_USER_DATA2   IN VARCHAR2
 , I_USER_DATA3   IN VARCHAR2
 , O_CUR_LIST     OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA2030M01_02
   PURPOSE:    녹음파일 조회
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/27  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA2030M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT * FROM (
					SELECT A.TENANT_ID
					        ,A.RECORD_ID
					        ,A.RECORD_ID AS REC_ID
					        ,A.CIDX AS CALL_ID
					        ,A.SERVER_IP
					        ,A.SERVER_PORT
					        ,A.AGENT_ID
							,TO_CHAR(TO_DATE(A.REC_YMD,'yyyymmdd'),'YYYY-MM-DD') AS REC_YMD
							,TO_CHAR(A.STARTTIME,'HH24:MI:SS') AS STARTTIME
							,TO_CHAR(A.ENDTIME,'HH24:MI:SS') AS ENDTIME
							,FN_CM_GET_TIME_FORMAT(A.TALK_TM) AS TALK_TM
							,FN_CM_GET_DEPT_INFO(A.TENANT_ID, B.DEPT_CD) AS DEPT_INFO
							,B.SABUN
							,B.AGENT_NM
							,CASE WHEN (SELECT COUNT(RECORD_ID) FROM TB_QA_VALUE_RESULT_HEADER B WHERE B.TENANT_ID = A.TENANT_ID AND B.RECORD_ID = A.RECORD_ID) = 0 THEN 0 ELSE 1 END AS VALUE_YN
							,A.DN_NO
							,A.USER_DATA1
							,A.USER_DATA2
							,A.USER_DATA3
							,A.USER_DATA4
							,A.USER_DATA5
							,ROWNUM AS RNUM
					FROM TB_QA_AUDIO_LOG A
					INNER JOIN TABLE(FN_CM_GET_TB_USER(I_TENANT_ID, I_AGENT_ID)) B ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID)
					JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON (A.TENANT_ID = C.TENANT_ID AND B.DEPT_CD = C.DEPT_CD)
					WHERE 1=1
						AND A.TENANT_ID = I_TENANT_ID
						AND A.RECORD_ID = CASE WHEN I_RECORD_ID IS NULL THEN A.RECORD_ID ELSE I_RECORD_ID END
						AND A.REC_YMD BETWEEN I_REC_FRM_DT AND I_REC_END_DT
						AND TO_CHAR(STARTTIME, 'HH24MISS') >= I_REC_FRM_TM||'00' AND TO_CHAR(ENDTIME, 'HH24MISS') <= I_REC_END_TM||'59'
						AND TALK_TM <= FN_CM_GET_TIME_DIFF_TO_SECOND(I_TALK_FRM_TM, I_TALK_END_TM) 
--						AND	(( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, A.AGENT_ID) > 0))
						AND ((I_USER_DATA1 IS NULL AND 1=1) OR ( I_USER_DATA1 IS NOT NULL AND A.USER_DATA1 = I_USER_DATA1)) 
						AND ((I_USER_DATA2 IS NULL AND 1=1) OR ( I_USER_DATA2 IS NOT NULL AND A.USER_DATA2 = I_USER_DATA2))
						AND ((I_USER_DATA3 IS NULL AND 1=1) OR ( I_USER_DATA3 IS NOT NULL AND A.USER_DATA3 = I_USER_DATA3))
				)
				WHERE RNUM >= I_START_ROW AND RNUM <= I_END_ROW
	 ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA3010M01_02 (
   I_TENANT_ID      IN VARCHAR2
 , I_TIMES_ID       IN VARCHAR2  
 , I_QAA_ID			IN VARCHAR2
 , I_AGENT_ID		IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA3010M01_02
   PURPOSE:    평가진행현황 - 하단 평가상세조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/29  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA3010M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
--	SELECT 
--		FN_CM_GET_AGENT_NM(A.TENANT_ID, A.VALUE_MEMB) || ' (' || FN_CM_GET_AGENT_SABUN(A.TENANT_ID, A.VALUE_MEMB) || ')' AS QAA_ID
--		,FN_CM_GET_AGENT_NM(A.TENANT_ID, A.AGENT_ID) AS AGENT_NM
--		,FN_CM_GET_DEPT_INFO(B.TENANT_ID , B.DEPT_CD) AS DEPT_INFO
--		,B.SABUN
--		,A.RECORD_ID
--		,FN_CM_STRING_FORMAT(A.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
--		,FN_CM_GET_CODE_NM(A.TENANT_ID, 'QA_VALUE_STATUS', A.QA_VALUE_STATUS) AS QA_VALUE_STATUS
--		,A.TOTAL_SCORE
--		,TO_CHAR(A.CONVERT_SCORE, 'FM990.00') AS CONVERT_SCORE
--		,A.SHEETKEY
--	FROM TB_QA_VALUE_RESULT_HEADER A
--	INNER JOIN TB_CM_USER_MASTER_HISTORY B ON A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID AND SUBSTR(A.VALUE_YMD,0,6) = B.STD_MONTH
--	WHERE A.TENANT_ID = I_TENANT_ID
--	  AND A.TIMES_ID = I_TIMES_ID
--	  AND EXISTS (SELECT 1
--                  FROM TB_QA_VALUE_ALLOC_QAA S
--                  WHERE S.TENANT_ID = A.TENANT_ID
--                  AND S.TIMES_ID = A.TIMES_ID
--                  AND (( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, S.QAA_ID) > 0)))
--      AND EXISTS (SELECT 1
--                  FROM TB_QA_VALUE_ALLOC_AGENT S
--                  WHERE S.TENANT_ID = A.TENANT_ID
--                  AND S.TIMES_ID = A.TIMES_ID
--                  AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, S.AGENT_ID) > 0)))
	SELECT FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.VALUE_MEMB) AS QAA_INFO
			,FN_CM_GET_DEPT_INFO(A.TENANT_ID, B.DEPT_CD) AS DEPT_INFO
			,B.SABUN
			,B.AGENT_NM
			,A.RECORD_ID
			,FN_CM_STRING_FORMAT(A.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
			,FN_CM_GET_CODE_NM(A.TENANT_ID, 'QA_VALUE_STATUS', A.QA_VALUE_STATUS) AS QA_VALUE_STATUS
--			,A.QA_VALUE_STATUS
			,A.TOTAL_SCORE
			,A.CONVERT_SCORE
			,A.SHEETKEY		
			,A.VALUE_MEMB AS QAA_ID
	FROM TB_QA_VALUE_RESULT_HEADER A
	INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(I_TENANT_ID, SUBSTR(I_TIMES_ID,0,6), I_AGENT_ID)) B
	ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID)
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND A.TIMES_ID = I_TIMES_ID
	  AND EXISTS (SELECT 1
                  FROM TB_QA_VALUE_ALLOC_QAA S
                  WHERE S.TENANT_ID = A.TENANT_ID
                    AND S.TIMES_ID = A.TIMES_ID
                    AND (( I_QAA_ID IS NULL AND 1=1 ) OR (I_QAA_ID IS NOT NULL AND INSTR(I_QAA_ID, S.QAA_ID) > 0)))
      AND EXISTS (SELECT 1
                  FROM TB_QA_VALUE_ALLOC_AGENT S
                  WHERE S.TENANT_ID = A.TENANT_ID
                    AND S.TIMES_ID = A.TIMES_ID
                    AND (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(I_AGENT_ID, S.AGENT_ID) > 0)))
	ORDER BY A.VALUE_MEMB, A.VALUE_YMD
	;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA4020M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_DATE_GUBUN    IN VARCHAR2  /* 월별(M)/분기별(Q)/반기별(H)/년도별(Y) */
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_QA_EVAL_TYPE  IN VARCHAR2
 , I_TIMES_ID      IN VARCHAR2
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA4020M01_01
   PURPOSE:    기간별추이보고서 - 개인별/소속별/업무그룹별/근속기간별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/12  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA4020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 	 	 WITH TEMP_LIST AS (
			/* 조건에 해당하는 ROW 데이터 조회  */                      
		    SELECT C.TENANT_ID
		           ,C.DEPT_CD
		           ,C.AGENT_ID
		           ,C.AGENT_NM
		           ,C.TM_KIND
		           ,C.AGENT_JIKGUP
		           ,C.AGENT_JIKCHK
		           ,(SELECT S.CODE
		             FROM TB_CM_CODE S 
		            WHERE S.TENANT_ID = C.TENANT_ID 
		              AND S.SORT_CD   = 'WORK_PERIOD'
			          AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		             AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
--		           ,(SELECT SUM(T.SCORE) FROM TB_QA_VALUE_RESULT_DETAIL T WHERE T.TENANT_ID = B.TENANT_ID AND T.SHEETKEY = B.SHEETKEY) AS TOTAL_SCORE
--					,ROUND((SELECT SUM(T.SCORE) FROM TB_QA_VALUE_RESULT_DETAIL T WHERE T.TENANT_ID = B.TENANT_ID AND T.SHEETKEY = B.SHEETKEY)/(SELECT SUM(T.SCORE) FROM TB_QA_SHEET_DETAIL T WHERE T.TENANT_ID = B.TENANT_ID AND T.SHEET_ID = B.SHEET_ID AND QA_SEBU_CD = '0')*100,1) AS TOTAL_SCORE
		           ,B.CONVERT_SCORE AS TOTAL_SCORE
		           ,B.VALUE_YMD
		           ,CASE  I_DATE_GUBUN WHEN 'M' THEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYYMM')
		                      WHEN 'Q' THEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYYQ')
		                      WHEN 'H' THEN (CASE WHEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'Q') < 3 
		                                          THEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYY')||'1' 
		                                          ELSE TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYY')||'3' END)
		                      WHEN 'Y' THEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYY') END AS COLUMN_ID	
		                      
	 	      FROM TB_QA_VALUE_TIMES A 
		      INNER JOIN TB_QA_VALUE_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID )
		      INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		    WHERE A.TENANT_ID  = I_TENANT_ID
		     AND B.VALUE_YMD BETWEEN I_DT_FROM||'01' AND I_DT_TO||'31'
		     AND B.REVALUE_SHEETKEY IS NULL
		     AND A.QA_EVAL_TYPE = CASE WHEN I_QA_EVAL_TYPE IS NULL THEN A.QA_EVAL_TYPE ELSE I_QA_EVAL_TYPE END    
			 AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))      
		     AND (( I_TIMES_ID IS NULL AND 1=1 )
		          OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
--	          AND B.QA_VALUE_STATUS = 40
		     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
		     AND EXISTS (SELECT 1 
		     			   FROM TB_CM_ACCESS_SCOPE S 
		     			  WHERE S.TENANT_ID   = A.TENANT_ID
		     			    AND S.SCOPE_GUBUN = '50'
		     			    AND S.ITEM_ID     = A.TIMES_ID
		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )  
	   ), TEMP_CD AS (
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				    WHEN 'W' THEN 'WORK_PERIOD'
							     				    ELSE NULL END)
		), TEMP_LIST2 AS (  
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					 -- ,A.COLUMN_ID		     			 
					  ,COUNT(*)  AS TOTAL_CNT
					  ,0.89 AS TOTAL_TREND
--					  ,STDDEV_POP(A.TOTAL_SCORE) AS TOTAL_TREND
			  		  ,SUM(A.TOTAL_SCORE) AS TOTAL_SCORE
			  		  ,ROUND(AVG(A.TOTAL_SCORE),2) AS TOTAL_AVG
			  		  ,MAX(A.TOTAL_SCORE) AS TOTAL_MAX
			  		  ,MIN(A.TOTAL_SCORE) AS TOTAL_MIN
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END)
				  --    ,A.COLUMN_ID							     			 
	          )
--	      TEMP_LIST3 AS (
--    	  SELECT A.TENANT_ID,
--    	  		A.CODE,
--    	  		STDDEV_POP(A.TOTAL_AVG) AS TOTAL_TREND
--			FROM  TEMP_LIST2 A
--		   GROUP BY A.TENANT_ID, A.CODE	
--	   ) 	 
 	    SELECT A.TENANT_ID
      		,A.CODE
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.AGENT_NM
			                     WHEN 'D' THEN FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
								 WHEN 'T' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND', A.CODE)
								 WHEN 'W' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'WORK_PERIOD', A.CODE)
 			                     ELSE '' END)  AS CODE_NM       		
      		,A.TOTAL_TREND
      		,TO_CHAR(A.TOTAL_AVG,'FM990.00') AS TOTAL_AVG
      		,TO_CHAR(A.TOTAL_MAX,'FM990.00') AS TOTAL_MAX
      		,TO_CHAR(A.TOTAL_MIN,'FM990.00') AS TOTAL_MIN
--      		,STDDEV_POP(A.TOTAL_AVG) AS TOTAL_TREND
      	    /* 조회구분별  조회 */	
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.CODE)
			      ELSE '' END) AS CENTER
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.CODE)
			      ELSE '' END) AS PART
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.CODE)
			      ELSE '' END) AS TEAM
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
			      ELSE '' END) AS JO
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND', B.TM_KIND)
 			                     ELSE '' END)  AS TM_KIND_NM 			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.SABUN ELSE '' END)  AS SABUN			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP)
 			                     ELSE '' END)  AS AGENT_JIKGUP_NM    
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK)
 			                     ELSE '' END)  AS AGENT_JIKCHK_NM  			      			      			      
		FROM  TEMP_LIST2 A 
		
		LEFT OUTER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.CODE = B.AGENT_ID )
--		INNER JOIN TEMP_LIST3 C
--		ON A.TENANT_ID = C.TENANT_ID
--		AND A.CODE = C.CODE
        ;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA4020M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_DATE_GUBUN    IN VARCHAR2  /* 월별(M)/분기별(Q)/반기별(H)/년도별(Y) */
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_QA_EVAL_TYPE IN VARCHAR2
 , I_TIMES_ID       IN VARCHAR2
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA4020M01_02
   PURPOSE:    기간별추이보고서 - 조회구분별 / 기간구분별 - 데이터조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/12  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA4020M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
	        ------------------------------------------------------------------------
	        -- 조건에 해당하는 ROW 데이터 조회
	        ------------------------------------------------------------------------
		    SELECT C.TENANT_ID
		           ,C.DEPT_CD
		           ,C.AGENT_ID
		           ,C.AGENT_NM
		           ,C.TM_KIND
		           ,C.AGENT_JIKGUP
		           ,C.AGENT_JIKCHK
		           ,(SELECT S.CODE
		             FROM TB_CM_CODE S 
		            WHERE S.TENANT_ID = C.TENANT_ID 
		              AND S.SORT_CD   = 'WORK_PERIOD'
			          AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		             AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
--		           ,(SELECT SUM(T.SCORE) FROM TB_QA_VALUE_RESULT_DETAIL T WHERE T.TENANT_ID = B.TENANT_ID AND T.SHEETKEY = B.SHEETKEY) AS TOTAL_SCORE
--		           ,ROUND((SELECT SUM(T.SCORE) FROM TB_QA_VALUE_RESULT_DETAIL T WHERE T.TENANT_ID = B.TENANT_ID AND T.SHEETKEY = B.SHEETKEY)/(SELECT SUM(T.SCORE) FROM TB_QA_SHEET_DETAIL T WHERE T.TENANT_ID = B.TENANT_ID AND T.SHEET_ID = B.SHEET_ID AND QA_SEBU_CD = '0')*100,1) AS TOTAL_SCORE
					,B.CONVERT_SCORE AS TOTAL_SCORE
		           ,B.VALUE_YMD
		           ,CASE  I_DATE_GUBUN WHEN 'M' THEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYYMM')
		                      WHEN 'Q' THEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYYQ')
		                      WHEN 'H' THEN (CASE WHEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'Q') < 3 
		                                          THEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYY')||'1' 
		                                          ELSE TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYY')||'3' END)
		                      WHEN 'Y' THEN TO_CHAR(TO_DATE(B.VALUE_YMD,'YYYYMMDD'),'YYYY') END AS COLUMN_ID	
	 	      FROM TB_QA_VALUE_TIMES A 
		      INNER JOIN TB_QA_VALUE_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID )
		      INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		    WHERE A.TENANT_ID  = I_TENANT_ID
		     AND B.VALUE_YMD BETWEEN I_DT_FROM||'01' AND I_DT_TO||'31'
		     AND B.REVALUE_SHEETKEY IS NULL
		     AND A.QA_EVAL_TYPE = CASE WHEN I_QA_EVAL_TYPE IS NULL THEN A.QA_EVAL_TYPE ELSE I_QA_EVAL_TYPE END    
			 AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))     
		     AND (( I_TIMES_ID IS NULL AND 1=1 )
		          OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
--	          AND B.QA_VALUE_STATUS = 40
		     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
		     AND EXISTS (SELECT 1 
		     			   FROM TB_CM_ACCESS_SCOPE S 
		     			  WHERE S.TENANT_ID   = A.TENANT_ID
		     			    AND S.SCOPE_GUBUN = '50'
		     			    AND S.ITEM_ID     = A.TIMES_ID
		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )  
	   ), TEMP_CD AS (
	        ------------------------------------------------------------------------
	        -- 업무그룹/근속기간일 경우 공통코드 조회
	        ------------------------------------------------------------------------
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				   WHEN 'W' THEN 'WORK_PERIOD'
							     				   ELSE NULL END)
		), TEMP_LIST2 AS (
	        ------------------------------------------------------------------------
	        -- 조회구분별 통계 
	        ------------------------------------------------------------------------
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					  ,A.COLUMN_ID		     			 
					  ,COUNT(*)  AS TOTAL_CNT
			  		  ,ROUND(AVG(A.TOTAL_SCORE),2) AS TOTAL_AVG
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                WHEN 'D' THEN  A.DEPT_CD
			                                ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			END)
				      ,A.COLUMN_ID							     			 
	          )  
      SELECT A.TENANT_ID
      		,A.CODE
      		,A.COLUMN_ID
      		,TO_CHAR(A.TOTAL_CNT,'FM990.00') AS TOTAL_CNT
      		,TO_CHAR(A.TOTAL_AVG,'FM990.00') AS TOTAL_AVG
		FROM  TEMP_LIST2 A 
		
		UNION ALL   /*표준편차*/
		
		SELECT A.TENANT_ID
	  		,A.CODE
	  		,'#' AS COLUMN_ID
			,TO_CHAR(SUM(A.TOTAL_CNT),'FM990.00') AS TOTAL_CNT
	  		,TO_CHAR(STDDEV_POP(A.TOTAL_AVG),'FM990.00') AS TOTAL_AVG
		FROM TEMP_LIST2 A
	   GROUP BY A.TENANT_ID , A.CODE
	   ORDER BY CODE
				
		;
			      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA4030M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_TIMES_ID       IN VARCHAR2  
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN    IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA4030M01_01
   PURPOSE:    평가항목별보고서 - 개인별/소속별/업무그룹별/근속기간별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/03/29  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA4030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
			/* 조건에 해당하는 ROW 데이터 조회  */                      
		    SELECT C.TENANT_ID
		           ,C.DEPT_CD
		           ,C.AGENT_ID
		           ,C.AGENT_NM
		           ,C.TM_KIND
		           ,C.AGENT_JIKGUP
		           ,C.AGENT_JIKCHK
		           ,(SELECT S.CODE
		             FROM TB_CM_CODE S 
		            WHERE S.TENANT_ID = C.TENANT_ID 
		              AND S.SORT_CD   = 'WORK_PERIOD'
			          AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		             AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
--		           ,(SELECT SUM(T.SCORE) FROM TB_QA_VALUE_RESULT_DETAIL T WHERE T.TENANT_ID = B.TENANT_ID AND T.SHEETKEY = B.SHEETKEY) AS TOTAL_SCORE
					,B.TOTAL_SCORE
--		           ,ROUND((SELECT SUM(T.SCORE) FROM TB_QA_VALUE_RESULT_DETAIL T WHERE T.TENANT_ID = B.TENANT_ID AND T.SHEETKEY = B.SHEETKEY)/(SELECT SUM(T.SCORE) FROM TB_QA_SHEET_DETAIL T WHERE T.TENANT_ID = B.TENANT_ID AND T.SHEET_ID = B.SHEET_ID AND QA_SEBU_CD = '0')*100,1) AS TOTAL_SCORE
		           ,B.VALUE_YMD
		      FROM TB_QA_VALUE_TIMES A 
		      INNER JOIN TB_QA_VALUE_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID)
		      INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		    WHERE A.TENANT_ID  = I_TENANT_ID
		     AND A.TIMES_ID = I_TIMES_ID
		     /*재평가 관련*/
		     AND B.REVALUE_SHEETKEY IS NULL
			 AND (( I_AGENT_ID IS NULL AND 1=1 )
			   OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))      
		     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
		     AND EXISTS (SELECT 1 
		     			   FROM TB_CM_ACCESS_SCOPE S 
		     			  WHERE S.TENANT_ID   = A.TENANT_ID
		     			    AND S.SCOPE_GUBUN = '50'
		     			    AND S.ITEM_ID     = A.TIMES_ID
		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD )  
	   ), TEMP_CD AS (
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				    WHEN 'W' THEN 'WORK_PERIOD'
							     				    ELSE NULL END)
		)
		, TEMP_LIST2 AS (  
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					 -- ,A.COLUMN_ID		     			 
					  ,COUNT(*)  AS TOTAL_CNT
			  		--  ,SUM(A.TOTAL_SCORE) AS TOTAL_SUM
			  			,AVG(A.TOTAL_SCORE) AS TOTAL_SUM
			  		  ,RANK() OVER(ORDER BY AVG(A.TOTAL_SCORE) DESC) AS TOTAL_RANK
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE 
			                                 (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END)
				  --    ,A.COLUMN_ID							     			 
	          ) 
 /*      ,TEMP_LIST3 AS(
      SELECT A.TENANT_ID
      		,A.CODE
      		,AVG(A.TOTAL_SCORE) AS TOTAL_AVG
      		,MAX(A.TOTAL_MAX) AS TOTAL_MAX
      		,MIN(A.TOTAL_MIN) AS TOTAL_MIN
		FROM  TEMP_LIST2 A
	   GROUP BY A.TENANT_ID, A.CODE	
	   ) 	  */         
 	    SELECT A.TENANT_ID
      		,A.CODE
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.AGENT_NM
			                     WHEN 'D' THEN FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
								 WHEN 'T' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND', A.CODE)
								 WHEN 'W' THEN FN_CM_GET_CODE_NM(A.TENANT_ID,'WORK_PERIOD', A.CODE)
 			                     ELSE '' END)  AS CODE_NM       		
      		,TO_CHAR(A.TOTAL_SUM,'FM990.00') AS TOTAL_SUM
      		,A.TOTAL_RANK
      	    /* 조회구분별  조회 */	
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'center', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'center', A.CODE)
			      ELSE '' END) AS CENTER
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'part', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'part', A.CODE)
			      ELSE '' END) AS PART
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'team', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'team', A.CODE)
			      ELSE '' END) AS TEAM
			,(CASE I_VIEW_GUBUN 
			       WHEN 'P' THEN  FN_CM_GET_DEPT_NM(B.TENANT_ID,'jo', B.DEPT_CD)
			       WHEN 'D' THEN  FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo', A.CODE)
			      ELSE '' END) AS JO
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'TM_KIND', B.TM_KIND)
 			                     ELSE '' END)  AS TM_KIND_NM 			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN B.SABUN ELSE '' END)  AS SABUN			      
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKGUP', B.AGENT_JIKGUP)
 			                     ELSE '' END)  AS AGENT_JIKGUP_NM    
			,(CASE I_VIEW_GUBUN WHEN 'P' THEN FN_CM_GET_CODE_NM(B.TENANT_ID,'AGENT_JIKCHK', B.AGENT_JIKCHK)
 			                     ELSE '' END)  AS AGENT_JIKCHK_NM  			      			      			      
		FROM  TEMP_LIST2 A
		LEFT OUTER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.CODE = B.AGENT_ID )
        ;
      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA4030M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2  /* 로그인사용자 DEPT_CD */   
 , I_TIMES_ID       IN VARCHAR2  
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , I_VIEW_GUBUN   IN VARCHAR2 /* 개인별(P)/소속별(D)/업무그룹별(T)/근속기간별(W) */ 
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA4030M01_02
   PURPOSE:    평가항목별보고서 - 조회구분별 / (문항별/업무구분별) - 데이터조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/12
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA4030M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	 WITH TEMP_LIST AS (
	        ------------------------------------------------------------------------
	        -- 조건에 해당하는 ROW 데이터 조회
	        ------------------------------------------------------------------------
		    SELECT C.TENANT_ID
		           ,C.DEPT_CD
		           ,C.AGENT_ID
		           ,C.AGENT_NM
		           ,C.TM_KIND
		           ,C.AGENT_JIKGUP
		           ,C.AGENT_JIKCHK
		           ,(SELECT S.CODE
		             FROM TB_CM_CODE S 
		            WHERE S.TENANT_ID = C.TENANT_ID 
		              AND S.SORT_CD   = 'WORK_PERIOD'
			          AND C.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
		             AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
		           ,NVL(F.SCORE,0) AS RESULT_SCORE
--					,NVL(B.TOTAL_SCORE,0) AS RESULT_SCORE
		           ,B.VALUE_YMD
		           ,E.MAJOR_CD||NVL(E.MINOR_CD,'NOITEM') AS COLUMN_ID	
	      FROM TB_QA_VALUE_TIMES A 
		      INNER JOIN TB_QA_VALUE_RESULT_HEADER B ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID )
		      INNER JOIN TB_CM_USER_MASTER C ON ( B.TENANT_ID = C.TENANT_ID AND B.AGENT_ID = C.AGENT_ID )
		      INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) D ON C.DEPT_CD = D.DEPT_CD
		      INNER JOIN TB_QA_SHEET_DETAIL E ON ( A.TENANT_ID = E.TENANT_ID AND A.SHEET_ID = E.SHEET_ID)
		      INNER JOIN TB_QA_VALUE_RESULT_DETAIL F ON (B.TENANT_ID =F.TENANT_ID AND B.SHEETKEY = F.SHEETKEY AND E.MAJOR_CD = F.MAJOR_CD AND E.MINOR_CD = F.MINOR_CD)		                                            
		    WHERE A.TENANT_ID  = I_TENANT_ID
		     AND A.TIMES_ID = I_TIMES_ID
		     AND E.QA_SEBU_CD = '0'
		     AND B.REVALUE_SHEETKEY IS NULL
			 AND (( I_AGENT_ID IS NULL AND 1=1 )
			  OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,C.AGENT_ID) > 0))     
		     /* 로그인 사용자의 부서가 관리소속 내 있는 것만*/      
		     AND EXISTS (SELECT 1 
		     			   FROM TB_CM_ACCESS_SCOPE S 
		     			  WHERE S.TENANT_ID   = A.TENANT_ID
		     			    AND S.SCOPE_GUBUN = '50'
		     			    AND S.ITEM_ID     = A.TIMES_ID
		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD ) 
	   ), TEMP_CD AS (
	        ------------------------------------------------------------------------
	        -- 업무그룹/근속기간일 경우 공통코드 조회
	        ------------------------------------------------------------------------
		  SELECT CODE
		    FROM TB_CM_CODE S
		   WHERE S.TENANT_ID = I_TENANT_ID
		     AND S.SORT_CD   = (CASE I_VIEW_GUBUN  WHEN 'T' THEN 'TM_KIND'
							     				   WHEN 'W' THEN 'WORK_PERIOD'
							     				   ELSE NULL END)
		), TEMP_LIST2 AS (
	        ------------------------------------------------------------------------
	        -- 조회구분별 통계 
	        ------------------------------------------------------------------------
				SELECT A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                 WHEN 'D' THEN  A.DEPT_CD
			                                 ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			 END) AS CODE
					  ,A.COLUMN_ID		     			 
					--  ,SUM(A.RESULT_SCORE) AS TOTAL_SCORE
						,ROUND(AVG(A.RESULT_SCORE),2) AS TOTAL_SCORE
				  FROM TEMP_LIST A
				  LEFT OUTER JOIN TEMP_CD B ON ( (CASE I_VIEW_GUBUN  
						                                 WHEN 'T' THEN  A.TM_KIND
										     			 WHEN 'W' THEN  A.WORK_MONTH_PERIOD
										     			 ELSE NULL END) = B.CODE )
			   GROUP BY A.TENANT_ID
			          , (CASE I_VIEW_GUBUN  WHEN 'P' THEN  A.AGENT_ID
			                                WHEN 'D' THEN  A.DEPT_CD
			                                ELSE (CASE WHEN B.CODE IS NULL THEN 'NOITEM' ELSE B.CODE END)
							     			END)
				      ,A.COLUMN_ID							     			 
	          )  
      SELECT A.TENANT_ID
      		,A.CODE
      		,A.COLUMN_ID
      		,TO_CHAR(A.TOTAL_SCORE,'FM990.00') AS TOTAL_SCORE
		FROM  TEMP_LIST2 A ;
			      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE "SP_QA5010M01_01" (
   I_TENANT_ID      IN VARCHAR2
 , I_LOGIN_DEPT_CD  IN VARCHAR2
 , I_DT_FROM        IN VARCHAR2  
 , I_DT_TO		    IN VARCHAR2
 , I_TIMES_ID		IN VARCHAR2
 , I_DISTRIBUTION	IN NUMBER
 , I_DEPT_CD		IN VARCHAR2
 , I_AGENT_ID		IN VARCHAR2
 , I_STD_NUM		IN NUMBER
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5010M01_01
   PURPOSE:    코칭대상자관리 - 대상자 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/02  jin
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5010M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	
 BEGIN
	
    OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS (
		SELECT A.TENANT_ID
				,A.AGENT_ID
				,B.DEPT_CD AS DEPT_CD
				,B.TM_KIND AS TM_KIND
				,A.CONVERT_SCORE
		FROM TB_QA_VALUE_RESULT_HEADER A
		INNER JOIN TB_CM_USER_MASTER B ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID)
		WHERE A.TENANT_ID = I_TENANT_ID 
		AND (( I_TIMES_ID IS NULL AND 1=1 ) OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
		AND A.VALUE_YMD BETWEEN I_DT_FROM AND I_DT_TO
		AND A.REVALUE_SHEETKEY IS NULL
		AND B.HIDE_YN = 0
		AND NVL(B.JAEJIK_GUBUN,'10') !='99'
		AND EXISTS (SELECT 1 
			     			   FROM TB_CM_ACCESS_SCOPE S 
			     			  WHERE S.TENANT_ID   = A.TENANT_ID
			     			    AND S.SCOPE_GUBUN = '50'
			     			    AND S.ITEM_ID     = A.TIMES_ID
			     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD ) 
	), DEPT AS (
		SELECT A.TENANT_ID
				,A.DEPT_CD
				,TO_CHAR(ROUND(AVG(A.CONVERT_SCORE),2),'FM990.00') AS AVG_SCORE
		FROM TEMP_LIST A
		GROUP BY A.TENANT_ID, A.DEPT_CD
	), TM_KIND AS (
		SELECT A.TENANT_ID
				,A.TM_KIND
				,TO_CHAR(ROUND(AVG(A.CONVERT_SCORE),2),'FM990.00') AS AVG_SCORE
		FROM TEMP_LIST A
		GROUP BY A.TENANT_ID, A.TM_KIND
	), AGENT_TEMP AS (
		SELECT A.TENANT_ID
				,A.AGENT_ID
				,TO_CHAR(ROUND(AVG(A.CONVERT_SCORE),2),'FM990.00') AS AVG_SCORE
				,COUNT(A.AGENT_ID) AS VALUE_CNT
		FROM TEMP_LIST A
		GROUP BY A.TENANT_ID, A.AGENT_ID
	), AGENT AS (
	 	SELECT A.TENANT_ID
			,A.AGENT_ID
			,A.AVG_SCORE
			,A.VALUE_CNT
			,CUME_DIST()    OVER (PARTITION BY A.TENANT_ID ORDER BY A.AVG_SCORE)*100  cum
		FROM AGENT_TEMP A
	)
	
	SELECT A.AGENT_ID
			,A.AVG_SCORE
			,A.VALUE_CNT
			,(SELECT S.AVG_SCORE FROM DEPT S WHERE S.TENANT_ID = A.TENANT_ID AND S.DEPT_CD = B.DEPT_CD) AS DEPT_AVG_SCORE
			,(SELECT S.AVG_SCORE FROM TM_KIND S WHERE S.TENANT_ID = A.TENANT_ID AND S.TM_KIND = B.TM_KIND) AS TM_AVG_SCORE
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND
			,B.SABUN
			,B.AGENT_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS JIKGUP
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS JIKCHK
			,A.VALUE_CNT
			,FN_CM_GET_DEPT_INFO(A.TENANT_ID,B.DEPT_CD) AS DEPT_INFO
			,FN_CM_GET_WORKPERIOD('M',B.ENTER_YMD, TO_CHAR(SYSDATE,'YYYYMMDD')) AS WORK_MONTH_PERIOD
--			,(SELECT S.CODE
--	         	FROM TB_CM_CODE S 
--		        WHERE S.TENANT_ID = B.TENANT_ID 
--		        	AND S.SORT_CD   = 'WORK_PERIOD'
--	    	    	AND B.WORK_MONTH_PERIOD BETWEEN S.USER_DATA1 AND S.USER_DATA2
--					AND ROWNUM = 1 )  AS WORK_MONTH_PERIOD
	         ,(SELECT COUNT(S.COACHING_ID) 
	         	FROM TB_QA_COACHING S 
	         	WHERE S.TENANT_ID = A.TENANT_ID 
	         		AND S.TARGET_MEMB = A.AGENT_ID 
	         		AND S.COACHING_YMD BETWEEN I_DT_FROM AND I_DT_TO) AS COACHING_CNT
	FROM AGENT A
	INNER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID )
	INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD
	WHERE (( I_AGENT_ID IS NULL AND 1=1 ) OR (I_AGENT_ID IS NOT NULL AND INSTR(A.AGENT_ID, I_AGENT_ID) > 0))
	AND TO_NUMBER(A.AVG_SCORE) <= CASE WHEN I_STD_NUM IS NULL THEN TO_NUMBER(A.AVG_SCORE) ELSE I_STD_NUM END
	AND A.cum >= CASE WHEN I_DISTRIBUTION IS NULL THEN TO_NUMBER(A.cum) ELSE I_DISTRIBUTION END
	;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA5010S01_03 (
   I_TENANT_ID     IN VARCHAR2
 , I_LOGIN_DEPT_CD IN VARCHAR2
 , I_AGENT_ID 	   IN VARCHAR2
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO		   IN VARCHAR2
 , I_TIMES_ID	   IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5010S01_03
   PURPOSE:    코칭 대상자 조회 - 상세보기 (Grid1)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5010S01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
    SELECT A.TIMES_ID	
			,A.TIMES_NM
			,FN_CM_GET_DEPT_INFO(A.TENANT_ID, D.DEPT_CD) AS DEPT_INFO
		    ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',D.TM_KIND) AS TM_KIND
			,D.SABUN
			,D.AGENT_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',D.AGENT_JIKGUP) AS JIKGUP
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',D.AGENT_JIKCHK) AS JIKCHK
			,D.AGENT_ID
			,A.TIMES_ID
			,A.SHEET_ID
			,B.SHEET_NM
			,FN_CM_STRING_FORMAT(C.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
			,TO_CHAR(C.TOTAL_SCORE,'FM990.00') AS TOTAL_SCORE
			,TO_CHAR(C.CONVERT_SCORE, 'FM990.00') AS CONVERT_SCORE
			,C.SHEETKEY
	FROM TB_QA_VALUE_TIMES A
	INNER JOIN TB_QA_SHEET_HEADER B 
	ON (A.TENANT_ID = B.TENANT_ID AND A.SHEET_ID = B.SHEET_ID)
	INNER JOIN TB_QA_VALUE_RESULT_HEADER C
	ON (A.TENANT_ID = C.TENANT_ID AND A.TIMES_ID = C.TIMES_ID)
	INNER JOIN TABLE(FN_CM_GET_TB_USER_HISTORY(A.TENANT_ID, SUBSTR(A.TIMES_ID,0,6) ,I_AGENT_ID)) D
	ON (A.TENANT_ID = D.TENANT_ID AND C.AGENT_ID = D.AGENT_ID)
	WHERE A.TENANT_ID = I_TENANT_ID 
	AND (( I_TIMES_ID IS NULL AND 1=1 ) OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
	AND TO_CHAR(TO_DATE(C.VALUE_YMD, 'yyyymmdd'),'YYYYMM') BETWEEN I_DT_FROM AND I_DT_TO
	AND EXISTS (SELECT 1 
		     			   FROM TB_CM_ACCESS_SCOPE S 
		     			  WHERE S.TENANT_ID   = A.TENANT_ID
		     			    AND S.SCOPE_GUBUN = '50'
		     			    AND S.ITEM_ID     = A.TIMES_ID
		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD ) 
    AND C.REVALUE_SHEETKEY IS NULL
	ORDER BY C.TIMES_ID, C.VALUE_YMD DESC;
--	SELECT FN_CM_GET_DEPT_INFO(A.TENANT_ID, B.DEPT_CD) AS DEPT_INFO
--		    ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND
--			,B.SABUN
--			,B.AGENT_NM
--			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS JIKGUP
--			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS JIKCHK
--			,B.AGENT_ID
--			,A.TIMES_ID
--			,A.SHEET_ID
--			,(SELECT S.TIMES_NM FROM TB_QA_VALUE_TIMES S WHERE S.TENANT_ID = A.TENANT_ID AND S.TIMES_ID = A.TIMES_ID) AS TIMES_NM
--			,(SELECT S.SHEET_NM FROM TB_QA_SHEET_HEADER S WHERE S.TENANT_ID = A.TENANT_ID AND S.SHEET_ID = A.SHEET_ID) AS SHEET_NM
--			,FN_CM_STRING_FORMAT(A.VALUE_YMD, '@@@@-@@-@@') AS VALUE_YMD
--			,TO_CHAR(A.TOTAL_SCORE,'FM990.00') AS TOTAL_SCORE
--			,TO_CHAR(A.CONVERT_SCORE, 'FM990.00') AS CONVERT_SCORE
--			,A.SHEETKEY
--	FROM TB_QA_VALUE_RESULT_HEADER A 
--	INNER JOIN TB_CM_USER_MASTER B ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID )
--	WHERE A.TENANT_ID = I_TENANT_ID 
--	AND (( I_TIMES_ID IS NULL AND 1=1 ) OR (I_TIMES_ID IS NOT NULL AND INSTR(I_TIMES_ID, A.TIMES_ID) > 0))
--	AND TO_CHAR(TO_DATE(A.VALUE_YMD, 'yyyymmdd'),'YYYYMM') BETWEEN I_DT_FROM AND I_DT_TO
--	AND A.AGENT_ID = I_AGENT_ID
--	AND EXISTS (SELECT 1 
--		     			   FROM TB_CM_ACCESS_SCOPE S 
--		     			  WHERE S.TENANT_ID   = A.TENANT_ID
--		     			    AND S.SCOPE_GUBUN = '50'
--		     			    AND S.ITEM_ID     = A.TIMES_ID
--		     			    AND S.DEPT_CD     = I_LOGIN_DEPT_CD ) 
--    AND A.REVALUE_SHEETKEY IS NULL
--	ORDER BY A.VALUE_YMD DESC;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA5010S02_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_AGENT_ID 	   IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5010S02_01
   PURPOSE:    코칭 등록 - 상담원 상세정보

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/  JIN
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5010S02_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	SELECT FN_CM_GET_AGENT_INFO(A.TENANT_ID, A.AGENT_ID) AS AGENT_INFO
			,FN_CM_GET_DEPT_INFO(A.TENANT_ID,A.DEPT_CD) AS DEPT_INFO
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',A.AGENT_JIKGUP) AS JIKGUP
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',A.AGENT_JIKCHK) AS JIKCHK
			,FN_CM_STRING_FORMAT(A.ENTER_YMD,'@@@@-@@-@@') AS ENTER_YMD
			,FN_CM_GET_WORKPERIOD('D',A.ENTER_YMD,'') AS WORK_MONTH_PERIOD
	fROM TABLE(FN_CM_GET_TB_USER(I_TENANT_ID, I_AGENT_ID)) A

      ;
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or REPLACE PROCEDURE "SP_QA5020M01_01" (
   I_TENANT_ID      	IN VARCHAR2
 , I_DT_FROM        	IN VARCHAR2  
 , I_DT_TO		    	IN VARCHAR2
 , I_COACHING_REASON 	IN VARCHAR2
 , I_COACHING_TYPE		IN VARCHAR2
 , I_DEPT_CD			IN VARCHAR2
 , I_AGENT_ID			IN VARCHAR2
 , O_CUR_LIST   OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5020M01_01
   PURPOSE:    코칭대상현황 - 조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/06/09  jin
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5020M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
	
 BEGIN
	
    OPEN O_CUR_LIST FOR 
	SELECT 
		FN_CM_GET_DEPT_INFO(A.TENANT_ID, B.DEPT_CD) AS DEPT_INFO
		,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND
		,B.SABUN
		,B.AGENT_NM
		,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS JIKGUP
		,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS JIKCHK
		,FN_CM_GET_WORKPERIOD('D',B.ENTER_YMD,'') AS WORK_MONTH_PERIOD
		,FN_CM_GET_CODE_NM(A.TENANT_ID,'COACHING_REASON',A.COACHING_REASON) AS COACHING_REASON
        ,(A.TYPE10+A.TYPE20+A.TYPE30) AS COACHING_CNT
        ,A.TYPE10
        ,A.TYPE20
        ,A.TYPE30
        ,A.AGENT_ID
	FROM (
		SELECT 
			A.TENANT_ID
			,A.TARGET_MEMB AS AGENT_ID
			,A.COACHING_REASON
			,SUM(CASE WHEN A.COACHING_TYPE = 10 THEN 1 ELSE 0 END) AS TYPE10
			,SUM(CASE WHEN A.COACHING_TYPE = 20 THEN 1 ELSE 0 END) AS TYPE20
			,SUM(CASE WHEN A.COACHING_TYPE = 30 THEN 1 ELSE 0 END) AS TYPE30
		FROM TB_QA_COACHING A
		WHERE A.TENANT_ID = I_TENANT_ID
		AND A.COACHING_YMD BETWEEN I_DT_FROM AND I_DT_TO
		AND A.COACHING_REASON = CASE WHEN I_COACHING_REASON IS NULL THEN A.COACHING_REASON ELSE I_COACHING_REASON END
		AND A.COACHING_TYPE = CASE WHEN I_COACHING_TYPE IS NULL THEN A.COACHING_TYPE ELSE I_COACHING_TYPE END
		GROUP BY A.TENANT_ID, A.TARGET_MEMB, A.COACHING_REASON
	) A 
	INNER JOIN TABLE(FN_CM_GET_TB_USER(I_TENANT_ID,I_AGENT_ID)) B ON ( A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID )
	INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD
	WHERE B.HIDE_YN = 0
	AND NVL(B.JAEJIK_GUBUN,'10') !='99'
    ;

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
  
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA5030M01_01 (
   I_TENANT_ID     IN VARCHAR2
 , I_COACHING_MEMB IN VARCHAR2  
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5030M01_01
   PURPOSE:    기간별추이보고서 - 개인별/소속별/업무그룹별/근속기간별 - 컬럼목록조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/12  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5030M01_01';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
--	WITH TEMP_LIST AS ( 
--			SELECT A.TARGET_MEMB AS AGENT_ID
--					,A.TENANT_ID
--			FROM TB_QA_COACHING A
--			WHERE A.TENANT_ID = I_TENANT_ID
--			AND A.COACHING_YMD BETWEEN I_DT_FROM||'01' AND I_DT_TO||'31'
--			AND (( I_COACHING_MEMB IS NULL AND 1=1 )
--			          OR (I_COACHING_MEMB IS NOT NULL AND INSTR(I_COACHING_MEMB, A.COACHING_MEMB) > 0))
--			AND (( I_AGENT_ID IS NULL AND 1=1 )
--			OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,A.TARGET_MEMB) > 0))  
--			GROUP BY A.TENANT_ID, A.TARGET_MEMB
--	)
	SELECT FN_CM_GET_DEPT_NM(A.TENANT_ID,'center',B.DEPT_CD) AS CENTER
				,FN_CM_GET_DEPT_NM(A.TENANT_ID,'part',B.DEPT_CD) AS PART
				,FN_CM_GET_DEPT_NM(A.TENANT_ID,'team',B.DEPT_CD) AS TEAM
		    	,FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo',B.DEPT_CD) AS JO
			    ,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND',B.TM_KIND) AS TM_KIND
			    ,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP',B.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
		   		,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK',B.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
			    ,B.SABUN AS SABUN
			    ,B.AGENT_NM AS AGENT_NM
			    ,B.AGENT_ID AS AGENT_ID
		FROM (
					SELECT A.TARGET_MEMB AS AGENT_ID
							,A.TENANT_ID
					FROM TB_QA_COACHING A
					WHERE A.TENANT_ID = I_TENANT_ID
					AND A.COACHING_YMD BETWEEN I_DT_FROM||'01' AND I_DT_TO||'31'
					AND (( I_COACHING_MEMB IS NULL AND 1=1 )
					          OR (I_COACHING_MEMB IS NOT NULL AND INSTR(I_COACHING_MEMB, A.COACHING_MEMB) > 0))
					AND (( I_AGENT_ID IS NULL AND 1=1 )
					OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,A.TARGET_MEMB) > 0))  
					GROUP BY A.TENANT_ID, A.TARGET_MEMB
		) A 
		INNER JOIN TB_CM_USER_MASTER B ON (A.TENANT_ID = B.TENANT_ID AND A.AGENT_ID = B.AGENT_ID)
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD    
		;
	

      
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA5030M01_02 (
   I_TENANT_ID     IN VARCHAR2
 , I_COACHING_MEMB IN VARCHAR2  
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5030M01_02
   PURPOSE:    코칭 결과 보고서 - 조회구분별 / 코칭 결과 보고서 - 데이터조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/12  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5030M01_02';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	WITH TEMP_LIST AS (
		SELECT A.TARGET_MEMB AS AGENT_ID
				,A.TENANT_ID
				,COUNT(A.COACHING_ID) AS COACHING_CNT
				,SUBSTR(A.COACHING_YMD,0,6) AS STD_MONTH
			FROM TB_QA_COACHING A
		INNER JOIN TB_CM_USER_MASTER B
	ON (A.TENANT_ID = B.TENANT_ID AND A.TARGET_MEMB = B.AGENT_ID)
	INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,I_DEPT_CD)) C ON B.DEPT_CD = C.DEPT_CD
	WHERE A.TENANT_ID = I_TENANT_ID
		AND SUBSTR(A.COACHING_YMD,0,6) BETWEEN TO_CHAR(TO_DATE(I_DT_FROM,'yyyymm'),'YYYYMM') AND I_DT_TO
		AND (( I_COACHING_MEMB IS NULL AND 1=1 )
			          OR (I_COACHING_MEMB IS NOT NULL AND INSTR(I_COACHING_MEMB, A.COACHING_MEMB) > 0))
		AND (( I_AGENT_ID IS NULL AND 1=1 )
			OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,B.AGENT_ID) > 0)) 
	GROUP BY  A.TENANT_ID, A.TARGET_MEMB, SUBSTR(A.COACHING_YMD,0,6)
	
	
	), TEMP_SCORE AS (
		SELECT A.AGENT_ID
				,AVG(A.CONVERT_SCORE) AS AVG_SCORE
				,SUBSTR(A.VALUE_YMD,0,6) AS STD_MONTH
				,A.TENANT_ID
		FROM TB_QA_VALUE_RESULT_HEADER A 
		INNER JOIN TB_QA_VALUE_TIMES B
		ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID)
		WHERE A.TENANT_ID = I_TENANT_ID
			AND SUBSTR(A.VALUE_YMD,0,6) BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(I_DT_FROM,'yyyymm'),-1),'YYYYMM') AND I_DT_TO
			AND (( I_AGENT_ID IS NULL AND 1=1 )
				OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,A.AGENT_ID) > 0)) 
			AND A.REVALUE_SHEETKEY IS NULL
		GROUP BY A.AGENT_ID, SUBSTR(A.VALUE_YMD,0,6), A.TENANT_ID
	)
	
	SELECT A.AGENT_ID
			,TO_CHAR(ROUND(A.AVG_SCORE,2),'FM990.00') AS AVG_SCORE
		   ,TO_CHAR(ROUND(A.AVG_SCORE - (SELECT S.AVG_SCORE FROM TEMP_SCORE S 
		   	WHERE S.TENANT_ID = A.TENANT_ID 
		   	AND S.AGENT_ID = A.AGENT_ID 
		   	AND S.STD_MONTH = TO_CHAR(ADD_MONTHS(TO_DATE(A.STD_MONTH,'yyyymm'),-1),'YYYYMM')
			),2),'FM990.00') as CONTRAST
		,A.STD_MONTH as COLUMN_ID
		,NVL((SELECT S.COACHING_CNT FROM TEMP_LIST S WHERE S.TENANT_ID = A.TENANT_ID AND S.AGENT_ID = A.AGENT_ID AND S.STD_MONTH = A.STD_MONTH), 0) AS COACHING_CNT
	FROM TEMP_SCORE A 
	
	UNION ALL 
	 
	SELECT A.AGENT_ID 
		,NULL AS AVG_SCORE
		,NULL AS CONTRAST
		,A.STD_MONTH AS COLUMN_ID
		,A.COACHING_CNT
	FROM TEMP_LIST A
	WHERE A.STD_MONTH NOT IN (SELECT S.STD_MONTH FROM TEMP_SCORE S WHERE S.TENANT_ID = A.TENANT_ID AND S.AGENT_ID = A.AGENT_ID)
	;
					
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

create or replace PROCEDURE SP_QA5030M01_03 (
   I_TENANT_ID     IN VARCHAR2
 , I_COACHING_MEMB IN VARCHAR2  
 , I_DT_FROM       IN VARCHAR2
 , I_DT_TO         IN VARCHAR2
 , I_DEPT_CD	   IN VARCHAR2
 , I_AGENT_ID      IN VARCHAR2
 , O_CUR_LIST      OUT SYS_REFCURSOR
) AS 
/******************************************************************************
   NAME:       SP_QA5030M01_02
   PURPOSE:    코칭 결과 보고서 - 조회구분별 / 코칭 결과 보고서 - 데이터조회

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/04/12  
******************************************************************************/

   -- ########## LOG DB START ########################
    v_work_date     DATE := SYSDATE;
    v_work_date_str TIMESTAMP := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30) := 'SP_QA5030M01_03';
    v_work_result   VARCHAR2(1) := 'F';
    v_work_count    NUMBER := 0;
    v_work_bigo     VARCHAR2(4000) := '';
   -- ########## LOG DB END  ########################
 
 BEGIN
 
-- ********************************************************************************
-- 0.목록조회
-- ********************************************************************************    
    OPEN O_CUR_LIST FOR 
	WITH TOLLTIP1 AS (
		SELECT A.TENANT_ID
				,A.TARGET_MEMB AS AGENT_ID
				,'코칭자 : '||FN_CM_GET_AGENT_NM(A.TENANT_ID, A.COACHING_MEMB)||'('||FN_CM_GET_AGENT_SABUN(A.TENANT_ID, A.COACHING_MEMB)||')'||' ('||TO_CHAR(TO_DATE(A.COACHING_YMD,'yyyymmdd'),'MM-DD')||')' AS TOOLTIP
				,TO_CHAR(TO_DATE(A.COACHING_YMD,'yyyymmdd'),'YYYYMM') AS COLUMN_ID
				,'COACHING' AS TYPE
			FROM TB_QA_COACHING A
		INNER JOIN TB_CM_USER_MASTER B ON (A.TENANT_ID = B.TENANT_ID AND A.TARGET_MEMB = B.AGENT_ID)
		INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID,NULL)) C ON B.DEPT_CD = C.DEPT_CD
		WHERE A.TENANT_ID = I_TENANT_ID
		AND SUBSTR(A.COACHING_YMD,0,6) BETWEEN TO_CHAR(TO_DATE(I_DT_FROM,'yyyymm'),'YYYYMM') AND I_DT_TO
		AND (( I_COACHING_MEMB IS NULL AND 1=1 )
			          OR (I_COACHING_MEMB IS NOT NULL AND INSTR(I_COACHING_MEMB, A.COACHING_MEMB) > 0))
		AND (( I_AGENT_ID IS NULL AND 1=1 )
			OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,B.AGENT_ID) > 0)) 
	
	), TOLLTIP2 AS (
		SELECT A.TENANT_ID
				,A.AGENT_ID
				,B.TIMES_NM||' : '||A.CONVERT_SCORE||' ('||TO_CHAR(TO_DATE(A.VALUE_YMD,'yyyymmdd'),'MM-DD')||')' AS TOOLTIP
				,SUBSTR(A.VALUE_YMD,0,6) AS COLUMN_ID 
				,'TIMES' AS TYPE
		FROM TB_QA_VALUE_RESULT_HEADER A 
		INNER JOIN TB_QA_VALUE_TIMES B ON (A.TENANT_ID = B.TENANT_ID AND A.TIMES_ID = B.TIMES_ID)
		WHERE A.TENANT_ID = I_TENANT_ID
		AND SUBSTR(A.VALUE_YMD,0,6) BETWEEN TO_CHAR(TO_DATE(I_DT_FROM,'yyyymm'),'YYYYMM') AND I_DT_TO
		AND (( I_AGENT_ID IS NULL AND 1=1 )
			OR (I_AGENT_ID IS NOT NULL AND INSTR( I_AGENT_ID,A.AGENT_ID) > 0)) 
		AND EXISTS (SELECT 1 
					FROM TOLLTIP1 S
					WHERE S.TENANT_ID = A.TENANT_ID 
					AND S.AGENT_ID = A.AGENT_ID)
		AND A.REVALUE_SHEETKEY IS NULL
	), TEMP_LIST AS(
		SELECT A.AGENT_ID 
				,A.TOOLTIP
				,A.COLUMN_ID
				,A.TYPE
		FROM TOLLTIP1 A
	
		UNION ALL
	
		SELECT A.AGENT_ID 
				,A.TOOLTIP
				,A.COLUMN_ID
				,A.TYPE
		FROM TOLLTIP2 A
	)
	
	SELECT A.AGENT_ID 
			,LISTAGG(A.TOOLTIP, '\t') within group (order by A.TOOLTIP) TOOLTIP
			,A.COLUMN_ID
			,A.TYPE
	FROM TEMP_LIST A
	GROUP BY A.AGENT_ID, A.COLUMN_ID, A.TYPE

	;
					
EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_AGENT 
( I_TENANT_ID   IN VARCHAR2
 ,I_DEPT_CD     IN VARCHAR2
, I_RETIRE_YN   IN VARCHAR2 
, I_HIDE_YN     IN VARCHAR2
, I_AGENT_INFO  IN VARCHAR2   -- 이름 혹은 사번 
, I_TM_KIND     IN VARCHAR2   --ADD BY YAKIM 업무그룹
, O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_AGENT
   PURPOSE:    유저 조회 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/03 JHMO 
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_GET_AGENT';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  ########################
   
   v_query          VARCHAR2(4000)  := '';
   vs_emp           VARCHAR2(1000)  := '%' || I_AGENT_INFO || '%';

BEGIN

  -- test
  -- SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, I_DEPT_CD);   
  
-- ********************************************************************************
-- 0. 조회
-- ********************************************************************************    
	OPEN O_CUR_LIST FOR 
		SELECT
			C.DEPT_NM
			,C.DEPT_CD
			,FN_CM_GET_DEPT_NM(A.TENANT_ID, 'center', A.DEPT_CD) AS CENTER
			,FN_CM_GET_DEPT_NM(A.TENANT_ID, 'part', A.DEPT_CD)   AS PART
			,FN_CM_GET_DEPT_NM(A.TENANT_ID, 'team', A.DEPT_CD)   AS TEAM
			,FN_CM_GET_DEPT_NM(A.TENANT_ID, 'jo', A.DEPT_CD)     AS JO
			,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_PATH
			,A.SABUN
			,A.AGENT_ID
			,A.AGENT_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'TM_KIND', A.TM_KIND) AS TM_KIND_NM
			,A.TM_KIND
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
			,FN_CM_GET_CODE_NM(A.TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM			
			,A.HIDE_YN
			,A.RETIRE_GUBUN
		FROM TB_CM_USER_MASTER A
		LEFT JOIN TB_CM_USER_DETAIL B ON A.AGENT_ID = B.AGENT_ID
		INNER JOIN table(fn_cm_get_tb_dept(I_TENANT_ID, I_DEPT_CD)) C ON A.DEPT_CD = C.DEPT_CD
		WHERE A.TENANT_ID  =I_TENANT_ID
		  AND (( I_HIDE_YN IS NULL AND A.HIDE_YN = 0 ) OR (I_HIDE_YN IS NOT NULL AND 1=1 ))
		  AND (( I_RETIRE_YN IS NULL  AND NVL(A.JAEJIK_GUBUN, '-') <> '99' ) OR (I_RETIRE_YN IS NOT NULL AND 1=1 ))
		  AND (( I_AGENT_INFO IS NULL AND 1=1 ) OR (I_AGENT_INFO IS NOT NULL AND (INSTR(A.AGENT_NM, I_AGENT_INFO) > 0 OR INSTR(A.SABUN, I_AGENT_INFO) > 0)))
		  AND (( I_TM_KIND IS NULL AND 1=1 ) OR (I_TM_KIND IS NOT NULL AND A.TM_KIND =I_TM_KIND ))
		ORDER BY C.DEPT_CD, A.AGENT_NM
		;


EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_AGENT_JIKCHK
(
    I_TENANT_ID    IN VARCHAR2
   ,I_DEPT_CD      IN VARCHAR2 /* 로그인 사용자의 허용된 DEPT_CD*/
   ,I_AGENT_INFO   IN VARCHAR2   -- 이름 혹은 사번
  , I_AGENT_JIKCHK IN VARCHAR2   -- 직책
  , O_CUR_LIST  OUT SYS_REFCURSOR
) AS
/******************************************************************************
   NAME:       SP_UC_GET_AGENT_JIKCHK
   PURPOSE:    직급별 상담사 선택 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/12/29 YAKIM
    1.1         2017/05/11 YAKIM           권한설정(TB_CM_GRANT_MENU)에 정의된 메뉴별 접근권한에 따라 조직 조회 제한 처리
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_GET_AGENT_JIKCHK';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  ########################

BEGIN

  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************
	OPEN O_CUR_LIST FOR
	SELECT
		C.DEPT_CD
		,C.DEPT_NM
		,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_PATH
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'TM_KIND', A.TM_KIND) AS TM_KIND_NM
		,A.SABUN
		,A.AGENT_ID
		,A.AGENT_NM
		,A.AGENT_JIKCHK
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM
		,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKCHK', A.AGENT_JIKCHK) AS AGENT_JIKCHK_NM
	FROM TB_CM_USER_MASTER A
	INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD))  C ON A.DEPT_CD = C.DEPT_CD AND NVL(A.HIDE_YN,0) = 0
	WHERE A.TENANT_ID = I_TENANT_ID
	  AND NVL(A.HIDE_YN,0) = 0
	  AND NVL(A.JAEJIK_GUBUN,'10') !='99'  --재직자만
	  AND A.AGENT_JIKCHK = CASE WHEN I_AGENT_JIKCHK IS NULL THEN A.AGENT_JIKCHK ELSE I_AGENT_JIKCHK END
	  AND (( I_AGENT_INFO IS NULL AND 1=1 ) OR (I_AGENT_INFO IS NOT NULL AND INSTR(A.AGENT_NM, I_AGENT_INFO) > 0))
	;



EXCEPTION

    WHEN OTHERS
    THEN
    BEGIN

-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);
    END;

END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_AGENT_JIKGUP 
(  
    I_TENANT_ID    IN VARCHAR2
   ,I_DEPT_CD      IN VARCHAR2 /* 로그인 사용자의 허용된 DEPT_CD*/
   ,I_AGENT_INFO   IN VARCHAR2   -- 이름 혹은 사번 
  , I_AGENT_JIKGUP IN VARCHAR2   -- 직급
  , O_CUR_LIST  OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_AGENT_JIKGUP
   PURPOSE:    직급별 상담사 선택 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/12/29 YAKIM 
    1.1         2017/05/11 YAKIM           권한설정(TB_CM_GRANT_MENU)에 정의된 메뉴별 접근권한에 따라 조직 조회 제한 처리      
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_GET_AGENT_JIKGUP';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  ########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
  OPEN O_CUR_LIST FOR 
  SELECT  C.DEPT_CD
         ,C.DEPT_NM
         ,FN_CM_GET_DEPT_INFO(A.TENANT_ID, A.DEPT_CD) AS DEPT_PATH         
         ,A.SABUN
         ,A.AGENT_ID
         ,A.AGENT_NM
         ,A.AGENT_JIKGUP
         ,FN_CM_GET_CODE_NM(I_TENANT_ID,'AGENT_JIKGUP', A.AGENT_JIKGUP) AS AGENT_JIKGUP_NM       
   FROM TB_CM_USER_MASTER A
    INNER JOIN TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, I_DEPT_CD))  C ON A.DEPT_CD = C.DEPT_CD AND NVL(A.HIDE_YN,0) = 0
  WHERE 1=1
     AND A.TENANT_ID = I_TENANT_ID
     AND NVL(A.HIDE_YN,0) = 0 
     AND NVL(A.JAEJIK_GUBUN,'10') !='99'     
     AND A.AGENT_JIKGUP = CASE WHEN I_AGENT_JIKGUP IS NULL THEN A.AGENT_JIKGUP ELSE I_AGENT_JIKGUP END
     AND (( I_AGENT_INFO IS NULL AND 1=1 )
           OR (I_AGENT_INFO IS NOT NULL AND INSTR(A.AGENT_NM, I_AGENT_INFO) > 0))
     ;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;

END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_DEPT 
(
  I_TENANT_ID   IN  VARCHAR2
 ,I_DEPT_CD     IN  VARCHAR2 /* 로그인 사용자의 허용된 DEPT_CD*/
  , O_CUR_LIST  OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_DEPT
   PURPOSE:    조직리스트 조회 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2016/08/02 JHMO 
    1.1         2017/05/11 YAKIM           권한설정(TB_CM_GRANT_MENU)에 정의된 메뉴별 접근권한에 따라 조직 조회 제한 처리  
    1.2         2017/05/23 YAKIM           하위 조직만 허용된 경우 직전 상위만 가져오는 문제 수정
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_GET_DEPT';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER          := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  ########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
  OPEN O_CUR_LIST FOR 
  
  -- 상위조직정보를 포함한 전체 조직 조회 
  WITH TEMP_DEPT AS (
		SELECT LEVEL
		      , A.DEPT_CD
              , A.DEPT_NM
              , A.DEPT_DEPTH
              , LTRIM (SYS_CONNECT_BY_PATH (A.DEPT_CD, '.'), '.') AS DEPT_CD_PATH
              , LTRIM (SYS_CONNECT_BY_PATH (A.SORT, '>'), '.')    AS FULL_SORT
              , A.PARENT_DEPT_CD
              , NVL(A.SORT,0) AS SORT
              ,A.HIDE_YN
		FROM     table(fn_cm_get_tb_dept(I_TENANT_ID, ''))  A
		WHERE 1=1   
		START WITH A.DEPT_DEPTH = 0
		CONNECT BY PRIOR   A.DEPT_CD = A.PARENT_DEPT_CD
		 ORDER BY FULL_SORT
	)
	SELECT 
	       A.DEPT_CD
	      ,A.DEPT_NM
	      ,A.DEPT_DEPTH
	      ,A.PARENT_DEPT_CD
	      ,NVL(A.SORT,0) AS SORT      
	      ,CASE WHEN I_DEPT_CD IS NULL THEN 'Y'
	       ELSE 
	       CASE (SELECT COUNT(*) 
	             FROM (SELECT A.*
						  FROM TEMP_DEPT A
						 WHERE INSTR(I_DEPT_CD,A.DEPT_CD  ) >0 
					) S WHERE INSTR(S.DEPT_CD_PATH, A.DEPT_CD) > 0 ) 
	           WHEN 0 THEN 'N' ELSE 'Y' END 
	       END AS HAS_DEPT_AUTH /* 조건(I_DEPT_CD) 의 상위 조직 정보까지 허용하기 위해  */				
	         -- ADD BY 2016-12-28 상담사 인원수 추가
	         ,( SELECT COUNT(S.AGENT_ID) 
	             FROM TB_CM_USER_MASTER S
	            WHERE  NVL(S.HIDE_YN,0) = 0 
	              AND  NVL(S.RETIRE_GUBUN, '-') <> '99' 
	              AND FN_CM_GET_DEPT_CD( I_TENANT_ID,(CASE A.DEPT_DEPTH WHEN 0 THEN 'center' WHEN 1 THEN 'part' WHEN 2 THEN 'team' WHEN 3 THEN 'jo' END),S.DEPT_CD ) = A.DEPT_CD
	        ) AS AGENT_CNT
			FROM TEMP_DEPT A		
	  		WHERE A.HIDE_YN = 0  	  
			ORDER BY A.DEPT_CD, A.SORT ;  
  /*
 SELECT 
      A.DEPT_CD
      ,A.DEPT_NM
      ,A.DEPT_DEPTH
      ,A.PARENT_DEPT_CD
      ,NVL(A.SORT,0) AS SORT
      
      ,(CASE 
          WHEN B.DEPT_CD IS NOT NULL 
          THEN 'Y' 
          
          -- 하위부서에만 권한이 있을경우 그 윗단 상위부서까지 노출
          WHEN B.DEPT_CD IS NULL AND A.DEPT_CD IN (
                                            SELECT 
                                              AA.PARENT_DEPT_CD
                                            FROM 
                                              table(fn_cm_get_tb_dept(I_TENANT_ID, '')) AA
                                              LEFT OUTER JOIN table(fn_cm_get_tb_dept(I_TENANT_ID, I_DEPT_CD)) BB ON AA.DEPT_CD = BB.DEPT_CD 
                                            WHERE 
                                              NVL(AA.HIDE_YN,0) = 0
                                              AND BB.DEPT_CD IS NOT NULL)
          THEN 'Y' 
          
          ELSE '' END) AS HAS_DEPT_AUTH
         -- ADD BY 2016-12-28 상담사 인원수 추가
         ,( SELECT COUNT(S.AGENT_ID) 
             FROM TB_CM_USER_MASTER S
            WHERE  NVL(S.HIDE_YN,0) = 0 
              AND  NVL(S.RETIRE_GUBUN, '-') <> '99' 
              AND FN_CM_GET_DEPT_CD( I_TENANT_ID,(CASE A.DEPT_DEPTH WHEN 0 THEN 'center' WHEN 1 THEN 'part' WHEN 2 THEN 'team' WHEN 3 THEN 'jo' END),S.DEPT_CD ) = A.DEPT_CD
        ) AS AGENT_CNT
		FROM 
      table(fn_cm_get_tb_dept(I_TENANT_ID, ''))  A
      LEFT OUTER JOIN table(fn_cm_get_tb_dept(I_TENANT_ID, I_DEPT_CD)) B ON (A.TENANT_ID = B.TENANT_ID 
                 AND A.DEPT_CD = B.DEPT_CD )
		WHERE 
      NVL(A.HIDE_YN,0) = 0
		ORDER BY A.DEPT_CD, A.SORT ;  
 */
 
 EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_DEPT_PATH
(
  I_TENANT_ID   IN VARCHAR2
 ,I_DEPT_CD    IN VARCHAR2
 ,O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_DEPT_PATH
   PURPOSE:    조직 PATH

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/12 						상위 조직까지 리턴
   
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)     := 'SP_UC_GET_DEPT_PATH';
    v_work_result   VARCHAR2(1)      := 'F';
    v_work_count    NUMBER          :=  0;
    v_work_bigo     VARCHAR2(4000)   := '';
   -- ########## LOG DB END  ########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
  OPEN O_CUR_LIST FOR 
		WITH TEMP_LIST AS (
		SELECT 
      A.DEPT_CD
      ,A.DEPT_NM
      ,A.DEPT_DEPTH
      ,A.PARENT_DEPT_CD
      ,NVL(A.SORT,0) AS SORT
      
      ,(CASE 
          WHEN B.DEPT_CD IS NOT NULL 
          THEN 'Y' 
          
          -- 하위부서에만 권한이 있을경우 그 윗단 상위부서까지 노출
          WHEN B.DEPT_CD IS NULL AND A.DEPT_CD IN (
                                            SELECT 
                                              AA.PARENT_DEPT_CD
                                            FROM 
                                              table(fn_cm_get_tb_dept(I_TENANT_ID, '')) AA
                                              LEFT OUTER JOIN table(fn_cm_get_tb_dept(I_TENANT_ID, I_DEPT_CD)) BB ON AA.DEPT_CD = BB.DEPT_CD 
                                            WHERE 
                                              NVL(AA.HIDE_YN,0) = 0
                                              AND BB.DEPT_CD IS NOT NULL)
          THEN 'Y' 
          
          ELSE '' END) AS HAS_DEPT_AUTH
         -- ADD BY 2016-12-28 상담사 인원수 추가
         ,( SELECT COUNT(S.AGENT_ID) 
             FROM TB_CM_USER_MASTER S
            WHERE  NVL(S.HIDE_YN,0) = 0 
              AND  NVL(S.RETIRE_GUBUN, '-') <> '99' 
              AND FN_CM_GET_DEPT_CD( I_TENANT_ID,(CASE A.DEPT_DEPTH WHEN 0 THEN 'center' WHEN 1 THEN 'part' WHEN 2 THEN 'team' WHEN 3 THEN 'jo' END),S.DEPT_CD ) = A.DEPT_CD
        ) AS AGENT_CNT
		FROM 
      table(fn_cm_get_tb_dept(I_TENANT_ID, ''))  A
      LEFT OUTER JOIN table(fn_cm_get_tb_dept(I_TENANT_ID, I_DEPT_CD)) B ON (A.TENANT_ID = B.TENANT_ID 
                 AND A.DEPT_CD = B.DEPT_CD )
		WHERE 
      NVL(A.HIDE_YN,0) = 0
		) 
		SELECT A.DEPT_CD
              , LTRIM (SYS_CONNECT_BY_PATH (A.DEPT_CD, ','), ',') AS DEPT_CD_PATH
              , LTRIM (SYS_CONNECT_BY_PATH (A.SORT, '>'), '.')    AS FULL_SORT
              , LTRIM (SYS_CONNECT_BY_PATH (A.DEPT_NM, ','), ',') AS DEPT_NM_PATH
		  FROM TEMP_LIST  A
		WHERE HAS_DEPT_AUTH = 'Y'  
		AND A.DEPT_CD = I_DEPT_CD
		START WITH DEPT_DEPTH = 0
		CONNECT BY PRIOR   A.DEPT_CD = A.PARENT_DEPT_CD
		  ORDER BY FULL_SORT
		;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_DEPT_TREE 
(
  I_TENANT_ID   IN VARCHAR2
 ,I_DEPT_CD    IN VARCHAR2
 ,O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_DEPT_TREE
   PURPOSE:    조직리스트 조회 2 - 트리그리드 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/12 YAKIM 
    1.1         2017/05/11 YAKIM           권한설정(TB_CM_GRANT_MENU)에 정의된 메뉴별 접근권한에 따라 조직 조회 제한 처리      
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)     := 'SP_UC_GET_DEPT_TREE';
    v_work_result   VARCHAR2(1)      := 'F';
    v_work_count    NUMBER          :=  0;
    v_work_bigo     VARCHAR2(4000)   := '';
   -- ########## LOG DB END  ########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
  OPEN O_CUR_LIST FOR 
		WITH TEMP_LIST AS (
		SELECT 
      A.DEPT_CD
      ,A.DEPT_NM
      ,A.DEPT_DEPTH
      ,A.PARENT_DEPT_CD
      ,NVL(A.SORT,0) AS SORT
      
      ,(CASE 
          WHEN B.DEPT_CD IS NOT NULL 
          THEN 'Y' 
          
          -- 하위부서에만 권한이 있을경우 그 윗단 상위부서까지 노출
          WHEN B.DEPT_CD IS NULL AND A.DEPT_CD IN (
                                            SELECT 
                                              AA.PARENT_DEPT_CD
                                            FROM 
                                              table(fn_cm_get_tb_dept(I_TENANT_ID, '')) AA
                                              LEFT OUTER JOIN table(fn_cm_get_tb_dept(I_TENANT_ID, I_DEPT_CD)) BB ON AA.DEPT_CD = BB.DEPT_CD 
                                            WHERE 
                                              NVL(AA.HIDE_YN,0) = 0
                                              AND BB.DEPT_CD IS NOT NULL)
          THEN 'Y' 
          
          ELSE '' END) AS HAS_DEPT_AUTH
         -- ADD BY 2016-12-28 상담사 인원수 추가
         ,( SELECT COUNT(S.AGENT_ID) 
             FROM TB_CM_USER_MASTER S
            WHERE  NVL(S.HIDE_YN,0) = 0 
              AND  NVL(S.RETIRE_GUBUN, '-') <> '99' 
              AND FN_CM_GET_DEPT_CD( I_TENANT_ID,(CASE A.DEPT_DEPTH WHEN 0 THEN 'center' WHEN 1 THEN 'part' WHEN 2 THEN 'team' WHEN 3 THEN 'jo' END),S.DEPT_CD ) = A.DEPT_CD
        ) AS AGENT_CNT
		FROM 
      table(fn_cm_get_tb_dept(I_TENANT_ID, ''))  A
      LEFT OUTER JOIN table(fn_cm_get_tb_dept(I_TENANT_ID, I_DEPT_CD)) B ON (A.TENANT_ID = B.TENANT_ID 
                 AND A.DEPT_CD = B.DEPT_CD )
		WHERE 
      NVL(A.HIDE_YN,0) = 0
		) 
		SELECT LEVEL
		      , A.DEPT_CD
              , A.DEPT_NM
              , LTRIM (SYS_CONNECT_BY_PATH (A.DEPT_CD, '.'), '.') AS DEPT_CD_PATH
              , LTRIM (SYS_CONNECT_BY_PATH (A.SORT, '>'), '.')    AS FULL_SORT
              , A.PARENT_DEPT_CD
              ,AGENT_CNT
		  FROM TEMP_LIST  A
		WHERE HAS_DEPT_AUTH = 'Y'  
		START WITH DEPT_DEPTH = 0
		CONNECT BY PRIOR   A.DEPT_CD = A.PARENT_DEPT_CD
		  ORDER BY FULL_SORT
		;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_DEPT_TREE_02
(
  I_TENANT_ID   IN VARCHAR2
 ,I_GRANT_ID    IN VARCHAR2
 ,I_STD_ID		IN VARCHAR2
 ,O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_DEPT_TREE_02
   PURPOSE:    조직리스트 조회 2 - 트리그리드 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/18  
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)     := 'SP_UC_GET_DEPT_TREE_02';
    v_work_result   VARCHAR2(1)      := 'F';
    v_work_count    NUMBER          :=  0;
    v_work_bigo     VARCHAR2(4000)   := '';
   -- ########## LOG DB END  ########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
  OPEN O_CUR_LIST FOR 
		WITH TEMP_LIST AS (
		 SELECT 
		       A.DEPT_CD
		      ,A.DEPT_NM
		      ,A.DEPT_DEPTH
		      ,A.PARENT_DEPT_CD
		      ,A.TENANT_ID
		      ,NVL(A.SORT,0) AS SORT      
		      ,(CASE 
		      	  WHEN (SELECT COUNT(S.ITEM_ID) 
				      	 FROM TB_CM_ACCESS_SCOPE S
				      	 WHERE S.TENANT_ID = A.TENANT_ID
				      	 AND SCOPE_GUBUN = '10'
				      	 AND SUBSTR(S.ITEM_ID,0,6) = CASE WHEN I_STD_ID IS NULL THEN '' ELSE SUBSTR(I_STD_ID,0,6) END
				      	 AND S.DEPT_CD = A.DEPT_CD) = 1
		      	 THEN 'N'
		      	 ELSE 'Y' END) AS ADD_YN
		      ,(CASE 
		          WHEN B.DEPT_CD IS NOT NULL 
		          THEN 'Y'
		          -- 하위부서에만 권한이 있을경우 그 윗단 상위부서까지 노출
		          WHEN B.DEPT_CD IS NULL AND A.DEPT_CD IN (
		                                            SELECT 
		                                              AA.PARENT_DEPT_CD
		                                            FROM 
		                                              table(FN_CM_GET_TB_DEPT(I_TENANT_ID, '')) AA
		                                              LEFT OUTER JOIN TB_CM_GRANT_SCOPE BB ON AA.DEPT_CD = BB.DEPT_CD AND BB.GRANT_ID = I_GRANT_ID
		                                            WHERE 
		                                              NVL(AA.HIDE_YN,0) = 0
		                                              AND BB.DEPT_CD IS NOT NULL)
		          THEN 'Y'           
		          ELSE '' END) AS HAS_DEPT_AUTH
		         -- ADD BY 2016-12-28 상담사 인원수 추가
		         ,( SELECT COUNT(S.AGENT_ID) 
		             FROM TB_CM_USER_MASTER S
		            WHERE  NVL(S.HIDE_YN,0) = 0 
		              AND  NVL(S.RETIRE_GUBUN, '-') <> '99' 
		              AND FN_CM_GET_DEPT_CD( I_TENANT_ID,(CASE A.DEPT_DEPTH WHEN 0 THEN 'center' WHEN 1 THEN 'part' WHEN 2 THEN 'team' WHEN 3 THEN 'jo' END),S.DEPT_CD ) = A.DEPT_CD
		        ) AS AGENT_CNT

				FROM 
		      TABLE(FN_CM_GET_TB_DEPT(I_TENANT_ID, '')) A
		      LEFT OUTER JOIN TB_CM_GRANT_SCOPE B ON (B.TENANT_ID = I_TENANT_ID 
		                 AND B.GRANT_ID = I_GRANT_ID
		                 AND A.DEPT_CD = B.DEPT_CD )
  		     WHERE NVL(A.HIDE_YN,0) = 0

			  
			  
		) 
		SELECT LEVEL
		      , A.DEPT_CD
              , A.DEPT_NM
              , LTRIM (SYS_CONNECT_BY_PATH (A.DEPT_CD, '.'), '.') AS DEPT_CD_PATH
              , LTRIM (SYS_CONNECT_BY_PATH (A.SORT, '>'), '.')    AS FULL_SORT
              , FN_CM_GET_DEPT_NM(A.TENANT_ID,'center',DEPT_CD) AS CETNER_NM
    		  , FN_CM_GET_DEPT_NM(A.TENANT_ID,'part',DEPT_CD) AS PART_NM
    		  , FN_CM_GET_DEPT_NM(A.TENANT_ID,'team',DEPT_CD) AS TEAM_NM
			  , FN_CM_GET_DEPT_NM(A.TENANT_ID,'jo',DEPT_CD) AS JO_NM
              , A.PARENT_DEPT_CD
              , AGENT_CNT
              , A.ADD_YN
		  FROM TEMP_LIST  A
		START WITH DEPT_DEPTH = 0
		CONNECT BY PRIOR   A.DEPT_CD = A.PARENT_DEPT_CD
		ORDER BY FULL_SORT
		;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_DEPT_TREE_03
(
  I_TENANT_ID   IN VARCHAR2
 ,I_DEPT_CD    IN VARCHAR2
 ,O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_DEPT_TREE_03
   PURPOSE:    조직리스트 조회 2 - 트리그리드 (유저컨트롤)

   REVISIONS:
   Ver             Date             Author                  Description
   ---------  ----------  ---------------  ------------------------------------
    1.0         2017/04/12 						상위 조직까지 리턴
   
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE            := SYSDATE;
    v_work_date_str TIMESTAMP       := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP       := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)     := 'SP_UC_GET_DEPT_TREE3';
    v_work_result   VARCHAR2(1)      := 'F';
    v_work_count    NUMBER          :=  0;
    v_work_bigo     VARCHAR2(4000)   := '';
   -- ########## LOG DB END  ########################
    
BEGIN
   
  -- ********************************************************************************
  -- 1. 결과 리턴
  -- ********************************************************************************      
  
  OPEN O_CUR_LIST FOR 
		WITH TEMP_LIST AS (
		SELECT 
      A.DEPT_CD
      ,A.DEPT_NM
      ,A.DEPT_DEPTH
      ,A.PARENT_DEPT_CD
      ,NVL(A.SORT,0) AS SORT
      
      ,(CASE 
          WHEN B.DEPT_CD IS NOT NULL 
          THEN 'Y' 
          
          -- 하위부서에만 권한이 있을경우 그 윗단 상위부서까지 노출
          WHEN B.DEPT_CD IS NULL AND A.DEPT_CD IN (
                                            SELECT 
                                              AA.PARENT_DEPT_CD
                                            FROM 
                                              table(fn_cm_get_tb_dept(I_TENANT_ID, '')) AA
                                              LEFT OUTER JOIN table(fn_cm_get_tb_dept(I_TENANT_ID, I_DEPT_CD)) BB ON AA.DEPT_CD = BB.DEPT_CD 
                                            WHERE 
                                              NVL(AA.HIDE_YN,0) = 0
                                              AND BB.DEPT_CD IS NOT NULL)
          THEN 'Y' 
          
          ELSE '' END) AS HAS_DEPT_AUTH
         -- ADD BY 2016-12-28 상담사 인원수 추가
         ,( SELECT COUNT(S.AGENT_ID) 
             FROM TB_CM_USER_MASTER S
            WHERE  NVL(S.HIDE_YN,0) = 0 
              AND  NVL(S.RETIRE_GUBUN, '-') <> '99' 
              AND FN_CM_GET_DEPT_CD( I_TENANT_ID,(CASE A.DEPT_DEPTH WHEN 0 THEN 'center' WHEN 1 THEN 'part' WHEN 2 THEN 'team' WHEN 3 THEN 'jo' END),S.DEPT_CD ) = A.DEPT_CD
        ) AS AGENT_CNT
		FROM 
      table(fn_cm_get_tb_dept(I_TENANT_ID, ''))  A
      LEFT OUTER JOIN table(fn_cm_get_tb_dept(I_TENANT_ID, I_DEPT_CD)) B ON (A.TENANT_ID = B.TENANT_ID 
                 AND A.DEPT_CD = B.DEPT_CD )
		WHERE 
      NVL(A.HIDE_YN,0) = 0
		) 
		SELECT A.DEPT_CD
              , LTRIM (SYS_CONNECT_BY_PATH (A.DEPT_CD, ','), '.') AS DEPT_CD_PATH
              , LTRIM (SYS_CONNECT_BY_PATH (A.SORT, '>'), '.')    AS FULL_SORT
              , LTRIM (SYS_CONNECT_BY_PATH (A.DEPT_NM, ','), '.') AS DEPT_NM_PATH
		  FROM TEMP_LIST  A
		WHERE HAS_DEPT_AUTH = 'Y'  
		AND A.DEPT_CD = I_DEPT_CD
		START WITH DEPT_DEPTH = 0
		CONNECT BY PRIOR   A.DEPT_CD = A.PARENT_DEPT_CD
		  ORDER BY FULL_SORT
		;

EXCEPTION

    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
    END;
     
    --DBMS_OUTPUT.put_line('V_RET==> '||vRET);  
END ;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_SET_AGENT_PW
(
    I_TENANT_ID    IN VARCHAR2  
  , I_LOGIN_ID     IN VARCHAR2 
  , I_AGENT_ID     IN VARCHAR2
  , I_AGENT_PW     IN VARCHAR2
) AS 
/******************************************************************************
   NAME:       SP_UC_SET_AGENT_PW
   PURPOSE:    USER PW 수정처리 - 상담사정보관리(비밀번호 변경 팝업) / 메인- 사용자정보변경에서 공통사용

   REVISIONS:
   Ver        Date         Author          Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/18  YAKIM            
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE           := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_SET_AGENT_PW';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   
BEGIN

-- ********************************************************************************
-- 0. USER MASTER 변경이력 생성
-- ******************************************************************************** 
	SP_UC_SET_USER_MASTER_MOD(I_TENANT_ID, I_LOGIN_ID,I_AGENT_ID,'P',I_AGENT_PW );


-- ********************************************************************************
-- 1. AGENT_PW UPDATE
-- ******************************************************************************** 
	UPDATE TB_CM_USER_MASTER 
	   SET AGENT_PW = I_AGENT_PW
	      ,LOGIN_TRY_COUNT = 0
	      ,MODIFY_AGENT_ID = I_LOGIN_ID
	      ,MODIFY_DT       = SYSTIMESTAMP
	 WHERE TENANT_ID = I_TENANT_ID 
	   AND AGENT_ID = I_AGENT_ID ;
 	COMMIT;

-- ********************************************************************************
-- 2. AGENT_PW UPDATE HISTORY INSERT
-- ******************************************************************************** 
	INSERT INTO TB_LOG_PW_HISTORY (
	          AGENT_ID, AGENT_PW, WORK_MEMB, WORK_DT)
	VALUES  (I_AGENT_ID, I_AGENT_PW, I_LOGIN_ID, SYSDATE ) ;
	COMMIT;
	
	
	 		
EXCEPTION
    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
      
        ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001, SQLERRM) ; --service.isOk = false 처리를 위해 Excepion 넘긴다.
        
    END;
    
END;
/

;

CREATE OR REPLACE PROCEDURE SP_UC_GET_AGENT_PW
(
    I_TENANT_ID    IN VARCHAR2  
  , I_LOGIN_ID     IN VARCHAR2 
  , I_AGENT_ID     IN VARCHAR2
  , I_AGENT_PW     IN VARCHAR2
  , I_AGENT_CHG_PW IN VARCHAR2
  , O_CUR_LIST    OUT SYS_REFCURSOR 
) AS 
/******************************************************************************
   NAME:       SP_UC_GET_AGENT_PW
   PURPOSE:    USER PW 체크로직 - 상담사정보관리(비밀번호 변경 팝업) / 메인- 사용자정보변경에서 공통사용

   REVISIONS:
   Ver        Date         Author          Description
   ---------  ----------  ---------------  ------------------------------------
    1.0       2017/05/18  YAKIM            
******************************************************************************/

  -- ########## LOG DB START ########################
    v_work_date     DATE           := SYSDATE;
    v_work_date_str TIMESTAMP      := SYSTIMESTAMP;
    v_work_date_end TIMESTAMP      := SYSTIMESTAMP;
    v_work_id       VARCHAR2(30)    := 'SP_UC_GET_AGENT_PW';
    v_work_result   VARCHAR2(1)     := 'F';
    v_work_count    NUMBER         := 0;
    v_work_bigo     VARCHAR2(4000)  := '';
   -- ########## LOG DB END  #########################
   
   V_RESULT_CD        VARCHAR2(40)  :='SUCCESS';
   V_RESULT_MSG       VARCHAR2(200) :='';   
   V_CHK_CNT          NUMBER(1) :=0 ;   
   
   V_PW_REUSE_YN      NUMBER(1)   :=0 ;
   
BEGIN
-- ********************************************************************************
-- 0. 기존 암호 일치하는지 확인
-- ******************************************************************************** 
    SELECT COUNT(*) INTO V_CHK_CNT
	  FROM TB_CM_USER_MASTER
	 WHERE AGENT_ID = I_AGENT_ID
	   AND AGENT_PW = I_AGENT_PW ;
	   
	IF V_CHK_CNT = 0 THEN
	   V_RESULT_CD :='FAIL' ;
	   V_RESULT_MSG :='기존 비밀번호가 일치하지 않습니다.' ;	
	ELSE 
-- ********************************************************************************
-- 1. 기존 암호 와 변경 암호 동일한지 체크
-- ********************************************************************************	
	   IF I_AGENT_PW = I_AGENT_CHG_PW THEN
	      V_RESULT_CD :='FAIL' ;
	      V_RESULT_MSG :='기존 비밀번호와 변경 비밀번호가 <br>동일합니다.' ;	
	   ELSE
-- ********************************************************************************
-- 3. 환경설정.최근암호 재사용가능 여부에 따라 체크
-- ********************************************************************************	
	     SELECT NVL(		    
					 (SELECT PW_REUSE_YN
					  FROM(
					       SELECT A.PW_REUSE_YN
					            , ROW_NUMBER() OVER(ORDER BY SNO DESC) AS RN
					         FROM TB_CM_ARGOWFM_CONFIG A 
					         WHERE TENANT_ID = I_TENANT_ID
					      )
					 WHERE RN = 1) 
			    ,1) INTO V_PW_REUSE_YN
			FROM DUAL ;		

	      IF V_PW_REUSE_YN = 0 THEN 
	      
		      SELECT COUNT(A.AGENT_PW) INTO V_CHK_CNT
		        FROM (SELECT AGENT_PW
						  FROM(
						       SELECT A.AGENT_PW
						            , ROW_NUMBER() OVER(ORDER BY WORK_DT DESC) AS RN
						         FROM TB_LOG_PW_HISTORY A 
						         WHERE AGENT_ID = I_AGENT_ID
						      )
						 WHERE RN <= 3 
				 ) A
			  WHERE A.AGENT_PW = I_AGENT_CHG_PW ;	
			  
			IF V_CHK_CNT > 0 THEN
			   V_RESULT_CD :='FAIL' ;
			   V_RESULT_MSG :='최근 사용한 암호입니다.' ;				   
	        END IF;
	        
	      END IF;

	   END IF;
	   
	END IF;	  
	
-- ********************************************************************************
-- 4.비밀번호 변경
-- ********************************************************************************  	 
   IF V_RESULT_CD = 'SUCCESS' THEN
      SP_UC_SET_AGENT_PW(I_TENANT_ID, I_LOGIN_ID,I_AGENT_ID,I_AGENT_CHG_PW );
   END IF;
	
-- ********************************************************************************
-- X.결과 리턴
-- ********************************************************************************    
 OPEN O_CUR_LIST FOR 
   SELECT V_RESULT_CD    AS RESULT_CD
        , V_RESULT_MSG   AS RESULT_MSG
    FROM DUAL ;
	
EXCEPTION
    WHEN OTHERS 
    THEN 
    BEGIN
        
-- ********************************************************************************
-- X. LOG INFO SET >> FAIL
-- ********************************************************************************  
        v_work_date_end := SYSTIMESTAMP;
        v_work_result := 'F';
        v_work_bigo := SQLERRM;
        SP_LOG_DB_I_01(v_work_date, v_work_date_str, v_work_date_end, v_work_id,  v_work_result, v_work_count, v_work_bigo);   
        ROLLBACK;
        
    END;
    
END;
/

;
