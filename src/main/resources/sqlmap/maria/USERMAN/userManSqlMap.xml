<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
 "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="userInfo">
	<!-- <typeAlias alias="baseCode" type="com.bt.veloce.management.model.BaseCode"/> -->
	<!-- <typeAlias alias="procInfo" type="com.bt.veloce.system.model.ProcInfo"/> -->
	<typeAlias alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap" />
	
	<select id="userInfo.getTenantCount" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : userInfo.getTenantCount */   
		select count(*) as cnt
			FROM tb_mng_company 
		<isNotEmpty property="findTenantNameText">
			where (tenant_id like CONCAT('%', #findTenantNameText#, '%') or tenant_name like CONCAT('%', #findTenantNameText#, '%'))
		</isNotEmpty>
	</select>		
	
	<select id="userInfo.getTenantOverlapCheck" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : userInfo.getTenantCount */   
		SELECT COUNT(*) AS CNT
		  FROM TB_MNG_COMPANY 
		<isNotEmpty property="findTenantNameText">
		 WHERE TENANT_ID = #findTenantNameText#  
			OR TENANT_NAME = #findTenantNameText#
		</isNotEmpty>
	</select>
	
	<select id="userInfo.getTenantList" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : userInfo.getTenantList */   
		select 
				tenant_id, tenant_name, agent_count, manager_count, expire_reason
				, disk_limit, disk_used, loginip_check, base_path, serial_no
				, DATE_FORMAT(reg_date,    '%Y-%m-%d %H:%i:%s') reg_date
				, DATE_FORMAT(expire_date, '%Y-%m-%d %H:%i:%s') expire_date
			FROM tb_mng_company 
		<dynamic prepend="WHERE">
			1=1
			<!-- <isNotEmpty property="txtDate1_To">  
				<![CDATA[		to_char(to_date(reg_date),'YYYYMMDD') <= to_char(to_date(#txtDate1_To#),'YYYYMMDD')		]]> 
			</isNotEmpty>
			<isNotEmpty property="txtDate1_From"> 
				and <![CDATA[	to_char(to_date(reg_date),'YYYYMMDD') >= to_char(to_date(#txtDate1_From#),'YYYYMMDD') 	]]> 
			</isNotEmpty> -->			
			<isNotEmpty property="findTenantNameText">
				and (tenant_id like CONCAT('%',| #findTenantNameText#, '%') or tenant_name like CONCAT('%', #findTenantNameText#, '%'))
			</isNotEmpty>
			<isNotEmpty property="findDiskLimitFrom"> and <![CDATA[	disk_limit >= #findDiskLimitFrom# 	]]> </isNotEmpty>
			<isNotEmpty property="findDiskLimitTo">   and <![CDATA[	disk_limit <= #findDiskLimitTo#   	]]> </isNotEmpty>			
			<isNotEmpty property="findDiskUsedFrom">  and <![CDATA[	disk_used  >= #findDiskUsedFrom#  	]]> </isNotEmpty>
			<isNotEmpty property="findDiskUsedTo">    and <![CDATA[	disk_used  <= #findDiskUsedTo# 		]]> </isNotEmpty>			
		</dynamic>
	</select>
	
	<update id="userInfo.setTenantExpireCancle" parameterClass="java.util.HashMap">
		/* ID : userInfo.setTenantExpireCancle */
		UPDATE TB_MNG_COMPANY
		   SET EXPIRE_DATE = null
			 , EXPIRE_REASON = null
			 , UPT_ID = #userId#
			 , UPT_DATE = sysdate()
		 WHERE TENANT_ID = #tenantId#
	</update>
	
	<insert id="userInfo.setTenantInfoInsert" parameterClass="java.util.HashMap">
		/* ID : userInfo.setTenantInfoInsert */   
		INSERT INTO tb_mng_company (tenant_id, tenant_name, agent_count, manager_count, base_path, reg_date, ins_id, ins_date)
		VALUES (#tenantId#, #tenantName#, CONVERT(IFNULL(NULLIF(#agentCount#, ''), 0), DECIMAL), CONVERT(IFNULL(NULLIF(#managerCount#, ''), 0), DECIMAL), #basePath#, sysdate(), #userId#, sysdate())
	</insert>
	
	<!-- 2018-10-10 yoonys start
	새로운 테넌트 생성시에 권한에 관련된 내용을 같이 생성해준다.
	전제조건 : 설치시에 bridgetec 테넌트에대한 모든 내용이 들어있어야 함 
	-->
	<insert id="userInfo.setAuthInfoInsert" parameterClass="java.util.HashMap">
	/* ID : userInfo.setAuthInfoInsert */   
	INSERT INTO tb_mng_auth
	(TENANT_ID, GRANT_ID, GRANT_NAME, INS_ID, INS_DATE, UPT_ID, UPT_DATE, OAM_GRANT, AUTH_RANK, EX_GRANT)
	(SELECT NULLIF(#tenantId#, '') TENANT_ID, GRANT_ID, GRANT_NAME, INS_ID, INS_DATE, UPT_ID, UPT_DATE, OAM_GRANT, AUTH_RANK, EX_GRANT 
	FROM tb_mng_auth
	WHERE TENANT_ID='bridgetec')
	</insert>
	
	<insert id="userInfo.setMenuAuthInfoInsert" parameterClass="java.util.HashMap">
	/* ID : userInfo.setMenuAuthInfoInsert */   
	INSERT INTO tb_mng_menuauth
	(TENANT_ID, GRANT_ID, DEPTH1_ID, DEPTH2_ID, DEPTH3_ID, AUTH_KIND, INS_ID, INS_DATE, UPT_ID, UPT_DATE)
	(SELECT NULLIF(#tenantId#, '') TENANT_ID, GRANT_ID, DEPTH1_ID, DEPTH2_ID, DEPTH3_ID, AUTH_KIND, NULLIF(#userId#, ''), SYSDATE(), UPT_ID, UPT_DATE 
	FROM tb_mng_menuauth 
	WHERE TENANT_ID='bridgetec')
	</insert>
	
	<insert id="userInfo.setGroupInfoInsert" parameterClass="java.util.HashMap">
	INSERT INTO tb_mng_group
	(TENANT_ID,GROUP_ID,TOP_PARENT_ID,PARENT_ID,DEPTH,GROUP_NAME,VALUE_TITLE_ID,INS_ID,INS_DATE) 
	VALUES
		(NULLIF(#tenantId#, ''),1,1,0,'A',NULLIF(#tenantName#, ''),0,NULLIF(#userId#, ''),SYSDATE())
	</insert>
	<!-- 
	2018-10-10 yoonys end
 	-->
 	
	<update id="userInfo.setTenantInfoUpdate" parameterClass="java.util.HashMap">
		/* ID : userInfo.setTenantInfoUpdate */   
		
		UPDATE tb_mng_company
		   SET tenant_name = #tenantName#
			 , agent_count = #agentCount#
			 , manager_count = #managerCount#
			 , base_path = #basePath#
			 , upt_id = #userId#
			 , upt_date = sysdate()
		 WHERE tenant_id = #tenantId#
	</update>
			
	<delete id="userInfo.setTenantInfoDelete" parameterClass="java.util.HashMap" >
		/* ID : userInfo.setTenantInfoDelete */   
		UPDATE tb_mng_company
		   SET expire_date = sysdate()
			 , expire_reason = #expireReason#
			 , upt_id = #userId#
			 , upt_date = sysdate()
		 WHERE tenant_id = #tenantId#
	</delete>
			
	<update id="userInfo.initLastLoginDate" parameterClass="java.util.HashMap">
		/* ID : userInfo.initLastLoginDate */
		update tb_mng_userinfo
		   set login_date = null
		 where tenant_id = #tenantId#
		   and user_id = #findUserId#
	</update>		
	
	<select id="userInfo.getUserInfoCount" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : userInfo.getUserInfoCount */   
		select count(*) as cnt
			FROM tb_mng_userinfo tb_user 
				join tb_mng_group tb_group
					on tb_user.tenant_id = tb_group.tenant_id
					and tb_user.group_id = tb_group.group_id
				join tb_mng_auth tb_auth
					on tb_user.tenant_id = tb_auth.tenant_id
					and tb_user.grant_id = tb_auth.grant_id
		where tb_user.tenant_id = #findTenantId#
		and tb_auth.auth_rank <![CDATA[ >= ]]> #authRank#
			<isNotEmpty property="controlAuth">
			   and tb_user.group_id in (
				with recursive re_cate AS (
					select 1 level
						 , row_number() over(order by group_id) as top_order
						 , group_id
						 , parent_id
						 , group_name
						 , group_id as id_path
					  from tb_mng_group
					 where tenant_id = #findTenantId#
					   and group_id in (
						select g.group_id
						  from tb_mng_group g
						 inner join tb_mng_userinfo u
							on g.tenant_id = u.tenant_id
						   and instr(concat(',', control_auth, ','), concat(',', g.group_id, ',')) > 0
						   and u.user_id = #userId#
						   and u.tenant_id = #findTenantId#
					   )
					 union all
					select c.level + 1
						 , c.top_order AS top_order
						 , b.group_id
						 , b.parent_id
						 , b.group_name
						 , concat(c.id_path, '>', b.group_id)
					  from tb_mng_group b
					 inner join re_cate c
						on b.tenant_id = #findTenantId#
					   and c.group_id = b.parent_id
				)
				select group_id
				  from re_cate
				 order by top_order, id_path
			   )
			</isNotEmpty>
			<isEmpty property="controlAuth">
				<isEqual property="grantId" compareValue="Agent">
			   AND tb_user.USER_ID = #userId#
				</isEqual>
				<isEqual property="grantId" compareValue="GroupManager">
			   and tb_user.group_id in (
				with recursive re_cate AS (
					select 1 level
						 , row_number() over(order by group_id) as top_order
						 , group_id
						 , parent_id
						 , group_name
						 , group_id as id_path
					  from tb_mng_group
					 where tenant_id = #findTenantId#
					   and group_id = ( select group_id from tb_mng_userinfo where user_id = #userId# and tenant_id = #findTenantId# )
					 union all
					select c.level + 1
						 , c.top_order AS top_order
						 , b.group_id
						 , b.parent_id
						 , b.group_name
						 , concat(c.id_path, '>', b.group_id)
					  from tb_mng_group b
					 inner join re_cate c
						on b.tenant_id = #findTenantId#
					   and c.group_id = b.parent_id
				)
				select group_id
				  from re_cate
				 order by top_order, id_path
			   )
				</isEqual>
			</isEmpty>
			<isNotEmpty property="findGroupId">	
				and	tb_user.group_id = #findGroupId#
			</isNotEmpty>
			<isNotEmpty property="findUserNameText">
				and (tb_user.user_id like CONCAT('%', #findUserNameText#, '%') or user_name like CONCAT('%', #findUserNameText#, '%'))
			</isNotEmpty>
			<isNotEmpty property="findGrantId">	
				and tb_user.grant_id = #findGrantId#		
			</isNotEmpty>
			<isNotEmpty property="SSAUTHRANK">	
				and (tb_auth.auth_rank  >= #SSAUTHRANK# OR (tb_auth.auth_rank  = #SSAUTHRANK#  AND tb_user.user_id =#SSUSERID#))	
			</isNotEmpty>
			<isNotEmpty property="findAgentStatus">	
				and	IFNULL(NULLIF(agent_status, ''), '99') = #findAgentStatus#			
			</isNotEmpty>
			<isNotEmpty property="findLoginCheck">
				<isEqual property="findLoginCheck" compareValue="1"> and (session_id is not null and session_id != '')	</isEqual>
				<isEqual property="findLoginCheck" compareValue="2"> and (session_id is null or session_id = '')		</isEqual>
			</isNotEmpty>
			<isNotEmpty property="findRetireeFlag"> 
				and IFNULL(NULLIF(retiree_flag, ''), 1) = #findRetireeFlag#		
			</isNotEmpty>
	</select>	
	
	<select id="userInfo.getUserInfoList" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : userInfo.getUserInfoList */ 
		select *		
			from(															
				select
						Row_Number() over (order by tenant_id desc, user_id desc) RowNum2, TB_IN.* 
					from (
						select 
								Row_Number() over (order by tb_user.tenant_id, tb_user.user_id) RowNum1
								, tb_user.tenant_id, tb_user.user_id, tb_user.group_id, tb_user.grant_id, grant_name, user_name, user_pwd
								, IFNULL(NULLIF(login_flag, ''), 0) login_flag, login_ip, DATE_FORMAT(login_date, '%Y-%m-%d %H:%i:%s') login_date
								, DATE_FORMAT(logout_date, '%Y-%m-%d %H:%i:%s') logout_date, session_id, main_page
								, IFNULL(NULLIF(agent_status, ''), '99') agent_status, IFNULL(NULLIF(access_flag, ''), 1) access_flag, forced_logout, tb_user.ins_id
								, DATE_FORMAT(tb_user.ins_date, '%Y-%m-%d %H:%i:%s') ins_date, tb_user.upt_id
								, DATE_FORMAT(tb_user.upt_date, '%Y-%m-%d %H:%i:%s') upt_date
								, group_name, control_auth, convert_flag, BACKUP_FLAG, salt, retiree_flag
								, login_date_check_use, login_date_check_from, login_date_check_to
								, IFNULL(NULLIF(login_err_count, ''), 0) login_err_count, player_kind, REAL_PLAY_KIND
							FROM tb_mng_userinfo tb_user 
								join tb_mng_group tb_group
									on tb_user.tenant_id = tb_group.tenant_id 
									and tb_user.group_id = tb_group.group_id
								join tb_mng_auth tb_auth
									on tb_user.tenant_id = tb_auth.tenant_id 
									and tb_user.grant_id = tb_auth.grant_id
						where tb_user.tenant_id  = #findTenantId#
						and tb_auth.auth_rank <![CDATA[ >= ]]> #authRank#
							<isNotEmpty property="controlAuth">
							   and tb_user.group_id in (
								with recursive re_cate AS (
									select 1 level
										 , row_number() over(order by group_id) as top_order
										 , group_id
										 , parent_id
										 , group_name
										 , group_id as id_path
									  from tb_mng_group
									 where tenant_id = #findTenantId#
									   and group_id in (
										select g.group_id
										  from tb_mng_group g
										 inner join tb_mng_userinfo u
											on g.tenant_id = u.tenant_id
										   and instr(concat(',', control_auth, ','), concat(',', g.group_id, ',')) > 0
										   and u.user_id = #userId#
										   and u.tenant_id = #findTenantId#
									   )
									 union all
									select c.level + 1
										 , c.top_order AS top_order
										 , b.group_id
										 , b.parent_id
										 , b.group_name
										 , concat(c.id_path, '>', b.group_id)
									  from tb_mng_group b
									 inner join re_cate c
										on b.tenant_id = #findTenantId#
									   and c.group_id = b.parent_id
								)
								select group_id
								  from re_cate
								 order by top_order, id_path
							   )
							</isNotEmpty>
							<isEmpty property="controlAuth">
								<isEqual property="grantId" compareValue="Agent">
							   AND tb_user.USER_ID = #userId#
								</isEqual>
								<isEqual property="grantId" compareValue="GroupManager">
							   and tb_user.group_id in (
								with recursive re_cate AS (
									select 1 level
										 , row_number() over(order by group_id) as top_order
										 , group_id
										 , parent_id
										 , group_name
										 , group_id as id_path
									  from tb_mng_group
									 where tenant_id = #findTenantId#
									   and group_id = ( select group_id from tb_mng_userinfo where user_id = #userId# and tenant_id = #findTenantId# )
									 union all
									select c.level + 1
										 , c.top_order AS top_order
										 , b.group_id
										 , b.parent_id
										 , b.group_name
										 , concat(c.id_path, '>', b.group_id)
									  from tb_mng_group b
									 inner join re_cate c
										on b.tenant_id = #findTenantId#
									   and c.group_id = b.parent_id
								)
								select group_id
								  from re_cate
								 order by top_order, id_path
							   )
								</isEqual>
							</isEmpty>
							<isNotEmpty property="findGroupId">	
								and	tb_user.group_id = #findGroupId#	
							</isNotEmpty>
							<isNotEmpty property="findUserNameText">
								and (tb_user.user_id like CONCAT('%', #findUserNameText#, '%') or user_name like CONCAT('%', #findUserNameText#, '%'))
							</isNotEmpty>
							<isNotEmpty property="findGrantId">	
								and tb_user.grant_id = #findGrantId#		
							</isNotEmpty>
							<isNotEmpty property="SSAUTHRANK">	
								and (tb_auth.auth_rank >= #SSAUTHRANK# OR (tb_auth.auth_rank = #SSAUTHRANK#  AND tb_user.user_id = #SSUSERID#))	
							</isNotEmpty>
							<isNotEmpty property="findAgentStatus">	
								and	IFNULL(NULLIF(agent_status, ''), '99') = #findAgentStatus#			
							</isNotEmpty>
							<isNotEmpty property="findLoginCheck">
								<isEqual property="findLoginCheck" compareValue="1"> and (session_id is not null and session_id != '')	</isEqual>
								<isEqual property="findLoginCheck" compareValue="2"> and (session_id is null or session_id = '')		</isEqual>
							</isNotEmpty>
							<isNotEmpty property="findRetireeFlag"> 
								and IFNULL(NULLIF(retiree_flag, ''), 1) = #findRetireeFlag#		
							</isNotEmpty>
						) TB_IN
				WHERE <![CDATA[ RowNum1 <= #iEPageNo# ]]> 
			) TB_OUT 
		WHERE <![CDATA[ RowNum2 <= #iSPageNo# ]]>
		order by tenant_id, user_id
	</select>
	
	<select id="userInfo.getUserIdCount" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : userInfo.getUserIdCount */   
		select count(*) as cnt
			FROM tb_mng_userinfo tb_user 
		where tb_user.tenant_id  = #findTenantId#
			<isNotEmpty property="findUserId"> and tb_user.user_id = #findUserId#	</isNotEmpty>
	</select>	
	
	<select id="userInfo.checkPastUserPwd" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : userInfo.userInfo.checkPastUserPwd */
		SELECT CASE WHEN user_pwd = #findUserPwd# THEN 'Y' ELSE 'N' END AS past_pwd_use_yn
		  FROM tb_mng_userinfo
		 WHERE tenant_id = #findTenantId#
		   AND user_id = #findUserId#
	</select>		
	
	<!-- <select id="userInfo.getGroupBaseList" parameterClass="java.util.HashMap" resultClass="egovMap">
		select tenant_id  , group_id as code , isnull(top_parent_id,0) top_parent_id, parent_id
						, depth , group_name as code_nm, value_title_id
						, group_mng_id, (select count(*)  cnt
		from tb_mng_group b
		where b.tenant_id  = #tenantId#
							and b.top_parent_id = a.top_parent_id 
							and b.depth Like a.depth + '%'
							and len(b.depth) = len(a.depth)+1 
							) sub_depth_cnt
		FROM tb_mng_group a
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="tenantId">	a.tenant_id  = #tenantId#	</isNotEmpty>
			<isNotEmpty prepend="AND" property="findText">
				<isEqual property="findKey" compareValue="a.group_id">	a.group_id Like '%'+ #findText# +'%'	</isEqual>
				<isEqual property="findKey" compareValue="a.group_name">a.group_name Like '%'+ #findText# +'%'	</isEqual>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="findDepth">	a.depth  like #findDepth#	</isNotEmpty>
			<isNotEmpty prepend="AND" property="findTreeText">	a.group_id in
				<iterate property="findTreeText" open="(" conjunction="," close=")"> 	#findTreeText[]# 		</iterate>
			</isNotEmpty>
		</dynamic>
		order by top_parent_id asc, depth asc
	</select> -->
	
	<!-- <select id="userInfo.getAuthList" parameterClass="java.util.HashMap" resultClass="egovMap">
		select tenant_id  , grant_id as code , grant_name as code_nm
		FROM tb_mng_auth
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="tenantId">		tenant_id = #tenantId#			</isNotEmpty>
			<isNotEmpty prepend="AND" property="SSAUTHRANK">	auth_rank  >= #SSAUTHRANK#		</isNotEmpty>
			<isNotEmpty prepend="AND" property="findExGrant">	ex_grant  = #findExGrant#		</isNotEmpty>
		</dynamic>
		order by tenant_id asc, AUTH_RANK desc, GRANT_ID asc
	</select> -->
	
	<!-- <select id="userInfo.getMainPageList" parameterClass="java.util.HashMap" resultClass="egovMap">
		select depth1_id+depth2_id+depth3_id as code, menu_name as code_nm
		FROM tb_mng_menu 
		order by depth1_id+depth2_id+depth3_id
			
	</select> -->
	
	<update id="userInfo.pwdUpdate" parameterClass="java.util.HashMap" >
   		/* ID : userInfo.pwdUpdate */
     	update tb_mng_userinfo
     	   set user_pwd          = case when IFNULL(NULLIF(#userPwd#, ''), '') = '' then user_pwd else #userPwd# end
			 , salt              = case when IFNULL(NULLIF(#userPwd#, ''), '') = '' then salt else #salt# end
			 , upt_date          = SYSDATE()
			 , user_pwd_upt_date = case when IFNULL(NULLIF(#userPwd#, ''), '') = '' then user_pwd_upt_date else DATE_FORMAT(SYSDATE(),'Y%m%d') end
			 , login_err_count   = 0
		 where tenant_id         = #tenantId#
		   and user_id           = #userId#
	</update>
   	
	<!-- <select id="userInfo.getUserInfoBaseList" parameterClass="java.util.HashMap" resultClass="egovMap">
		select a.tenant_id, a.user_id as code, a.group_id, a.grant_id, a.user_name as code_nm
		FROM tb_mng_userInfo a 
		join tb_mng_group b	on a.tenant_id = b.tenant_id and a.group_id = b.group_id
		join tb_mng_auth c	on a.tenant_id = c.tenant_id and a.grant_id = c.grant_id
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="tenantId">		a.tenant_id  = #tenantId#		</isNotEmpty>
			<isNotEmpty prepend="AND" property="findGroupId">	a.group_id  = #findGroupId#		</isNotEmpty>
			<isNotNull property="findGrantIdList">
				<iterate prepend="AND a.grant_id IN" property="findGrantIdList" open="(" close=")" conjunction=","> 
					#findGrantIdList[]# 
				</iterate>
			</isNotNull>
			<isNotEmpty prepend="AND" property="findGrantId">	a.grant_id  = #findGrantId#		</isNotEmpty>
			<isNotEmpty prepend="AND" property="SSAUTHRANK">	c.auth_rank  >= #SSAUTHRANK#	</isNotEmpty>
			<isNotEmpty prepend="AND" property="findTreeText"> 	b.group_id in
				<iterate property="findTreeText" open="(" conjunction="," close=")"> 	#findTreeText[]# 		</iterate>
	 		</isNotEmpty>
		</dynamic>
		order by tenant_id, user_id
	</select> -->
	
	<insert id="userInfo.setUserInfoInsert" parameterClass="java.util.HashMap">
		/* ID : userInfo.setUserInfoInsert */
		insert into tb_mng_userinfo
			(
			tenant_id, user_id, group_id, grant_id, user_name
			, user_pwd, access_flag, control_auth, convert_flag, backup_flag
			, salt, retiree_flag, ins_id, ins_date, main_page
			, login_date_check_use, login_date_check_from, login_date_check_to, player_kind, REAL_PLAY_KIND
			) 
		values 
			(
			NULLIF(#tenantId#, ''), TRIM(NULLIF(#userId#, '')), NULLIF(#groupId#, ''), NULLIF(#grantId#, ''), TRIM(NULLIF(#userName#, ''))
			, NULLIF(#userPwd#, ''), NULLIF(#accessFlag#, ''), NULLIF(#controlAuth#, ''), NULLIF(#convertFlag#, ''), NULLIF(#backupFlag#, '')
			, NULLIF(#salt#, ''), NULLIF(#retireeFlag#, ''), NULLIF(#insId#, ''), SYSDATE(), NULLIF(#mainPage#, '')
			, NULLIF(#loginCheckUse#, ''), NULLIF(#loginCheckFrom#, ''), NULLIF(#loginCheckTo#, ''), NULLIF(#playerKind#, ''), NULLIF(#realPlayKind#, '')
			)
	</insert>
	
	<update id="userInfo.setUserInfoUpdate" parameterClass="java.util.HashMap">
		/* ID : userInfo.setUserInfoUpdate */
		update tb_mng_userinfo
		   set group_id              = NULLIF(#groupId#, '')
			 , grant_id              = NULLIF(#grantId#, '')
			 , user_name             = TRIM(NULLIF(#userName#, ''))
			<isNotEmpty property="userPwd">
			 , user_pwd              = NULLIF(#userPwd#, '')
			 , salt                  = NULLIF(#salt#, '')
			</isNotEmpty>
			 , access_flag           = NULLIF(#accessFlag#, '')
			 , control_auth          = NULLIF(#controlAuth#, '')
			 , convert_flag          = NULLIF(#convertFlag#, '')
			 , BACKUP_FLAG           = NULLIF(#backupFlag#, '')
			 , retiree_flag          = NULLIF(#retireeFlag#, '')
			 , upt_id                = NULLIF(#insId#, '')
			 , upt_date              = SYSDATE()
			 , main_page             = NULLIF(#mainPage#, '')
			 , agent_status          = case when NULLIF(#agentStatus#, '') is null then agent_status else #agentStatus# end
			 , login_date_check_use  = NULLIF(#loginCheckUse#, '')
			 , login_date_check_from = NULLIF(#loginCheckFrom#, '')
			 , login_date_check_to   = NULLIF(#loginCheckTo#, '')
			<isNotEmpty property="userPwd">
			 , login_err_count       = 0
			 , user_pwd_upt_date     = DATE_FORMAT(SYSDATE(),'%Y%m%d')
			</isNotEmpty>
			 , player_kind           = NULLIF(#playerKind#, '')
			 , REAL_PLAY_KIND           = NULLIF(#realPlayKind#, '')
		 where tenant_id             = #tenantId#
		   and user_id               = #userId#
	</update>
	
	<delete id="userInfo.setUserInfoDelete" parameterClass="java.util.HashMap" >
		/* ID : userInfo.setUserInfoDelete */
		delete from tb_mng_userinfo
		where tenant_id = #tenantId#
			and user_id = #userId#
	</delete>
	<update id="userInfo.setSessionUpdate" parameterClass="java.util.HashMap">
		/* ID : userInfo.setSessionUpdate */
		update tb_mng_userinfo
		   set login_flag      = NULLIF(#loginFlag#, '')
			 , login_ip	       = NULLIF(#loginIp#, '')
			 , login_date      = SYSDATE()
			 , session_id      = NULLIF(#sessionId#, '')
			 , login_err_count = 0
		 where tenant_id       = #tenantId#
		   and user_id         = #userId#
	</update>
	
	<update id="userInfo.setSessionOutUpdate" parameterClass="java.util.HashMap">
		/* ID : userInfo.setSessionOutUpdate */
		update tb_mng_userinfo
		   set login_flag  = null
			 , logout_date = SYSDATE()
			 , session_id  = null
		 where tenant_id   = #tenantId#
		   and user_id     = #userId#
	</update>
	
	<update id="userInfo.setForcedLogoutUpdate" parameterClass="java.util.HashMap">
		/* ID : userInfo.setForcedLogoutUpdate */
		update tb_mng_userinfo
		   set forced_logout = NULLIF(#forcedLogout#, '')
			 , session_id    = null
			 , login_flag    = null
			 , logout_date   = SYSDATE()
		 where tenant_id     = #tenantId#
		   and user_id       = #userId#
	</update>
	
	<!-- <update id="userInfo.setLoginError" parameterClass="java.util.HashMap">
		update tb_mng_userInfo 
		set 
			login_err_count = case #loginErrCount# when 0 then 0 else isnull(login_err_count,0)+1 end
		where tenant_id = #tenantId#
			and user_id = #userId#
	</update> -->
	
	<!-- <update id="userInfo.setUserPwdUpdate" parameterClass="java.util.HashMap">
		update tb_mng_userInfo
		set user_pwd	= #userPwd# 
		     , salt	= #salt#
		     , user_pwd_upt_date = CONVERT( VARCHAR, getDate(), 112 )
		     , upt_id = #uptId#
		     , upt_date = getDate()
		where tenant_id = #tenantId#
			and user_id = #userId#
	</update> -->
	
	<!-- <update id="setUserPwdDateNextTime" parameterClass="java.util.HashMap">
		update tb_mng_userInfo
		set user_pwd_upt_date	= CONVERT(VARCHAR , CONVERT(DATETIME, dateadd(month,-3,getdate()))  + convert(int, #nextTime#), 112)
		where tenant_id = #tenantId#
			and user_id = #userId#
	</update> -->
	
	<update id="userInfo.setLoginFail" parameterClass="java.util.HashMap">
		/* ID : userInfo.setLoginFail */
		update tb_mng_userinfo
		   set login_err_count = IFNULL(NULLIF(login_err_count, 0), 0)+1
		 where tenant_id       = #tenantId#
		   and user_id         = #userId#
	</update>
	
	<update id="userInfo.initLoginErrorCount" parameterClass="java.util.HashMap">
		/* ID : userInfo.initLoginErrorCount */
		update tb_mng_userinfo
		   set login_err_count = 0
		 where tenant_id       = #tenantId#
		   and user_id         = #userId#
	</update>
	
	<select id="userInfo.checkAuthUserPwd" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : userInfo.checkAuthUserPwd */
		SELECT CASE WHEN COUNT(1)= 2 THEN 'Y' ELSE 'N' END AS AUTH_AT
		  FROM (
			SELECT * FROM TB_MNG_USERINFO A
			 WHERE A.USER_ID = #findUserId1#
			   AND A.TENANT_ID = #findTenantId#
			   AND A.USER_PWD =  #findUserPwd1#
			 UNION
			SELECT * FROM TB_MNG_USERINFO B
			 WHERE B.USER_ID = #findUserId2#
			   AND B.TENANT_ID = #findTenantId#
			   AND USER_PWD = #findUserPwd2#
		  )org
	</select>
	
	<select id="userInfo.getUserSaltValue" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : userInfo.getUserSaltValue */
		SELECT A.USER_ID , A.SALT, A.GROUP_ID, B.GROUP_NAME
		  FROM TB_MNG_USERINFO A
		  LEFT OUTER JOIN TB_MNG_GROUP B
			ON A.GROUP_ID = B.GROUP_ID
		   AND A.TENANT_ID = #findTenantId#
		 WHERE USER_ID IN ( #findUserId1#, #findUserId2# )
		   AND B.TENANT_ID = #findTenantId#
	</select>
	
</sqlMap>