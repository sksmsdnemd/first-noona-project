<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
        "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="recSearch">
    <typeAlias alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>

        <select id="recSearch.getControlList" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getControlList */
        select g.group_id
        from tb_mng_group g,
             (
                 select depth
                 from tb_mng_group g,
                      tb_mng_userinfo u
                 where g.tenant_id = u.tenant_id
                   and instr(',' || control_auth || ',', ',' || g.depth || ',') > 0
                   and u.user_id = #userId#
                   and u.tenant_id = #findTenantId#
             ) c
        where g.depth LIKE c.depth || '%'
          and tenant_id = #findTenantId#
    </select>

    <select id="recSearch.getRecSearchFiledList" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecSearchFiledList */
        select substr(col_id, length(col_id), 1) field_Id, col_text field_Name
        from TB_MNG_COL_TITLE
        where tenant_id = #findTenantId#
        and table_id = 'tb_rec_file'
    </select>

    <select id="recSearch.getRecSearchReasonList" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecSearchReasonList */
        SELECT code_id field_Id, CONCAT(code_id, CONCAT('_', code_name)) field_Name
        from TB_MNG_BASECODE
        WHERE CLASS_NAME = '조회사유코드'
        ORDER BY FIELD_ID
    </select>


    <select id="recSearch.getRecSearchListCnt" parameterClass="java.util.HashMap" resultClass="egovMap">
        <!-- (2023.08.17) TB_REC_FILE 테이블 쪼개기 작업 (HAGUANGHO) -->
        /* ID : recSearch.getRecSearchListCnt */
		
        SELECT
          	count(1) as CNT
		FROM (
			SELECT
				  f.*
				, CASE  WHEN gl.DOWNLOAD_FLAG = 'L' THEN 'Y'
						WHEN f.TENANT_ID = #tenantId# AND f.USER_ID = #userId# THEN 'Y'
						WHEN 'SuperAdmin' = #grantId# OR 'SystemAdmin' = #grantId# OR 'Manager' = #grantId# THEN 'Y'
						WHEN 'GroupManager' = #grantId# AND f.TENANT_ID = #tenantId# AND INSTR(#controlAuth#, f.GROUP_ID) > 0 THEN 'Y' 
						ELSE 'N'
				  END AS LISTENING_YN
				, CASE WHEN gd.DOWNLOAD_FLAG = 'D' THEN 'Y' ELSE 'N' END AS DOWNLOAD_YN
			FROM <include refid="TB_REC_FILE_MULTI" /> f
				LEFT OUTER JOIN TB_REC_GRANT gl ON gl.REC_KEY = f.REC_KEY AND gl.DOWNLOAD_FLAG = 'L' AND gl.TENANT_ID = #tenantId# AND gl.USER_ID = #userId#
					AND gl.START_DATE <![CDATA[<=]]> TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')  AND gl.END_DATE <![CDATA[>=]]>  TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')
				LEFT OUTER JOIN TB_REC_GRANT gd ON gd.REC_KEY = f.REC_KEY AND gd.DOWNLOAD_FLAG = 'D' AND gd.TENANT_ID = #tenantId# AND gd.USER_ID = #userId#
					AND gd.START_DATE <![CDATA[<=]]> TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')  AND gd.END_DATE <![CDATA[>=]]>  TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')
			WHERE 1=1
		) tt1
		<isNotEmpty property="findUserNameText">
		  LEFT OUTER JOIN TB_MNG_USERINFO tt2
			  ON tt1.TENANT_ID = tt2.TENANT_ID
		   AND tt1.USER_ID = tt2.USER_ID
		</isNotEmpty>
		  LEFT OUTER JOIN (
				 SELECT DN.* , UTG.START_DN , UTG.END_DN , UTG.GUBUN_ID, UTG.GUBUN_NAME
				   FROM TB_MNG_USERTELNO DN
				   JOIN TB_MNG_USERTELNO_GUBUN UTG
					 ON TO_NUMBER(utg.START_DN) <![CDATA[ <= ]]> TO_NUMBER(DN.DN_NO)
					AND TO_NUMBER(utg.END_DN) <![CDATA[ >= ]]> TO_NUMBER(DN.DN_NO)
					) D
		  ON D.DN_NO = TT1.DN_NO
		WHERE 1 = 1
		<isEqual prepend="AND" property="listeningYn" compareValue="Y">
			tt1.LISTENING_YN = 'Y'
		</isEqual>
		<isEqual prepend="AND" property="downloadYn" compareValue="Y">
			tt1.DOWNLOAD_YN = 'Y'
		</isEqual>

		<isNotEmpty property="findTenantId">
		   AND tt1.TENANT_ID = #findTenantId#
		</isNotEmpty>
		<isNotEmpty property="findSearchVisible">
		   AND tt1.SEARCH_VISIBLE = #findSearchVisible#
		</isNotEmpty>
		 <isEqual property="findTS" compareValue="1"><![CDATA[
		   AND tt1.REC_TIME >= #txtDate1_From# || #recFrmTm# AND tt1.REC_TIME <= #txtDate1_To# || #recEndTm#
		]]></isEqual>
		<isNotEqual property="findTS" compareValue="1"><![CDATA[
		   AND SUBSTR(tt1.REC_TIME, 1, 8) >= #txtDate1_From#
		   AND SUBSTR(tt1.REC_TIME, 1, 8) <= #txtDate1_To#
		   AND SUBSTR(tt1.REC_TIME, 9, 6) >= #recFrmTm#
		   AND SUBSTR(tt1.REC_TIME, 9, 6) <= #recEndTm#
		]]></isNotEqual>
		<isNotEmpty property="findUserId">
		   AND tt1.USER_ID = #findUserId#
		</isNotEmpty>
		<isNotEmpty property="findUserNameText">
		   AND (tt1.USER_ID LIKE '%' || #findUserNameText# || '%' OR tt2.USER_NAME LIKE '%' || #findUserNameText# || '%')
		</isNotEmpty>
		<isNotEmpty property="findGroupId">
		   AND tt1.GROUP_ID IN (
				SELECT GROUP_ID
				  FROM TB_MNG_GROUP
				 START WITH (TENANT_ID = #findTenantId# AND GROUP_ID = #findGroupId#)
				CONNECT BY PARENT_ID = PRIOR GROUP_ID
				   AND TENANT_ID = #findTenantId#
		   )
		</isNotEmpty>
		<isNotEmpty property="findDnText">
		   AND tt1.DN_NO LIKE '%' || #findDnText# || '%'
		</isNotEmpty>
		<isNotEmpty property="findCustNameText">
		   AND tt1.CUST_NAME LIKE '%' || #findCustNameText# || '%'
		</isNotEmpty>
		<isNotEmpty property="findCustTelText">
		   AND (tt1.CUST_TEL LIKE '%' || #findCustTelText# || '%' OR tt1.CUST_TEL LIKE '%' || #findCustTelEnc# || '%')
		</isNotEmpty>
		<isNotEmpty property="findCustNoText">
		   AND (tt1.CUST_NO LIKE '%' || #findCustNoText# || '%' OR tt1.CUST_NO LIKE '%' || #findCustNoEnc# || '%')
		</isNotEmpty>
		<isNotEmpty property="findCallKind">
		   AND tt1.CALL_KIND LIKE '%' || #findCallKind# || '%'
		</isNotEmpty>
		<isNotEmpty property="findMarkKind">
		   AND tt1.CUST_ETC9 = #findMarkKind#
		</isNotEmpty>
		<isNotEmpty property="findCallIdText">
		   <!-- AND tt1.CALL_ID BETWEEN #findCallIdText# AND #findCallIdText# || 'ZZ' -->
		   AND tt1.CALL_ID LIKE '%' || #findCallIdText# || '%'
		</isNotEmpty>
		<isNotEmpty property="findTranTelText">
		   AND tt1.TRAN_TEL = #findTranTelText#
		</isNotEmpty>
		<isNotEqual property="callFrmTm" compareValue="000000"><![CDATA[
		   AND tt1.END_TIME >= SUBSTR(#callFrmTm#, 1, 2) * 3600 + SUBSTR(#callFrmTm#, 3, 2) * 60 + SUBSTR(#callFrmTm#, 5, 2)
		]]></isNotEqual>
		<isNotEqual property="callEndTm" compareValue="000000"><![CDATA[
		   AND tt1.END_TIME <= SUBSTR(#callEndTm#, 1, 2) * 3600 + SUBSTR(#callEndTm#, 3, 2) * 60 + SUBSTR(#callEndTm#, 5, 2)
		]]></isNotEqual>
		<isNotEmpty property="findDnGubunText">
		   AND D.GUBUN_ID = #findDnGubunText#
		</isNotEmpty>
		<isNotEmpty property="findField">
			<isNotEmpty property="findFieldText">
			   AND
				<isEqual property="findField" compareValue="custEtc2">tt1.CUST_ETC2 like '%' || #findFieldText# || '%'</isEqual>
				<isEqual property="findField" compareValue="custEtc1">tt1.CUST_ETC1 like '%' || #findFieldText# || '%'</isEqual>
				<isEqual property="findField" compareValue="custEtc3">tt1.CUST_ETC3 like '%' || #findFieldText# || '%'</isEqual>
				<isEqual property="findField" compareValue="custEtc4">tt1.CUST_ETC4 like '%' || #findFieldText# || '%'</isEqual>
				<isEqual property="findField" compareValue="custEtc5">tt1.CUST_ETC5 like '%' || #findFieldText# || '%'</isEqual>
				<isEqual property="findField" compareValue="custEtc6">tt1.CUST_ETC6 like '%' || #findFieldText# || '%'</isEqual>
				<isEqual property="findField" compareValue="custEtc7">tt1.CUST_ETC7 like '%' || #findFieldText# || '%'</isEqual>
				<isEqual property="findField" compareValue="custEtc8">tt1.CUST_ETC8 like '%' || #findFieldText# || '%'</isEqual>
			</isNotEmpty>
		</isNotEmpty>
    </select>
    

    <select id="recSearch.getRecSearchList" parameterClass="java.util.HashMap" resultClass="egovMap">
        <!-- (2023.08.17) TB_REC_FILE 테이블 쪼개기 작업 (HAGUANGHO) 
             (2023.08.22) TB_REC_FILE_INDEX 테이블 쪼개기 작업 (HAGUANGHO) -->
        /* ID : recSearch.getRecSearchList */
        SELECT t1.REC_KEY
			 , t1.TENANT_ID
			 , SUBSTR(t1.REC_TIME, 1, 8) AS REC_DATE
			 , SUBSTR(t1.REC_TIME, 9, 6) AS REC_TIME
			 , t1.DN_NO
			 , t3.DN_NO_REF
			 , t1.GROUP_ID
			 , t4.GROUP_NAME
			 , t1.USER_ID
			 , t2.USER_NAME
			 , t1.PHONE_IP
			 , t1.END_TIME
			 , CASE t1.CALL_KIND WHEN '1' THEN 'Inbound' WHEN '2' THEN 'Outbound' ELSE '' END AS CALL_KIND
			 , t1.CALL_ID
			 , FN_GETMASKING_CUST('CUST_NAME', t1.CUST_NAME) AS CUST_NAME
			 , FN_GETMASKING_CUST('CUST_TEL', t1.CUST_TEL) AS CUST_TEL
			 , FN_GETMASKING_CUST('SSN', t1.CUST_NO) AS CUST_NO
			 , t1.CUST_NAME AS FULL_CUST_NAME
			 , t1.CUST_TEL AS FULL_CUST_TEL
			 , t1.CUST_NO AS FULL_CUST_NO
			 , #maskingYn# AS MASKING_YN
			 , t1.MEDIA_VOICE
			 , t1.MEDIA_SCR
			 , t1.MEDIA_MOVIE
			 , t1.MEDIA_EMAIL
			 , t1.MEDIA_CHAT
			 , t1.MEDIA_FAX
			 , t1.MEDIA_DOC
			 , t1.SEARCH_VISIBLE
			 , t1.UPLOAD_CNT_VOICE
			 , t1.UPLOAD_CNT_SCR
			 , t1.UPLOAD_CNT_MOVIE
			 , t1.UPLOAD_CNT_EMAIL
			 , t1.UPLOAD_CNT_CHAT
			 , t1.UPLOAD_CNT_FAX
			 , t1.UPLOAD_CNT_DOC
			 , t1.FILE_NAME
			 , t1.CUST_ETC1 AS CUST_ETC1
			 , t1.CUST_ETC2 AS CUST_ETC2
			 , t1.CUST_ETC3 AS CUST_ETC3
			 , t1.CUST_ETC4 AS CUST_ETC4
			 , t1.CUST_ETC5 AS CUST_ETC5
			 , t1.CUST_ETC6 AS CUST_ETC6
			 , t1.CUST_ETC7 AS CUST_ETC7
			 , t1.CUST_ETC8 AS CUST_ETC8
			 , t1.CUST_ETC9
			 , t1.CUST_ETC10
			 , t1.HOLD
			 , t1.TRAN_TEL
			 , nvl(t1.CALL_TIME, 0) AS CALL_TIME
			 , CASE nvl(t1.HOLD,0) WHEN 0 THEN nvl(t1.CALL_TIME,0) ELSE nvl(t1.END_TIME,0) END AS CONVERT_TIME
			 , t1.MFU_IP
			 , t5.MARKING_CLASS
			 , t5.MARKING_COLOR
			 , t6.enc_key
			 , t1.MEDIA_KIND
			 , t1.FILE_NAME_INDEX
			 , t1.DN_GUBUN
			 , t1.DN_GUBUN_ID
			 , t1.LISTENING_YN
			 , t1.DOWNLOAD_YN
			 <isNotEmpty property="callGroupYn">
			 , t1.REC_TIME_2
			 , t1.CALL_ID_2
			 </isNotEmpty>
			 <isEmpty property="callGroupYn">
			 , '' AS REC_TIME_2
			 , '' AS CALL_ID_2
			 </isEmpty>
		FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY
					<isNotEmpty property="findSort">
						<isEqual property="findSort" compareValue="1">tt1.REC_TIME desc, tt1.DN_NO desc</isEqual>
						<isEqual property="findSort" compareValue="2">tt1.END_TIME desc, tt1.REC_TIME desc</isEqual>
						<isEqual property="findSort" compareValue="3">tt1.REC_TIME asc, tt1.DN_NO desc</isEqual>
						<isEqual property="findSort" compareValue="4">tt1.END_TIME asc, tt1.REC_TIME desc</isEqual>
					</isNotEmpty>
					<isEmpty property="findSort">
						tt1.REC_TIME desc, tt1.DN_NO desc
					</isEmpty>
		 		  ) AS ROW_NUM
				, tt1.REC_KEY
				, tt1.TENANT_ID
				, tt1.REC_TIME
				, tt1.DN_NO
				, tt1.GROUP_ID
				, tt1.USER_ID
				, tt1.PHONE_IP
				, tt1.END_TIME
				, tt1.CALL_KIND
				, tt1.CALL_ID
				, tt1.CUST_NAME
				, tt1.CUST_TEL
				, tt1.CUST_NO
				, tt1.MEDIA_VOICE
				, tt1.MEDIA_SCR
				, tt1.MEDIA_MOVIE
				, tt1.MEDIA_EMAIL
				, tt1.MEDIA_CHAT
				, tt1.MEDIA_FAX
				, tt1.MEDIA_DOC
				, tt1.SEARCH_VISIBLE
				, tt1.UPLOAD_CNT_VOICE
				, tt1.UPLOAD_CNT_SCR
				, tt1.UPLOAD_CNT_MOVIE
				, tt1.UPLOAD_CNT_EMAIL
				, tt1.UPLOAD_CNT_CHAT
				, tt1.UPLOAD_CNT_FAX
				, tt1.UPLOAD_CNT_DOC
				, tt1.CUST_ETC1
				, tt1.CUST_ETC2
				, tt1.CUST_ETC3
				, tt1.CUST_ETC4
				, tt1.CUST_ETC5
				, tt1.CUST_ETC6
				, tt1.CUST_ETC7
				, tt1.CUST_ETC8
				, tt1.CUST_ETC9
				, tt1.CUST_ETC10
				, tt1.HOLD
				, tt1.TRAN_TEL
				, tt1.CALL_TIME_I AS CALL_TIME
				, case tt1.media_scr when 1 then tt1.SCR_FILE_NAME else tt1.file_name_i end as FILE_NAME
				, tt1.MFU_IP
				, tt1.MEDIA_KIND_I as MEDIA_KIND                  <!-- (2023.09.01) TB_REC_FILE_INDEX 에서 가져오던 내용을 TB_REC_FILE 의 컬럼을 이용하도록 변경 -->
				, tt1.FILE_NAME_I as FILE_NAME_INDEX              <!-- (2023.09.01) TB_REC_FILE_INDEX 에서 가져오던 내용을 TB_REC_FILE 의 컬럼을 이용하도록 변경 -->
				, D.GUBUN_ID AS DN_GUBUN_ID
				, D.GUBUN_NAME AS DN_GUBUN
				<isNotEmpty property="callGroupYn">
				, MIN(tt1.REC_TIME) OVER(PARTITION BY SUBSTR(tt1.CALL_ID, INSTR(tt1.CALL_ID,'_',1,1), INSTR(tt1.CALL_ID,'_',1,2) - INSTR(tt1.CALL_ID,'_',1,1))) AS REC_TIME_2
				, SUBSTR(tt1.CALL_ID, INSTR(tt1.CALL_ID,'_',1,1), INSTR(tt1.CALL_ID,'_',1,2) - INSTR(tt1.CALL_ID,'_',1,1)) AS CALL_ID_2
				</isNotEmpty>
				, tt1.LISTENING_YN
				, tt1.DOWNLOAD_YN
			FROM (
				SELECT
					  f.*
					, CASE  WHEN gl.DOWNLOAD_FLAG = 'L' THEN 'Y'
							WHEN f.TENANT_ID = #tenantId# AND f.USER_ID = #userId# THEN 'Y'
							WHEN 'SuperAdmin' = #grantId# OR 'SystemAdmin' = #grantId# OR 'Manager' = #grantId# THEN 'Y'       
							WHEN 'GroupManager' = #grantId# AND f.TENANT_ID = #tenantId# AND INSTR(#controlAuth#, f.GROUP_ID) > 0 THEN 'Y'                                                                                                                                                                                                                                                                                      
							ELSE 'N'
					  END AS LISTENING_YN
					, CASE WHEN gd.DOWNLOAD_FLAG = 'D' THEN 'Y' ELSE 'N' END AS DOWNLOAD_YN
				FROM <include refid="TB_REC_FILE_MULTI" /> f
					LEFT OUTER JOIN TB_REC_GRANT gl ON gl.REC_KEY = f.REC_KEY AND gl.DOWNLOAD_FLAG = 'L' AND gl.TENANT_ID = #tenantId# AND gl.USER_ID = #userId#
						AND gl.START_DATE <![CDATA[<=]]> TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')  AND gl.END_DATE <![CDATA[>=]]>  TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')
					LEFT OUTER JOIN TB_REC_GRANT gd ON gd.REC_KEY = f.REC_KEY AND gd.DOWNLOAD_FLAG = 'D' AND gd.TENANT_ID = #tenantId# AND gd.USER_ID = #userId#
						AND gd.START_DATE <![CDATA[<=]]> TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')  AND gd.END_DATE <![CDATA[>=]]>  TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')					
				WHERE 1=1
			) tt1
				LEFT OUTER JOIN (
			         SELECT DN.* , UTG.START_DN , UTG.END_DN , UTG.GUBUN_ID, UTG.GUBUN_NAME
			           FROM TB_MNG_USERTELNO DN
			           JOIN TB_MNG_USERTELNO_GUBUN UTG
			             ON TO_NUMBER(UTG.START_DN) <![CDATA[ <= ]]> TO_NUMBER(DN.DN_NO)
			            AND TO_NUMBER(UTG.END_DN) <![CDATA[ >= ]]> TO_NUMBER(DN.DN_NO)
			    ) D ON D.DN_NO = TT1.DN_NO
			<isNotEmpty property="findUserNameText">
			  LEFT OUTER JOIN TB_MNG_USERINFO tt2
				ON tt1.TENANT_ID = tt2.TENANT_ID
			   AND tt1.USER_ID = tt2.USER_ID
			</isNotEmpty>

			WHERE 1 = 1
			<isEqual prepend="AND" property="listeningYn" compareValue="Y">
				tt1.LISTENING_YN = 'Y'
			</isEqual>
			<isEqual prepend="AND" property="downloadYn" compareValue="Y">
				tt1.DOWNLOAD_YN = 'Y'
			</isEqual>

			<isNotEmpty property="findTenantId">
			   AND tt1.TENANT_ID = #findTenantId#
			</isNotEmpty>
			<isNotEmpty property="findSearchVisible">
			   AND tt1.SEARCH_VISIBLE = #findSearchVisible#
			</isNotEmpty>
			 <isEqual property="findTS" compareValue="1"><![CDATA[
			   AND tt1.REC_TIME >= #txtDate1_From# || #recFrmTm# AND tt1.REC_TIME <= #txtDate1_To# || #recEndTm#
			]]></isEqual>
			<isNotEqual property="findTS" compareValue="1"><![CDATA[
			   AND SUBSTR(tt1.REC_TIME, 1, 8) >= #txtDate1_From#
			   AND SUBSTR(tt1.REC_TIME, 1, 8) <= #txtDate1_To#
			   AND SUBSTR(tt1.REC_TIME, 9, 6) >= #recFrmTm#
			   AND SUBSTR(tt1.REC_TIME, 9, 6) <= #recEndTm#
			]]></isNotEqual>
			<isNotEmpty property="findUserId">
			   AND tt1.USER_ID = #findUserId#
			</isNotEmpty>
			<isNotEmpty property="findUserNameText">
			   AND (tt1.USER_ID LIKE '%' || #findUserNameText# || '%' OR tt2.USER_NAME LIKE '%' || #findUserNameText# || '%')
			</isNotEmpty>
			<isNotEmpty property="findGroupId">
			   AND tt1.GROUP_ID IN (
					SELECT GROUP_ID
	                  FROM TB_MNG_GROUP
	                 START WITH (TENANT_ID = #findTenantId# AND GROUP_ID = #findGroupId#)
	                CONNECT BY PARENT_ID = PRIOR GROUP_ID
                	   AND TENANT_ID = #findTenantId#
			   )
			</isNotEmpty>
			<isNotEmpty property="findDnText">
			   AND tt1.DN_NO LIKE '%' || #findDnText# || '%'
			</isNotEmpty>
			<isNotEmpty property="findCustNameText">
			   AND tt1.CUST_NAME LIKE '%' || #findCustNameText# || '%'
			</isNotEmpty>
			<isNotEmpty property="findCustTelText">
			   AND (tt1.CUST_TEL LIKE '%' || #findCustTelText# || '%' OR tt1.CUST_TEL LIKE '%' || #findCustTelEnc# || '%')
			</isNotEmpty>
			<isNotEmpty property="findCustNoText">
			   AND (tt1.CUST_NO LIKE '%' || #findCustNoText# || '%' OR tt1.CUST_NO LIKE '%' || #findCustNoEnc# || '%')
			</isNotEmpty>
			<isNotEmpty property="findCallKind">
			   AND tt1.CALL_KIND LIKE '%' || #findCallKind# || '%'
			</isNotEmpty>
			<isNotEmpty property="findMarkKind">
			   AND tt1.CUST_ETC9 = #findMarkKind#
			</isNotEmpty>
			<isNotEmpty property="findCallIdText">
			<!-- AND tt1.CALL_ID BETWEEN #findCallIdText# AND #findCallIdText# || 'ZZ' -->
			   AND tt1.CALL_ID LIKE '%' || #findCallIdText# || '%'
			</isNotEmpty>
			<isNotEmpty property="findTranTelText">
			   AND tt1.TRAN_TEL = #findTranTelText#
			</isNotEmpty>
			<isNotEqual property="callFrmTm" compareValue="000000"><![CDATA[
			   AND tt1.END_TIME >= SUBSTR(#callFrmTm#, 1, 2) * 3600 + SUBSTR(#callFrmTm#, 3, 2) * 60 + SUBSTR(#callFrmTm#, 5, 2)
			]]></isNotEqual>
			<isNotEqual property="callEndTm" compareValue="000000"><![CDATA[
			   AND tt1.END_TIME <= SUBSTR(#callEndTm#, 1, 2) * 3600 + SUBSTR(#callEndTm#, 3, 2) * 60 + SUBSTR(#callEndTm#, 5, 2)
			]]></isNotEqual>
			<isNotEmpty property="findDnGubunText">
			   AND D.GUBUN_ID = #findDnGubunText#
			</isNotEmpty>

			<isNotEmpty property="findField">
				<isNotEmpty property="findFieldText">
				   AND
					<isEqual property="findField" compareValue="custEtc2">tt1.CUST_ETC2 like '%' || #findFieldText# || '%'</isEqual>
					<isEqual property="findField" compareValue="custEtc1">tt1.CUST_ETC1 like '%' || #findFieldText# || '%'</isEqual>
					<isEqual property="findField" compareValue="custEtc3">tt1.CUST_ETC3 like '%' || #findFieldText# || '%'</isEqual>
					<isEqual property="findField" compareValue="custEtc4">tt1.CUST_ETC4 like '%' || #findFieldText# || '%'</isEqual>
					<isEqual property="findField" compareValue="custEtc5">tt1.CUST_ETC5 like '%' || #findFieldText# || '%'</isEqual>
					<isEqual property="findField" compareValue="custEtc6">tt1.CUST_ETC6 like '%' || #findFieldText# || '%'</isEqual>
					<isEqual property="findField" compareValue="custEtc7">tt1.CUST_ETC7 like '%' || #findFieldText# || '%'</isEqual>
					<isEqual property="findField" compareValue="custEtc8">tt1.CUST_ETC8 like '%' || #findFieldText# || '%'</isEqual>
				</isNotEmpty>
			</isNotEmpty>


		  ) t1
		  LEFT OUTER JOIN TB_MNG_USERINFO t2
			ON t1.TENANT_ID = t2.TENANT_ID
		   AND t1.USER_ID = t2.USER_ID
		  LEFT OUTER JOIN TB_MNG_USERTELNO t3
			ON t1.TENANT_ID = t3.TENANT_ID
		   AND t1.DN_NO = t3.DN_NO
		  LEFT OUTER JOIN TB_MNG_GROUP t4
			ON t1.TENANT_ID = t4.TENANT_ID
		   AND t1.GROUP_ID = t4.GROUP_ID
		  LEFT OUTER JOIN TB_REC_MARKCODE t5
			ON t1.TENANT_ID = t5.TENANT_ID
		   AND t1.CUST_ETC9 = t5.MARKING_ID
		  LEFT OUTER JOIN TB_MNG_ENCKEY t6
			<![CDATA[
			ON t1.REC_TIME >= to_char(t6.LIC_TIME,'YYYYMMDDHH24MMSS') 
			and  t1.REC_TIME <= to_char(nvl(t6.LIC_TIME_END,sysdate+ (INTERVAL '10' YEAR)),'YYYYMMDDHH24MMSS')
			and t6.GUBUN = '0'
		   ]]>
		 WHERE t1.ROW_NUM BETWEEN #iSPageNo# AND #iEPageNo#
		 <isNotEmpty property="callGroupYn">
		 ORDER BY t1.REC_TIME_2 DESC, t1.REC_TIME DESC
		 </isNotEmpty>
		 <isEmpty property="callGroupYn">
		 ORDER BY t1.REC_TIME DESC
		 </isEmpty>
		 
    </select>


    <!-- <select id="recSearch.getRecMonitoringList" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecMonitoringList */
        SELECT t1.TENANT_ID
             , t1.DN_NO
             , t1.USER_ID
             , t2.USER_NAME
             , NVL(t1.PHONE_IP, ' ') AS PHONE_IP
             , NVL(t1.USER_IP, ' ') AS USER_IP
             , t1.DN_STATUS
             , t6.DN_STATUS_NAME
             , t2.AGENT_STATUS
             , NVL(t2.GROUP_ID, 0) AS GROUP_ID
             , NVL(t3.GROUP_NAME, ' ') AS GROUP_NAME
             , TO_CHAR(t1.LAST_UPT_DATE, 'YYYY-MM-DD HH24:MI:SS') AS LAST_UPT_DATE
             , NVL(ROUND((SYSDATE - t1.LAST_UPT_DATE) * 24 * 60 * 60), 0) AS ELAPSED_TIME
             , t1.SYSTEM_ID
             , NVL(t4.SYSTEM_NAME, ' ') AS SYSTEM_NAME
             , t1.PROCESS_ID
             , NVL(t5.PROCESS_NAME, ' ') AS PROCESS_NAME
             , t1.USE_FLAG
             , NVL(TRUNC((SYSDATE - t1.LAST_UPT_DATE) * 24 * 60), 0) AS DIFF_TIME
             , t1.REC_CUST_TEL
             , t1.RT_FLAG
             , t1.RT_USER_NAME
             , t1.RT_SYSTEM_ID
             , t1.RT_PROCESS_ID
          FROM TB_MNG_USERTELNO t1
          LEFT OUTER JOIN TB_MNG_USERINFO t2
            ON t1.TENANT_ID = t2.TENANT_ID
           AND t1.USER_ID = t2.USER_ID
          LEFT OUTER JOIN TB_MNG_GROUP t3
            ON t2.TENANT_ID = t3.TENANT_ID
           AND t2.GROUP_ID = t3.GROUP_ID
          LEFT OUTER JOIN TB_SYS_SYSINFO t4
            ON t1.SYSTEM_ID = t4.SYSTEM_ID
          LEFT OUTER JOIN TB_SYS_PROCINFO t5
            ON t1.PROCESS_ID = t5.PROCESS_ID
          LEFT OUTER JOIN (
            SELECT CLASS_ID AS DN_STATUS_CLASS
                 , CODE_ID AS DN_STATUS_CD
                 , CODE_NAME AS DN_STATUS_NAME 
              FROM TB_MNG_BASECODE 
             WHERE UPPER(CLASS_ID) = 'DN_STATUS'
          ) t6
            ON t1.DN_STATUS = t6.DN_STATUS_CD
         WHERE 1 = 1
           AND t1.TENANT_ID = #findTenantId#
		<isNotEmpty property="controlAuth">
		   AND t2.GROUP_ID IN (
		   		SELECT GROUP_ID
				  FROM TB_MNG_GROUP
				 START WITH (TENANT_ID = #findTenantId#
				   AND GROUP_ID IN (
						SELECT g.GROUP_ID
						  FROM TB_MNG_GROUP g
						 INNER JOIN TB_MNG_USERINFO u
							ON g.TENANT_ID = u.TENANT_ID
						 WHERE u.TENANT_ID = #findTenantId#
						   AND u.USER_ID = #userId#
						   AND INSTR(',' || u.CONTROL_AUTH || ',', ',' || g.GROUP_ID || ',') > 0
				   )
				 )
			   CONNECT BY PARENT_ID = PRIOR GROUP_ID
				   AND TENANT_ID = #findTenantId#
		   )
		</isNotEmpty>
		<isEmpty property="controlAuth">
			<isEqual property="grantId" compareValue="Agent">
		   AND t1.USER_ID = #userId#
			</isEqual>
			<isEqual property="grantId" compareValue="GroupManager">
		   AND t2.GROUP_ID IN (
		   		SELECT GROUP_ID
				  FROM TB_MNG_GROUP
				 START WITH (TENANT_ID = #findTenantId#
					AND GROUP_ID = (SELECT GROUP_ID FROM TB_MNG_USERINFO WHERE USER_ID = #userId# and TENANT_ID = #findTenantId#)
				 )
			   CONNECT BY PARENT_ID = PRIOR GROUP_ID
				   AND TENANT_ID = #findTenantId#
		   )
			</isEqual>
		</isEmpty>
		<isNotEmpty property="findGroupId">
		   AND t2.GROUP_ID IN (
				SELECT GROUP_ID
                  FROM TB_MNG_GROUP
                 START WITH (TENANT_ID = #findTenantId# AND GROUP_ID = #findGroupId#)
                CONNECT BY PARENT_ID = PRIOR GROUP_ID
               	   AND TENANT_ID = #findTenantId#
		   )
		</isNotEmpty>
		<isNotEmpty property="findUserNameText">
		   AND (t1.USER_ID LIKE '%' || #findUserNameText# || '%' OR t2.USER_NAME LIKE '%' || #findUserNameText# || '%')
		</isNotEmpty>
		<isNotEmpty property="findDnText">
		   AND t1.DN_NO LIKE '%' || #findDnText# || '%'
		</isNotEmpty>
		<isNotEmpty property="findSystemId">
		   AND t1.SYSTEM_ID = #findSystemId#
		</isNotEmpty>
		<isNotEmpty property="findProcessId">
		   AND t1.PROCESS_ID = #findProcessId#
		</isNotEmpty>
		<isNotEqual property="callFrmTm" compareValue="000000">
		<![CDATA[
		   AND NVL(ROUND((SYSDATE - t1.LAST_UPT_DATE) * 24 * 60 * 60), 0) >=
			   SUBSTR(#callFrmTm#, 1, 2) * 3600 + SUBSTR(#callFrmTm#, 3, 2) * 60 + SUBSTR(#callFrmTm#, 5, 2)		
		]]>
		</isNotEqual>
		<isNotEqual property="callEndTm" compareValue="000000">
		<![CDATA[
		   AND NVL(ROUND((SYSDATE - t1.LAST_UPT_DATE) * 24 * 60 * 60), 0) <=
			   SUBSTR(#callEndTm#, 1, 2) * 3600 + SUBSTR(#callEndTm#, 3, 2) * 60 + SUBSTR(#callEndTm#, 5, 2) 		
		]]>
		</isNotEqual>
		대기체크일경우 로그인은 체크,로그아웃은 언체크하여서 비활성화
		<isNotEmpty property="findStatusWait">대기가 체크일때
			<isNotEmpty property="findStatusRec">통화가 체크이면
		   AND ((t1.DN_STATUS = '01' OR t1.DN_STATUS = '10')
			</isNotEmpty>
			<isEmpty property="findStatusRec">통화가 언체크이면
				AND (t1.DN_STATUS = '01'
			</isEmpty>
				AND t2.AGENT_STATUS = '01')대기는 로그인이라는 전제가 필요함		
		</isNotEmpty>
		<isEmpty property="findStatusWait">대기가 언체크일때
			<isNotEmpty property="findStatusRec">통화가체크이면 로그아웃과 로그인에 상관없이
				AND t1.DN_STATUS = '10' 
			</isNotEmpty>
		</isEmpty>
		<isNotEmpty property="findLogin">로그인이 체크일때
				AND (t2.AGENT_STATUS = '01'
				<isNotEmpty property="findLogout">로그아웃이 체크일때
					OR t2.AGENT_STATUS = '99' OR t2.AGENT_STATUS IS NULL)
				</isNotEmpty>
				<isEmpty property="findLogout">로그아웃이 ㅓㅇㄴ체크일때
		   )
				</isEmpty>		
		</isNotEmpty>
		<isEmpty property="findLogin">로그인이 언체크일때
			<isNotEmpty property="findLogout">로그아웃이 체크일때
		   AND (t2.AGENT_STATUS = '99' OR t2.AGENT_STATUS IS NULL)
			</isNotEmpty>		
		</isEmpty>
		<isEmpty property="findSort">
		 ORDER BY TO_NUMBER(t1.DN_NO)
		</isEmpty>
		<isNotEmpty property="findSort">
			<isEqual property="findSort" compareValue="dn">
		 ORDER BY TO_NUMBER(t1.DN_NO)
			</isEqual>
			<isEqual property="findSort" compareValue="id">
		 ORDER BY t1.USER_ID
			</isEqual>
			<isEqual property="findSort" compareValue="nm">
		 ORDER BY t2.USER_NAME
			</isEqual>
			<isEqual property="findSort" compareValue="st">
		 ORDER BY t1.DN_STATUS
			</isEqual>
		</isNotEmpty>
    </select> -->
    <select id="recSearch.getRecMonitoringList" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecMonitoringList */
        SELECT t1.TENANT_ID
             , t1.DN_NO
             , t1.USER_ID
             , t2.USER_NAME
             , NVL(t1.PHONE_IP, ' ') AS PHONE_IP
             , NVL(t1.USER_IP, ' ') AS USER_IP
             , t1.DN_STATUS
             , t6.DN_STATUS_NAME
             , t2.AGENT_STATUS
             , NVL(t2.GROUP_ID, 0) AS GROUP_ID
             , NVL(t3.GROUP_NAME, ' ') AS GROUP_NAME
             , TO_CHAR(t1.LAST_UPT_DATE, 'YYYY-MM-DD HH24:MI:SS') AS LAST_UPT_DATE
             , NVL(ROUND((SYSDATE - t1.LAST_UPT_DATE) * 24 * 60 * 60), 0) AS ELAPSED_TIME
             , t1.SYSTEM_ID
             , NVL(t4.SYSTEM_NAME, ' ') AS SYSTEM_NAME
             , t1.PROCESS_ID
             , NVL(t5.PROCESS_NAME, ' ') AS PROCESS_NAME
             , t1.USE_FLAG
             , NVL(TRUNC((SYSDATE - t1.LAST_UPT_DATE) * 24 * 60), 0) AS DIFF_TIME
             , t1.REC_CUST_TEL
             , t1.RT_FLAG
             , t1.RT_USER_NAME
             , t1.RT_SYSTEM_ID
             , t1.RT_PROCESS_ID
          FROM TB_MNG_USERTELNO t1
          LEFT OUTER JOIN TB_MNG_USERINFO t2
            ON t1.TENANT_ID = t2.TENANT_ID
           AND t1.USER_ID = t2.USER_ID
          LEFT OUTER JOIN TB_MNG_GROUP t3
            ON t2.TENANT_ID = t3.TENANT_ID
           AND t2.GROUP_ID = t3.GROUP_ID
          LEFT OUTER JOIN TB_SYS_SYSINFO t4
            ON t1.SYSTEM_ID = t4.SYSTEM_ID
          LEFT OUTER JOIN TB_SYS_PROCINFO t5
            ON t1.PROCESS_ID = t5.PROCESS_ID
          LEFT OUTER JOIN (
            SELECT CLASS_ID AS DN_STATUS_CLASS
                 , CODE_ID AS DN_STATUS_CD
                 , CODE_NAME AS DN_STATUS_NAME 
              FROM TB_MNG_BASECODE 
             WHERE UPPER(CLASS_ID) = 'DN_STATUS'
          ) t6
            ON t1.DN_STATUS = t6.DN_STATUS_CD
         WHERE 1 = 1
           AND t1.TENANT_ID = #findTenantId#
		<isEqual property="grantId" compareValue="Agent">
		   AND t1.USER_ID = #userId#
		</isEqual>
		<isNotEmpty property="controlAuth">
            AND instr(#controlAuth#, t2.GROUP_ID) > 0
        </isNotEmpty>
		<isNotEmpty property="findGroupId">
		   AND t2.GROUP_ID IN (
				SELECT GROUP_ID
                  FROM TB_MNG_GROUP
                 START WITH (TENANT_ID = #findTenantId# AND GROUP_ID = #findGroupId#)
                CONNECT BY PARENT_ID = PRIOR GROUP_ID
               	   AND TENANT_ID = #findTenantId#
		   )
		</isNotEmpty>
		<isNotEmpty property="findUserNameText">
		   AND (t1.USER_ID LIKE '%' || #findUserNameText# || '%' OR t2.USER_NAME LIKE '%' || #findUserNameText# || '%')
		</isNotEmpty>
		<isNotEmpty property="findDnText">
		   AND t1.DN_NO LIKE '%' || #findDnText# || '%'
		</isNotEmpty>
		<isNotEmpty property="findSystemId">
		   AND t1.SYSTEM_ID = #findSystemId#
		</isNotEmpty>
		<isNotEmpty property="findProcessId">
		   AND t1.PROCESS_ID = #findProcessId#
		</isNotEmpty>
		<isNotEqual property="callFrmTm" compareValue="000000">
		<![CDATA[
		   AND NVL(ROUND((SYSDATE - t1.LAST_UPT_DATE) * 24 * 60 * 60), 0) >=
			   SUBSTR(#callFrmTm#, 1, 2) * 3600 + SUBSTR(#callFrmTm#, 3, 2) * 60 + SUBSTR(#callFrmTm#, 5, 2)		
		]]>
		</isNotEqual>
		<isNotEqual property="callEndTm" compareValue="000000">
		<![CDATA[
		   AND NVL(ROUND((SYSDATE - t1.LAST_UPT_DATE) * 24 * 60 * 60), 0) <=
			   SUBSTR(#callEndTm#, 1, 2) * 3600 + SUBSTR(#callEndTm#, 3, 2) * 60 + SUBSTR(#callEndTm#, 5, 2) 		
		]]>
		</isNotEqual>
		<!-- 대기체크일경우 로그인은 체크,로그아웃은 언체크하여서 비활성화 -->
		<isNotEmpty property="findStatusWait"><!-- 대기가 체크일때 -->
			<isNotEmpty property="findStatusRec"><!-- 통화가 체크이면 -->
		   AND ((t1.DN_STATUS = '01' OR t1.DN_STATUS = '10')
			</isNotEmpty>
			<isEmpty property="findStatusRec"><!-- 통화가 언체크이면 -->
				AND (t1.DN_STATUS = '01'
			</isEmpty>
				AND t2.AGENT_STATUS = '01')<!-- 대기는 로그인이라는 전제가 필요함 -->		
		</isNotEmpty>
		<isEmpty property="findStatusWait"><!-- 대기가 언체크일때 -->
			<isNotEmpty property="findStatusRec"><!-- 통화가체크이면 로그아웃과 로그인에 상관없이 -->
				AND t1.DN_STATUS = '10' 
			</isNotEmpty>
		</isEmpty>
		<isNotEmpty property="findLogin"><!-- 로그인이 체크일때 -->
				AND (t2.AGENT_STATUS = '01'
				<isNotEmpty property="findLogout"><!-- 로그아웃이 체크일때 -->
					OR t2.AGENT_STATUS = '99' OR t2.AGENT_STATUS IS NULL)
				</isNotEmpty>
				<isEmpty property="findLogout"><!-- 로그아웃이 ㅓㅇㄴ체크일때 -->
		   )
				</isEmpty>		
		</isNotEmpty>
		<isEmpty property="findLogin"><!-- 로그인이 언체크일때 -->
			<isNotEmpty property="findLogout"><!-- 로그아웃이 체크일때 -->
		   AND (t2.AGENT_STATUS = '99' OR t2.AGENT_STATUS IS NULL)
			</isNotEmpty>		
		</isEmpty>
		<isEmpty property="findSort">
		 ORDER BY TO_NUMBER(t1.DN_NO)
		</isEmpty>
		<isNotEmpty property="findSort">
			<isEqual property="findSort" compareValue="dn">
		 ORDER BY TO_NUMBER(t1.DN_NO)
			</isEqual>
			<isEqual property="findSort" compareValue="id">
		 ORDER BY t1.USER_ID
			</isEqual>
			<isEqual property="findSort" compareValue="nm">
		 ORDER BY t2.USER_NAME
			</isEqual>
			<isEqual property="findSort" compareValue="st">
		 ORDER BY t1.DN_STATUS
			</isEqual>
		</isNotEmpty>
    </select>
    
    
    <update id="recSearch.setRtUserIdUpdate" parameterClass="java.util.HashMap">
    	/* ID : recSearch.setRtUserIdUpdate */
    	update tb_mng_usertelno
    	   set rt_user_name = #rtUserName#
    	 where tenant_id = #tenantId#
		   and dn_no = #dnNo#
    </update>

    <select id="recSearch.getRecChartDateList" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecChartDateList */
        select
        substr(rec_time, 1,4)||'-'||substr(rec_time, 5,2)||'-'||substr(rec_time, 7,2) rec_time
        , SUM(rec_count) call_cnt, SUM(end_time_sum) call_time, round(AVG(end_time_avg),0) call_avg
        from TB_REC_FILE_DAY a
        <isEmpty property="findUserNameText">join TB_MNG_USERINFO</isEmpty>
        <isNotEmpty property="findUserNameText">
            join (
            select tenant_id, group_id, user_id, user_name,agent_status
            from tb_mng_userinfo
            where tenant_id = #findTenantId#
            <isNotEmpty property="findGroupId">
                and group_id in (
                select group_id
                from tb_mng_group
                where tenant_id = #findTenantId#
                and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
                and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
                )
            </isNotEmpty>
            <isEmpty property="findGroupId">
                <isNotEqual property="grantId" compareValue="GroupManager">
                    <isNotEmpty property="controlAuth">
                        and group_id in (
                        select g.group_id
                        from tb_mng_group g,
                        (
                        select depth
                        from tb_mng_group g, tb_mng_userinfo u
                        where g.tenant_id = u.tenant_id
                        and instr(','||control_auth||',',','||g.depth||',') > 0
                        and u.user_id = #userId#
                        and u.tenant_id = #findTenantId#
                        ) c
                        where g.depth LIKE c.depth || '%'
                        and tenant_id = #findTenantId#
                        )
                    </isNotEmpty>
                </isNotEqual>
                <isEqual property="grantId" compareValue="GroupManager">
                    and group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth
                    from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and g.group_id = u.group_id
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                </isEqual>
            </isEmpty>
            and (user_id like '%' || #findUserNameText# || '%' or user_name like '%' || #findUserNameText# || '%')
            )
        </isNotEmpty>
        b on a.tenant_id = b.tenant_id and a.user_id = b.user_id
        <dynamic prepend="WHERE">
            a.tenant_id = #findTenantId#
            <isNotEmpty property="findGroupId">
                and b.group_id in (
                select group_id from tb_mng_group
                where tenant_id = #findTenantId#
                and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
                and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
                )
            </isNotEmpty>
            <isEmpty property="findGroupId">
                <isNotEqual property="grantId" compareValue="GroupManager">
                    <isNotEmpty property="controlAuth">
                        and b.group_id in (
                        select g.group_id
                        from tb_mng_group g,
                        (
                        select depth from tb_mng_group g, tb_mng_userinfo u
                        where g.tenant_id = u.tenant_id
                        and instr(','||control_auth||',',','||g.depth||',') > 0
                        and u.user_id = #userId#
                        and u.tenant_id = #findTenantId#
                        ) c
                        where g.depth LIKE c.depth || '%'
                        and tenant_id = #findTenantId#
                        )
                    </isNotEmpty>
                </isNotEqual>
                <isEqual property="grantId" compareValue="GroupManager">
                    and b.group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and g.group_id = u.group_id
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                </isEqual>
            </isEmpty>
            AND    <![CDATA[	REC_TIME >=	#txtDate1_From# 		]]>
            AND <![CDATA[	REC_TIME <=	#txtDate1_To# || '99' 	]]>
            <!-- 	AND <![CDATA[   ROWNUM <= 100 						]]> -->
            <isNotEmpty property="findUserId">AND a.user_id = #findUserId#</isNotEmpty>
            <isNotEmpty property="findGroupId">
                and group_id in (
                select group_id from tb_mng_group
                where tenant_id = #findTenantId#
                and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
                and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
                )
            </isNotEmpty>
            <isEmpty property="findGroupId">
                <isNotEqual property="grantId" compareValue="GroupManager">
                    <isNotEmpty property="controlAuth">
                        and group_id in (
                        select g.group_id
                        from tb_mng_group g,
                        (
                        select depth from tb_mng_group g, tb_mng_userinfo u
                        where g.tenant_id = u.tenant_id
                        and instr(','||control_auth||',',','||g.depth||',') > 0
                        and u.user_id = #userId#
                        and u.tenant_id = #findTenantId#
                        ) c
                        where g.depth LIKE c.depth || '%'
                        and tenant_id = #findTenantId#
                        )
                    </isNotEmpty>
                </isNotEqual>
                <isEqual property="grantId" compareValue="GroupManager">
                    and group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and g.group_id = u.group_id
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                </isEqual>
            </isEmpty>
        </dynamic>
        group by substr(rec_time, 1,4)||'-'||substr(rec_time, 5,2)||'-'||substr(rec_time, 7,2)
        order by rec_time
    </select>

    <select id="recSearch.getRecChartTimeList" parameterClass="java.util.HashMap" resultClass="egovMap">
        <!-- (2023.08.17) TB_REC_FILE 테이블 쪼개기 작업 (HAGUANGHO) -->
        /* ID : recSearch.getRecChartTimeList */
        select
        rec_time, sum(call_cnt) call_cnt, sum(call_time) call_time
        from (
        select substr(rec_time,1,8) rec_date, substr(rec_time, 9,2) rec_time, count(1) call_cnt, SUM(end_time) call_time
        from <include refid="TB_REC_FILE_MULTI" /> a
        <isEmpty property="findUserNameText">join TB_MNG_USERINFO</isEmpty>
        <isNotEmpty property="findUserNameText">
            join (
            select tenant_id, group_id, user_id, user_name,agent_status from tb_mng_userinfo
            where tenant_id = #findTenantId#
            <isNotEmpty property="findGroupId">
                and a.group_id in (
                select group_id from tb_mng_group
                where tenant_id = #findTenantId#
                and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
                and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
                )
            </isNotEmpty>
            <isEmpty property="findGroupId">
                <isNotEqual property="grantId" compareValue="GroupManager">
                    <isNotEmpty property="controlAuth">
                        and a.group_id in (
                        select g.group_id
                        from tb_mng_group g,
                        (
                        select depth from tb_mng_group g, tb_mng_userinfo u
                        where g.tenant_id = u.tenant_id
                        and instr(','||control_auth||',',','||g.depth||',') > 0
                        and u.user_id = #userId#
                        and u.tenant_id = #findTenantId#
                        ) c
                        where g.depth LIKE c.depth || '%'
                        and tenant_id = #findTenantId#
                        )
                    </isNotEmpty>
                </isNotEqual>
                <isEqual property="grantId" compareValue="GroupManager">
                    and a.group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and g.group_id = u.group_id
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                </isEqual>
            </isEmpty>
            and (user_id like '%' || #findUserNameText# || '%' or user_name like '%' || #findUserNameText# || '%')
            )
        </isNotEmpty>
        b on a.tenant_id = b.tenant_id and a.user_id = b.user_id
        <dynamic prepend="WHERE">
            a.tenant_id = #findTenantId#
            <isNotEmpty property="findGroupId">
                and b.group_id in (
                select group_id from tb_mng_group
                where tenant_id = #findTenantId#
                and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
                and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
                )
            </isNotEmpty>
            <isEmpty property="findGroupId">
                <isNotEqual property="grantId" compareValue="GroupManager">
                    <isNotEmpty property="controlAuth">
                        and b.group_id in (
                        select g.group_id
                        from tb_mng_group g,
                        (
                        select depth from tb_mng_group g, tb_mng_userinfo u
                        where g.tenant_id = u.tenant_id
                        and instr(','||control_auth||',',','||g.depth||',') > 0
                        and u.user_id = #userId#
                        and u.tenant_id = #findTenantId#
                        ) c
                        where g.depth LIKE c.depth || '%'
                        and tenant_id = #findTenantId#
                        )
                    </isNotEmpty>
                </isNotEqual>
                <isEqual property="grantId" compareValue="GroupManager">
                    and b.group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and g.group_id = u.group_id
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                </isEqual>
            </isEmpty>
            AND    <![CDATA[	REC_TIME >=	#txtDate1_From# 		]]>
            AND <![CDATA[	REC_TIME <=	#txtDate1_To# || '99' 	]]>
            AND SEARCH_VISIBLE = '1'
            <isNotEmpty property="findUserId">AND a.user_id = #findUserId#</isNotEmpty>
            <isNotEmpty property="findGroupId">
                and a.group_id in (
                select group_id from tb_mng_group
                where tenant_id = #findTenantId#
                and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
                and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
                )
            </isNotEmpty>
            <isEmpty property="findGroupId">
                <isNotEqual property="grantId" compareValue="GroupManager">
                    <isNotEmpty property="controlAuth">
                        and a.group_id in (
                        select g.group_id
                        from tb_mng_group g,
                        (
                        select depth from tb_mng_group g, tb_mng_userinfo u
                        where g.tenant_id = u.tenant_id
                        and instr(','||control_auth||',',','||g.depth||',') > 0
                        and u.user_id = #userId#
                        and u.tenant_id = #findTenantId#
                        ) c
                        where g.depth LIKE c.depth || '%'
                        and tenant_id = #findTenantId#
                        )
                    </isNotEmpty>
                </isNotEqual>
                <isEqual property="grantId" compareValue="GroupManager">
                    and a.group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and g.group_id = u.group_id
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                </isEqual>
            </isEmpty>
        </dynamic>
        group by substr(rec_time,1,8), substr(rec_time, 9,2)
        ) a
        group by rec_time
        order by rec_time
    </select>

    <select id="recSearch.getRecChartUserList" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecChartUserList */
        select
        user_id, user_name, sum(call_cnt) call_cnt, round(avg(call_cnt),0) call_avg
        , sum(call_time) time_sum, round(avg(call_time),0) time_avg
        from (
        select
        substr(rec_time,1,8) rec_date, a.tenant_id, a.user_id, user_name
        , SUM(rec_count) call_cnt, SUM(end_time_sum) call_time
        from TB_REC_FILE_DAY a
        <isEmpty property="findUserNameText">join TB_MNG_USERINFO</isEmpty>
        <isNotEmpty property="findUserNameText">
            join (
            select tenant_id, group_id, user_id, user_name, agent_status
            from tb_mng_userinfo
            where tenant_id = #findTenantId#
            <isNotEmpty property="findGroupId">
                and group_id in (
                select group_id from tb_mng_group
                where tenant_id = #findTenantId#
                and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
                and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
                )
            </isNotEmpty>
            <isEmpty property="findGroupId">
                <isNotEqual property="grantId" compareValue="GroupManager">
                    <isNotEmpty property="controlAuth">
                        and group_id in (
                        select g.group_id
                        from tb_mng_group g,
                        (
                        select depth from tb_mng_group g, tb_mng_userinfo u
                        where g.tenant_id = u.tenant_id
                        and instr(','||control_auth||',',','||g.depth||',') > 0
                        and u.user_id = #userId#
                        and u.tenant_id = #findTenantId#
                        ) c
                        where g.depth LIKE c.depth || '%'
                        and tenant_id = #findTenantId#
                        )
                    </isNotEmpty>
                </isNotEqual>
                <isEqual property="grantId" compareValue="GroupManager">
                    and group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and g.group_id = u.group_id
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                </isEqual>
            </isEmpty>
            and (user_id like '%' || #findUserNameText# || '%' or user_name like '%' || #findUserNameText# || '%')
            )
        </isNotEmpty>
        b on a.tenant_id = b.tenant_id and a.user_id = b.user_id
        <dynamic prepend="WHERE">
            a.tenant_id = #findTenantId#
            <isNotEmpty property="findGroupId">
                and b.group_id in (
                select group_id from tb_mng_group
                where tenant_id = #findTenantId#
                and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
                and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
                )
            </isNotEmpty>
            <isEmpty property="findGroupId">
                <isNotEqual property="grantId" compareValue="GroupManager">
                    <isNotEmpty property="controlAuth">
                        and b.group_id in (
                        select g.group_id
                        from tb_mng_group g,
                        (
                        select depth from tb_mng_group g, tb_mng_userinfo u
                        where g.tenant_id = u.tenant_id
                        and instr(','||control_auth||',',','||g.depth||',') > 0
                        and u.user_id = #userId#
                        and u.tenant_id = #findTenantId#
                        ) c
                        where g.depth LIKE c.depth || '%'
                        and tenant_id = #findTenantId#
                        )
                    </isNotEmpty>
                </isNotEqual>
                <isEqual property="grantId" compareValue="GroupManager">
                    and b.group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and g.group_id = u.group_id
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                </isEqual>
            </isEmpty>
            AND    <![CDATA[	REC_TIME >=	#txtDate1_From# 		]]>
            AND <![CDATA[	REC_TIME <=	#txtDate1_To# || '99' 	]]>
            <isNotEmpty property="findUserId">AND a.user_id = #findUserId#</isNotEmpty>
            <isNotEmpty property="findGroupId">
                and group_id in (
                select group_id from tb_mng_group
                where tenant_id = #findTenantId#
                and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
                and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
                )
            </isNotEmpty>
            <isEmpty property="findGroupId">
                <isNotEqual property="grantId" compareValue="GroupManager">
                    <isNotEmpty property="controlAuth">
                        and group_id in (
                        select g.group_id
                        from tb_mng_group g,
                        (
                        select depth from tb_mng_group g, tb_mng_userinfo u
                        where g.tenant_id = u.tenant_id
                        and instr(','||control_auth||',',','||g.depth||',') > 0
                        and u.user_id = #userId#
                        and u.tenant_id = #findTenantId#
                        ) c
                        where g.depth LIKE c.depth || '%'
                        and tenant_id = #findTenantId#
                        )
                    </isNotEmpty>
                </isNotEqual>
                <isEqual property="grantId" compareValue="GroupManager">
                    and group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and g.group_id = u.group_id
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                </isEqual>
            </isEmpty>
        </dynamic>
        group by substr(rec_time,1,8), a.tenant_id, a.user_id, user_name
        ) c
        group by user_name, user_id
        order by user_name, user_id
    </select>

    <select id="recSearch.getRecChartWeekList" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecChartWeekList */
        select
        case rday when '1' then '일' when '2' then '월' when '3' then '화' when '4' then '수' when '5' then '목' when '6'
        then '금' else '토' end rday
        , nvl(sum_cnt1,0) sum_cnt1, nvl(sum_cnt2,0) sum_cnt2, nvl(sum_cnt3,0) sum_cnt3, nvl(sum_cnt4,0) sum_cnt4
        , nvl(sum_time1,0) sum_time1, nvl(sum_time2,0) sum_time2, nvl(sum_time3,0) sum_time3, nvl(sum_time4,0) sum_time4
        from (
        select code_id rday
        from TB_MNG_BASECODE
        where class_id = 'date_sum'
        ) t_d
        left outer join (
        select to_char(to_date(substr(rec_time,1,8),'YYYYMMDD'),'d') rdate, sum(rec_count) sum_cnt4, SUM(end_time_sum)
        sum_time4
        from TB_REC_FILE_DAY
        where tenant_id = #findTenantId#
        and <![CDATA[	rec_time > to_char(sysdate - to_char(to_date(sysdate),'d')-21,'YYYYMMDD')	]]>
        and <![CDATA[	rec_time < to_char(sysdate - to_char(to_date(sysdate),'d')-14,'YYYYMMDD')	]]>
        <isNotEmpty property="findGroupId">
            and user_id in (
            select user_id from tb_mng_userinfo u, tb_mng_group g
            where u.tenant_id = g.tenant_id and u.group_id = g.group_id
            and u.tenant_id = #findTenantId#
            and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
            and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
            )
        </isNotEmpty>
        <isEmpty property="findGroupId">
            <isNotEqual property="grantId" compareValue="GroupManager">
                <isNotEmpty property="controlAuth">
                    and user_id in (
                    select user_id from tb_mng_userinfo
                    where group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and instr(','||control_auth||',',','||g.depth||',') > 0
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                    and tenant_id = #findTenantId#
                    )
                </isNotEmpty>
            </isNotEqual>
            <isEqual property="grantId" compareValue="GroupManager">
                and user_id in (
                select user_id from tb_mng_userinfo
                where group_id in (
                select g.group_id
                from tb_mng_group g,
                (
                select depth from tb_mng_group g, tb_mng_userinfo u
                where g.tenant_id = u.tenant_id
                and g.group_id = u.group_id
                and u.user_id = #userId#
                and u.tenant_id = #findTenantId#
                ) c
                where g.depth LIKE c.depth || '%'
                and tenant_id = #findTenantId#
                )
                and tenant_id = #findTenantId#
                )
            </isEqual>
        </isEmpty>
        <isNotEmpty property="findUserId">AND user_id = #findUserId#</isNotEmpty>
        <isNotEmpty property="findUserNameText">
            and user_id in (
            select user_id from tb_mng_userinfo
            where tenant_id = #findTenantId#
            and (user_id like '%' || #findUserNameText# || '%' or user_name like '%' || #findUserNameText# || '%')
            )
        </isNotEmpty>
        group by to_char(to_date(substr(rec_time,1,8),'YYYYMMDD'),'d')
        ) t4 on rday = t4.rdate
        left outer join (
        select to_char(to_date(substr(rec_time,1,8),'YYYYMMDD'),'d') rdate, sum(rec_count) sum_cnt3, SUM(end_time_sum)
        sum_time3
        from TB_REC_FILE_DAY
        where tenant_id = #findTenantId#
        and <![CDATA[	rec_time > to_char(sysdate - to_char(to_date(sysdate),'d')-14,'YYYYMMDD')	]]>
        and <![CDATA[	rec_time < to_char(sysdate - to_char(to_date(sysdate),'d')-7,'YYYYMMDD')	]]>
        <isNotEmpty property="findGroupId">
            and user_id in (
            select user_id from tb_mng_userinfo u, tb_mng_group g
            where u.tenant_id = g.tenant_id and u.group_id = g.group_id
            and u.tenant_id = #findTenantId#
            and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
            and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
            )
        </isNotEmpty>
        <isEmpty property="findGroupId">
            <isNotEqual property="grantId" compareValue="GroupManager">
                <isNotEmpty property="controlAuth">
                    and user_id in (
                    select user_id from tb_mng_userinfo
                    where group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and instr(','||control_auth||',',','||g.depth||',') > 0
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                    and tenant_id = #findTenantId#
                    )
                </isNotEmpty>
            </isNotEqual>
            <isEqual property="grantId" compareValue="GroupManager">
                and user_id in (
                select user_id from tb_mng_userinfo
                where group_id in (
                select g.group_id
                from tb_mng_group g,
                (
                select depth from tb_mng_group g, tb_mng_userinfo u
                where g.tenant_id = u.tenant_id
                and g.group_id = u.group_id
                and u.user_id = #userId#
                and u.tenant_id = #findTenantId#
                ) c
                where g.depth LIKE c.depth || '%'
                and tenant_id = #findTenantId#
                )
                and tenant_id = #findTenantId#
                )
            </isEqual>
        </isEmpty>
        <isNotEmpty property="findUserId">AND user_id = #findUserId#</isNotEmpty>
        <isNotEmpty property="findUserNameText">
            and user_id in (
            select user_id from tb_mng_userinfo
            where tenant_id = #findTenantId#
            and (user_id like '%' || #findUserNameText# || '%' or user_name like '%' || #findUserNameText# || '%')
            )
        </isNotEmpty>
        group by to_char(to_date(substr(rec_time,1,8),'YYYYMMDD'),'d')
        ) t3 on rday = t3.rdate
        left outer join (
        select to_char(to_date(substr(rec_time,1,8),'YYYYMMDD'),'d') rdate, sum(rec_count) sum_cnt2, SUM(end_time_sum)
        sum_time2
        from TB_REC_FILE_DAY
        where tenant_id = #findTenantId#
        and <![CDATA[	rec_time > to_char(sysdate - to_char(to_date(sysdate),'d')-7,'YYYYMMDD')	]]>
        and <![CDATA[	rec_time < to_char(sysdate - to_char(to_date(sysdate),'d'),'YYYYMMDD')		]]>
        <isNotEmpty property="findGroupId">
            and user_id in (
            select user_id from tb_mng_userinfo u, tb_mng_group g
            where u.tenant_id = g.tenant_id and u.group_id = g.group_id
            and u.tenant_id = #findTenantId#
            and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
            and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
            )
        </isNotEmpty>
        <isEmpty property="findGroupId">
            <isNotEqual property="grantId" compareValue="GroupManager">
                <isNotEmpty property="controlAuth">
                    and user_id in (
                    select user_id from tb_mng_userinfo
                    where group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and instr(','||control_auth||',',','||g.depth||',') > 0
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                    and tenant_id = #findTenantId#
                    )
                </isNotEmpty>
            </isNotEqual>
            <isEqual property="grantId" compareValue="GroupManager">
                and user_id in (
                select user_id from tb_mng_userinfo
                where group_id in (
                select g.group_id
                from tb_mng_group g,
                (
                select depth from tb_mng_group g, tb_mng_userinfo u
                where g.tenant_id = u.tenant_id
                and g.group_id = u.group_id
                and u.user_id = #userId#
                and u.tenant_id = #findTenantId#
                ) c
                where g.depth LIKE c.depth || '%'
                and tenant_id = #findTenantId#
                )
                and tenant_id = #findTenantId#
                )
            </isEqual>
        </isEmpty>
        <isNotEmpty property="findUserId">AND user_id = #findUserId#</isNotEmpty>
        <isNotEmpty property="findUserNameText">
            and user_id in (
            select user_id from tb_mng_userinfo
            where tenant_id = #findTenantId#
            and (user_id like '%' || #findUserNameText# || '%' or user_name like '%' || #findUserNameText# || '%')
            )
        </isNotEmpty>
        group by to_char(to_date(substr(rec_time,1,8),'YYYYMMDD'),'d')
        ) t2 on rday = t2.rdate
        left outer join (
        select to_char(to_date(substr(rec_time,1,8),'YYYYMMDD'),'d') rdate, sum(rec_count) sum_cnt1, SUM(end_time_sum)
        sum_time1
        from TB_REC_FILE_DAY
        where tenant_id = #findTenantId#
        and <![CDATA[	rec_time > to_char(sysdate - to_char(to_date(sysdate),'d'),'YYYYMMDD')	]]>
        and <![CDATA[	rec_time < to_char(sysdate,'YYYYMMDD')									]]>
        <isNotEmpty property="findGroupId">
            and user_id in (
            select user_id from tb_mng_userinfo u, tb_mng_group g
            where u.tenant_id = g.tenant_id and u.group_id = g.group_id
            and u.tenant_id = #findTenantId#
            and depth between substr(#findGroupId#, instr(#findGroupId#,'_')+1,10)
            and substr(#findGroupId#, instr(#findGroupId#,'_')+1,10) || CHR(127)
            )
        </isNotEmpty>
        <isEmpty property="findGroupId">
            <isNotEqual property="grantId" compareValue="GroupManager">
                <isNotEmpty property="controlAuth">
                    and user_id in (
                    select user_id from tb_mng_userinfo
                    where group_id in (
                    select g.group_id
                    from tb_mng_group g,
                    (
                    select depth from tb_mng_group g, tb_mng_userinfo u
                    where g.tenant_id = u.tenant_id
                    and instr(','||control_auth||',',','||g.depth||',') > 0
                    and u.user_id = #userId#
                    and u.tenant_id = #findTenantId#
                    ) c
                    where g.depth LIKE c.depth || '%'
                    and tenant_id = #findTenantId#
                    )
                    and tenant_id = #findTenantId#
                    )
                </isNotEmpty>
            </isNotEqual>
            <isEqual property="grantId" compareValue="GroupManager">
                and user_id in (
                select user_id from tb_mng_userinfo
                where group_id in (
                select g.group_id
                from tb_mng_group g,
                (
                select depth from tb_mng_group g, tb_mng_userinfo u
                where g.tenant_id = u.tenant_id
                and g.group_id = u.group_id
                and u.user_id = #userId#
                and u.tenant_id = #findTenantId#
                ) c
                where g.depth LIKE c.depth || '%'
                and tenant_id = #findTenantId#
                )
                and tenant_id = #findTenantId#
                )
            </isEqual>
        </isEmpty>
        <isNotEmpty property="findUserId">AND user_id = #findUserId#</isNotEmpty>
        <isNotEmpty property="findUserNameText">
            and user_id in (
            select user_id from tb_mng_userinfo
            where tenant_id = #findTenantId#
            and (user_id like '%' || #findUserNameText# || '%' or user_name like '%' || #findUserNameText# || '%')
            )
        </isNotEmpty>
        group by to_char(to_date(substr(rec_time,1,8),'YYYYMMDD'),'d')
        ) t1 on rday = t1.rdate
        order by t_d.rday asc
    </select>


    <select id="recSearch.getRecGrantListCnt" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecGrantListCnt */
        SELECT COUNT(*) AS CNT
        FROM TB_REC_GRANT A
      		INNER JOIN (
				SELECT TENANT_ID,
					SUBSTR(REC_TIME, 1, 8)                            AS REC_TIME_DATE,
					SUBSTR(REC_TIME, 9, 13)                           AS REC_TIME_TIME,
					REC_KEY,
					GROUP_ID,
					DN_NO,
					CASE
						WHEN CALL_KIND = 1 THEN '수신'
						ELSE '발신'
						END                                           AS CALL_KIND,
					CALL_ID,
					USER_ID,
					TO_CHAR(TO_DATE(END_TIME, 'sssss'), 'hh24:mi:ss') AS END_TIME
				FROM TB_REC_FILE
			) B ON A.REC_KEY = B.REC_KEY
			INNER JOIN TB_MNG_USERINFO  ON A.TENANT_ID = C.TENANT_ID AND A.USER_ID = C.USER_ID AND C.TENANT_ID = #findTenantId#
        WHERE ((#findTenantId# IS NULL AND 1 = 1) OR (#findTenantId# IS NOT NULL AND B.TENANT_ID = #findTenantId#))
          AND ((#findDnText# IS NULL AND 1 = 1) OR
               (#findDnText# IS NOT NULL AND B.DN_NO like '%' || #findDnText# || '%'))
          AND ((#findUserId# IS NULL AND 1 = 1) OR (#findUserId# IS NOT NULL AND A.USER_ID = #findUserId#))
          AND ((#findCallIdText# IS NULL AND 1 = 1) OR (#findCallIdText# IS NOT NULL AND B.CALL_ID = #findCallIdText#))
          AND (B.REC_TIME_DATE BETWEEN #txtDate1_From# AND #txtDate1_To#)
          AND ((#insId# IS NULL AND 1 = 1) OR (#insId# IS NOT NULL AND A.INS_ID = #insId#))
          AND <![CDATA[ 	(B.END_TIME BETWEEN #callFrmTm# AND #callEndTm#) ]]>
    </select>

    <select id="recSearch.getRecGrantList" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecGrantList */
		SELECT *
		FROM (
			SELECT Row_Number() over (order by start_date desc, user_id desc) RowNum2, TB_IN.*
			FROM (
				SELECT Row_Number()                           over (order by A.START_date, a.end_date) RowNum1,
					 A.REC_KEY                           AS REC_KEY,
					 A.DOWNLOAD_FLAG,
					 TO_CHAR(A.START_DATE, 'YYYY-MM-DD') AS START_DATE,
					 TO_CHAR(A.END_DATE, 'YYYY-MM-DD')   AS END_DATE,
					 TO_CHAR(A.INS_DATE, 'YYYY-MM-DD')   AS INS_DATE,
					 A.USER_ID                           AS USER_ID,
					 A.TENANT_ID                         AS TENANT_ID,
					 C.USER_NAME                         AS USER_NAME,
					 SUBSTR(B.REC_TIME_DATE, 1, 4) || '-' || SUBSTR(B.REC_TIME_DATE, 5, 2) || '-' ||
					 SUBSTR(B.REC_TIME_DATE, 7, 2)       AS REC_TIME_DATE,
					 SUBSTR(B.REC_TIME_TIME, 1, 2) || ':' || SUBSTR(B.REC_TIME_TIME, 3, 2) || ':' ||
					 SUBSTR(B.REC_TIME_TIME, 5, 2)       AS REC_TIME_TIME,
					 B.DN_NO                             AS DN_NO,
					 B.END_TIME                          AS END_TIME,
					 B.CALL_KIND,
					 B.CALL_ID                           AS CALL_ID,
					 B.USER_ID                           AS AGENT_ID
				FROM TB_REC_GRANT A
					INNER JOIN (
						SELECT TENANT_ID,
							  SUBSTR(REC_TIME, 1, 8)                            AS REC_TIME_DATE,
							  SUBSTR(REC_TIME, 9, 13)                           AS REC_TIME_TIME,
							  REC_KEY,
							  GROUP_ID,
							  DN_NO,
							  CASE
								  WHEN CALL_KIND = 1 THEN '수신'
								  ELSE '발신'
								  END                                           AS CALL_KIND,
							  CALL_ID,
							  USER_ID,
							  TO_CHAR(TO_DATE(END_TIME, 'sssss'), 'hh24:mi:ss') AS END_TIME
						FROM TB_REC_FILE
					) B ON A.REC_KEY = B.REC_KEY
					INNER JOIN TB_MNG_USERINFO  ON A.TENANT_ID = C.TENANT_ID AND A.USER_ID = C.USER_ID AND C.TENANT_ID = #findTenantId#
				WHERE ((#findTenantId# IS NULL AND 1 = 1) OR
					 (#findTenantId# IS NOT NULL AND B.TENANT_ID = #findTenantId#))
				AND ((#findDnText# IS NULL AND 1 = 1) OR
					 (#findDnText# IS NOT NULL AND B.DN_NO like '%' || #findDnText# || '%'))
				AND ((#findGroupId# IS NULL AND 1 = 1) OR
					 (#findGroupId# IS NOT NULL AND B.GROUP_ID = #findGroupId#))
				AND ((#findUserId# IS NULL AND 1 = 1) OR
					 (#findUserId# IS NOT NULL AND A.USER_ID = #findUserId#))
				AND ((#findCallIdText# IS NULL AND 1 = 1) OR
					 (#findCallIdText# IS NOT NULL AND B.CALL_ID = #findCallIdText#))
				AND (B.REC_TIME_DATE BETWEEN #txtDate1_From# AND #txtDate1_To#)
				AND ((#insId# IS NULL AND 1 = 1) OR (#insId# IS NOT NULL AND A.INS_ID = #insId#))
				AND <![CDATA[ (B.END_TIME BETWEEN #callFrmTm# AND #callEndTm#) ]]>
			) TB_IN
			WHERE RowNum1<![CDATA[ <=]]> #iEPageNo#
		) TB_OUT
        WHERE RowNum2 <![CDATA[<= ]]>#iSPageNo#
    </select>

    <select id="recSearch.getRecSearchList_API" parameterClass="java.util.HashMap" resultClass="egovMap">
        /* ID : recSearch.getRecSearchList_API */
        SELECT DISTINCT F.REC_KEY,
                        F.TENANT_ID,
                        SUBSTR(F.REC_TIME, 1, 8) REC_DATE,
                        SUBSTR(F.REC_TIME, 9, 6) REC_TIME,
                        F.DN_NO,
                        F.USER_ID,
                        F.PHONE_IP,
                        NVL(END_TIME, 0)         END_TIME,
                        CUST_NAME,
                        CUST_TEL,
                        CUST_NO,
                        MEDIA_VOICE,
                        MEDIA_SCR,
                        MEDIA_MOVIE,
                        MEDIA_EMAIL,
                        MEDIA_CHAT,
                        MEDIA_FAX,
                        MEDIA_DOC,
                        UPLOAD_CNT_VOICE,
                        UPLOAD_CNT_SCR,
                        UPLOAD_CNT_MOVIE,
                        UPLOAD_CNT_EMAIL,
                        UPLOAD_CNT_CHAT,
                        UPLOAD_CNT_FAX,
                        UPLOAD_CNT_DOC,
                        CUST_ETC1,
                        CUST_ETC2,
                        CUST_ETC3,
                        CUST_ETC4,
                        CUST_ETC5,
                        CUST_ETC6,
                        CUST_ETC7,
                        CUST_ETC8,
                        CUST_ETC9,
                        CUST_ETC10,
                        SEARCH_VISIBLE,
                        USER_NAME,
                        F.GROUP_ID,
                        GROUP_NAME,
                        CASE CALL_KIND
                            WHEN '1' THEN '수신'
                            WHEN '2' THEN '발신'
                            ELSE ''
                            END AS               CALL_KIND,
                        CALL_ID,
                        MARKING_CLASS,
                        MARKING_COLOR,
                        HOLD,
                        NVL(CALL_TIME_I, 0)      CALL_TIME,
                        CASE nvl(F.HOLD,0) WHEN 0 THEN nvl(F.CALL_TIME_I,0) ELSE nvl(F.END_TIME,0) END AS CONVERT_TIME,
                        TRAN_TEL,
                        DN_NO_REF,
                        FILE_NAME_I
                        t6.enc_key
        FROM TB_REC_FILE F
                 LEFT JOIN TB_MNG_USERINFO B
                           ON F.TENANT_ID = B.TENANT_ID
                               AND F.USER_ID = B.USER_ID
                 LEFT JOIN TB_MNG_USERTELNO TB_DN
                           ON F.TENANT_ID = TB_DN.TENANT_ID
                               AND F.DN_NO = TB_DN.DN_NO
                 LEFT JOIN TB_MNG_GROUP C
                           ON F.TENANT_ID = C.TENANT_ID
                               AND F.GROUP_ID = C.GROUP_ID
                 LEFT OUTER JOIN TB_REC_MARKCODE D
                                 ON F.TENANT_ID = D.TENANT_ID
                                     AND F.CUST_ETC9 = TO_CHAR(D.MARKING_ID)
                 
				 LEFT OUTER JOIN TB_MNG_ENCKEY t6
					<![CDATA[
					ON F.REC_TIME >= to_char(t6.LIC_TIME,'YYYYMMDDHH24MMSS') 
					and  t1.REC_TIME <= to_char(nvl(t6.LIC_TIME_END,sysdate+ (INTERVAL '10' YEAR)),'YYYYMMDDHH24MMSS')
					and t6.GUBUN = '0'
				   ]]>
        WHERE SEARCH_VISIBLE = '1'
       	AND F.TENANT_ID = #s_API_TENANT_ID# 
       	AND F.REC_TIME BETWEEN CONCAT(#s_API_REC_TIME#,'00') AND CONCAT(#s_API_REC_TIME#, '99')
       	AND F.CUST_TEL = #s_API_CUST_TEL# 
        ORDER BY REC_TIME DESC
    </select>
    
    <!-- 복원관련 start -->
    <select id="recSearch.getRecRestoreSearchListCnt" parameterClass="java.util.HashMap" resultClass="egovMap">
    /* ID : recSearch.getRecRestoreSearchListCnt */
	    	select
		        count(*) cnt
		    from tb_rec_restore_file rf   
			where search_visible=1
				<isNotEmpty property="txtDate"> 
					and TO_DATE(REC_TIME, 'YYYYMMDD HH24:MI:SS') between TO_DATE(#txtDate#||#recFrmTm#, 'YYYYMMDD HH24:MI:SS')
								   and TO_DATE(#txtDate# ||#recEndTm# , 'YYYYMMDD HH24:MI:SS')
				</isNotEmpty>	   
				<isNotEmpty property="findDnName">
					and  DN_NO like '%' ||  #findDnName# || '%'	
				</isNotEmpty>
				<isNotEmpty property="findCallID">
					and CALL_ID like '%' || #findCallID# || '%'	
				</isNotEmpty>
    </select>
    
    <select id="recSearch.getRecRestoreSearchList" parameterClass="java.util.HashMap" resultClass="egovMap">
    /* ID : recSearch.getRecRestoreSearchList */
	    select 
		    to_char(to_date(rec_time,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd') rec_date,
		    to_char(to_date(rec_time,'yyyy-mm-dd hh24:mi:ss'),'hh24:mi:ss') rec_time,
		    dn_no,
		    tenant_id,
		    user_id,
			file_name,
            restore_kind,
            cust_tel,
		    RowNum1,
		    RESTORE_COUNT,
		    call_id,
            case when RESTORE_MERGE_KEY is not null then '병합' 
                 when  restore_status <![CDATA[= 0 ]]> then '복원대기'
                 when  restore_status <![CDATA[= 1  ]]> or restore_status <![CDATA[=2 ]]> then '변환중'
                 when  restore_status <![CDATA[= 3  ]]> then '전송중'
                 when  restore_status <![CDATA[= 9 ]]> then '복원완료'
                 when  restore_status <![CDATA[= 10]]>  then '병합파일'
                 else '복원실패' end restore_status_str,
		   	case when RESTORE_MERGE_KEY is not null then '11'
                 when  restore_status <![CDATA[= 0 ]]> then '0'
                 when  restore_status <![CDATA[= 1  ]]> or restore_status <![CDATA[=2 ]]> then '2'
                 when  restore_status <![CDATA[= 3  ]]> then '3'
                 when  restore_status <![CDATA[= 9 ]]> then '4'
                 when  restore_status <![CDATA[= 10]]>  then '10'
                 else '5' end restore_status_cd,
		   	rec_key,
		   	RESTORE_MERGE_KEY
	    from 
	    	(
	    	select
		        Row_Number() over (order by rf.REC_TIME asc ) as RowNum1,  
		        rf.*
		    from tb_rec_restore_file rf   
			where search_visible=1 
				<isNotEmpty property="txtDate"> 
					and TO_DATE(REC_TIME, 'YYYYMMDD HH24:MI:SS') between TO_DATE(#txtDate#||#recFrmTm#, 'YYYYMMDD HH24:MI:SS')
								   and TO_DATE(#txtDate# ||#recEndTm# , 'YYYYMMDD HH24:MI:SS')
				</isNotEmpty>	   
				<isNotEmpty property="findDnName">
					and  DN_NO like '%' ||  #findDnName# || '%'	
				</isNotEmpty>
				<isNotEmpty property="findCallID">
					and CALL_ID like '%' || #findCallID# || '%'	
				</isNotEmpty>
				order by rec_time asc , RESTORE_COUNT desc
			)
		where <![CDATA[ RowNum1 > (#iEPageNo# - #iSPageNo# )]]>
			and <![CDATA[ RowNum1 <= #iEPageNo#  ]]>
		
    </select>
    
    <select id="recSearch.getRecRestoreUcIdSearchList" parameterClass="java.util.HashMap" resultClass="egovMap">
    /* ID : recSearch.getRecRestoreUcIdSearchList */
		select 
			to_char(to_date(rec_time,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd') rec_date,
		    to_char(to_date(rec_time,'yyyy-mm-dd hh24:mi:ss'),'hh24:mi:ss') rec_time,
		    dn_no,
		    user_id,
		    tenant_id,
			file_name,
            cust_tel,
            restore_kind,
		    restore_status
		from tb_rec_restore_file 
		where CALL_ID = #findCallID#   
		order by REC_TIME asc
    </select>
    
    <select id="recSearch.getRecRestoreRecKeySearchList" parameterClass="java.util.HashMap" resultClass="egovMap">
    /* ID : recSearch.getRecRestoreRecKeySearchList */
		select 
			to_char(to_date(rec_time,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd') rec_date,
		    to_char(to_date(rec_time,'yyyy-mm-dd hh24:mi:ss'),'hh24:mi:ss') rec_time,
		    dn_no,
		    user_id,
		    tenant_id,
			file_name,
            call_id,
            cust_tel,
            restore_kind,
		    restore_status
		from tb_rec_restore_file 
		where RESTORE_MERGE_KEY = #findRecKey#   
		order by REC_TIME asc
    </select>
    
    <select id="recSearch.getRecRestoreStatusList" parameterClass="java.util.HashMap" resultClass="egovMap">
    /* ID : recSearch.getRecRestoreStatusList */
		select
		    restore_status_cd status, count(*) cnt
		from (
		        select 
		            case 
                        when RESTORE_MERGE_KEY is not null then '11'
                        when  restore_status <![CDATA[= 0 ]]> then '0'
                        when  restore_status <![CDATA[= 1  ]]> or restore_status <![CDATA[=2 ]]> then '2'
                        when  restore_status <![CDATA[= 3  ]]> then '3'
                        when  restore_status <![CDATA[= 9 ]]> then '4'
                        when  restore_status <![CDATA[= 10]]>  then '10'
                        else '5' end restore_status_cd
		        from  tb_rec_restore_file rrf
		        where search_visible=1
		        <isNotEmpty property="txtDate"> 
					and TO_DATE(REC_TIME, 'YYYYMMDD HH24:MI:SS') between TO_DATE(#txtDate#||#recFrmTm#, 'YYYYMMDD HH24:MI:SS')
								   and TO_DATE(#txtDate# ||#recEndTm# , 'YYYYMMDD HH24:MI:SS')
				</isNotEmpty>	   
				<isNotEmpty property="findDnName">
					and  DN_NO like '%' ||  #findDnName# || '%'	
				</isNotEmpty>
				<isNotEmpty property="findCallID">
					and CALL_ID like '%' || #findCallID# || '%'	
				</isNotEmpty>
		     ) rf
		group by restore_status_cd 
    </select>
    <!-- 복원관련 end -->
    
    <update id="recSearch.getRecSearchCustUpdate" parameterClass="java.util.HashMap" >
    	/* ID : recSearch.getRecSearchCustUpdate */
    	call sp_setcustinfo_v3(#recKey#,#callId#,#custName#,#findCustTel#,#findCustNo#,null,null,#fnidCustEtc#,null,null)
		
    </update>
    
    <update id="recSearch.getRecSearchCustExcelUpdate" parameterClass="java.util.HashMap" >
    /* ID : recSearch.getRecSearchCustExcelUpdate */
    	call sp_setcustinfo_v3(#updateInfo00#,#updateInfo01#,#updateInfo1#,#updateInfo3#,#updateInfo2#,null,null,
    	#updateInfo4#||'|C'||#updateInfo5#||'|C'||#updateInfo6#||'|C'||#updateInfo7#||'|C'||#updateInfo8#||'|C'||#updateInfo9#||'|C'||#updateInfo10#||'|C'||#updateInfo11#||'|C'
    	,null,null)
    </update>
    
    <select id="recSearch.getRecFilePathListCnt" parameterClass="java.util.HashMap" resultClass="egovMap">
   		/* recSearch.getRecFilePathListCnt */
		select 
		    count(*) CNT
		from TB_MNG_GUBUNINFO a
		where 1=1 
		<isNotEmpty property="findGubunCode"> 
			and a.gubun_code like '%' || #findGubunCode# || '%' 
		</isNotEmpty> 
		<isNotEmpty property="findGubunName">
			and a.gubun_name like '%' || #findGubunName# || '%'
		</isNotEmpty> 
		<isNotEmpty property="findGubunUseFlag">
			and a.gubun_use_flag = #findGubunUseFlag#
		</isNotEmpty> 
		<isNotEmpty property="findDeleteUseFlag">
			and a.delete_use_flag = #findDeleteUseFlag# 
		</isNotEmpty>
		<isNotEmpty property="findStorageUseVolumn">
			and a.storage_use_volumn = #findStorageUseVolumn#
		</isNotEmpty>
	</select>
    
    <select id="recSearch.getRecFilePathList" parameterClass="java.util.HashMap" resultClass="egovMap">
   		/* recSearch.getRecFilePathList */
			select 
			    GUBUN_CODE,
			    GUBUN_PARENT_CODE,
			    GUBUN_NAME,
			    GUBUN_PATH,
			    GUBUN_DESC,
			    GUBUN_USE_FLAG,
				DELETE_USE_FLAG,
				STORAGE_DAY,
				STORAGE_VOLUMN,
				STORAGE_USE_VOLUMN,
				DELETE_PATH,
				INS_ID
			from (
				select 
					ROW_NUMBER() OVER (ORDER BY a.INS_ID desc ) AS RowNum1,
				    a.GUBUN_CODE,
				    a.GUBUN_PARENT_CODE,
				    a.GUBUN_NAME,
				    a.GUBUN_PATH,
				    a.GUBUN_DESC,
				    a.GUBUN_USE_FLAG,
					a.DELETE_USE_FLAG,
					a.STORAGE_DAY,
					a.STORAGE_VOLUMN,
					a.STORAGE_USE_VOLUMN,
					a.DELETE_PATH,
					a.INS_ID
				FROM TB_MNG_GUBUNINFO a
				where 1=1 
				<isNotEmpty property="findGubunCode"> 
					and a.gubun_code like '%' || #findGubunCode# || '%' 
				</isNotEmpty> 
				<isNotEmpty property="findGubunName">
					and a.gubun_name like '%' || #findGubunName# || '%'
				</isNotEmpty> 
				<isNotEmpty property="findGubunUseFlag">
					and a.gubun_use_flag = #findGubunUseFlag#
				</isNotEmpty> 
				<isNotEmpty property="findDeleteUseFlag">
					and a.delete_use_flag = #findDeleteUseFlag# 
				</isNotEmpty>
				<isNotEmpty property="findStorageUseVolumn">
					and a.storage_use_volumn = #findStorageUseVolumn#
				</isNotEmpty>
			) TB_IN
			where <![CDATA[ RowNum1 > (#iEPageNo# - #iSPageNo# )]]>
			and <![CDATA[ RowNum1 <= #iEPageNo#  ]]>
	</select>
	
	<select id="recSearch.getRecFilePathCnt" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* recSearch.getRecFilePathCnt */
		SELECT 
		    count(*) cnt
		FROM TB_MNG_GUBUNINFO a
		where 1=1
		<isEqual property="inpId" compareValue="btnFilePath">
			and gubun_path = #filePath#
<!-- 			<isNotEmpty property="parentId"> -->
<!-- 				and gubun_parent_code = #parentId# -->
<!-- 			</isNotEmpty> -->
<!-- 			<isEmpty property="parentId"> -->
<!-- 				and gubun_parent_code is null -->
<!-- 			</isEmpty> -->
		</isEqual>
		<isEqual property="inpId" compareValue="btnPathCode">
			and GUBUN_CODE = #pathCode#
		</isEqual>
		<isEqual property="inpId" compareValue="btnDeletePath">
			and delete_path = #deletePath#
		</isEqual>
	</select>
	
	<insert id="recSearch.setRecFilePathInsert" parameterClass="java.util.HashMap">
		/* ID : recSearch.setRecFilePathInsert */
		insert into TB_MNG_GUBUNINFO (
			GUBUN_CODE
		 	<isNotEmpty property="parentId">
				,GUBUN_PARENT_CODE
			</isNotEmpty>
			,GUBUN_name,GUBUN_path,GUBUN_desc,ins_id,ins_date,GUBUN_USE_FLAG
			,STORAGE_DAY
			,DELETE_USE_FLAG,STORAGE_VOLUMN,STORAGE_USE_VOLUMN,DELETE_PATH
		 )VALUES
		 	(#pathCode#
		 	<isNotEmpty property="parentId">
		 		,#parentId#
		 	</isNotEmpty>
		 	,#groupName#,#filePath#,#groupDesc#,#glo_userId#,sysdate,#useFlag#
			<isNotEqual property="deleteUseFlag" compareValue="0">
		 		,#limit#
		 	</isNotEqual>
		 	<isEqual property="deleteUseFlag" compareValue="0">
		 		,null
		 	</isEqual>
		 	,#deleteUseFlag#,#storageVolumn#,#storageUseVolumn#,#deletePath#
		 	)
	</insert>
	
	<update id="recSearch.setRecFilePathParentIdUpdate" parameterClass="java.util.HashMap">
		/* ID : recSearch.setRecFilePathParentIdUpdate */
		UPDATE TB_MNG_GUBUNINFO SET
		FILE_PATH_PARENT_ID = #parentId#
		, UPT_ID = #glo_userId# 
		, UPT_DATE = sysdate
		WHERE GUBUN_CODE = #groupId#
	</update>
	
	<update id="recSearch.setRecFilePathUpdate" parameterClass="java.util.HashMap">
		/* ID : recSearch.setRecFilePathUpdate */
		 UPDATE TB_MNG_GUBUNINFO SET gubun_name = #groupName# , gubun_path = #filePath# , gubun_desc = #groupDesc# 
		<isNotEqual property="deleteUseFlag" compareValue="0">
	 		, STORAGE_DAY = #limit#
	 	</isNotEqual>
	 	<isEqual property="deleteUseFlag" compareValue="0">
	 		, STORAGE_DAY =null
	 	</isEqual>
		,DELETE_USE_FLAG = #deleteUseFlag# ,STORAGE_VOLUMN = #storageVolumn# ,STORAGE_USE_VOLUMN = #storageUseVolumn# ,DELETE_PATH = #deletePath# 
		, UPT_ID = #glo_userId#
		, UPT_DATE = sysdate
	 	WHERE GUBUN_CODE = #orgFilePathId#
		 
	</update>
	
	<update id="recSearch.setRecFilePathUseUpdate" parameterClass="java.util.HashMap">
		/* ID : recSearch.setRecFilePathUseUpdate */
		 UPDATE TB_MNG_GUBUNINFO  
		 SET UPT_ID = #glo_userId# 
			, UPT_DATE = sysdate
			, GUBUN_USE_FLAG = #useFlag#
		WHERE gubun_code = #orgFilePathId#
<!-- 	 	<isEqual property="useFlag" compareValue="N"> -->
<!-- 		 	WHERE GUBUN_CODE in ( -->
<!-- 	            SELECT  -->
<!-- 	                a.GUBUN_CODE -->
<!-- 	            FROM TB_MNG_GUBUNINFO a -->
<!-- 	            start with a.gubun_code = #orgFilePathId# -->
<!-- 	            connect by prior a.GUBUN_CODE = a.GUBUN_PARENT_CODE -->
<!--             )  -->
<!-- 		 </isEqual> -->
<!-- 		 <isEqual property="useFlag" compareValue="Y"> -->
<!-- 		 	WHERE GUBUN_CODE in ( -->
<!-- 	            SELECT  -->
<!-- 	                a.GUBUN_CODE -->
<!-- 	            FROM TB_MNG_GUBUNINFO a -->
<!-- 	            start with a.gubun_code = #orgFilePathId# -->
<!-- 	            connect by prior a.GUBUN_PARENT_CODE = a.GUBUN_CODE -->
<!--             )  -->
<!-- 		 </isEqual> -->
		 
	</update>
	
	<select id="recSearch.getRecFilePathDelChkCount" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* recSearch.getRecFilePathDelChkCount */
		select 
		    count(*) cnt
		from tb_rec_file_index fi
		inner join
		(
		    select '/'||a.gubun_directory||'/'||b.path||'/' as path 
		    from tb_sys_gubuninfo a ,(
		        SELECT 
		            LISTAGG(gubun_path, '/')  WITHIN GROUP (ORDER BY rownum desc) path
		        FROM TB_MNG_GUBUNINFO a
		        start with a.GUBUN_CODE = #groupId#
		        connect by prior a.GUBUN_PARENT_CODE = a.GUBUN_CODE
		        order by level desc
		    ) b
		) re
		on fi.store_drive like re.path || '%'
	</select>
	
	<update id="recSearch.setRecFilePathDelete" parameterClass="java.util.HashMap">
		/* ID : recSearch.setRecFilePathDelete */
		 delete from TB_MNG_GUBUNINFO
		 WHERE GUBUN_CODE = #groupId# or gubun_parent_code = #groupId#
	</update>
	
	<select id="recSearch.getSysGubunList" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* recSearch.getSysGubunList */
		select * from (
			select 
				ROW_NUMBER() OVER (ORDER BY GUBUN_START_DATE desc ) AS RowNum2
			    ,SYSTEM_ID
				,PROCESS_ID
				,GUBUN_STATUS
				,GUBUN_START_DATE
				,GUBUN_FILE_MAX
				,GUBUN_SELECT_DAY
				,GUBUN_DIRECTORY
				,GUBUN_MEDIA_SPACE
				,GUBUN_MEDIA_FREE_SPACE
				,DELETE_DIRECTORY
				,GUBUN_KIND
			    ,system_name
			    ,process_name
			from (
				select 
				     ROW_NUMBER() OVER (ORDER BY g.GUBUN_START_DATE desc ) AS RowNum1
				    ,g.SYSTEM_ID
				    ,g.PROCESS_ID
				    ,g.GUBUN_STATUS
				    ,g.GUBUN_START_DATE
				    ,g.GUBUN_FILE_MAX
				    ,g.GUBUN_SELECT_DAY
				    ,g.GUBUN_DIRECTORY
				    ,g.GUBUN_MEDIA_SPACE
				    ,g.GUBUN_MEDIA_FREE_SPACE
				    ,g.DELETE_DIRECTORY
				    ,g.GUBUN_KIND
				    ,s.system_name
				    ,p.process_name
				from tb_sys_gubuninfo g
				inner join tb_sys_sysinfo s
				    on g.system_id = s.system_id
				inner join tb_sys_procinfo p
				    on g.system_id = p.system_id 
				    and g.process_id = p.process_id
				where 1=1 
				<isNotEmpty property="findSystemId">
					and g.system_id = #findSystemId#
				</isNotEmpty>
				<isNotEmpty property="findProcessCode">
					and g.process_id = #findProcessCode#
				</isNotEmpty>
				<isNotEmpty property="findGubunKind">
					and g.gubun_kind = #findGubunKind#
				</isNotEmpty>
				<isNotEmpty property="findGubunStatus">
					and g.gubun_status = #findGubunStatus#
				</isNotEmpty>
			) TB_IN
	        WHERE RowNum1<![CDATA[ <= ]]> #iEPageNo#
        ) TB_OUT
        WHERE RowNum2 <![CDATA[ <= ]]> #iSPageNo#
	    order by GUBUN_START_DATE desc
	</select>
	
	<select id="recSearch.getSysGubunListCnt" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* recSearch.getSysGubunListCnt */
		select 
		     count(*) CNT
		from tb_sys_gubuninfo
		where 1=1 
		<isNotEmpty property="findSystemId">
			and system_id = #findSystemId#
		</isNotEmpty>
		<isNotEmpty property="findProcessCode">
			and process_id = #findProcessCode#
		</isNotEmpty>
		<isNotEmpty property="findGubunKind">
			and gubun_kind = #findGubunKind#
		</isNotEmpty>
		<isNotEmpty property="findGubunStatus">
			and gubun_status = #findGubunStatus#
		</isNotEmpty>
	</select>
	
	<insert id="recSearch.setSysGubunInfo" parameterClass="java.util.HashMap">
		/* ID : recSearch.setRecFileGubunInfo */
		insert into tb_sys_gubuninfo (
			SYSTEM_ID
			, process_id
			, GUBUN_STATUS
			, GUBUN_START_DATE
			, GUBUN_FILE_MAX
			, GUBUN_SELECT_DAY
			, GUBUN_DIRECTORY
			, GUBUN_MEDIA_FREE_SPACE
			, DELETE_DIRECTORY
			, GUBUN_KIND
		 )VALUES
		 	(#findSystemId#
		 	,#findProcessCode#,#findGubunStatus#, to_char(sysdate,'yyyyMMdd') ,#findGubunFileMax#
		 	,#findGubunSelectDay#,#findGubunDirectory#,#findGubunMediaFreeSpace#
		 	, #findDeleteDirectory# , #findGubunKind#
		 	)
	</insert>
	
	<update id="recSearch.setSysGubunInfoUpdate" parameterClass="java.util.HashMap">
		/* ID : recSearch.setRecFileGubunInfoUpdate */
		update tb_sys_gubuninfo set
			 GUBUN_STATUS = #findGubunStatus#
			, GUBUN_START_DATE = to_char(sysdate,'yyyyMMdd')
			, GUBUN_FILE_MAX = #findGubunFileMax#
			, GUBUN_SELECT_DAY = #findGubunSelectDay#
			, GUBUN_DIRECTORY = #findGubunDirectory#
			, GUBUN_MEDIA_SPACE = #findGubunMediaSpace#
			, GUBUN_MEDIA_FREE_SPACE = #findGubunMediaFreeSpace#
		 	, DELETE_DIRECTORY = #findDeleteDirectory#
		 	, GUBUN_KIND = #findGubunKind#
		where SYSTEM_ID = #findSystemId#
		and process_id = #findProcessCode#
	</update>
	
	<delete id="recSearch.delSysGubunInfo" parameterClass="java.util.HashMap">
		delete from tb_sys_gubuninfo
		where SYSTEM_ID = #findSystemId#
		and process_id = #findProcessCode#
	</delete>
	
	<select id="recSearch.getRecGubunInfoCnt" parameterClass="java.util.HashMap" resultClass="egovMap">
			/* ID : recSearch.getRecGubunInfoCnt */
			select 
			    count(*) CNT
			from tb_rec_gubun g
			inner join tb_mng_gubuninfo gi
			    on g.gubun_code = gi.gubun_code
			where g.gubun_proc_flag = 1
			<![CDATA[ and g.gubun_time >= #sFindSGubunTime# ]]> 
			<![CDATA[ and g.gubun_time <= #sFindEGubunTime# ]]>
			<isEqual property="selSearchType" compareValue="G">
				<isNotEmpty property="findSStorageSize">				
					<![CDATA[ and (ceil(g.GUBUN_DAILY_VOLUMN / 1024 *100)/100) >= #findSStorageSize# ]]>
				</isNotEmpty>
				<isNotEmpty property="findEStorageSize">
					<![CDATA[ and (ceil(g.GUBUN_DAILY_VOLUMN / 1024 *100)/100) <= #findEStorageSize# ]]>
				</isNotEmpty>
			</isEqual>
			<isEqual property="selSearchType" compareValue="S">
				<isNotEmpty property="findSStorageSize">				
					<![CDATA[ and (ceil(gi.storage_use_volumn / 1024 *100)/100) >= #findSStorageSize# ]]>
				</isNotEmpty>
				<isNotEmpty property="findEStorageSize">
					<![CDATA[ and (ceil(gi.storage_use_volumn / 1024 *100)/100) <= #findEStorageSize# ]]>
				</isNotEmpty>
			</isEqual>
			<isNotEmpty property="findGubunName">
				and g.gubun_name like '%' || #findGubunName# || '%' 
			</isNotEmpty>
			<isNotEmpty property="findGubunPath">
				and g.gubun_path like '%' || #findGubunPath# || '%' 
			</isNotEmpty>
	</select>
	
	<select id="recSearch.getRecGubunInfo" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : recSearch.getRecGubunInfo */
		select * from (
			select 
				ROW_NUMBER() OVER (ORDER BY DEL_TIME desc ) AS RowNum2
			    ,gubun_time
			    ,gubun_name
			    ,gubun_work_count
			    ,gubun_work_check
			    ,gubun_date
			    ,gubun_path
			    ,GUBUN_DAILY_VOLUMN
			    ,storage_use_volumn
			    ,DEL_TIME
			from (
				select 
					ROW_NUMBER() OVER (ORDER BY g.DEL_TIME desc ) AS RowNum1
					,g.DEL_TIME
				    ,g.gubun_time
				    ,g.gubun_name
				    ,g.gubun_work_count
				    ,g.gubun_work_check
				    ,g.gubun_date
				    ,g.gubun_path
				    ,g.GUBUN_DAILY_VOLUMN
				    ,gi.storage_use_volumn
				from tb_rec_gubun g
				inner join tb_mng_gubuninfo gi
				    on g.gubun_code = gi.gubun_code
				where g.gubun_proc_flag = 1
				<![CDATA[ and g.gubun_time >= #sFindSGubunTime# ]]> 
				<![CDATA[ and g.gubun_time <= #sFindEGubunTime# ]]>
				<isEqual property="selSearchType" compareValue="G">
					<isNotEmpty property="findSStorageSize">				
						<![CDATA[ and (ceil(g.GUBUN_DAILY_VOLUMN / 1024 *100)/100) >= #findSStorageSize# ]]>
					</isNotEmpty>
					<isNotEmpty property="findEStorageSize">
						<![CDATA[ and (ceil(g.GUBUN_DAILY_VOLUMN / 1024 *100)/100) <= #findEStorageSize# ]]>
					</isNotEmpty>
				</isEqual>
				<isEqual property="selSearchType" compareValue="S">
					<isNotEmpty property="findSStorageSize">				
						<![CDATA[ and (ceil(gi.storage_use_volumn / 1024 *100)/100) >= #findSStorageSize# ]]>
					</isNotEmpty>
					<isNotEmpty property="findEStorageSize">
						<![CDATA[ and (ceil(gi.storage_use_volumn / 1024 *100)/100) <= #findEStorageSize# ]]>
					</isNotEmpty>
				</isEqual>
				<isNotEmpty property="findGubunName">
					and g.gubun_name like '%' || #findGubunName# || '%' 
				</isNotEmpty>
				<isNotEmpty property="findGubunPath">
					and g.gubun_path like '%' || #findGubunPath# || '%' 
				</isNotEmpty>
					) TB_IN
			        WHERE RowNum1<![CDATA[ <=]]> #iEPageNo#
		        ) TB_OUT
	        WHERE RowNum2 <![CDATA[<= ]]>#iSPageNo#
		    order by gubun_time desc
	</select>
	
	<select id="recSearch.getRecDelGubunInfoCnt" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : recSearch.getRecDelGubunInfoCnt */
		select 
		    count(*) CNT
		from tb_rec_gubun g
		where g.gubun_proc_flag = 2
		<![CDATA[ and g.GUBUN_TIME >= #sFindSGubunTime# ]]> 
		<![CDATA[ and g.GUBUN_TIME <= #sFindEGubunTime# ]]>
		<isNotEmpty property="findGubunName">
			and g.gubun_name like '%' || #findGubunName# || '%' 
		</isNotEmpty>
		<isNotEmpty property="findGubunPath">
			and g.gubun_path like '%' || #findGubunPath# || '%' 
		</isNotEmpty>
		<isNotEmpty property="findDelPath">
			and g.GUBUN_PATH = #findDelPath#
		</isNotEmpty>
		<isNotEmpty property="findDelWorkGubun">
			and g.GUBUN_WORK_GUBUN = #findDelWorkGubun#
		</isNotEmpty>
	</select>
	
	<select id="recSearch.getRecDelGubunInfo" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : recSearch.getRecDelGubunInfo */
		select * from (
		select 
   			Row_Number() over (order by DEL_TIME desc) RowNum2
			,DEL_TIME
			,GUBUN_NAME
			,GUBUN_WORK_COUNT
			,GUBUN_PATH
		from (
			select 
				ROW_NUMBER() OVER (ORDER BY g.DEL_TIME desc ) AS RowNum1
				,g.DEL_TIME
				,g.GUBUN_NAME
				,g.GUBUN_WORK_COUNT
				,g.GUBUN_PATH
			from tb_rec_gubun g
			where g.gubun_proc_flag = 2
			<![CDATA[ and g.GUBUN_TIME >= #sFindSGubunTime# ]]> 
			<![CDATA[ and g.GUBUN_TIME <= #sFindEGubunTime# ]]>
			<isNotEmpty property="findGubunName">
				and g.gubun_name like '%' || #findGubunName# || '%' 
			</isNotEmpty>
			<isNotEmpty property="findGubunPath">
				and g.gubun_path like '%' || #findGubunPath# || '%' 
			</isNotEmpty>
			<isNotEmpty property="findDelPath">
				and g.GUBUN_PATH = #findDelPath#w
			</isNotEmpty>
			) TB_IN
	        WHERE RowNum1<![CDATA[ <=]]> #iEPageNo#
        ) TB_OUT
        WHERE RowNum2 <![CDATA[<= ]]>#iSPageNo#
		ORDER BY DEL_TIME desc
	</select>
	
	
	<insert id="recSearch.setRecGubunDelInsert" parameterClass="java.util.HashMap">
		/* ID : recSearch.setRecGubunDelInsert */
		insert into tb_rec_gubun (
			GUBUN_TIME
			,GUBUN_CODE
			,DN_NO
			,SYSTEM_ID
			,PROCESS_ID
			,GUBUN_NAME
			,GUBUN_WORK_COUNT
			,GUBUN_WORK_CHECK
			,GUBUN_DATE
			,GUBUN_PATH
			,GUBUN_DAILY_VOLUMN
			,GUBUN_PROC_FLAG
			,DEL_TIME
		) values (
			
		)
			
	</insert>
	
	<select id="recSearch.getCallIdSearch" parameterClass="java.util.HashMap" resultClass="egovMap">
		select media_scr from tb_rec_file where call_id = #callId# and media_scr = 1	
	</select>
	
	<select id="recSearch.getRecUserInfo" parameterClass="java.util.HashMap" resultClass="egovMap">
		/* ID : reSearch.getRecUserInfo */
		SELECT T1.TENANT_ID
					, T3.TENANT_NAME 
					, T1.USER_ID
					, T1.USER_NAME
					, T1.GROUP_ID
					, T2.GROUP_NAME
			FROM TB_MNG_USERINFO T1
					LEFT OUTER JOIN TB_MNG_GROUP T2
						ON T1.TENANT_ID = T2.TENANT_ID 
						AND T1.GROUP_ID = T2.GROUP_ID
					LEFT OUTER JOIN TB_MNG_COMPANY T3
						ON T1.TENANT_ID = T3.TENANT_ID
		 WHERE 1=1
		   AND NVL(SYSDATE - T1.LOGIN_DATE, 0) <![CDATA[ <= ]]> 90
		<isGreaterThan property="authRank" compareValue="2">   
		   AND T1.TENANT_ID = #tenantId#
		</isGreaterThan>
		<isNotEmpty property="srchKeyword">
		   AND (T1.USER_NAME LIKE '%' || #srchKeyword# || '%' OR T1.USER_ID LIKE '%' || #srchKeyword# ||'%')
		</isNotEmpty>
	</select>
	
	
	<!-- 사유코드관리 리스트 -->   
	<select id="recSearch.getRecSearchReasonCodeList" parameterClass="java.util.HashMap"  resultClass="egovMap">
		SELECT  
			CODE_ID 
			, CODE_NAME
			, (SELECT CASE WHEN COUNT(*) = 0 THEN 'N' ELSE 'Y' END AS INSR_YN FROM TB_REC_FILE_SEARCH_REASON B WHERE A.CODE_ID = B.REASON_CODE) AS INSR_YN
		FROM TB_MNG_BASECODE A
		WHERE CLASS_ID = 'REC_SEARCH_REASON_CD' 
		AND CODE_ID != '00000'
		ORDER BY CODE_DESC
	</select>
	
	<!--  사유코드관리 코드 데이터 컨트롤 -->   
	<procedure id="recSearch.SP_REC_SEARCH_REASONCODE_MANAGE" parameterClass="java.util.HashMap"  resultClass="egovMap">
		{ CALL SP_REC_SEARCH_REASONCODE_MANAGE(#glo_tenantId#, #cudGubun#, #code#, #codeName#, #sortSeq#) }
	</procedure>
	
	
	<!-- 사유코드관리 삭제가능여부 확인 -->   
	<select id="recSearch.getReasonInsertCnt" parameterClass="java.util.HashMap"  resultClass="egovMap">
		SELECT COUNT(*) AS INRT_CNT
			FROM TB_REC_FILE_SEARCH_REASON
		WHERE REASON_CODE = #reasonCode#
	</select>
	
	<!-- 통화내역 조회사유 등록 -->   
	<procedure id="recSearch.SP_REC_SEARCH_REASON_SAVE" parameterClass="java.util.HashMap">
		{ CALL SP_REC_SEARCH_REASON_SAVE(
			#pTenantId#, #pDnNo#, #pUserId#, #pGroupId#, #pCustName#
			, #pCustTel#, #pCustNo#, #pFindField#, #pFindFieldText#
			, #pCallKind#, #pCustEtc9#, #pCallId#
			, #pTranTel#, #pFrmRecDate#, #pFrmRecTm#
			, #pToRecDate#, #pToRecTm#, #pFrmCallTm#
			, #pToCallTm#, #pSoliKind#, #pChkListeningYn#, #pChkDownloadYn#, #pReasonCode#
			, #pMemo#, #glo_userId#, #glo_tenantId#
		)}
	</procedure>
	
	<!-- 통화내역조회사유 건수 조회 -->
	<select id="recSearch.getRecSearchReasonConfirmListCnt" parameterClass="java.util.HashMap"  resultClass="egovMap">
		SELECT COUNT(*) AS CNT
			FROM (
				SELECT ROW_NUMBER() OVER (ORDER BY t1.INS_DATE DESC) AS ROWNUMBER
						, t1.SEARCH_REASON_ID
						, t2.TENANT_NAME AS TENANT_ID
						, t1.DN_NO
						, t1.USER_ID
						, t3.GROUP_NAME AS GROUP_ID
						, t1.CUST_NAME
						, t1.CUST_TEL
						, t1.CUST_NO
						, t9.COL_TEXT AS FIND_FIELD
						, t1.FIND_FIELD_TEXT
						, t1.CALL_KIND
						, t4.MARKING_CLASS AS CUST_ETC9
						, t1.CALL_ID
						, t1.TRAN_TEL
						, t1.FRM_REC_DATE
						, t1.FRM_REC_TM
						, t1.TO_REC_DATE
						, t1.TO_REC_TM
						, t1.FRM_CALL_TM
						, t1.TO_CALL_TM
						, t5.GUBUN_NAME AS SOLI_KIND
						, t1.INS_ID
						, t6.USER_NAME AS INS_NM
						, t1.INS_DATE
						, t1.UPT_ID
						, t1.UPT_DATE
						, t7.USER_NAME AS CONFIRM_USER_ID
						, t1.CONFIRM_YN
						, t1.CONFIRM_DATE
						, t8.CODE_NAME AS REASON_CODE
						, t1.MEMO
						, t1.CHK_LISTENING_YN
						, t1.CHK_DOWNLOAD_YN
				FROM TB_REC_FILE_SEARCH_REASON t1
				LEFT OUTER JOIN TB_MNG_COMPANY t2
					ON t1.TENANT_ID = t2.TENANT_ID
				LEFT OUTER JOIN TB_MNG_GROUP t3
					ON t1.TENANT_ID = t3.TENANT_ID
					AND t1.GROUP_ID = t3.GROUP_ID
				LEFT OUTER JOIN TB_REC_MARKCODE t4
					ON t1.TENANT_ID = t4.TENANT_ID
					AND t1.CUST_ETC9 = t4.MARKING_ID
				LEFT OUTER JOIN TB_MNG_USERTELNO_GUBUN t5
					ON t1.SOLI_KIND = t5.GUBUN_ID
				LEFT OUTER JOIN TB_MNG_USERINFO t6
					ON t1.INS_TENANT_ID = t6.TENANT_ID
					AND t1.INS_ID = t6.USER_ID
				LEFT OUTER JOIN TB_MNG_USERINFO t7
					ON t1.CONFIRM_TENANT_ID = t7.TENANT_ID
					AND t1.CONFIRM_USER_ID = t7.USER_ID
				LEFT OUTER JOIN TB_MNG_BASECODE t8
					ON t8.CLASS_ID = 'REC_SEARCH_REASON_CODE'
					AND t1.REASON_CODE = t8.CODE_ID	
				LEFT OUTER JOIN TB_MNG_COL_TITLE t9
					ON t1.TENANT_ID = t9.TENANT_ID
					AND UPPER(t9.TABLE_ID) = 'TB_REC_FILE' 
					AND UPPER(REPLACE(t1.FIND_FIELD, '_', '')) = UPPER(REPLACE(t9.COL_ID, '_', ''))
				WHERE t1.INS_DATE BETWEEN TO_DATE(#insrtDate_From#||'000000', 'YYYYMMDDHH24MISS') AND TO_DATE(#insrtDate_To#||'235959', 'YYYYMMDDHH24MISS')
				<isNotEmpty property="gbn"> AND t1.CONFIRM_YN = #gbn#</isNotEmpty>
				<isNotEmpty property="findTenantId"> AND t1.TENANT_ID = #findTenantId#</isNotEmpty>
				<isNotEmpty property="findDnText"> AND t1.DN_NO LIKE '%' || #findDnText# || '%'</isNotEmpty>
				<isNotEmpty property="findUserNameText"> AND t1.USER_ID LIKE '%' || #findUserNameText# || '%'</isNotEmpty>
				<isNotEmpty property="findGroupId"> AND t1.GROUP_ID = #findGroupId#</isNotEmpty>
				<isNotEmpty property="findCustNameText"> AND t1.CUST_NAME LIKE '%' || #findCustnameText# || '%'</isNotEmpty>
				<isNotEmpty property="findCustTelText"> AND t1.CUST_TEL LIKE '%' || #findCustTelText# || '%'</isNotEmpty>
				<isNotEmpty property="findCustNoText"> AND t1.CUST_NO = #findCustNoText#</isNotEmpty>
				<isNotEmpty property="findField"> AND t1.FIND_FIELD = #findField#</isNotEmpty>
				<isNotEmpty property="findFieldText"> AND t1.FIND_FIELD_TEXT LIKE '%' || #findFieldText# || '%'</isNotEmpty>
				<isNotEmpty property="findCallKind"> AND TRIM(t1.CALL_KIND) = #findCallKind#</isNotEmpty>
				<isNotEmpty property="findMarkKind"> AND t1.CUST_ETC9 = #findMarkKind#</isNotEmpty>
				<isNotEmpty property="findCallIdText"> AND t1.CALL_ID = #findCallIdText#</isNotEmpty>
				<isNotEmpty property="findTranTelText"> AND t1.TRAN_TEL = #findTranTelText#</isNotEmpty>
					AND (REPLACE(FRM_REC_DATE, '-', '') <![CDATA[<=]]> REPLACE(#txtDate1_To#, '-', '') AND REPLACE(TO_REC_DATE, '-', '') <![CDATA[>=]]> REPLACE(#txtDate1_From#, '-', ''))
					AND (REPLACE(FRM_REC_TM, ':', '') <![CDATA[<=]]> REPLACE(#recEndTm#, ':', '') AND REPLACE(TO_REC_TM, ':', '') <![CDATA[>=]]> REPLACE(#recFrmTm#, ':', ''))
					AND (REPLACE(FRM_CALL_TM, ':', '') <![CDATA[<=]]> REPLACE(#callEndTm#, ':', '') AND REPLACE(TO_CALL_TM, ':', '') <![CDATA[>=]]> REPLACE(#callFrmTm#, ':', ''))
				<isNotEmpty property="soliKind"> AND t1.SOLI_KIND = #soliKind#</isNotEmpty>
				<isNotEmpty property="chkListeningYn"> AND t1.CHK_LISTENING_YN = #chkListeningYn#</isNotEmpty>
				<isNotEmpty property="chkDownloadYn"> AND t1.CHK_DOWNLOAD_YN = #chkDownloadYn#</isNotEmpty>
				<isNotEmpty property="reasonCode"> AND t1.REASON_CODE = #reasonCode#</isNotEmpty>
				<isNotEmpty property="controlAuth">
		            AND instr(#controlAuth#, T6.GROUP_ID) > 0
		        </isNotEmpty>
			) t
	</select>

	<!-- 통화내역조회사유 조회 -->   
	<select id="recSearch.getRecSearchReasonConfirmList" parameterClass="java.util.HashMap"  resultClass="egovMap">
			SELECT t.SEARCH_REASON_ID
					, t.TENANT_ID
					, t.DN_NO
					, t.USER_ID
					, t.GROUP_ID
					, t.CUST_NAME
					, t.CUST_TEL
					, t.CUST_NO
					, t.FIND_FIELD
					, t.FIND_FIELD_TEXT
					, CASE WHEN TRIM(t.CALL_KIND) = '1' THEN 'Inbound' WHEN TRIM(t.CALL_KIND) = '2' THEN 'Outbound' ELSE t.CALL_KIND END AS CALL_KIND
					, t.CUST_ETC9
					, t.CALL_ID
					, t.TRAN_TEL
					, t.FRM_REC_DATE
					, t.FRM_REC_TM
					, t.TO_REC_DATE
					, t.TO_REC_TM
					, t.FRM_CALL_TM
					, t.TO_CALL_TM
					, t.SOLI_KIND
					, t.INS_ID
					, t.INS_NM || '(' || t.INS_ID || ')' AS INS_NM
					, TO_CHAR(t.INS_DATE, 'YYYY-MM-DD') AS INS_DATE
					, t.UPT_ID
					, TO_CHAR(t.UPT_DATE, 'YYYY-MM-DD') AS UPT_DATE
					, t.CONFIRM_USER_ID
					, t.CONFIRM_YN
					, TO_CHAR(t.CONFIRM_DATE, 'YYYY-MM-DD') AS CONFIRM_DATE
					, t.REASON_CODE
					, t.MEMO
					, t.CHK_LISTENING_YN
					, t.CHK_DOWNLOAD_YN
			FROM (
				SELECT ROW_NUMBER() OVER (ORDER BY t1.INS_DATE DESC) AS ROWNUMBER
						, t1.SEARCH_REASON_ID
						, t2.TENANT_NAME AS TENANT_ID
						, t1.DN_NO
						, t1.USER_ID
						, t3.GROUP_NAME AS GROUP_ID
						, FN_GETMASKING_CUST('CUST_NAME', t1.CUST_NAME) AS CUST_NAME
						, FN_GETMASKING_CUST('CUST_TEL', t1.CUST_TEL) AS CUST_TEL
						, FN_GETMASKING_CUST('SSN', t1.CUST_NO) AS CUST_NO
						, t9.COL_TEXT AS FIND_FIELD
						, t1.FIND_FIELD_TEXT
						, t1.CALL_KIND
						, t4.MARKING_CLASS AS CUST_ETC9
						, t1.CALL_ID
						, t1.TRAN_TEL
						, t1.FRM_REC_DATE
						, t1.FRM_REC_TM
						, t1.TO_REC_DATE
						, t1.TO_REC_TM
						, t1.FRM_CALL_TM
						, t1.TO_CALL_TM
						, t5.GUBUN_NAME AS SOLI_KIND
						, t1.INS_ID
						, t6.USER_NAME AS INS_NM
						, t1.INS_DATE
						, t1.UPT_ID
						, t1.UPT_DATE
						, t7.USER_NAME AS CONFIRM_USER_ID
						, t1.CONFIRM_YN
						, t1.CONFIRM_DATE
						, t8.CODE_NAME AS REASON_CODE
						, t1.MEMO
						, t1.CHK_LISTENING_YN
						, t1.CHK_DOWNLOAD_YN
				FROM TB_REC_FILE_SEARCH_REASON t1
				LEFT OUTER JOIN TB_MNG_COMPANY t2
					ON t1.TENANT_ID = t2.TENANT_ID
				LEFT OUTER JOIN TB_MNG_GROUP t3
					ON t1.TENANT_ID = t3.TENANT_ID
					AND t1.GROUP_ID = t3.GROUP_ID
				LEFT OUTER JOIN TB_REC_MARKCODE t4
					ON t1.TENANT_ID = t4.TENANT_ID
					AND t1.CUST_ETC9 = t4.MARKING_ID
				LEFT OUTER JOIN TB_MNG_USERTELNO_GUBUN t5
					ON t1.SOLI_KIND = t5.GUBUN_ID
				LEFT OUTER JOIN TB_MNG_USERINFO t6
					ON t1.INS_TENANT_ID = t6.TENANT_ID
					AND t1.INS_ID = t6.USER_ID
				LEFT OUTER JOIN TB_MNG_USERINFO t7
					ON t1.CONFIRM_TENANT_ID = t7.TENANT_ID
					AND t1.CONFIRM_USER_ID = t7.USER_ID
				LEFT OUTER JOIN TB_MNG_BASECODE t8
					ON t8.CLASS_ID = 'REC_SEARCH_REASON_CD'
					AND t1.REASON_CODE = t8.CODE_ID	
				LEFT OUTER JOIN TB_MNG_COL_TITLE t9
					ON t1.TENANT_ID = t9.TENANT_ID
					AND UPPER(t9.TABLE_ID) = 'TB_REC_FILE' 
					AND UPPER(REPLACE(t1.FIND_FIELD, '_', '')) = UPPER(REPLACE(t9.COL_ID, '_', ''))
				WHERE t1.INS_DATE BETWEEN TO_DATE(#insrtDate_From#||'000000', 'YYYYMMDDHH24MISS') AND TO_DATE(#insrtDate_To#||'235959', 'YYYYMMDDHH24MISS')
				<isNotEmpty property="gbn"> AND t1.CONFIRM_YN = #gbn#</isNotEmpty>
				<isNotEmpty property="findTenantId"> AND t1.TENANT_ID = #findTenantId#</isNotEmpty>
				<isNotEmpty property="findDnText"> AND t1.DN_NO LIKE '%' || #findDnText# || '%'</isNotEmpty>
				<isNotEmpty property="findUserNameText"> AND t1.USER_ID LIKE '%' || #findUserNameText# || '%'</isNotEmpty>
				<isNotEmpty property="findGroupId"> AND t1.GROUP_ID = #findGroupId#</isNotEmpty>
				<isNotEmpty property="findCustNameText"> AND t1.CUST_NAME LIKE '%' || #findCustnameText# || '%'</isNotEmpty>
				<isNotEmpty property="findCustTelText"> AND t1.CUST_TEL LIKE '%' || #findCustTelText# || '%'</isNotEmpty>
				<isNotEmpty property="findCustNoText"> AND t1.CUST_NO = #findCustNoText#</isNotEmpty>
				<isNotEmpty property="findField"> AND t1.FIND_FIELD = #findField#</isNotEmpty>
				<isNotEmpty property="findFieldText"> AND t1.FIND_FIELD_TEXT LIKE '%' || #findFieldText# || '%'</isNotEmpty>
				<isNotEmpty property="findCallKind"> AND TRIM(t1.CALL_KIND) = #findCallKind#</isNotEmpty>
				<isNotEmpty property="findMarkKind"> AND t1.CUST_ETC9 = #findMarkKind#</isNotEmpty>
				<isNotEmpty property="findCallIdText"> AND t1.CALL_ID = #findCallIdText#</isNotEmpty>
				<isNotEmpty property="findTranTelText"> AND t1.TRAN_TEL = #findTranTelText#</isNotEmpty>
					AND (REPLACE(FRM_REC_DATE, '-', '') <![CDATA[<=]]> REPLACE(#txtDate1_To#, '-', '') AND REPLACE(TO_REC_DATE, '-', '') <![CDATA[>=]]> REPLACE(#txtDate1_From#, '-', ''))
					AND (REPLACE(FRM_REC_TM, ':', '') <![CDATA[<=]]> REPLACE(#recEndTm#, ':', '') AND REPLACE(TO_REC_TM, ':', '') <![CDATA[>=]]> REPLACE(#recFrmTm#, ':', ''))
					AND (REPLACE(FRM_CALL_TM, ':', '') <![CDATA[<=]]> REPLACE(#callEndTm#, ':', '') AND REPLACE(TO_CALL_TM, ':', '') <![CDATA[>=]]> REPLACE(#callFrmTm#, ':', ''))
				<isNotEmpty property="soliKind"> AND t1.SOLI_KIND = #soliKind#</isNotEmpty>
				<isNotEmpty property="chkListeningYn"> AND t1.CHK_LISTENING_YN = #chkListeningYn#</isNotEmpty>
				<isNotEmpty property="chkDownloadYn"> AND t1.CHK_DOWNLOAD_YN = #chkDownloadYn#</isNotEmpty>
				<isNotEmpty property="reasonCode"> AND t1.REASON_CODE = #reasonCode#</isNotEmpty>
				<isNotEmpty property="controlAuth">
		            AND instr(#controlAuth#, T6.GROUP_ID) > 0
		        </isNotEmpty>
			) t
			WHERE t.ROWNUMBER <![CDATA[>=]]> #startRow# AND t.ROWNUMBER <![CDATA[<=]]> #endRow# 
			ORDER BY t.INS_DATE DESC
	</select>


	<!-- 사유코드관리 삭제가능여부 확인 -->
	<update id="recSearch.searchReasonConfirm" parameterClass="java.util.HashMap" >
		UPDATE TB_REC_FILE_SEARCH_REASON
		SET CONFIRM_DATE = SYSDATE,
			CONFIRM_YN = '1',
			CONFIRM_USER_ID = #glo_userId#,
			CONFIRM_TENANT_ID = #glo_tenantId#,
			UPT_DATE = SYSDATE,
			UPT_ID = #glo_userId#,
			UPT_TENANT_ID = #glo_tenantId#
		WHERE SEARCH_REASON_ID = #searchReasonId#
		AND INS_ID = #insId#
	</update>

	<!-- 사유코드관리 삭제가능여부 확인 -->
	<update id="recSearch.searchReasonConfirmAll" parameterClass="java.util.HashMap" >
		UPDATE TB_REC_FILE_SEARCH_REASON
		SET CONFIRM_DATE = SYSDATE,
			CONFIRM_YN = '1',
			CONFIRM_USER_ID = #glo_userId#,
			CONFIRM_TENANT_ID = #glo_tenantId#,
			UPT_DATE = SYSDATE,
			UPT_ID = #glo_userId#,
			UPT_TENANT_ID = #glo_tenantId#
		WHERE (CONFIRM_YN = '0' OR CONFIRM_YN IS NULL)
	</update>

	
	<select id="recSearch.getRecGroupGrantList" parameterClass="java.util.HashMap"  resultClass="egovMap">
		SELECT A.TENANT_ID AS TENANT_ID
				, A.GRANT_ID AS GRANT_ID
				, A.GROUP_ID AS GROUP_ID
				, A.CONTROLLED_GROUP_ID AS CONTROLLED_GROUP_ID
				, A.INS_ID AS INS_ID
				, TO_CHAR(A.INS_DATE, 'YYYY-MM-DD') AS INS_DATE
		FROM  TB_REC_GROUP_GRANT_MANAGEMENT A
		WHERE A.TENANT_ID = #tenantId#
		AND A.GROUP_ID = #groupId#
	</select>
	
	<delete id="recSearch.delRecGroupGrant" parameterClass="java.util.HashMap">
		DELETE FROM TB_REC_GROUP_GRANT_MANAGEMENT
		WHERE TENANT_ID = #tenantId#
			AND GRANT_ID = #grantId#
			AND GROUP_ID = #groupId#
	</delete>
	
	<insert id="recSearch.insRecGroupGrant" parameterClass="java.util.HashMap">
		INSERT INTO TB_REC_GROUP_GRANT_MANAGEMENT(
			TENANT_ID,
			GRANT_ID,
			GROUP_ID,
			CONTROLLED_GROUP_ID,
			INS_ID,
			INS_DATE
		)
		SELECT  B.TENANT_ID,
				B.GRANT_ID,
				B.GROUP_ID,
				A.CONTROLLED_GROUP_ID,
				B.USER_ID,
				SYSDATE
		FROM 
		(
		SELECT 
		  REGEXP_SUBSTR(#targetDeptCds#, '[^,]+', 1, LEVEL) AS CONTROLLED_GROUP_ID
		FROM 
		  DUAL
		CONNECT BY 
		  PRIOR DBMS_RANDOM.VALUE IS NOT NULL
		  AND PRIOR #targetDeptCds# = #targetDeptCds#
		  AND LEVEL <![CDATA[<=]]> LENGTH(#targetDeptCds#) - LENGTH(REPLACE(#targetDeptCds#, ',', '')) + 1
		) A LEFT JOIN (
			SELECT 
			#tenantId# AS TENANT_ID,
			#grantId# AS GRANT_ID,
			#groupId# AS GROUP_ID,
			#userId# AS USER_ID
			FROM DUAL
		) B
		ON 1=1
	</insert>
	

</sqlMap>